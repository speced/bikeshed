{
  "%AsyncGeneratorPrototype%.next()": {
    "%AsyncGeneratorPrototype%.next(value)": {
      "args": [
        "value"
      ],
      "for": [
        "%AsyncGeneratorPrototype%.next ( value )"
      ],
      "shortname": "ecmascript"
    }
  },
  "%AsyncGeneratorPrototype%.return()": {
    "%AsyncGeneratorPrototype%.return(value)": {
      "args": [
        "value"
      ],
      "for": [
        "%AsyncGeneratorPrototype%.return ( value )"
      ],
      "shortname": "ecmascript"
    }
  },
  "%AsyncGeneratorPrototype%.throw()": {
    "%AsyncGeneratorPrototype%.throw(exception)": {
      "args": [
        "exception"
      ],
      "for": [
        "%AsyncGeneratorPrototype%.throw ( exception )"
      ],
      "shortname": "ecmascript"
    }
  },
  "%GeneratorPrototype%.next()": {
    "%GeneratorPrototype%.next(value)": {
      "args": [
        "value"
      ],
      "for": [
        "%GeneratorPrototype%.next ( value )"
      ],
      "shortname": "ecmascript"
    }
  },
  "%GeneratorPrototype%.return()": {
    "%GeneratorPrototype%.return(value)": {
      "args": [
        "value"
      ],
      "for": [
        "%GeneratorPrototype%.return ( value )"
      ],
      "shortname": "ecmascript"
    }
  },
  "%GeneratorPrototype%.throw()": {
    "%GeneratorPrototype%.throw(exception)": {
      "args": [
        "exception"
      ],
      "for": [
        "%GeneratorPrototype%.throw ( exception )"
      ],
      "shortname": "ecmascript"
    }
  },
  "%TypedArray%.prototype %Symbol.iterator% ()": {
    "%TypedArray%.prototype %Symbol.iterator% ()": {
      "args": [],
      "for": [
        "%TypedArray%.prototype [ %Symbol.iterator% ] ( )"
      ],
      "shortname": "ecmascript"
    }
  },
  "AbortController()": {
    "AbortController()": {
      "args": [],
      "for": [
        "AbortController"
      ],
      "shortname": "dom"
    }
  },
  "AbsoluteOrientationSensor()": {
    "AbsoluteOrientationSensor()": {
      "args": [],
      "for": [
        "AbsoluteOrientationSensor"
      ],
      "shortname": "orientation-sensor"
    },
    "AbsoluteOrientationSensor(sensorOptions)": {
      "args": [
        "sensorOptions"
      ],
      "for": [
        "AbsoluteOrientationSensor"
      ],
      "shortname": "orientation-sensor"
    }
  },
  "Accelerometer()": {
    "Accelerometer()": {
      "args": [],
      "for": [
        "Accelerometer"
      ],
      "shortname": "accelerometer"
    },
    "Accelerometer(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Accelerometer"
      ],
      "shortname": "accelerometer"
    }
  },
  "AddSearchProvider()": {
    "AddSearchProvider()": {
      "args": [],
      "for": [
        "External"
      ],
      "shortname": "html"
    }
  },
  "AggregateError()": {
    "AggregateError(errors, message, options)": {
      "args": [
        "errors",
        "message",
        "options"
      ],
      "for": [
        "AggregateError"
      ],
      "shortname": "ecmascript"
    }
  },
  "AmbientLightSensor()": {
    "AmbientLightSensor()": {
      "args": [],
      "for": [
        "AmbientLightSensor"
      ],
      "shortname": "ambient-light"
    },
    "AmbientLightSensor(sensorOptions)": {
      "args": [
        "sensorOptions"
      ],
      "for": [
        "AmbientLightSensor"
      ],
      "shortname": "ambient-light"
    }
  },
  "AnalyserNode()": {
    "AnalyserNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "AnalyserNode"
      ],
      "shortname": "webaudio"
    },
    "AnalyserNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "AnalyserNode"
      ],
      "shortname": "webaudio"
    }
  },
  "Animation()": {
    "Animation()": {
      "args": [],
      "for": [
        "Animation"
      ],
      "shortname": "web-animations"
    },
    "Animation(effect)": {
      "args": [
        "effect"
      ],
      "for": [
        "Animation"
      ],
      "shortname": "web-animations"
    },
    "Animation(effect, timeline)": {
      "args": [
        "effect",
        "timeline"
      ],
      "for": [
        "Animation"
      ],
      "shortname": "web-animations"
    }
  },
  "AnimationEvent()": {
    "AnimationEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "AnimationEvent"
      ],
      "shortname": "css-animations"
    },
    "AnimationEvent(type, animationEventInitDict)": {
      "args": [
        "type",
        "animationEventInitDict"
      ],
      "for": [
        "AnimationEvent"
      ],
      "shortname": "css-animations"
    }
  },
  "AnimationPlaybackEvent()": {
    "AnimationPlaybackEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "AnimationPlaybackEvent"
      ],
      "shortname": "web-animations"
    },
    "AnimationPlaybackEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "AnimationPlaybackEvent"
      ],
      "shortname": "web-animations"
    }
  },
  "Array()": {
    "Array(...values)": {
      "args": [
        "...values"
      ],
      "for": [
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "Array.prototype %Symbol.iterator% ()": {
    "Array.prototype %Symbol.iterator% ()": {
      "args": [],
      "for": [
        "Array.prototype [ %Symbol.iterator% ] ( )"
      ],
      "shortname": "ecmascript"
    }
  },
  "ArrayBuffer()": {
    "ArrayBuffer(length, options)": {
      "args": [
        "length",
        "options"
      ],
      "for": [
        "ArrayBuffer"
      ],
      "shortname": "ecmascript"
    }
  },
  "AsyncFunction()": {
    "AsyncFunction(...parameterArgs, bodyArg)": {
      "args": [
        "...parameterArgs",
        "bodyArg"
      ],
      "for": [
        "AsyncFunction"
      ],
      "shortname": "ecmascript"
    }
  },
  "AsyncGeneratorFunction()": {
    "AsyncGeneratorFunction(...parameterArgs, bodyArg)": {
      "args": [
        "...parameterArgs",
        "bodyArg"
      ],
      "for": [
        "AsyncGeneratorFunction"
      ],
      "shortname": "ecmascript"
    }
  },
  "AudioBuffer()": {
    "AudioBuffer(options)": {
      "args": [
        "options"
      ],
      "for": [
        "AudioBuffer"
      ],
      "shortname": "webaudio"
    }
  },
  "AudioBufferSourceNode()": {
    "AudioBufferSourceNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "AudioBufferSourceNode"
      ],
      "shortname": "webaudio"
    },
    "AudioBufferSourceNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "AudioBufferSourceNode",
        "AudioBufferSourceNode/constructor"
      ],
      "shortname": "webaudio"
    }
  },
  "AudioContext()": {
    "AudioContext()": {
      "args": [],
      "for": [
        "AudioContext"
      ],
      "shortname": "webaudio"
    },
    "AudioContext(contextOptions)": {
      "args": [
        "contextOptions"
      ],
      "for": [
        "AudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "AudioData()": {
    "AudioData(init)": {
      "args": [
        "init"
      ],
      "for": [
        "AudioData"
      ],
      "shortname": "webcodecs"
    }
  },
  "AudioDecoder()": {
    "AudioDecoder(init)": {
      "args": [
        "init"
      ],
      "for": [
        "AudioDecoder"
      ],
      "shortname": "webcodecs"
    }
  },
  "AudioEncoder()": {
    "AudioEncoder(init)": {
      "args": [
        "init"
      ],
      "for": [
        "AudioEncoder"
      ],
      "shortname": "webcodecs"
    }
  },
  "AudioProcessingEvent()": {
    "AudioProcessingEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "AudioProcessingEvent"
      ],
      "shortname": "webaudio"
    }
  },
  "AudioRenderCapacityEvent()": {
    "AudioRenderCapacityEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "AudioRenderCapacityEvent"
      ],
      "shortname": "webaudio"
    },
    "AudioRenderCapacityEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "AudioRenderCapacityEvent"
      ],
      "shortname": "webaudio"
    }
  },
  "AudioWorkletNode()": {
    "AudioWorkletNode(context, name)": {
      "args": [
        "context",
        "name"
      ],
      "for": [
        "AudioWorkletNode"
      ],
      "shortname": "webaudio"
    },
    "AudioWorkletNode(context, name, options)": {
      "args": [
        "context",
        "name",
        "options"
      ],
      "for": [
        "AudioWorkletNode"
      ],
      "shortname": "webaudio"
    }
  },
  "AudioWorkletProcessor()": {
    "AudioWorkletProcessor()": {
      "args": [],
      "for": [
        "AudioWorkletProcessor"
      ],
      "shortname": "webaudio"
    }
  },
  "BackgroundFetchEvent()": {
    "BackgroundFetchEvent(type, init)": {
      "args": [
        "type",
        "init"
      ],
      "for": [
        "BackgroundFetchEvent"
      ],
      "shortname": "background-fetch"
    }
  },
  "BackgroundFetchUpdateUIEvent()": {
    "BackgroundFetchUpdateUIEvent(type, init)": {
      "args": [
        "type",
        "init"
      ],
      "for": [
        "BackgroundFetchUpdateUIEvent"
      ],
      "shortname": "background-fetch"
    }
  },
  "BarcodeDetector()": {
    "BarcodeDetector()": {
      "args": [],
      "for": [
        "BarcodeDetector"
      ],
      "shortname": "shape-detection-api"
    },
    "BarcodeDetector(barcodeDetectorOptions)": {
      "args": [
        "barcodeDetectorOptions"
      ],
      "for": [
        "BarcodeDetector"
      ],
      "shortname": "shape-detection-api"
    }
  },
  "BigInt()": {
    "BigInt(value)": {
      "args": [
        "value"
      ],
      "for": [
        "BigInt"
      ],
      "shortname": "ecmascript"
    }
  },
  "BiquadFilterNode()": {
    "BiquadFilterNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "BiquadFilterNode"
      ],
      "shortname": "webaudio"
    },
    "BiquadFilterNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "BiquadFilterNode"
      ],
      "shortname": "webaudio"
    }
  },
  "Blob()": {
    "Blob()": {
      "args": [],
      "for": [
        "Blob"
      ],
      "shortname": "fileapi"
    },
    "Blob(blobParts)": {
      "args": [
        "blobParts"
      ],
      "for": [
        "Blob"
      ],
      "shortname": "fileapi"
    },
    "Blob(blobParts, options)": {
      "args": [
        "blobParts",
        "options"
      ],
      "for": [
        "Blob"
      ],
      "shortname": "fileapi"
    }
  },
  "BlobEvent()": {
    "BlobEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "BlobEvent"
      ],
      "shortname": "mediastream-recording"
    }
  },
  "BluetoothAdvertisingEvent()": {
    "BluetoothAdvertisingEvent(type, init)": {
      "args": [
        "type",
        "init"
      ],
      "for": [
        "BluetoothAdvertisingEvent"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "BluetoothDataFilter()": {
    "BluetoothDataFilter()": {
      "args": [],
      "for": [
        "BluetoothDataFilter"
      ],
      "shortname": "web-bluetooth-scanning"
    },
    "BluetoothDataFilter(init)": {
      "args": [
        "init"
      ],
      "for": [
        "BluetoothDataFilter"
      ],
      "shortname": "web-bluetooth-scanning"
    }
  },
  "BluetoothLEScanFilter()": {
    "BluetoothLEScanFilter()": {
      "args": [],
      "for": [
        "BluetoothLEScanFilter"
      ],
      "shortname": "web-bluetooth-scanning"
    },
    "BluetoothLEScanFilter(init)": {
      "args": [
        "init"
      ],
      "for": [
        "BluetoothLEScanFilter"
      ],
      "shortname": "web-bluetooth-scanning"
    }
  },
  "BluetoothManufacturerDataFilter()": {
    "BluetoothManufacturerDataFilter()": {
      "args": [],
      "for": [
        "BluetoothManufacturerDataFilter"
      ],
      "shortname": "web-bluetooth-scanning"
    },
    "BluetoothManufacturerDataFilter(init)": {
      "args": [
        "init"
      ],
      "for": [
        "BluetoothManufacturerDataFilter"
      ],
      "shortname": "web-bluetooth-scanning"
    }
  },
  "BluetoothServiceDataFilter()": {
    "BluetoothServiceDataFilter()": {
      "args": [],
      "for": [
        "BluetoothServiceDataFilter"
      ],
      "shortname": "web-bluetooth-scanning"
    },
    "BluetoothServiceDataFilter(init)": {
      "args": [
        "init"
      ],
      "for": [
        "BluetoothServiceDataFilter"
      ],
      "shortname": "web-bluetooth-scanning"
    }
  },
  "Boolean()": {
    "Boolean(value)": {
      "args": [
        "value"
      ],
      "for": [
        "Boolean"
      ],
      "shortname": "ecmascript"
    }
  },
  "BroadcastChannel()": {
    "BroadcastChannel(name)": {
      "args": [
        "name"
      ],
      "for": [
        "StorageAccessHandle"
      ],
      "shortname": "saa-non-cookie-storage"
    }
  },
  "ByteLengthQueuingStrategy()": {
    "ByteLengthQueuingStrategy(init)": {
      "args": [
        "init"
      ],
      "for": [
        "ByteLengthQueuingStrategy"
      ],
      "shortname": "streams"
    }
  },
  "CSSColor()": {
    "CSSColor(colorSpace, channels)": {
      "args": [
        "colorSpace",
        "channels"
      ],
      "for": [
        "CSSColor"
      ],
      "shortname": "css-typed-om"
    },
    "CSSColor(colorSpace, channels, alpha)": {
      "args": [
        "colorSpace",
        "channels",
        "alpha"
      ],
      "for": [
        "CSSColor"
      ],
      "shortname": "css-typed-om"
    },
    "CSSColor(colorSpace, channels, optional alpha)": {
      "args": [
        "colorSpace",
        "channels",
        "optional alpha"
      ],
      "for": [
        "CSSColor"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSHSL()": {
    "CSSHSL(h, s, l)": {
      "args": [
        "h",
        "s",
        "l"
      ],
      "for": [
        "CSSHSL"
      ],
      "shortname": "css-typed-om"
    },
    "CSSHSL(h, s, l, alpha)": {
      "args": [
        "h",
        "s",
        "l",
        "alpha"
      ],
      "for": [
        "CSSHSL"
      ],
      "shortname": "css-typed-om"
    },
    "CSSHSL(h, s, l, optional alpha)": {
      "args": [
        "h",
        "s",
        "l",
        "optional alpha"
      ],
      "for": [
        "CSSHSL"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSHWB()": {
    "CSSHWB(h, w, b)": {
      "args": [
        "h",
        "w",
        "b"
      ],
      "for": [
        "CSSHWB"
      ],
      "shortname": "css-typed-om"
    },
    "CSSHWB(h, w, b, alpha)": {
      "args": [
        "h",
        "w",
        "b",
        "alpha"
      ],
      "for": [
        "CSSHWB"
      ],
      "shortname": "css-typed-om"
    },
    "CSSHWB(h, w, b, optional alpha)": {
      "args": [
        "h",
        "w",
        "b",
        "optional alpha"
      ],
      "for": [
        "CSSHWB"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSKeywordValue()": {
    "CSSKeywordValue(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSSKeywordValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSLCH()": {
    "CSSLCH(l, c, h)": {
      "args": [
        "l",
        "c",
        "h"
      ],
      "for": [
        "CSSLCH"
      ],
      "shortname": "css-typed-om"
    },
    "CSSLCH(l, c, h, alpha)": {
      "args": [
        "l",
        "c",
        "h",
        "alpha"
      ],
      "for": [
        "CSSLCH"
      ],
      "shortname": "css-typed-om"
    },
    "CSSLCH(l, c, h, optional alpha)": {
      "args": [
        "l",
        "c",
        "h",
        "optional alpha"
      ],
      "for": [
        "CSSLCH"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSLab()": {
    "CSSLab(l, a, b)": {
      "args": [
        "l",
        "a",
        "b"
      ],
      "for": [
        "CSSLab"
      ],
      "shortname": "css-typed-om"
    },
    "CSSLab(l, a, b, alpha)": {
      "args": [
        "l",
        "a",
        "b",
        "alpha"
      ],
      "for": [
        "CSSLab"
      ],
      "shortname": "css-typed-om"
    },
    "CSSLab(l, a, b, optional alpha)": {
      "args": [
        "l",
        "a",
        "b",
        "optional alpha"
      ],
      "for": [
        "CSSLab"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSMathClamp()": {
    "CSSMathClamp(lower, value, upper)": {
      "args": [
        "lower",
        "value",
        "upper"
      ],
      "for": [
        "CSSMathClamp"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSMathInvert()": {
    "CSSMathInvert(arg)": {
      "args": [
        "arg"
      ],
      "for": [
        "CSSMathInvert"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSMathMax()": {
    "CSSMathMax()": {
      "args": [],
      "for": [
        "CSSMathMax"
      ],
      "shortname": "css-typed-om"
    },
    "CSSMathMax(...args)": {
      "args": [
        "...args"
      ],
      "for": [
        "CSSMathMax"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSMathMin()": {
    "CSSMathMin()": {
      "args": [],
      "for": [
        "CSSMathMin"
      ],
      "shortname": "css-typed-om"
    },
    "CSSMathMin(...args)": {
      "args": [
        "...args"
      ],
      "for": [
        "CSSMathMin"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSMathNegate()": {
    "CSSMathNegate(arg)": {
      "args": [
        "arg"
      ],
      "for": [
        "CSSMathNegate"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSMathProduct()": {
    "CSSMathProduct()": {
      "args": [],
      "for": [
        "CSSMathProduct"
      ],
      "shortname": "css-typed-om"
    },
    "CSSMathProduct(...args)": {
      "args": [
        "...args"
      ],
      "for": [
        "CSSMathProduct"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSMathSum()": {
    "CSSMathSum()": {
      "args": [],
      "for": [
        "CSSMathSum"
      ],
      "shortname": "css-typed-om"
    },
    "CSSMathSum(...args)": {
      "args": [
        "...args"
      ],
      "for": [
        "CSSMathSum"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSMatrixComponent()": {
    "CSSMatrixComponent(matrix)": {
      "args": [
        "matrix"
      ],
      "for": [
        "CSSMatrixComponent"
      ],
      "shortname": "css-typed-om"
    },
    "CSSMatrixComponent(matrix, options)": {
      "args": [
        "matrix",
        "options"
      ],
      "for": [
        "CSSMatrixComponent"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSOKLCH()": {
    "CSSOKLCH(l, c, h)": {
      "args": [
        "l",
        "c",
        "h"
      ],
      "for": [
        "CSSOKLCH"
      ],
      "shortname": "css-typed-om"
    },
    "CSSOKLCH(l, c, h, alpha)": {
      "args": [
        "l",
        "c",
        "h",
        "alpha"
      ],
      "for": [
        "CSSOKLCH"
      ],
      "shortname": "css-typed-om"
    },
    "CSSOKLCH(l, c, h, optional alpha)": {
      "args": [
        "l",
        "c",
        "h",
        "optional alpha"
      ],
      "for": [
        "CSSOKLCH"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSOKLab()": {
    "CSSOKLab(l, a, b)": {
      "args": [
        "l",
        "a",
        "b"
      ],
      "for": [
        "CSSOKLab"
      ],
      "shortname": "css-typed-om"
    },
    "CSSOKLab(l, a, b, alpha)": {
      "args": [
        "l",
        "a",
        "b",
        "alpha"
      ],
      "for": [
        "CSSOKLab"
      ],
      "shortname": "css-typed-om"
    },
    "CSSOKLab(l, a, b, optional alpha)": {
      "args": [
        "l",
        "a",
        "b",
        "optional alpha"
      ],
      "for": [
        "CSSOKLab"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSParserAtRule()": {
    "CSSParserAtRule(name, prelude)": {
      "args": [
        "name",
        "prelude"
      ],
      "for": [
        "CSSParserAtRule"
      ],
      "shortname": "css-parser-api"
    },
    "CSSParserAtRule(name, prelude, body)": {
      "args": [
        "name",
        "prelude",
        "body"
      ],
      "for": [
        "CSSParserAtRule"
      ],
      "shortname": "css-parser-api"
    }
  },
  "CSSParserBlock()": {
    "CSSParserBlock(name, body)": {
      "args": [
        "name",
        "body"
      ],
      "for": [
        "CSSParserBlock"
      ],
      "shortname": "css-parser-api"
    }
  },
  "CSSParserDeclaration()": {
    "CSSParserDeclaration(name)": {
      "args": [
        "name"
      ],
      "for": [
        "CSSParserDeclaration"
      ],
      "shortname": "css-parser-api"
    },
    "CSSParserDeclaration(name, body)": {
      "args": [
        "name",
        "body"
      ],
      "for": [
        "CSSParserDeclaration"
      ],
      "shortname": "css-parser-api"
    }
  },
  "CSSParserFunction()": {
    "CSSParserFunction(name, args)": {
      "args": [
        "name",
        "args"
      ],
      "for": [
        "CSSParserFunction"
      ],
      "shortname": "css-parser-api"
    }
  },
  "CSSParserQualifiedRule()": {
    "CSSParserQualifiedRule(prelude)": {
      "args": [
        "prelude"
      ],
      "for": [
        "CSSParserQualifiedRule"
      ],
      "shortname": "css-parser-api"
    },
    "CSSParserQualifiedRule(prelude, body)": {
      "args": [
        "prelude",
        "body"
      ],
      "for": [
        "CSSParserQualifiedRule"
      ],
      "shortname": "css-parser-api"
    }
  },
  "CSSPerspective()": {
    "CSSPerspective(length)": {
      "args": [
        "length"
      ],
      "for": [
        "CSSPerspective"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSRGB()": {
    "CSSRGB(r, g, b)": {
      "args": [
        "r",
        "g",
        "b"
      ],
      "for": [
        "CSSRGB"
      ],
      "shortname": "css-typed-om"
    },
    "CSSRGB(r, g, b, alpha)": {
      "args": [
        "r",
        "g",
        "b",
        "alpha"
      ],
      "for": [
        "CSSRGB"
      ],
      "shortname": "css-typed-om"
    },
    "CSSRGB(r, g, b, optional alpha)": {
      "args": [
        "r",
        "g",
        "b",
        "optional alpha"
      ],
      "for": [
        "CSSRGB"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSRotate()": {
    "CSSRotate(angle)": {
      "args": [
        "angle"
      ],
      "for": [
        "CSSRotate"
      ],
      "shortname": "css-typed-om"
    },
    "CSSRotate(x, y, z, angle)": {
      "args": [
        "x",
        "y",
        "z",
        "angle"
      ],
      "for": [
        "CSSRotate"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSScale()": {
    "CSSScale(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "CSSScale"
      ],
      "shortname": "css-typed-om"
    },
    "CSSScale(x, y, z)": {
      "args": [
        "x",
        "y",
        "z"
      ],
      "for": [
        "CSSScale"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSSkew()": {
    "CSSSkew(ax, ay)": {
      "args": [
        "ax",
        "ay"
      ],
      "for": [
        "CSSSkew"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSSkewX()": {
    "CSSSkewX(ax)": {
      "args": [
        "ax"
      ],
      "for": [
        "CSSSkewX"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSSkewY()": {
    "CSSSkewY(ay)": {
      "args": [
        "ay"
      ],
      "for": [
        "CSSSkewY"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSStyleSheet()": {
    "CSSStyleSheet()": {
      "args": [],
      "for": [
        "CSSStyleSheet"
      ],
      "shortname": "cssom"
    },
    "CSSStyleSheet(options)": {
      "args": [
        "options"
      ],
      "for": [
        "CSSStyleSheet"
      ],
      "shortname": "cssom"
    }
  },
  "CSSTransformValue()": {
    "CSSTransformValue(transforms)": {
      "args": [
        "transforms"
      ],
      "for": [
        "CSSTransformValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSTranslate()": {
    "CSSTranslate(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "CSSTranslate"
      ],
      "shortname": "css-typed-om"
    },
    "CSSTranslate(x, y, z)": {
      "args": [
        "x",
        "y",
        "z"
      ],
      "for": [
        "CSSTranslate"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSUnitValue()": {
    "CSSUnitValue(value, unit)": {
      "args": [
        "value",
        "unit"
      ],
      "for": [
        "CSSUnitValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSUnparsedValue()": {
    "CSSUnparsedValue(members)": {
      "args": [
        "members"
      ],
      "for": [
        "CSSUnparsedValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "CSSVariableReferenceValue()": {
    "CSSVariableReferenceValue(variable)": {
      "args": [
        "variable"
      ],
      "for": [
        "CSSVariableReferenceValue"
      ],
      "shortname": "css-typed-om"
    },
    "CSSVariableReferenceValue(variable, fallback)": {
      "args": [
        "variable",
        "fallback"
      ],
      "for": [
        "CSSVariableReferenceValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "ChannelMergerNode()": {
    "ChannelMergerNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "ChannelMergerNode"
      ],
      "shortname": "webaudio"
    },
    "ChannelMergerNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "ChannelMergerNode",
        "ChannelMergerNode/constructor"
      ],
      "shortname": "webaudio"
    }
  },
  "ChannelSplitterNode()": {
    "ChannelSplitterNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "ChannelSplitterNode"
      ],
      "shortname": "webaudio"
    },
    "ChannelSplitterNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "ChannelSplitterNode",
        "ChannelSplitterNode/constructor()"
      ],
      "shortname": "webaudio"
    }
  },
  "ClipboardEvent()": {
    "ClipboardEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "ClipboardEvent"
      ],
      "shortname": "clipboard-apis"
    },
    "ClipboardEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "ClipboardEvent"
      ],
      "shortname": "clipboard-apis"
    }
  },
  "ClipboardItem()": {
    "ClipboardItem(items)": {
      "args": [
        "items"
      ],
      "for": [
        "ClipboardItem"
      ],
      "shortname": "clipboard-apis"
    },
    "ClipboardItem(items, options)": {
      "args": [
        "items",
        "options"
      ],
      "for": [
        "ClipboardItem"
      ],
      "shortname": "clipboard-apis"
    }
  },
  "CloseEvent()": {
    "CloseEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "CloseEvent"
      ],
      "shortname": "websockets"
    },
    "CloseEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "CloseEvent"
      ],
      "shortname": "websockets"
    }
  },
  "Comment()": {
    "Comment()": {
      "args": [],
      "for": [
        "Comment"
      ],
      "shortname": "dom"
    },
    "Comment(data)": {
      "args": [
        "data"
      ],
      "for": [
        "Comment"
      ],
      "shortname": "dom"
    }
  },
  "CompositionEvent()": {
    "CompositionEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "CompositionEvent"
      ],
      "shortname": "uievents"
    },
    "CompositionEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "CompositionEvent"
      ],
      "shortname": "uievents"
    }
  },
  "CompressionStream()": {
    "CompressionStream(format)": {
      "args": [
        "format"
      ],
      "for": [
        "CompressionStream"
      ],
      "shortname": "compression"
    }
  },
  "ConstantSourceNode()": {
    "ConstantSourceNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "ConstantSourceNode"
      ],
      "shortname": "webaudio"
    },
    "ConstantSourceNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "ConstantSourceNode",
        "ConstantSourceNode/constructor()"
      ],
      "shortname": "webaudio"
    }
  },
  "ContentIndexEvent()": {
    "ContentIndexEvent(type, init)": {
      "args": [
        "type",
        "init"
      ],
      "for": [
        "ContentIndexEvent"
      ],
      "shortname": "content-index"
    }
  },
  "ContentVisibilityAutoStateChangeEvent()": {
    "ContentVisibilityAutoStateChangeEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "ContentVisibilityAutoStateChangeEvent"
      ],
      "shortname": "css-contain"
    },
    "ContentVisibilityAutoStateChangeEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "ContentVisibilityAutoStateChangeEvent"
      ],
      "shortname": "css-contain"
    }
  },
  "ContentVisibilityAutoStateChangedEvent()": {
    "ContentVisibilityAutoStateChangedEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "ContentVisibilityAutoStateChangedEvent"
      ],
      "shortname": "css-contain"
    },
    "ContentVisibilityAutoStateChangedEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "ContentVisibilityAutoStateChangedEvent"
      ],
      "shortname": "css-contain"
    }
  },
  "ConvolverNode()": {
    "ConvolverNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "ConvolverNode"
      ],
      "shortname": "webaudio"
    },
    "ConvolverNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "ConvolverNode",
        "ConvolverNode/constructor()"
      ],
      "shortname": "webaudio"
    }
  },
  "CookieChangeEvent()": {
    "CookieChangeEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "CookieChangeEvent"
      ],
      "shortname": "cookie-store"
    },
    "CookieChangeEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "CookieChangeEvent"
      ],
      "shortname": "cookie-store"
    }
  },
  "CountQueuingStrategy()": {
    "CountQueuingStrategy(init)": {
      "args": [
        "init"
      ],
      "for": [
        "CountQueuingStrategy"
      ],
      "shortname": "streams"
    }
  },
  "CustomEvent()": {
    "CustomEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "CustomEvent"
      ],
      "shortname": "dom"
    },
    "CustomEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "CustomEvent"
      ],
      "shortname": "dom"
    }
  },
  "DOMException()": {
    "DOMException()": {
      "args": [],
      "for": [
        "DOMException"
      ],
      "shortname": "webidl"
    },
    "DOMException(message)": {
      "args": [
        "message"
      ],
      "for": [
        "DOMException"
      ],
      "shortname": "webidl"
    },
    "DOMException(message, name)": {
      "args": [
        "message",
        "name"
      ],
      "for": [
        "DOMException"
      ],
      "shortname": "webidl"
    }
  },
  "DOMMatrix()": {
    "DOMMatrix()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "DOMMatrix(init)": {
      "args": [
        "init"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "DOMMatrixReadOnly()": {
    "DOMMatrixReadOnly()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "DOMMatrixReadOnly(init)": {
      "args": [
        "init"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "DOMPoint()": {
    "DOMPoint()": {
      "args": [],
      "for": [
        "DOMPoint"
      ],
      "shortname": "geometry"
    },
    "DOMPoint(x)": {
      "args": [
        "x"
      ],
      "for": [
        "DOMPoint"
      ],
      "shortname": "geometry"
    },
    "DOMPoint(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "DOMPoint"
      ],
      "shortname": "geometry"
    },
    "DOMPoint(x, y, z)": {
      "args": [
        "x",
        "y",
        "z"
      ],
      "for": [
        "DOMPoint"
      ],
      "shortname": "geometry"
    },
    "DOMPoint(x, y, z, w)": {
      "args": [
        "x",
        "y",
        "z",
        "w"
      ],
      "for": [
        "DOMPoint"
      ],
      "shortname": "geometry"
    }
  },
  "DOMPointReadOnly()": {
    "DOMPointReadOnly()": {
      "args": [],
      "for": [
        "DOMPointReadOnly"
      ],
      "shortname": "geometry"
    },
    "DOMPointReadOnly(x)": {
      "args": [
        "x"
      ],
      "for": [
        "DOMPointReadOnly"
      ],
      "shortname": "geometry"
    },
    "DOMPointReadOnly(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "DOMPointReadOnly"
      ],
      "shortname": "geometry"
    },
    "DOMPointReadOnly(x, y, z)": {
      "args": [
        "x",
        "y",
        "z"
      ],
      "for": [
        "DOMPointReadOnly"
      ],
      "shortname": "geometry"
    },
    "DOMPointReadOnly(x, y, z, w)": {
      "args": [
        "x",
        "y",
        "z",
        "w"
      ],
      "for": [
        "DOMPointReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "DOMQuad()": {
    "DOMQuad()": {
      "args": [],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    },
    "DOMQuad(p1)": {
      "args": [
        "p1"
      ],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    },
    "DOMQuad(p1, p2)": {
      "args": [
        "p1",
        "p2"
      ],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    },
    "DOMQuad(p1, p2, p3)": {
      "args": [
        "p1",
        "p2",
        "p3"
      ],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    },
    "DOMQuad(p1, p2, p3, p4)": {
      "args": [
        "p1",
        "p2",
        "p3",
        "p4"
      ],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    }
  },
  "DOMRect()": {
    "DOMRect()": {
      "args": [],
      "for": [
        "DOMRect"
      ],
      "shortname": "geometry"
    },
    "DOMRect(x)": {
      "args": [
        "x"
      ],
      "for": [
        "DOMRect"
      ],
      "shortname": "geometry"
    },
    "DOMRect(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "DOMRect"
      ],
      "shortname": "geometry"
    },
    "DOMRect(x, y, width)": {
      "args": [
        "x",
        "y",
        "width"
      ],
      "for": [
        "DOMRect"
      ],
      "shortname": "geometry"
    },
    "DOMRect(x, y, width, height)": {
      "args": [
        "x",
        "y",
        "width",
        "height"
      ],
      "for": [
        "DOMRect"
      ],
      "shortname": "geometry"
    }
  },
  "DOMRectReadOnly()": {
    "DOMRectReadOnly()": {
      "args": [],
      "for": [
        "DOMRectReadOnly"
      ],
      "shortname": "geometry"
    },
    "DOMRectReadOnly(x)": {
      "args": [
        "x"
      ],
      "for": [
        "DOMRectReadOnly"
      ],
      "shortname": "geometry"
    },
    "DOMRectReadOnly(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "DOMRectReadOnly"
      ],
      "shortname": "geometry"
    },
    "DOMRectReadOnly(x, y, width)": {
      "args": [
        "x",
        "y",
        "width"
      ],
      "for": [
        "DOMRectReadOnly"
      ],
      "shortname": "geometry"
    },
    "DOMRectReadOnly(x, y, width, height)": {
      "args": [
        "x",
        "y",
        "width",
        "height"
      ],
      "for": [
        "DOMRectReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "DataCue()": {
    "DataCue(startTime, endTime, value)": {
      "args": [
        "startTime",
        "endTime",
        "value"
      ],
      "for": [
        "DataCue"
      ],
      "shortname": "datacue"
    },
    "DataCue(startTime, endTime, value, type)": {
      "args": [
        "startTime",
        "endTime",
        "value",
        "type"
      ],
      "for": [
        "DataCue"
      ],
      "shortname": "datacue"
    }
  },
  "DataTransfer()": {
    "DataTransfer()": {
      "args": [],
      "for": [
        "DataTransfer"
      ],
      "shortname": "html"
    }
  },
  "DataView()": {
    "DataView(buffer, byteOffset, byteLength)": {
      "args": [
        "buffer",
        "byteOffset",
        "byteLength"
      ],
      "for": [
        "DataView"
      ],
      "shortname": "ecmascript"
    }
  },
  "Date()": {
    "Date(...values)": {
      "args": [
        "...values"
      ],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "Date.prototype %Symbol.toPrimitive% ()": {
    "Date.prototype %Symbol.toPrimitive% (hint)": {
      "args": [
        "hint"
      ],
      "for": [
        "Date.prototype [ %Symbol.toPrimitive% ] ( hint )"
      ],
      "shortname": "ecmascript"
    }
  },
  "DecompressionStream()": {
    "DecompressionStream(format)": {
      "args": [
        "format"
      ],
      "for": [
        "DecompressionStream"
      ],
      "shortname": "compression"
    }
  },
  "DelayNode()": {
    "DelayNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "DelayNode"
      ],
      "shortname": "webaudio"
    },
    "DelayNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "DelayNode",
        "DelayNode/constructor()"
      ],
      "shortname": "webaudio"
    }
  },
  "DeviceMotionEvent()": {
    "DeviceMotionEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "DeviceMotionEvent"
      ],
      "shortname": "orientation-event"
    },
    "DeviceMotionEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "DeviceMotionEvent"
      ],
      "shortname": "orientation-event"
    }
  },
  "DeviceOrientationEvent()": {
    "DeviceOrientationEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "DeviceOrientationEvent"
      ],
      "shortname": "orientation-event"
    },
    "DeviceOrientationEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "DeviceOrientationEvent"
      ],
      "shortname": "orientation-event"
    }
  },
  "Document()": {
    "Document()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "DocumentFragment()": {
    "DocumentFragment()": {
      "args": [],
      "for": [
        "DocumentFragment"
      ],
      "shortname": "dom"
    }
  },
  "DocumentPictureInPictureEvent()": {
    "DocumentPictureInPictureEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "DocumentPictureInPictureEvent"
      ],
      "shortname": "document-picture-in-picture"
    }
  },
  "DocumentTimeline()": {
    "DocumentTimeline()": {
      "args": [],
      "for": [
        "DocumentTimeline"
      ],
      "shortname": "web-animations"
    },
    "DocumentTimeline(options)": {
      "args": [
        "options"
      ],
      "for": [
        "DocumentTimeline"
      ],
      "shortname": "web-animations"
    }
  },
  "DynamicsCompressorNode()": {
    "DynamicsCompressorNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "DynamicsCompressorNode"
      ],
      "shortname": "webaudio"
    },
    "DynamicsCompressorNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "DynamicsCompressorNode",
        "DynamicsCompressorNode/constructor()"
      ],
      "shortname": "webaudio"
    }
  },
  "EncodedAudioChunk()": {
    "EncodedAudioChunk(init)": {
      "args": [
        "init"
      ],
      "for": [
        "EncodedAudioChunk"
      ],
      "shortname": "webcodecs"
    }
  },
  "EncodedVideoChunk()": {
    "EncodedVideoChunk(init)": {
      "args": [
        "init"
      ],
      "for": [
        "EncodedVideoChunk"
      ],
      "shortname": "webcodecs"
    }
  },
  "Error()": {
    "Error(message, options)": {
      "args": [
        "message",
        "options"
      ],
      "for": [
        "Error"
      ],
      "shortname": "ecmascript"
    }
  },
  "Event()": {
    "Event(type)": {
      "args": [
        "type"
      ],
      "for": [
        "Event"
      ],
      "shortname": "dom"
    },
    "Event(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "Event"
      ],
      "shortname": "dom"
    }
  },
  "EventSource()": {
    "EventSource(url, eventSourceInitDict)": {
      "args": [
        "url",
        "eventSourceInitDict"
      ],
      "for": [
        "EventSource"
      ],
      "shortname": "html"
    }
  },
  "EventTarget()": {
    "EventTarget()": {
      "args": [],
      "for": [
        "EventTarget"
      ],
      "shortname": "dom"
    }
  },
  "ExtendableCookieChangeEvent()": {
    "ExtendableCookieChangeEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "ExtendableCookieChangeEvent"
      ],
      "shortname": "cookie-store"
    },
    "ExtendableCookieChangeEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "ExtendableCookieChangeEvent"
      ],
      "shortname": "cookie-store"
    }
  },
  "ExtendableEvent()": {
    "ExtendableEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "ExtendableEvent"
      ],
      "shortname": "service-workers"
    },
    "ExtendableEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "ExtendableEvent"
      ],
      "shortname": "service-workers"
    }
  },
  "ExtendableMessageEvent()": {
    "ExtendableMessageEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "ExtendableMessageEvent"
      ],
      "shortname": "service-workers"
    },
    "ExtendableMessageEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "ExtendableMessageEvent"
      ],
      "shortname": "service-workers"
    }
  },
  "FaceDetector()": {
    "FaceDetector()": {
      "args": [],
      "for": [
        "FaceDetector"
      ],
      "shortname": "shape-detection-api"
    },
    "FaceDetector(faceDetectorOptions)": {
      "args": [
        "faceDetectorOptions"
      ],
      "for": [
        "FaceDetector"
      ],
      "shortname": "shape-detection-api"
    }
  },
  "FederatedCredential()": {
    "FederatedCredential(data)": {
      "args": [
        "data"
      ],
      "for": [
        "FederatedCredential"
      ],
      "shortname": "credential-management"
    }
  },
  "FencedFrameConfig()": {
    "FencedFrameConfig(url)": {
      "args": [
        "url"
      ],
      "for": [
        "FencedFrameConfig"
      ],
      "shortname": "fenced-frame"
    }
  },
  "FetchEvent()": {
    "FetchEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "FetchEvent"
      ],
      "shortname": "service-workers"
    }
  },
  "File()": {
    "File(fileBits, fileName)": {
      "args": [
        "fileBits",
        "fileName"
      ],
      "for": [
        "File"
      ],
      "shortname": "fileapi"
    },
    "File(fileBits, fileName, options)": {
      "args": [
        "fileBits",
        "fileName",
        "options"
      ],
      "for": [
        "File"
      ],
      "shortname": "fileapi"
    }
  },
  "FileReader()": {
    "FileReader()": {
      "args": [],
      "for": [
        "FileReader"
      ],
      "shortname": "fileapi"
    }
  },
  "FileReaderSync()": {
    "FileReaderSync()": {
      "args": [],
      "for": [
        "FileReaderSync"
      ],
      "shortname": "fileapi"
    }
  },
  "FinalizationRegistry()": {
    "FinalizationRegistry(cleanupCallback)": {
      "args": [
        "cleanupCallback"
      ],
      "for": [
        "FinalizationRegistry"
      ],
      "shortname": "ecmascript"
    }
  },
  "FocusEvent()": {
    "FocusEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "FocusEvent"
      ],
      "shortname": "uievents"
    },
    "FocusEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "FocusEvent"
      ],
      "shortname": "uievents"
    }
  },
  "FontFace()": {
    "FontFace(family, source)": {
      "args": [
        "family",
        "source"
      ],
      "for": [
        "FontFace"
      ],
      "shortname": "css-font-loading"
    },
    "FontFace(family, source, descriptors)": {
      "args": [
        "family",
        "source",
        "descriptors"
      ],
      "for": [
        "FontFace"
      ],
      "shortname": "css-font-loading"
    }
  },
  "FontFaceSet()": {
    "FontFaceSet(initialFaces)": {
      "args": [
        "initialFaces"
      ],
      "for": [
        "FontFaceSet"
      ],
      "shortname": "css-font-loading"
    }
  },
  "FontFaceSetLoadEvent()": {
    "FontFaceSetLoadEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "FontFaceSetLoadEvent"
      ],
      "shortname": "css-font-loading"
    },
    "FontFaceSetLoadEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "FontFaceSetLoadEvent"
      ],
      "shortname": "css-font-loading"
    }
  },
  "FormData()": {
    "FormData()": {
      "args": [],
      "for": [
        "FormData"
      ],
      "shortname": "xhr"
    },
    "FormData(form)": {
      "args": [
        "form"
      ],
      "for": [
        "FormData"
      ],
      "shortname": "xhr"
    },
    "FormData(form, submitter)": {
      "args": [
        "form",
        "submitter"
      ],
      "for": [
        "FormData"
      ],
      "shortname": "xhr"
    }
  },
  "FragmentResult()": {
    "FragmentResult()": {
      "args": [],
      "for": [
        "FragmentResult"
      ],
      "shortname": "css-layout-api"
    },
    "FragmentResult(options)": {
      "args": [
        "options"
      ],
      "for": [
        "FragmentResult"
      ],
      "shortname": "css-layout-api"
    }
  },
  "Function()": {
    "Function(...parameterArgs, bodyArg)": {
      "args": [
        "...parameterArgs",
        "bodyArg"
      ],
      "for": [
        "Function"
      ],
      "shortname": "ecmascript"
    }
  },
  "Function.prototype %Symbol.hasInstance% ()": {
    "Function.prototype %Symbol.hasInstance% (V)": {
      "args": [
        "V"
      ],
      "for": [
        "Function.prototype [ %Symbol.hasInstance% ] ( V )"
      ],
      "shortname": "ecmascript"
    }
  },
  "GPUInternalError()": {
    "GPUInternalError(message)": {
      "args": [
        "message"
      ],
      "for": [
        "GPUInternalError"
      ],
      "shortname": "webgpu"
    }
  },
  "GPUOutOfMemoryError()": {
    "GPUOutOfMemoryError(message)": {
      "args": [
        "message"
      ],
      "for": [
        "GPUOutOfMemoryError"
      ],
      "shortname": "webgpu"
    }
  },
  "GPUPipelineError()": {
    "GPUPipelineError()": {
      "args": [],
      "for": [
        "GPUPipelineError"
      ],
      "shortname": "webgpu"
    },
    "GPUPipelineError(message)": {
      "args": [
        "message"
      ],
      "for": [
        "GPUPipelineError"
      ],
      "shortname": "webgpu"
    },
    "GPUPipelineError(message, options)": {
      "args": [
        "message",
        "options"
      ],
      "for": [
        "GPUPipelineError"
      ],
      "shortname": "webgpu"
    }
  },
  "GPUUncapturedErrorEvent()": {
    "GPUUncapturedErrorEvent(type, gpuUncapturedErrorEventInitDict)": {
      "args": [
        "type",
        "gpuUncapturedErrorEventInitDict"
      ],
      "for": [
        "GPUUncapturedErrorEvent"
      ],
      "shortname": "webgpu"
    }
  },
  "GPUValidationError()": {
    "GPUValidationError(message)": {
      "args": [
        "message"
      ],
      "for": [
        "GPUValidationError"
      ],
      "shortname": "webgpu"
    }
  },
  "GainNode()": {
    "GainNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "GainNode"
      ],
      "shortname": "webaudio"
    },
    "GainNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "GainNode",
        "GainNode/constructor()"
      ],
      "shortname": "webaudio"
    }
  },
  "GeneratorFunction()": {
    "GeneratorFunction(...parameterArgs, bodyArg)": {
      "args": [
        "...parameterArgs",
        "bodyArg"
      ],
      "for": [
        "GeneratorFunction"
      ],
      "shortname": "ecmascript"
    }
  },
  "GeolocationSensor()": {
    "GeolocationSensor()": {
      "args": [],
      "for": [
        "GeolocationSensor"
      ],
      "shortname": "geolocation-sensor"
    },
    "GeolocationSensor(options)": {
      "args": [
        "options"
      ],
      "for": [
        "GeolocationSensor"
      ],
      "shortname": "geolocation-sensor"
    }
  },
  "Global()": {
    "Global(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "Global"
      ],
      "shortname": "wasm-js-api"
    },
    "Global(descriptor, v)": {
      "args": [
        "descriptor",
        "v"
      ],
      "for": [
        "Global"
      ],
      "shortname": "wasm-js-api"
    }
  },
  "GravitySensor()": {
    "GravitySensor()": {
      "args": [],
      "for": [
        "GravitySensor"
      ],
      "shortname": "accelerometer"
    },
    "GravitySensor(options)": {
      "args": [
        "options"
      ],
      "for": [
        "GravitySensor"
      ],
      "shortname": "accelerometer"
    }
  },
  "GroupEffect()": {
    "GroupEffect(children)": {
      "args": [
        "children"
      ],
      "for": [
        "GroupEffect"
      ],
      "shortname": "web-animations"
    },
    "GroupEffect(children, timing)": {
      "args": [
        "children",
        "timing"
      ],
      "for": [
        "GroupEffect"
      ],
      "shortname": "web-animations"
    }
  },
  "Gyroscope()": {
    "Gyroscope()": {
      "args": [],
      "for": [
        "Gyroscope"
      ],
      "shortname": "gyroscope"
    },
    "Gyroscope(sensorOptions)": {
      "args": [
        "sensorOptions"
      ],
      "for": [
        "Gyroscope"
      ],
      "shortname": "gyroscope"
    }
  },
  "HTMLFencedFrameElement()": {
    "HTMLFencedFrameElement()": {
      "args": [],
      "for": [
        "HTMLFencedFrameElement"
      ],
      "shortname": "fenced-frame"
    }
  },
  "HTMLPortalElement()": {
    "HTMLPortalElement()": {
      "args": [],
      "for": [
        "HTMLPortalElement"
      ],
      "shortname": "portals"
    }
  },
  "HandwritingStroke()": {
    "HandwritingStroke()": {
      "args": [],
      "for": [
        "HandwritingStroke"
      ],
      "shortname": "handwriting-recognition"
    }
  },
  "Headers()": {
    "Headers()": {
      "args": [],
      "for": [
        "Headers"
      ],
      "shortname": "fetch"
    },
    "Headers(init)": {
      "args": [
        "init"
      ],
      "for": [
        "Headers"
      ],
      "shortname": "fetch"
    }
  },
  "Highlight()": {
    "Highlight()": {
      "args": [],
      "for": [
        "Highlight"
      ],
      "shortname": "css-highlight-api"
    },
    "Highlight(...initialRanges)": {
      "args": [
        "...initialRanges"
      ],
      "for": [
        "Highlight"
      ],
      "shortname": "css-highlight-api"
    }
  },
  "Hz()": {
    "Hz(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "IDBVersionChangeEvent()": {
    "IDBVersionChangeEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "IDBVersionChangeEvent"
      ],
      "shortname": "indexeddb"
    },
    "IDBVersionChangeEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "IDBVersionChangeEvent"
      ],
      "shortname": "indexeddb"
    }
  },
  "IIRFilterNode()": {
    "IIRFilterNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "IIRFilterNode",
        "IIRFilterNode/constructor()"
      ],
      "shortname": "webaudio"
    }
  },
  "IdleDetector()": {
    "IdleDetector()": {
      "args": [],
      "for": [
        "IdleDetector"
      ],
      "shortname": "idle-detection"
    }
  },
  "ImageCapture()": {
    "ImageCapture(videoTrack)": {
      "args": [
        "videoTrack"
      ],
      "for": [
        "ImageCapture"
      ],
      "shortname": "image-capture"
    }
  },
  "ImageDecoder()": {
    "ImageDecoder(init)": {
      "args": [
        "init"
      ],
      "for": [
        "ImageDecoder"
      ],
      "shortname": "webcodecs"
    }
  },
  "InputEvent()": {
    "InputEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "InputEvent"
      ],
      "shortname": "uievents"
    },
    "InputEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "InputEvent"
      ],
      "shortname": "uievents"
    }
  },
  "Instance()": {
    "Instance(module)": {
      "args": [
        "module"
      ],
      "for": [
        "Instance"
      ],
      "shortname": "wasm-js-api"
    },
    "Instance(module, importObject)": {
      "args": [
        "module",
        "importObject"
      ],
      "for": [
        "Instance"
      ],
      "shortname": "wasm-js-api"
    }
  },
  "IntersectionObserver()": {
    "IntersectionObserver(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "IntersectionObserver"
      ],
      "shortname": "intersection-observer"
    },
    "IntersectionObserver(callback, options = {})": {
      "args": [
        "callback",
        "options = {}"
      ],
      "for": [
        "IntersectionObserver"
      ],
      "shortname": "intersection-observer"
    },
    "IntersectionObserver(callback, options)": {
      "args": [
        "callback",
        "options"
      ],
      "for": [
        "IntersectionObserver"
      ],
      "shortname": "intersection-observer"
    }
  },
  "IntersectionObserverEntry()": {
    "IntersectionObserverEntry(intersectionObserverEntryInit)": {
      "args": [
        "intersectionObserverEntryInit"
      ],
      "for": [
        "IntersectionObserverEntry"
      ],
      "shortname": "intersection-observer"
    }
  },
  "IsSearchProviderInstalled()": {
    "IsSearchProviderInstalled()": {
      "args": [],
      "for": [
        "External"
      ],
      "shortname": "html"
    }
  },
  "KeyFrameRequestEvent()": {
    "KeyFrameRequestEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "KeyFrameRequestEvent"
      ],
      "shortname": "webrtc-encoded-transform"
    },
    "KeyFrameRequestEvent(type, rid)": {
      "args": [
        "type",
        "rid"
      ],
      "for": [
        "KeyFrameRequestEvent"
      ],
      "shortname": "webrtc-encoded-transform"
    }
  },
  "KeyboardEvent()": {
    "KeyboardEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "KeyboardEvent"
      ],
      "shortname": "uievents"
    },
    "KeyboardEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "KeyboardEvent"
      ],
      "shortname": "uievents"
    }
  },
  "KeyframeEffect()": {
    "KeyframeEffect(source)": {
      "args": [
        "source"
      ],
      "for": [
        "KeyframeEffect"
      ],
      "shortname": "web-animations"
    },
    "KeyframeEffect(target, keyframes)": {
      "args": [
        "target",
        "keyframes"
      ],
      "for": [
        "KeyframeEffect"
      ],
      "shortname": "web-animations"
    },
    "KeyframeEffect(target, keyframes, options)": {
      "args": [
        "target",
        "keyframes",
        "options"
      ],
      "for": [
        "KeyframeEffect"
      ],
      "shortname": "web-animations"
    }
  },
  "LayoutConstraints()": {
    "LayoutConstraints()": {
      "args": [],
      "for": [
        "LayoutConstraints"
      ],
      "shortname": "css-layout-api"
    },
    "LayoutConstraints(options)": {
      "args": [
        "options"
      ],
      "for": [
        "LayoutConstraints"
      ],
      "shortname": "css-layout-api"
    }
  },
  "LinearAccelerationSensor()": {
    "LinearAccelerationSensor()": {
      "args": [],
      "for": [
        "LinearAccelerationSensor"
      ],
      "shortname": "accelerometer"
    },
    "LinearAccelerationSensor(options)": {
      "args": [
        "options"
      ],
      "for": [
        "LinearAccelerationSensor"
      ],
      "shortname": "accelerometer"
    }
  },
  "MLGraphBuilder()": {
    "MLGraphBuilder(context)": {
      "args": [
        "context"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "Magnetometer()": {
    "Magnetometer()": {
      "args": [],
      "for": [
        "Magnetometer"
      ],
      "shortname": "magnetometer"
    },
    "Magnetometer(sensorOptions)": {
      "args": [
        "sensorOptions"
      ],
      "for": [
        "Magnetometer"
      ],
      "shortname": "magnetometer"
    }
  },
  "Map()": {
    "Map(iterable)": {
      "args": [
        "iterable"
      ],
      "for": [
        "Map"
      ],
      "shortname": "ecmascript"
    }
  },
  "Map.prototype %Symbol.iterator% ()": {
    "Map.prototype %Symbol.iterator% ()": {
      "args": [],
      "for": [
        "Map.prototype [ %Symbol.iterator% ] ( )"
      ],
      "shortname": "ecmascript"
    }
  },
  "MediaElementAudioSourceNode()": {
    "MediaElementAudioSourceNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "MediaElementAudioSourceNode"
      ],
      "shortname": "webaudio"
    }
  },
  "MediaMetadata()": {
    "MediaMetadata()": {
      "args": [],
      "for": [
        "MediaMetadata"
      ],
      "shortname": "mediasession"
    },
    "MediaMetadata(init)": {
      "args": [
        "init"
      ],
      "for": [
        "MediaMetadata"
      ],
      "shortname": "mediasession"
    }
  },
  "MediaQueryListEvent()": {
    "MediaQueryListEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "MediaQueryListEvent"
      ],
      "shortname": "cssom-view"
    },
    "MediaQueryListEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "MediaQueryListEvent"
      ],
      "shortname": "cssom-view"
    }
  },
  "MediaRecorder()": {
    "MediaRecorder(stream)": {
      "args": [
        "stream"
      ],
      "for": [
        "MediaRecorder"
      ],
      "shortname": "mediastream-recording"
    },
    "MediaRecorder(stream, options)": {
      "args": [
        "stream",
        "options"
      ],
      "for": [
        "MediaRecorder"
      ],
      "shortname": "mediastream-recording"
    }
  },
  "MediaStreamAudioDestinationNode()": {
    "MediaStreamAudioDestinationNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "MediaStreamAudioDestinationNode"
      ],
      "shortname": "webaudio"
    },
    "MediaStreamAudioDestinationNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "MediaStreamAudioDestinationNode"
      ],
      "shortname": "webaudio"
    }
  },
  "MediaStreamAudioSourceNode()": {
    "MediaStreamAudioSourceNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "MediaStreamAudioSourceNode"
      ],
      "shortname": "webaudio"
    }
  },
  "MediaStreamTrackAudioSourceNode()": {
    "MediaStreamTrackAudioSourceNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "MediaStreamTrackAudioSourceNode"
      ],
      "shortname": "webaudio"
    }
  },
  "MediaStreamTrackProcessor()": {
    "MediaStreamTrackProcessor(init)": {
      "args": [
        "init"
      ],
      "for": [
        "MediaStreamTrackProcessor"
      ],
      "shortname": "mediacapture-transform"
    }
  },
  "Memory()": {
    "Memory(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "Memory"
      ],
      "shortname": "wasm-js-api"
    }
  },
  "Module()": {
    "Module(bytes)": {
      "args": [
        "bytes"
      ],
      "for": [
        "Module"
      ],
      "shortname": "wasm-js-api"
    }
  },
  "MouseEvent()": {
    "MouseEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "MouseEvent"
      ],
      "shortname": "uievents"
    },
    "MouseEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "MouseEvent"
      ],
      "shortname": "uievents"
    }
  },
  "MutationObserver()": {
    "MutationObserver(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "MutationObserver"
      ],
      "shortname": "dom"
    }
  },
  "NavigationEvent()": {
    "NavigationEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "NavigationEvent"
      ],
      "shortname": "css-nav"
    },
    "NavigationEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "NavigationEvent"
      ],
      "shortname": "css-nav"
    }
  },
  "Notification()": {
    "Notification(title)": {
      "args": [
        "title"
      ],
      "for": [
        "Notification"
      ],
      "shortname": "notifications"
    },
    "Notification(title, options)": {
      "args": [
        "title",
        "options"
      ],
      "for": [
        "Notification"
      ],
      "shortname": "notifications"
    }
  },
  "NotificationEvent()": {
    "NotificationEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "NotificationEvent"
      ],
      "shortname": "notifications"
    }
  },
  "Number()": {
    "Number(value)": {
      "args": [
        "value"
      ],
      "for": [
        "Number"
      ],
      "shortname": "ecmascript"
    }
  },
  "Object()": {
    "Object(value)": {
      "args": [
        "value"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    }
  },
  "OfflineAudioCompletionEvent()": {
    "OfflineAudioCompletionEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "OfflineAudioCompletionEvent"
      ],
      "shortname": "webaudio"
    }
  },
  "OfflineAudioContext()": {
    "OfflineAudioContext(contextOptions)": {
      "args": [
        "contextOptions"
      ],
      "for": [
        "OfflineAudioContext"
      ],
      "shortname": "webaudio"
    },
    "OfflineAudioContext(numberOfChannels, length, sampleRate)": {
      "args": [
        "numberOfChannels",
        "length",
        "sampleRate"
      ],
      "for": [
        "OfflineAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "OffscreenCanvas()": {
    "OffscreenCanvas(width, height)": {
      "args": [
        "width",
        "height"
      ],
      "for": [
        "OffscreenCanvas"
      ],
      "shortname": "html"
    }
  },
  "Option()": {
    "Option(text, value, defaultSelected, selected)": {
      "args": [
        "text",
        "value",
        "defaultSelected",
        "selected"
      ],
      "for": [
        "HTMLOptionElement"
      ],
      "shortname": "html"
    }
  },
  "OscillatorNode()": {
    "OscillatorNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "OscillatorNode"
      ],
      "shortname": "webaudio"
    },
    "OscillatorNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "OscillatorNode"
      ],
      "shortname": "webaudio"
    }
  },
  "PannerNode()": {
    "PannerNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "PannerNode"
      ],
      "shortname": "webaudio"
    },
    "PannerNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "PannerNode"
      ],
      "shortname": "webaudio"
    }
  },
  "PasswordCredential()": {
    "PasswordCredential(data)": {
      "args": [
        "data"
      ],
      "for": [
        "PasswordCredential"
      ],
      "shortname": "credential-management"
    },
    "PasswordCredential(form)": {
      "args": [
        "form"
      ],
      "for": [
        "PasswordCredential"
      ],
      "shortname": "credential-management"
    }
  },
  "Path2D()": {
    "Path2D(path)": {
      "args": [
        "path"
      ],
      "for": [
        "Path2D"
      ],
      "shortname": "html"
    }
  },
  "PaymentRequestUpdateEvent.PaymentRequestUpdateEvent()": {
    "PaymentRequestUpdateEvent.PaymentRequestUpdateEvent()": {
      "args": [],
      "for": [
        "PaymentRequestUpdateEvent"
      ],
      "shortname": "payment-request"
    }
  },
  "PeriodicSyncEvent()": {
    "PeriodicSyncEvent(type, init)": {
      "args": [
        "type",
        "init"
      ],
      "for": [
        "PeriodicSyncEvent"
      ],
      "shortname": "periodic-background-sync"
    }
  },
  "PeriodicWave()": {
    "PeriodicWave(context)": {
      "args": [
        "context"
      ],
      "for": [
        "PeriodicWave"
      ],
      "shortname": "webaudio"
    },
    "PeriodicWave(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "PeriodicWave"
      ],
      "shortname": "webaudio"
    }
  },
  "PictureInPictureEvent()": {
    "PictureInPictureEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "PictureInPictureEvent"
      ],
      "shortname": "picture-in-picture"
    }
  },
  "PortalActivateEvent()": {
    "PortalActivateEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "PortalActivateEvent"
      ],
      "shortname": "portals"
    },
    "PortalActivateEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "PortalActivateEvent"
      ],
      "shortname": "portals"
    }
  },
  "ProgressEvent()": {
    "ProgressEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "ProgressEvent"
      ],
      "shortname": "xhr"
    },
    "ProgressEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "ProgressEvent"
      ],
      "shortname": "xhr"
    }
  },
  "Promise()": {
    "Promise(executor)": {
      "args": [
        "executor"
      ],
      "for": [
        "Promise"
      ],
      "shortname": "ecmascript"
    }
  },
  "ProximitySensor()": {
    "ProximitySensor()": {
      "args": [],
      "for": [
        "ProximitySensor"
      ],
      "shortname": "proximity"
    },
    "ProximitySensor(sensorOptions)": {
      "args": [
        "sensorOptions"
      ],
      "for": [
        "ProximitySensor"
      ],
      "shortname": "proximity"
    }
  },
  "Proxy()": {
    "Proxy(target, handler)": {
      "args": [
        "target",
        "handler"
      ],
      "for": [
        "Proxy"
      ],
      "shortname": "ecmascript"
    }
  },
  "Q()": {
    "Q(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "RTCEncodedAudioFrame()": {
    "RTCEncodedAudioFrame(originalFrame)": {
      "args": [
        "originalFrame"
      ],
      "for": [
        "RTCEncodedAudioFrame"
      ],
      "shortname": "webrtc-encoded-transform"
    },
    "RTCEncodedAudioFrame(originalFrame, options)": {
      "args": [
        "originalFrame",
        "options"
      ],
      "for": [
        "RTCEncodedAudioFrame"
      ],
      "shortname": "webrtc-encoded-transform"
    }
  },
  "RTCEncodedVideoFrame()": {
    "RTCEncodedVideoFrame(originalFrame)": {
      "args": [
        "originalFrame"
      ],
      "for": [
        "RTCEncodedVideoFrame"
      ],
      "shortname": "webrtc-encoded-transform"
    },
    "RTCEncodedVideoFrame(originalFrame, options)": {
      "args": [
        "originalFrame",
        "options"
      ],
      "for": [
        "RTCEncodedVideoFrame"
      ],
      "shortname": "webrtc-encoded-transform"
    }
  },
  "RTCRtpScriptTransform()": {
    "RTCRtpScriptTransform(worker)": {
      "args": [
        "worker"
      ],
      "for": [
        "RTCRtpScriptTransform"
      ],
      "shortname": "webrtc-encoded-transform"
    },
    "RTCRtpScriptTransform(worker, options)": {
      "args": [
        "worker",
        "options"
      ],
      "for": [
        "RTCRtpScriptTransform"
      ],
      "shortname": "webrtc-encoded-transform"
    },
    "RTCRtpScriptTransform(worker, options, transfer)": {
      "args": [
        "worker",
        "options",
        "transfer"
      ],
      "for": [
        "RTCRtpScriptTransform"
      ],
      "shortname": "webrtc-encoded-transform"
    }
  },
  "Range()": {
    "Range()": {
      "args": [],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "ReadableStream()": {
    "ReadableStream()": {
      "args": [],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    },
    "ReadableStream(underlyingSource)": {
      "args": [
        "underlyingSource"
      ],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    },
    "ReadableStream(underlyingSource, strategy)": {
      "args": [
        "underlyingSource",
        "strategy"
      ],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    }
  },
  "ReadableStreamBYOBReader()": {
    "ReadableStreamBYOBReader(stream)": {
      "args": [
        "stream"
      ],
      "for": [
        "ReadableStreamBYOBReader"
      ],
      "shortname": "streams"
    }
  },
  "ReadableStreamDefaultReader()": {
    "ReadableStreamDefaultReader(stream)": {
      "args": [
        "stream"
      ],
      "for": [
        "ReadableStreamDefaultReader"
      ],
      "shortname": "streams"
    }
  },
  "RegExp()": {
    "RegExp(pattern, flags)": {
      "args": [
        "pattern",
        "flags"
      ],
      "for": [
        "RegExp"
      ],
      "shortname": "ecmascript"
    }
  },
  "RegExp.prototype %Symbol.match% ()": {
    "RegExp.prototype %Symbol.match% (string)": {
      "args": [
        "string"
      ],
      "for": [
        "RegExp.prototype [ %Symbol.match% ] ( string )"
      ],
      "shortname": "ecmascript"
    }
  },
  "RegExp.prototype %Symbol.matchAll% ()": {
    "RegExp.prototype %Symbol.matchAll% (string)": {
      "args": [
        "string"
      ],
      "for": [
        "RegExp.prototype [ %Symbol.matchAll% ] ( string )"
      ],
      "shortname": "ecmascript"
    }
  },
  "RegExp.prototype %Symbol.replace% ()": {
    "RegExp.prototype %Symbol.replace% (string, replaceValue)": {
      "args": [
        "string",
        "replaceValue"
      ],
      "for": [
        "RegExp.prototype [ %Symbol.replace% ] ( string, replaceValue )"
      ],
      "shortname": "ecmascript"
    }
  },
  "RegExp.prototype %Symbol.search% ()": {
    "RegExp.prototype %Symbol.search% (string)": {
      "args": [
        "string"
      ],
      "for": [
        "RegExp.prototype [ %Symbol.search% ] ( string )"
      ],
      "shortname": "ecmascript"
    }
  },
  "RegExp.prototype %Symbol.split% ()": {
    "RegExp.prototype %Symbol.split% (string, limit)": {
      "args": [
        "string",
        "limit"
      ],
      "for": [
        "RegExp.prototype [ %Symbol.split% ] ( string, limit )"
      ],
      "shortname": "ecmascript"
    }
  },
  "RelativeOrientationSensor()": {
    "RelativeOrientationSensor()": {
      "args": [],
      "for": [
        "RelativeOrientationSensor"
      ],
      "shortname": "orientation-sensor"
    },
    "RelativeOrientationSensor(sensorOptions)": {
      "args": [
        "sensorOptions"
      ],
      "for": [
        "RelativeOrientationSensor"
      ],
      "shortname": "orientation-sensor"
    }
  },
  "ReportingObserver()": {
    "ReportingObserver(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "ReportingObserver"
      ],
      "shortname": "reporting"
    },
    "ReportingObserver(callback, options)": {
      "args": [
        "callback",
        "options"
      ],
      "for": [
        "ReportingObserver"
      ],
      "shortname": "reporting"
    }
  },
  "Request()": {
    "Request(input)": {
      "args": [
        "input"
      ],
      "for": [
        "Request"
      ],
      "shortname": "fetch"
    },
    "Request(input, init)": {
      "args": [
        "input",
        "init"
      ],
      "for": [
        "Request"
      ],
      "shortname": "fetch"
    }
  },
  "ResizeObservation()": {
    "ResizeObservation(target, observedBox)": {
      "args": [
        "target",
        "observedBox"
      ],
      "for": [
        "ResizeObservation"
      ],
      "shortname": "resize-observer"
    },
    "ResizeObservation(target, options)": {
      "args": [
        "target",
        "options"
      ],
      "for": [
        "ResizeObservation"
      ],
      "shortname": "resize-observer"
    }
  },
  "ResizeObserver()": {
    "ResizeObserver(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "ResizeObserver"
      ],
      "shortname": "resize-observer"
    }
  },
  "Response()": {
    "Response()": {
      "args": [],
      "for": [
        "Response"
      ],
      "shortname": "fetch"
    },
    "Response(body)": {
      "args": [
        "body"
      ],
      "for": [
        "Response"
      ],
      "shortname": "fetch"
    },
    "Response(body, init)": {
      "args": [
        "body",
        "init"
      ],
      "for": [
        "Response"
      ],
      "shortname": "fetch"
    }
  },
  "SFrameTransform()": {
    "SFrameTransform()": {
      "args": [],
      "for": [
        "SFrameTransform"
      ],
      "shortname": "webrtc-encoded-transform"
    },
    "SFrameTransform(options)": {
      "args": [
        "options"
      ],
      "for": [
        "SFrameTransform"
      ],
      "shortname": "webrtc-encoded-transform"
    }
  },
  "SFrameTransformErrorEvent()": {
    "SFrameTransformErrorEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "SFrameTransformErrorEvent"
      ],
      "shortname": "webrtc-encoded-transform"
    }
  },
  "Sanitizer()": {
    "Sanitizer()": {
      "args": [],
      "for": [
        "Sanitizer"
      ],
      "shortname": "sanitizer-api"
    },
    "Sanitizer(config)": {
      "args": [
        "config"
      ],
      "for": [
        "Sanitizer"
      ],
      "shortname": "sanitizer-api"
    }
  },
  "ScrollTimeline()": {
    "ScrollTimeline()": {
      "args": [],
      "for": [
        "ScrollTimeline"
      ],
      "shortname": "scroll-animations"
    },
    "ScrollTimeline(options)": {
      "args": [
        "options"
      ],
      "for": [
        "ScrollTimeline"
      ],
      "shortname": "scroll-animations"
    }
  },
  "SecurityPolicyViolationEvent()": {
    "SecurityPolicyViolationEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "SecurityPolicyViolationEvent"
      ],
      "shortname": "csp"
    },
    "SecurityPolicyViolationEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "SecurityPolicyViolationEvent"
      ],
      "shortname": "csp"
    }
  },
  "SensorErrorEvent()": {
    "SensorErrorEvent(type, errorEventInitDict)": {
      "args": [
        "type",
        "errorEventInitDict"
      ],
      "for": [
        "SensorErrorEvent"
      ],
      "shortname": "generic-sensor"
    }
  },
  "SequenceEffect()": {
    "SequenceEffect(children)": {
      "args": [
        "children"
      ],
      "for": [
        "SequenceEffect"
      ],
      "shortname": "web-animations"
    },
    "SequenceEffect(children, timing)": {
      "args": [
        "children",
        "timing"
      ],
      "for": [
        "SequenceEffect"
      ],
      "shortname": "web-animations"
    }
  },
  "Set()": {
    "Set(iterable)": {
      "args": [
        "iterable"
      ],
      "for": [
        "Set"
      ],
      "shortname": "ecmascript"
    }
  },
  "Set.prototype %Symbol.iterator% ()": {
    "Set.prototype %Symbol.iterator% ()": {
      "args": [],
      "for": [
        "Set.prototype [ %Symbol.iterator% ] ( )"
      ],
      "shortname": "ecmascript"
    }
  },
  "SharedArrayBuffer()": {
    "SharedArrayBuffer(length, options)": {
      "args": [
        "length",
        "options"
      ],
      "for": [
        "SharedArrayBuffer"
      ],
      "shortname": "ecmascript"
    }
  },
  "SharedWorker()": {
    "SharedWorker(scriptURL)": {
      "args": [
        "scriptURL"
      ],
      "for": [
        "StorageAccessHandle"
      ],
      "shortname": "saa-non-cookie-storage"
    },
    "SharedWorker(scriptURL, options)": {
      "args": [
        "scriptURL",
        "options"
      ],
      "for": [
        "SharedWorker",
        "StorageAccessHandle"
      ],
      "shortname": "html"
    }
  },
  "SnapEvent()": {
    "SnapEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "SnapEvent"
      ],
      "shortname": "css-scroll-snap"
    },
    "SnapEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "SnapEvent"
      ],
      "shortname": "css-scroll-snap"
    }
  },
  "SpeechGrammarList()": {
    "SpeechGrammarList()": {
      "args": [],
      "for": [
        "SpeechGrammarList"
      ],
      "shortname": "speech-api"
    }
  },
  "SpeechRecognition()": {
    "SpeechRecognition()": {
      "args": [],
      "for": [
        "SpeechRecognition"
      ],
      "shortname": "speech-api"
    }
  },
  "SpeechRecognitionErrorEvent()": {
    "SpeechRecognitionErrorEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "SpeechRecognitionErrorEvent"
      ],
      "shortname": "speech-api"
    }
  },
  "SpeechRecognitionEvent()": {
    "SpeechRecognitionEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "SpeechRecognitionEvent"
      ],
      "shortname": "speech-api"
    }
  },
  "SpeechSynthesisErrorEvent()": {
    "SpeechSynthesisErrorEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "SpeechSynthesisErrorEvent"
      ],
      "shortname": "speech-api"
    }
  },
  "SpeechSynthesisEvent()": {
    "SpeechSynthesisEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "SpeechSynthesisEvent"
      ],
      "shortname": "speech-api"
    }
  },
  "SpeechSynthesisUtterance()": {
    "SpeechSynthesisUtterance()": {
      "args": [],
      "for": [
        "SpeechSynthesisUtterance"
      ],
      "shortname": "speech-api"
    },
    "SpeechSynthesisUtterance(text)": {
      "args": [
        "text"
      ],
      "for": [
        "SpeechSynthesisUtterance"
      ],
      "shortname": "speech-api"
    }
  },
  "StatefulAnimator()": {
    "StatefulAnimator()": {
      "args": [],
      "for": [
        "StatefulAnimator"
      ],
      "shortname": "css-animation-worklet"
    },
    "StatefulAnimator(options)": {
      "args": [
        "options"
      ],
      "for": [
        "StatefulAnimator"
      ],
      "shortname": "css-animation-worklet"
    },
    "StatefulAnimator(options, state)": {
      "args": [
        "options",
        "state"
      ],
      "for": [
        "StatefulAnimator"
      ],
      "shortname": "css-animation-worklet"
    }
  },
  "StatelessAnimator()": {
    "StatelessAnimator()": {
      "args": [],
      "for": [
        "StatelessAnimator"
      ],
      "shortname": "css-animation-worklet"
    },
    "StatelessAnimator(options)": {
      "args": [
        "options"
      ],
      "for": [
        "StatelessAnimator"
      ],
      "shortname": "css-animation-worklet"
    }
  },
  "StaticRange()": {
    "StaticRange(init)": {
      "args": [
        "init"
      ],
      "for": [
        "StaticRange"
      ],
      "shortname": "dom"
    }
  },
  "StereoPannerNode()": {
    "StereoPannerNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "StereoPannerNode"
      ],
      "shortname": "webaudio"
    },
    "StereoPannerNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "StereoPannerNode"
      ],
      "shortname": "webaudio"
    }
  },
  "String()": {
    "String(value)": {
      "args": [
        "value"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "String.prototype %Symbol.iterator% ()": {
    "String.prototype %Symbol.iterator% ()": {
      "args": [],
      "for": [
        "String.prototype [ %Symbol.iterator% ] ( )"
      ],
      "shortname": "ecmascript"
    }
  },
  "Symbol()": {
    "Symbol(description)": {
      "args": [
        "description"
      ],
      "for": [
        "Symbol"
      ],
      "shortname": "ecmascript"
    }
  },
  "Symbol.prototype %Symbol.toPrimitive% ()": {
    "Symbol.prototype %Symbol.toPrimitive% (hint)": {
      "args": [
        "hint"
      ],
      "for": [
        "Symbol.prototype [ %Symbol.toPrimitive% ] ( hint )"
      ],
      "shortname": "ecmascript"
    }
  },
  "SyncEvent()": {
    "SyncEvent(type, init)": {
      "args": [
        "type",
        "init"
      ],
      "for": [
        "SyncEvent"
      ],
      "shortname": "background-sync"
    }
  },
  "Table()": {
    "Table(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "Table"
      ],
      "shortname": "wasm-js-api"
    },
    "Table(descriptor, value)": {
      "args": [
        "descriptor",
        "value"
      ],
      "for": [
        "Table"
      ],
      "shortname": "wasm-js-api"
    }
  },
  "TaskController()": {
    "TaskController()": {
      "args": [],
      "for": [
        "TaskController"
      ],
      "shortname": "scheduling-apis"
    },
    "TaskController(init)": {
      "args": [
        "init"
      ],
      "for": [
        "TaskController"
      ],
      "shortname": "scheduling-apis"
    }
  },
  "TaskPriorityChangeEvent()": {
    "TaskPriorityChangeEvent(type, priorityChangeEventInitDict)": {
      "args": [
        "type",
        "priorityChangeEventInitDict"
      ],
      "for": [
        "TaskPriorityChangeEvent"
      ],
      "shortname": "scheduling-apis"
    }
  },
  "Text()": {
    "Text()": {
      "args": [],
      "for": [
        "Text"
      ],
      "shortname": "dom"
    },
    "Text(data)": {
      "args": [
        "data"
      ],
      "for": [
        "Text"
      ],
      "shortname": "dom"
    }
  },
  "TextDecoder()": {
    "TextDecoder()": {
      "args": [],
      "for": [
        "TextDecoder"
      ],
      "shortname": "encoding"
    },
    "TextDecoder(label)": {
      "args": [
        "label"
      ],
      "for": [
        "TextDecoder"
      ],
      "shortname": "encoding"
    },
    "TextDecoder(label, options)": {
      "args": [
        "label",
        "options"
      ],
      "for": [
        "TextDecoder"
      ],
      "shortname": "encoding"
    }
  },
  "TextDecoderStream()": {
    "TextDecoderStream()": {
      "args": [],
      "for": [
        "TextDecoderStream"
      ],
      "shortname": "encoding"
    },
    "TextDecoderStream(label)": {
      "args": [
        "label"
      ],
      "for": [
        "TextDecoderStream"
      ],
      "shortname": "encoding"
    },
    "TextDecoderStream(label, options)": {
      "args": [
        "label",
        "options"
      ],
      "for": [
        "TextDecoderStream"
      ],
      "shortname": "encoding"
    }
  },
  "TextDetector()": {
    "TextDetector()": {
      "args": [],
      "for": [
        "TextDetector"
      ],
      "shortname": "text-detection-api"
    }
  },
  "TextEncoder()": {
    "TextEncoder()": {
      "args": [],
      "for": [
        "TextEncoder"
      ],
      "shortname": "encoding"
    }
  },
  "TextEncoderStream()": {
    "TextEncoderStream()": {
      "args": [],
      "for": [
        "TextEncoderStream"
      ],
      "shortname": "encoding"
    }
  },
  "TransformStream()": {
    "TransformStream()": {
      "args": [],
      "for": [
        "TransformStream"
      ],
      "shortname": "streams"
    },
    "TransformStream(transformer)": {
      "args": [
        "transformer"
      ],
      "for": [
        "TransformStream"
      ],
      "shortname": "streams"
    },
    "TransformStream(transformer, writableStrategy)": {
      "args": [
        "transformer",
        "writableStrategy"
      ],
      "for": [
        "TransformStream"
      ],
      "shortname": "streams"
    },
    "TransformStream(transformer, writableStrategy, readableStrategy)": {
      "args": [
        "transformer",
        "writableStrategy",
        "readableStrategy"
      ],
      "for": [
        "TransformStream"
      ],
      "shortname": "streams"
    }
  },
  "TransitionEvent()": {
    "TransitionEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "TransitionEvent"
      ],
      "shortname": "css-transitions"
    },
    "TransitionEvent(type, transitionEventInitDict)": {
      "args": [
        "type",
        "transitionEventInitDict"
      ],
      "for": [
        "TransitionEvent"
      ],
      "shortname": "css-transitions"
    }
  },
  "TypedArray()": {
    "TypedArray(...args)": {
      "args": [
        "...args"
      ],
      "for": [
        "TypedArray"
      ],
      "shortname": "ecmascript"
    }
  },
  "UIEvent()": {
    "UIEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "UIEvent"
      ],
      "shortname": "uievents"
    },
    "UIEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "UIEvent"
      ],
      "shortname": "uievents"
    }
  },
  "URL()": {
    "URL(url)": {
      "args": [
        "url"
      ],
      "for": [
        "URL"
      ],
      "shortname": "url"
    },
    "URL(url, base)": {
      "args": [
        "url",
        "base"
      ],
      "for": [
        "URL"
      ],
      "shortname": "url"
    }
  },
  "URLPattern()": {
    "URLPattern()": {
      "args": [],
      "for": [
        "URLPattern"
      ],
      "shortname": "urlpattern"
    },
    "URLPattern(input)": {
      "args": [
        "input"
      ],
      "for": [
        "URLPattern"
      ],
      "shortname": "urlpattern"
    },
    "URLPattern(input, baseURL)": {
      "args": [
        "input",
        "baseURL"
      ],
      "for": [
        "URLPattern"
      ],
      "shortname": "urlpattern"
    },
    "URLPattern(input, baseURL, options)": {
      "args": [
        "input",
        "baseURL",
        "options"
      ],
      "for": [
        "URLPattern"
      ],
      "shortname": "urlpattern"
    },
    "URLPattern(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "URLPattern"
      ],
      "shortname": "urlpattern"
    }
  },
  "URLSearchParams()": {
    "URLSearchParams()": {
      "args": [],
      "for": [
        "URLSearchParams"
      ],
      "shortname": "url"
    },
    "URLSearchParams(init)": {
      "args": [
        "init"
      ],
      "for": [
        "URLSearchParams"
      ],
      "shortname": "url"
    }
  },
  "USBAlternateInterface()": {
    "USBAlternateInterface(deviceInterface, alternateSetting)": {
      "args": [
        "deviceInterface",
        "alternateSetting"
      ],
      "for": [
        "USBAlternateInterface"
      ],
      "shortname": "webusb"
    }
  },
  "USBConfiguration()": {
    "USBConfiguration(device, configurationValue)": {
      "args": [
        "device",
        "configurationValue"
      ],
      "for": [
        "USBConfiguration"
      ],
      "shortname": "webusb"
    }
  },
  "USBConnectionEvent()": {
    "USBConnectionEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "USBConnectionEvent"
      ],
      "shortname": "webusb"
    }
  },
  "USBEndpoint()": {
    "USBEndpoint(alternate, endpointNumber, direction)": {
      "args": [
        "alternate",
        "endpointNumber",
        "direction"
      ],
      "for": [
        "USBEndpoint"
      ],
      "shortname": "webusb"
    }
  },
  "USBInTransferResult()": {
    "USBInTransferResult(status)": {
      "args": [
        "status"
      ],
      "for": [
        "USBInTransferResult"
      ],
      "shortname": "webusb"
    },
    "USBInTransferResult(status, data)": {
      "args": [
        "status",
        "data"
      ],
      "for": [
        "USBInTransferResult"
      ],
      "shortname": "webusb"
    }
  },
  "USBInterface()": {
    "USBInterface(configuration, interfaceNumber)": {
      "args": [
        "configuration",
        "interfaceNumber"
      ],
      "for": [
        "USBInterface"
      ],
      "shortname": "webusb"
    }
  },
  "USBIsochronousInTransferPacket()": {
    "USBIsochronousInTransferPacket(status)": {
      "args": [
        "status"
      ],
      "for": [
        "USBIsochronousInTransferPacket"
      ],
      "shortname": "webusb"
    },
    "USBIsochronousInTransferPacket(status, data)": {
      "args": [
        "status",
        "data"
      ],
      "for": [
        "USBIsochronousInTransferPacket"
      ],
      "shortname": "webusb"
    }
  },
  "USBIsochronousInTransferResult()": {
    "USBIsochronousInTransferResult(packets)": {
      "args": [
        "packets"
      ],
      "for": [
        "USBIsochronousInTransferResult"
      ],
      "shortname": "webusb"
    },
    "USBIsochronousInTransferResult(packets, data)": {
      "args": [
        "packets",
        "data"
      ],
      "for": [
        "USBIsochronousInTransferResult"
      ],
      "shortname": "webusb"
    }
  },
  "USBIsochronousOutTransferPacket()": {
    "USBIsochronousOutTransferPacket(status)": {
      "args": [
        "status"
      ],
      "for": [
        "USBIsochronousOutTransferPacket"
      ],
      "shortname": "webusb"
    },
    "USBIsochronousOutTransferPacket(status, bytesWritten)": {
      "args": [
        "status",
        "bytesWritten"
      ],
      "for": [
        "USBIsochronousOutTransferPacket"
      ],
      "shortname": "webusb"
    }
  },
  "USBIsochronousOutTransferResult()": {
    "USBIsochronousOutTransferResult(packets)": {
      "args": [
        "packets"
      ],
      "for": [
        "USBIsochronousOutTransferResult"
      ],
      "shortname": "webusb"
    }
  },
  "USBOutTransferResult()": {
    "USBOutTransferResult(status)": {
      "args": [
        "status"
      ],
      "for": [
        "USBOutTransferResult"
      ],
      "shortname": "webusb"
    },
    "USBOutTransferResult(status, bytesWritten)": {
      "args": [
        "status",
        "bytesWritten"
      ],
      "for": [
        "USBOutTransferResult"
      ],
      "shortname": "webusb"
    }
  },
  "UTC()": {
    "UTC(year, month, date, hours, minutes, seconds, ms)": {
      "args": [
        "year",
        "month",
        "date",
        "hours",
        "minutes",
        "seconds",
        "ms"
      ],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "UncalibratedMagnetometer()": {
    "UncalibratedMagnetometer()": {
      "args": [],
      "for": [
        "UncalibratedMagnetometer"
      ],
      "shortname": "magnetometer"
    },
    "UncalibratedMagnetometer(sensorOptions)": {
      "args": [
        "sensorOptions"
      ],
      "for": [
        "UncalibratedMagnetometer"
      ],
      "shortname": "magnetometer"
    }
  },
  "VTTCue()": {
    "VTTCue(startTime, endTime, text)": {
      "args": [
        "startTime",
        "endTime",
        "text"
      ],
      "for": [
        "VTTCue"
      ],
      "shortname": "webvtt"
    }
  },
  "VTTRegion()": {
    "VTTRegion()": {
      "args": [],
      "for": [
        "VTTRegion"
      ],
      "shortname": "webvtt"
    }
  },
  "ValueEvent()": {
    "ValueEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "ValueEvent"
      ],
      "shortname": "web-bluetooth"
    },
    "ValueEvent(type, initDict)": {
      "args": [
        "type",
        "initDict"
      ],
      "for": [
        "ValueEvent"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "VideoColorSpace()": {
    "VideoColorSpace()": {
      "args": [],
      "for": [
        "VideoColorSpace"
      ],
      "shortname": "webcodecs"
    },
    "VideoColorSpace(init)": {
      "args": [
        "init"
      ],
      "for": [
        "VideoColorSpace"
      ],
      "shortname": "webcodecs"
    }
  },
  "VideoDecoder()": {
    "VideoDecoder(init)": {
      "args": [
        "init"
      ],
      "for": [
        "VideoDecoder"
      ],
      "shortname": "webcodecs"
    }
  },
  "VideoEncoder()": {
    "VideoEncoder(init)": {
      "args": [
        "init"
      ],
      "for": [
        "VideoEncoder"
      ],
      "shortname": "webcodecs"
    }
  },
  "VideoFrame()": {
    "VideoFrame(data, init)": {
      "args": [
        "data",
        "init"
      ],
      "for": [
        "VideoFrame"
      ],
      "shortname": "webcodecs"
    },
    "VideoFrame(image)": {
      "args": [
        "image"
      ],
      "for": [
        "VideoFrame"
      ],
      "shortname": "webcodecs"
    },
    "VideoFrame(image, init)": {
      "args": [
        "image",
        "init"
      ],
      "for": [
        "VideoFrame"
      ],
      "shortname": "webcodecs"
    }
  },
  "VideoTrackGenerator()": {
    "VideoTrackGenerator()": {
      "args": [],
      "for": [
        "VideoTrackGenerator"
      ],
      "shortname": "mediacapture-transform"
    }
  },
  "ViewTimeline()": {
    "ViewTimeline()": {
      "args": [],
      "for": [
        "ViewTimeline"
      ],
      "shortname": "scroll-animations"
    },
    "ViewTimeline(options)": {
      "args": [
        "options"
      ],
      "for": [
        "ViewTimeline"
      ],
      "shortname": "scroll-animations"
    }
  },
  "WaveShaperNode()": {
    "WaveShaperNode(context)": {
      "args": [
        "context"
      ],
      "for": [
        "WaveShaperNode"
      ],
      "shortname": "webaudio"
    },
    "WaveShaperNode(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "WaveShaperNode"
      ],
      "shortname": "webaudio"
    }
  },
  "WeakMap()": {
    "WeakMap(iterable)": {
      "args": [
        "iterable"
      ],
      "for": [
        "WeakMap"
      ],
      "shortname": "ecmascript"
    }
  },
  "WeakRef()": {
    "WeakRef(target)": {
      "args": [
        "target"
      ],
      "for": [
        "WeakRef"
      ],
      "shortname": "ecmascript"
    }
  },
  "WeakSet()": {
    "WeakSet(iterable)": {
      "args": [
        "iterable"
      ],
      "for": [
        "WeakSet"
      ],
      "shortname": "ecmascript"
    }
  },
  "WebSocket()": {
    "WebSocket(url)": {
      "args": [
        "url"
      ],
      "for": [
        "WebSocket"
      ],
      "shortname": "websockets"
    },
    "WebSocket(url, protocols)": {
      "args": [
        "url",
        "protocols"
      ],
      "for": [
        "WebSocket"
      ],
      "shortname": "websockets"
    }
  },
  "WebTransport()": {
    "WebTransport(url)": {
      "args": [
        "url"
      ],
      "for": [
        "WebTransport"
      ],
      "shortname": "webtransport"
    },
    "WebTransport(url, options)": {
      "args": [
        "url",
        "options"
      ],
      "for": [
        "WebTransport"
      ],
      "shortname": "webtransport"
    }
  },
  "WebTransportError()": {
    "WebTransportError()": {
      "args": [],
      "for": [
        "WebTransportError"
      ],
      "shortname": "webtransport"
    },
    "WebTransportError(message)": {
      "args": [
        "message"
      ],
      "for": [
        "WebTransportError"
      ],
      "shortname": "webtransport"
    },
    "WebTransportError(message, options)": {
      "args": [
        "message",
        "options"
      ],
      "for": [
        "WebTransportError"
      ],
      "shortname": "webtransport"
    }
  },
  "WheelEvent()": {
    "WheelEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "WheelEvent"
      ],
      "shortname": "uievents"
    },
    "WheelEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "WheelEvent"
      ],
      "shortname": "uievents"
    }
  },
  "Worker()": {
    "Worker(scriptURL, options)": {
      "args": [
        "scriptURL",
        "options"
      ],
      "for": [
        "Worker"
      ],
      "shortname": "html"
    }
  },
  "WorkletAnimation()": {
    "WorkletAnimation(animatorName)": {
      "args": [
        "animatorName"
      ],
      "for": [
        "WorkletAnimation"
      ],
      "shortname": "css-animation-worklet"
    },
    "WorkletAnimation(animatorName, effects)": {
      "args": [
        "animatorName",
        "effects"
      ],
      "for": [
        "WorkletAnimation"
      ],
      "shortname": "css-animation-worklet"
    },
    "WorkletAnimation(animatorName, effects, timeline)": {
      "args": [
        "animatorName",
        "effects",
        "timeline"
      ],
      "for": [
        "WorkletAnimation"
      ],
      "shortname": "css-animation-worklet"
    },
    "WorkletAnimation(animatorName, effects, timeline, options)": {
      "args": [
        "animatorName",
        "effects",
        "timeline",
        "options"
      ],
      "for": [
        "WorkletAnimation"
      ],
      "shortname": "css-animation-worklet"
    }
  },
  "WritableStream()": {
    "WritableStream()": {
      "args": [],
      "for": [
        "WritableStream"
      ],
      "shortname": "streams"
    },
    "WritableStream(underlyingSink)": {
      "args": [
        "underlyingSink"
      ],
      "for": [
        "WritableStream"
      ],
      "shortname": "streams"
    },
    "WritableStream(underlyingSink, strategy)": {
      "args": [
        "underlyingSink",
        "strategy"
      ],
      "for": [
        "WritableStream"
      ],
      "shortname": "streams"
    }
  },
  "WritableStreamDefaultWriter()": {
    "WritableStreamDefaultWriter(stream)": {
      "args": [
        "stream"
      ],
      "for": [
        "WritableStreamDefaultWriter"
      ],
      "shortname": "streams"
    }
  },
  "XMLHttpRequest()": {
    "XMLHttpRequest()": {
      "args": [],
      "for": [
        "XMLHttpRequest"
      ],
      "shortname": "xhr"
    }
  },
  "XPathEvaluator()": {
    "XPathEvaluator()": {
      "args": [],
      "for": [
        "XPathEvaluator"
      ],
      "shortname": "dom"
    }
  },
  "XRInputSourceEvent()": {
    "XRInputSourceEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "XRInputSourceEvent"
      ],
      "shortname": "webxr"
    }
  },
  "XRInputSourcesChangeEvent()": {
    "XRInputSourcesChangeEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "XRInputSourcesChangeEvent"
      ],
      "shortname": "webxr"
    }
  },
  "XRLayerEvent()": {
    "XRLayerEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "XRLayerEvent"
      ],
      "shortname": "webxrlayers"
    }
  },
  "XRMediaBinding()": {
    "XRMediaBinding(session)": {
      "args": [
        "session"
      ],
      "for": [
        "XRMediaBinding"
      ],
      "shortname": "webxrlayers"
    }
  },
  "XRRay()": {
    "XRRay()": {
      "args": [],
      "for": [
        "XRRay"
      ],
      "shortname": "webxr-hit-test"
    },
    "XRRay(origin)": {
      "args": [
        "origin"
      ],
      "for": [
        "XRRay"
      ],
      "shortname": "webxr-hit-test"
    },
    "XRRay(origin, direction)": {
      "args": [
        "origin",
        "direction"
      ],
      "for": [
        "XRRay"
      ],
      "shortname": "webxr-hit-test"
    },
    "XRRay(transform)": {
      "args": [
        "transform"
      ],
      "for": [
        "XRRay"
      ],
      "shortname": "webxr-hit-test"
    }
  },
  "XRReferenceSpaceEvent()": {
    "XRReferenceSpaceEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "XRReferenceSpaceEvent"
      ],
      "shortname": "webxr"
    }
  },
  "XRRigidTransform()": {
    "XRRigidTransform()": {
      "args": [],
      "for": [
        "XRRigidTransform"
      ],
      "shortname": "webxr"
    },
    "XRRigidTransform(position)": {
      "args": [
        "position"
      ],
      "for": [
        "XRRigidTransform"
      ],
      "shortname": "webxr"
    },
    "XRRigidTransform(position, orientation)": {
      "args": [
        "position",
        "orientation"
      ],
      "for": [
        "XRRigidTransform"
      ],
      "shortname": "webxr"
    }
  },
  "XRSessionEvent()": {
    "XRSessionEvent(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "XRSessionEvent"
      ],
      "shortname": "webxr"
    }
  },
  "XRWebGLBinding()": {
    "XRWebGLBinding(session, context)": {
      "args": [
        "session",
        "context"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxrlayers"
    }
  },
  "XRWebGLLayer()": {
    "XRWebGLLayer(session, context)": {
      "args": [
        "session",
        "context"
      ],
      "for": [
        "XRWebGLLayer"
      ],
      "shortname": "webxr"
    },
    "XRWebGLLayer(session, context, layerInit)": {
      "args": [
        "session",
        "context",
        "layerInit"
      ],
      "for": [
        "XRWebGLLayer"
      ],
      "shortname": "webxr"
    }
  },
  "XSLTProcessor()": {
    "XSLTProcessor()": {
      "args": [],
      "for": [
        "XSLTProcessor"
      ],
      "shortname": "dom"
    }
  },
  "[[CollectFromCredentialStore]]()": {
    "[[CollectFromCredentialStore]](origin, options, sameOriginWithAncestors)": {
      "args": [
        "origin",
        "options",
        "sameOriginWithAncestors"
      ],
      "for": [
        "Credential",
        "FederatedCredential",
        "PasswordCredential",
        "PublicKeyCredential"
      ],
      "shortname": "credential-management"
    }
  },
  "[[Create]]()": {
    "[[Create]](origin, options, sameOriginWithAncestors)": {
      "args": [
        "origin",
        "options",
        "sameOriginWithAncestors"
      ],
      "for": [
        "Credential",
        "DigitalCredential",
        "FederatedCredential",
        "PasswordCredential",
        "PublicKeyCredential"
      ],
      "shortname": "digital-identities"
    }
  },
  "[[DiscoverFromExternalSource]]()": {
    "[[DiscoverFromExternalSource]](origin, options, sameOriginWithAncestors)": {
      "args": [
        "origin",
        "options",
        "sameOriginWithAncestors"
      ],
      "for": [
        "Credential",
        "DigitalCredential",
        "IdentityCredential",
        "OTPCredential",
        "PublicKeyCredential"
      ],
      "shortname": "fedcm"
    }
  },
  "[[Store]]()": {
    "[[Store]](credential, sameOriginWithAncestors)": {
      "args": [
        "credential",
        "sameOriginWithAncestors"
      ],
      "for": [
        "Credential",
        "DigitalCredential",
        "FederatedCredential",
        "PasswordCredential",
        "PublicKeyCredential"
      ],
      "shortname": "digital-identities"
    }
  },
  "[[preventSilentAccess]]()": {
    "[[preventSilentAccess]](credential, sameOriginWithAncestors)": {
      "args": [
        "credential",
        "sameOriginWithAncestors"
      ],
      "for": [
        "PublicKeyCredential"
      ],
      "shortname": "webauthn"
    }
  },
  "__getter__()": {
    "__getter__(index)": {
      "args": [
        "index"
      ],
      "for": [
        "CSSKeyframesRule"
      ],
      "shortname": "css-animations"
    }
  },
  "abort()": {
    "abort()": {
      "args": [],
      "for": [
        "AbortController",
        "AbortSignal",
        "BackgroundFetchRegistration",
        "FileReader",
        "IDBTransaction",
        "PaymentRequest",
        "SourceBuffer",
        "SpeechRecognition",
        "WritableStream",
        "WritableStreamDefaultWriter",
        "XMLHttpRequest"
      ],
      "shortname": "dom"
    },
    "abort(reason)": {
      "args": [
        "reason"
      ],
      "for": [
        "AbortController",
        "AbortSignal",
        "WritableStream",
        "WritableStreamDefaultWriter"
      ],
      "shortname": "dom"
    }
  },
  "abs()": {
    "abs(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "abs(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "abs(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "acceptNode()": {
    "acceptNode(node)": {
      "args": [
        "node"
      ],
      "for": [
        "NodeFilter"
      ],
      "shortname": "dom"
    }
  },
  "acos()": {
    "acos(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "acosh()": {
    "acosh(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "activate()": {
    "activate()": {
      "args": [],
      "for": [
        "HTMLPortalElement"
      ],
      "shortname": "portals"
    },
    "activate(options)": {
      "args": [
        "options"
      ],
      "for": [
        "HTMLPortalElement"
      ],
      "shortname": "portals"
    }
  },
  "adAuctionComponents()": {
    "adAuctionComponents(numAdComponents)": {
      "args": [
        "numAdComponents"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "fenced-frame"
    }
  },
  "add()": {
    "add()": {
      "args": [],
      "for": [
        "CSSNumericValue",
        "DOMTokenList",
        "DataTransferItemList",
        "RdfDataset",
        "RdfGraph"
      ],
      "shortname": "dom"
    },
    "add(...tokens)": {
      "args": [
        "...tokens"
      ],
      "for": [
        "DOMTokenList"
      ],
      "shortname": "dom"
    },
    "add(...values)": {
      "args": [
        "...values"
      ],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "add(a, b)": {
      "args": [
        "a",
        "b"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "add(a, b, options)": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "add(description)": {
      "args": [
        "description"
      ],
      "for": [
        "ContentIndex"
      ],
      "shortname": "content-index"
    },
    "add(element, before)": {
      "args": [
        "element",
        "before"
      ],
      "for": [
        "HTMLOptionsCollection",
        "HTMLSelectElement"
      ],
      "shortname": "html"
    },
    "add(font)": {
      "args": [
        "font"
      ],
      "for": [
        "FontFaceSet"
      ],
      "shortname": "css-font-loading"
    },
    "add(graphName, graph)": {
      "args": [
        "graphName",
        "graph"
      ],
      "for": [
        "RdfDataset"
      ],
      "shortname": "json-ld-api"
    },
    "add(request)": {
      "args": [
        "request"
      ],
      "for": [
        "Cache"
      ],
      "shortname": "service-workers"
    },
    "add(tokens)": {
      "args": [
        "tokens"
      ],
      "for": [
        "DOMTokenList"
      ],
      "shortname": "dom"
    },
    "add(triple)": {
      "args": [
        "triple"
      ],
      "for": [
        "RdfGraph"
      ],
      "shortname": "json-ld-api"
    },
    "add(typedArray, index, value)": {
      "args": [
        "typedArray",
        "index",
        "value"
      ],
      "for": [
        "Atomics"
      ],
      "shortname": "ecmascript"
    },
    "add(value)": {
      "args": [
        "value"
      ],
      "for": [
        "IDBObjectStore",
        "Set",
        "WeakSet"
      ],
      "shortname": "ecmascript"
    },
    "add(value, key)": {
      "args": [
        "value",
        "key"
      ],
      "for": [
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    }
  },
  "addAll()": {
    "addAll(requests)": {
      "args": [
        "requests"
      ],
      "for": [
        "Cache"
      ],
      "shortname": "service-workers"
    }
  },
  "addColorStop()": {
    "addColorStop(offset, color)": {
      "args": [
        "offset",
        "color"
      ],
      "for": [
        "CanvasGradient"
      ],
      "shortname": "html"
    }
  },
  "addCue()": {
    "addCue(cue)": {
      "args": [
        "cue"
      ],
      "for": [
        "TextTrack"
      ],
      "shortname": "html"
    }
  },
  "addEventListener()": {
    "addEventListener(type, callback)": {
      "args": [
        "type",
        "callback"
      ],
      "for": [
        "EventTarget"
      ],
      "shortname": "dom"
    },
    "addEventListener(type, callback, options)": {
      "args": [
        "type",
        "callback",
        "options"
      ],
      "for": [
        "EventTarget"
      ],
      "shortname": "dom"
    }
  },
  "addFromString()": {
    "addFromString(string)": {
      "args": [
        "string"
      ],
      "for": [
        "SpeechGrammarList"
      ],
      "shortname": "speech-api"
    },
    "addFromString(string, weight)": {
      "args": [
        "string",
        "weight"
      ],
      "for": [
        "SpeechGrammarList"
      ],
      "shortname": "speech-api"
    }
  },
  "addFromURI()": {
    "addFromURI(src)": {
      "args": [
        "src"
      ],
      "for": [
        "SpeechGrammarList"
      ],
      "shortname": "speech-api"
    },
    "addFromURI(src, weight)": {
      "args": [
        "src",
        "weight"
      ],
      "for": [
        "SpeechGrammarList"
      ],
      "shortname": "speech-api"
    }
  },
  "addIceCandidate!overload-1()": {
    "addIceCandidate!overload-1()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "addIceCandidate!overload-1(candidate, successCallback, failureCallback)": {
      "args": [
        "candidate",
        "successCallback",
        "failureCallback"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "addIceCandidate()": {
    "addIceCandidate()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "addIceCandidate(candidate)": {
      "args": [
        "candidate"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "addListener()": {
    "addListener(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "MediaQueryList"
      ],
      "shortname": "cssom-view"
    },
    "addListener(listener)": {
      "args": [
        "listener"
      ],
      "for": [
        "MediaQueryList"
      ],
      "shortname": "cssom-view"
    }
  },
  "addModule()": {
    "addModule(moduleURL, options)": {
      "args": [
        "moduleURL",
        "options"
      ],
      "for": [
        "Worklet"
      ],
      "shortname": "html"
    }
  },
  "addPath()": {
    "addPath(path, transform)": {
      "args": [
        "path",
        "transform"
      ],
      "for": [
        "Path2D"
      ],
      "shortname": "html"
    }
  },
  "addPoint()": {
    "addPoint(point)": {
      "args": [
        "point"
      ],
      "for": [
        "HandwritingStroke"
      ],
      "shortname": "handwriting-recognition"
    }
  },
  "addRange()": {
    "addRange()": {
      "args": [],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    },
    "addRange(range)": {
      "args": [
        "range"
      ],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    }
  },
  "addRemoteCandidate()": {
    "addRemoteCandidate()": {
      "args": [],
      "for": [
        "RTCIceTransport"
      ],
      "shortname": "webrtc-ice"
    },
    "addRemoteCandidate(remoteCandidate)": {
      "args": [
        "remoteCandidate"
      ],
      "for": [
        "RTCIceTransport"
      ],
      "shortname": "webrtc-ice"
    }
  },
  "addRoutes()": {
    "addRoutes(rules)": {
      "args": [
        "rules"
      ],
      "for": [
        "InstallEvent"
      ],
      "shortname": "service-workers"
    }
  },
  "addRule()": {
    "addRule()": {
      "args": [],
      "for": [
        "CSSStyleSheet"
      ],
      "shortname": "cssom"
    },
    "addRule(selector)": {
      "args": [
        "selector"
      ],
      "for": [
        "CSSStyleSheet"
      ],
      "shortname": "cssom"
    },
    "addRule(selector, block, optionalIndex)": {
      "args": [
        "selector",
        "block",
        "optionalIndex"
      ],
      "for": [
        "CSSStyleSheet"
      ],
      "shortname": "cssom"
    },
    "addRule(selector, style)": {
      "args": [
        "selector",
        "style"
      ],
      "for": [
        "CSSStyleSheet"
      ],
      "shortname": "cssom"
    },
    "addRule(selector, style, index)": {
      "args": [
        "selector",
        "style",
        "index"
      ],
      "for": [
        "CSSStyleSheet"
      ],
      "shortname": "cssom"
    }
  },
  "addSourceBuffer()": {
    "addSourceBuffer()": {
      "args": [],
      "for": [
        "MediaSource"
      ],
      "shortname": "media-source"
    },
    "addSourceBuffer(type)": {
      "args": [
        "type"
      ],
      "for": [
        "MediaSource"
      ],
      "shortname": "media-source"
    }
  },
  "addStroke()": {
    "addStroke(stroke)": {
      "args": [
        "stroke"
      ],
      "for": [
        "HandwritingDrawing"
      ],
      "shortname": "handwriting-recognition"
    }
  },
  "addTextTrack()": {
    "addTextTrack(kind, label, language)": {
      "args": [
        "kind",
        "label",
        "language"
      ],
      "for": [
        "HTMLMediaElement"
      ],
      "shortname": "html"
    }
  },
  "addTrack()": {
    "addTrack()": {
      "args": [],
      "for": [
        "MediaStream",
        "RTCPeerConnection"
      ],
      "shortname": "mediacapture-streams"
    },
    "addTrack(track)": {
      "args": [
        "track"
      ],
      "for": [
        "MediaStream",
        "RTCPeerConnection"
      ],
      "shortname": "mediacapture-streams"
    },
    "addTrack(track, streams)": {
      "args": [
        "track",
        "streams"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "addTransceiver()": {
    "addTransceiver()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "addTransceiver(trackOrKind)": {
      "args": [
        "trackOrKind"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "addTransceiver(trackOrKind, init)": {
      "args": [
        "trackOrKind",
        "init"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "adoptNode()": {
    "adoptNode(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "adoptPredecessor()": {
    "adoptPredecessor()": {
      "args": [],
      "for": [
        "PortalActivateEvent"
      ],
      "shortname": "portals"
    }
  },
  "advance()": {
    "advance(count)": {
      "args": [
        "count"
      ],
      "for": [
        "IDBCursor"
      ],
      "shortname": "indexeddb"
    }
  },
  "after()": {
    "after()": {
      "args": [],
      "for": [
        "AnimationEffect",
        "ChildNode"
      ],
      "shortname": "dom"
    },
    "after(...effects)": {
      "args": [
        "...effects"
      ],
      "for": [
        "AnimationEffect"
      ],
      "shortname": "web-animations"
    },
    "after(...nodes)": {
      "args": [
        "...nodes"
      ],
      "for": [
        "ChildNode"
      ],
      "shortname": "dom"
    }
  },
  "alert()": {
    "alert()": {
      "args": [],
      "for": [
        "Window"
      ],
      "shortname": "html"
    },
    "alert(message)": {
      "args": [
        "message"
      ],
      "for": [
        "Window"
      ],
      "shortname": "html"
    }
  },
  "all()": {
    "all(iterable)": {
      "args": [
        "iterable"
      ],
      "for": [
        "Promise"
      ],
      "shortname": "ecmascript"
    }
  },
  "allSettled()": {
    "allSettled(iterable)": {
      "args": [
        "iterable"
      ],
      "for": [
        "Promise"
      ],
      "shortname": "ecmascript"
    }
  },
  "allocationSize()": {
    "allocationSize()": {
      "args": [],
      "for": [
        "VideoFrame"
      ],
      "shortname": "webcodecs"
    },
    "allocationSize(options)": {
      "args": [
        "options"
      ],
      "for": [
        "AudioData",
        "VideoFrame"
      ],
      "shortname": "webcodecs"
    }
  },
  "allowedFeatures()": {
    "allowedFeatures()": {
      "args": [],
      "for": [
        "PermissionsPolicy"
      ],
      "shortname": "permissions-policy"
    }
  },
  "allowsFeature()": {
    "allowsFeature(feature)": {
      "args": [
        "feature"
      ],
      "for": [
        "PermissionsPolicy"
      ],
      "shortname": "permissions-policy"
    },
    "allowsFeature(feature, origin)": {
      "args": [
        "feature",
        "origin"
      ],
      "for": [
        "PermissionsPolicy"
      ],
      "shortname": "permissions-policy"
    }
  },
  "anchor()": {
    "anchor(name)": {
      "args": [
        "name"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "and()": {
    "and(typedArray, index, value)": {
      "args": [
        "typedArray",
        "index",
        "value"
      ],
      "for": [
        "Atomics"
      ],
      "shortname": "ecmascript"
    }
  },
  "animate()": {
    "animate(keyframes)": {
      "args": [
        "keyframes"
      ],
      "for": [
        "Animatable"
      ],
      "shortname": "web-animations"
    },
    "animate(keyframes, options)": {
      "args": [
        "keyframes",
        "options"
      ],
      "for": [
        "Animatable"
      ],
      "shortname": "web-animations"
    }
  },
  "any()": {
    "any(iterable)": {
      "args": [
        "iterable"
      ],
      "for": [
        "Promise"
      ],
      "shortname": "ecmascript"
    },
    "any(signals)": {
      "args": [
        "signals"
      ],
      "for": [
        "AbortSignal",
        "TaskSignal"
      ],
      "shortname": "dom"
    },
    "any(signals, init)": {
      "args": [
        "signals",
        "init"
      ],
      "for": [
        "TaskSignal"
      ],
      "shortname": "scheduling-apis"
    }
  },
  "append()": {
    "append()": {
      "args": [],
      "for": [
        "GroupEffect",
        "ParentNode"
      ],
      "shortname": "dom"
    },
    "append(...effects)": {
      "args": [
        "...effects"
      ],
      "for": [
        "GroupEffect"
      ],
      "shortname": "web-animations"
    },
    "append(...nodes)": {
      "args": [
        "...nodes"
      ],
      "for": [
        "ParentNode"
      ],
      "shortname": "dom"
    },
    "append(key, value)": {
      "args": [
        "key",
        "value"
      ],
      "for": [
        "SharedStorage"
      ],
      "shortname": "shared-storage"
    },
    "append(name, blobValue)": {
      "args": [
        "name",
        "blobValue"
      ],
      "for": [
        "FormData"
      ],
      "shortname": "xhr"
    },
    "append(name, blobValue, filename)": {
      "args": [
        "name",
        "blobValue",
        "filename"
      ],
      "for": [
        "FormData"
      ],
      "shortname": "xhr"
    },
    "append(name, value)": {
      "args": [
        "name",
        "value"
      ],
      "for": [
        "FormData",
        "Headers",
        "URLSearchParams"
      ],
      "shortname": "fetch"
    },
    "append(property)": {
      "args": [
        "property"
      ],
      "for": [
        "StylePropertyMap"
      ],
      "shortname": "css-typed-om"
    },
    "append(property, ...values)": {
      "args": [
        "property",
        "...values"
      ],
      "for": [
        "StylePropertyMap"
      ],
      "shortname": "css-typed-om"
    }
  },
  "appendBuffer()": {
    "appendBuffer()": {
      "args": [],
      "for": [
        "SourceBuffer"
      ],
      "shortname": "media-source"
    },
    "appendBuffer(data)": {
      "args": [
        "data"
      ],
      "for": [
        "SourceBuffer"
      ],
      "shortname": "media-source"
    }
  },
  "appendChild()": {
    "appendChild(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "appendData()": {
    "appendData(data)": {
      "args": [
        "data"
      ],
      "for": [
        "CharacterData"
      ],
      "shortname": "dom"
    }
  },
  "appendMedium()": {
    "appendMedium(medium)": {
      "args": [
        "medium"
      ],
      "for": [
        "MediaList"
      ],
      "shortname": "cssom"
    }
  },
  "appendRule()": {
    "appendRule(rule)": {
      "args": [
        "rule"
      ],
      "for": [
        "CSSKeyframesRule"
      ],
      "shortname": "css-animations"
    }
  },
  "apply()": {
    "apply(target, thisArgument, argumentsList)": {
      "args": [
        "target",
        "thisArgument",
        "argumentsList"
      ],
      "for": [
        "Reflect"
      ],
      "shortname": "ecmascript"
    },
    "apply(thisArg, argArray)": {
      "args": [
        "thisArg",
        "argArray"
      ],
      "for": [
        "Function"
      ],
      "shortname": "ecmascript"
    }
  },
  "applyConstraints()": {
    "applyConstraints()": {
      "args": [],
      "for": [
        "ConstrainablePattern",
        "MediaStreamTrack"
      ],
      "shortname": "mediacapture-streams"
    },
    "applyConstraints(constraints)": {
      "args": [
        "constraints"
      ],
      "for": [
        "ConstrainablePattern",
        "MediaStreamTrack"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "arc()": {
    "arc(x, y, radius, startAngle, endAngle, counterclockwise)": {
      "args": [
        "x",
        "y",
        "radius",
        "startAngle",
        "endAngle",
        "counterclockwise"
      ],
      "for": [
        "CanvasPath"
      ],
      "shortname": "html"
    }
  },
  "arcTo()": {
    "arcTo(x1, y1, x2, y2, radius)": {
      "args": [
        "x1",
        "y1",
        "x2",
        "y2",
        "radius"
      ],
      "for": [
        "CanvasPath"
      ],
      "shortname": "html"
    }
  },
  "argMax()": {
    "argMax(input, axis)": {
      "args": [
        "input",
        "axis"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "argMax(input, axis, options)": {
      "args": [
        "input",
        "axis",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "argMin()": {
    "argMin(input, axis)": {
      "args": [
        "input",
        "axis"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "argMin(input, axis, options)": {
      "args": [
        "input",
        "axis",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "arrayBuffer()": {
    "arrayBuffer()": {
      "args": [],
      "for": [
        "Blob",
        "Body",
        "PushMessageData"
      ],
      "shortname": "fetch"
    }
  },
  "asIntN()": {
    "asIntN(bits, bigint)": {
      "args": [
        "bits",
        "bigint"
      ],
      "for": [
        "BigInt"
      ],
      "shortname": "ecmascript"
    }
  },
  "asUintN()": {
    "asUintN(bits, bigint)": {
      "args": [
        "bits",
        "bigint"
      ],
      "for": [
        "BigInt"
      ],
      "shortname": "ecmascript"
    }
  },
  "asin()": {
    "asin(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "asinh()": {
    "asinh(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "assert()": {
    "assert()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "assert(condition)": {
      "args": [
        "condition"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "assert(condition, ...data)": {
      "args": [
        "condition",
        "...data"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "assign()": {
    "assign(...nodes)": {
      "args": [
        "...nodes"
      ],
      "for": [
        "HTMLSlotElement"
      ],
      "shortname": "html"
    },
    "assign(target, ...sources)": {
      "args": [
        "target",
        "...sources"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    },
    "assign(url)": {
      "args": [
        "url"
      ],
      "for": [
        "Location"
      ],
      "shortname": "html"
    }
  },
  "assignedElements()": {
    "assignedElements(options)": {
      "args": [
        "options"
      ],
      "for": [
        "HTMLSlotElement"
      ],
      "shortname": "html"
    }
  },
  "assignedNodes()": {
    "assignedNodes(options)": {
      "args": [
        "options"
      ],
      "for": [
        "HTMLSlotElement"
      ],
      "shortname": "html"
    }
  },
  "at()": {
    "at(index)": {
      "args": [
        "index"
      ],
      "for": [
        "%TypedArray%",
        "Array",
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "atan()": {
    "atan(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "atan2()": {
    "atan2(y, x)": {
      "args": [
        "y",
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "atanh()": {
    "atanh(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "atob()": {
    "atob(data)": {
      "args": [
        "data"
      ],
      "for": [
        "WindowOrWorkerGlobalScope"
      ],
      "shortname": "html"
    }
  },
  "atomicWrite()": {
    "atomicWrite()": {
      "args": [],
      "for": [
        "WebTransportWriter"
      ],
      "shortname": "webtransport"
    },
    "atomicWrite(chunk)": {
      "args": [
        "chunk"
      ],
      "for": [
        "WebTransportWriter"
      ],
      "shortname": "webtransport"
    }
  },
  "attachInternals()": {
    "attachInternals()": {
      "args": [],
      "for": [
        "HTMLElement"
      ],
      "shortname": "html"
    }
  },
  "attachShadow()": {
    "attachShadow(init)": {
      "args": [
        "init"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "attachedElements()": {
    "attachedElements()": {
      "args": [],
      "for": [
        "EditContext"
      ],
      "shortname": "edit-context"
    }
  },
  "averagePool2d()": {
    "averagePool2d(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "averagePool2d(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "back()": {
    "back()": {
      "args": [],
      "for": [
        "History"
      ],
      "shortname": "html"
    },
    "back(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Navigation"
      ],
      "shortname": "html"
    }
  },
  "batchNormalization()": {
    "batchNormalization(input, mean, variance)": {
      "args": [
        "input",
        "mean",
        "variance"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "batchNormalization(input, mean, variance, options)": {
      "args": [
        "input",
        "mean",
        "variance",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "before()": {
    "before()": {
      "args": [],
      "for": [
        "AnimationEffect",
        "ChildNode"
      ],
      "shortname": "dom"
    },
    "before(...effects)": {
      "args": [
        "...effects"
      ],
      "for": [
        "AnimationEffect"
      ],
      "shortname": "web-animations"
    },
    "before(...nodes)": {
      "args": [
        "...nodes"
      ],
      "for": [
        "ChildNode"
      ],
      "shortname": "dom"
    }
  },
  "beginComputePass()": {
    "beginComputePass()": {
      "args": [],
      "for": [
        "GPUCommandEncoder"
      ],
      "shortname": "webgpu"
    },
    "beginComputePass(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "GPUCommandEncoder"
      ],
      "shortname": "webgpu"
    }
  },
  "beginOcclusionQuery()": {
    "beginOcclusionQuery(queryIndex)": {
      "args": [
        "queryIndex"
      ],
      "for": [
        "GPURenderPassEncoder"
      ],
      "shortname": "webgpu"
    }
  },
  "beginPath()": {
    "beginPath()": {
      "args": [],
      "for": [
        "CanvasDrawPath"
      ],
      "shortname": "html"
    }
  },
  "beginRenderPass()": {
    "beginRenderPass(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "GPUCommandEncoder"
      ],
      "shortname": "webgpu"
    }
  },
  "bezierCurveTo()": {
    "bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)": {
      "args": [
        "cp1x",
        "cp1y",
        "cp2x",
        "cp2y",
        "x",
        "y"
      ],
      "for": [
        "CanvasPath"
      ],
      "shortname": "html"
    }
  },
  "big()": {
    "big()": {
      "args": [],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "bind()": {
    "bind(thisArg, ...args)": {
      "args": [
        "thisArg",
        "...args"
      ],
      "for": [
        "Function"
      ],
      "shortname": "ecmascript"
    }
  },
  "blink()": {
    "blink()": {
      "args": [],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "blob()": {
    "blob()": {
      "args": [],
      "for": [
        "Body",
        "FontData",
        "PushMessageData"
      ],
      "shortname": "fetch"
    }
  },
  "blur()": {
    "blur()": {
      "args": [],
      "for": [
        "HTMLOrSVGElement",
        "Window"
      ],
      "shortname": "html"
    }
  },
  "bold()": {
    "bold()": {
      "args": [],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "bound()": {
    "bound(lower, upper)": {
      "args": [
        "lower",
        "upper"
      ],
      "for": [
        "IDBKeyRange"
      ],
      "shortname": "indexeddb"
    },
    "bound(lower, upper, lowerOpen)": {
      "args": [
        "lower",
        "upper",
        "lowerOpen"
      ],
      "for": [
        "IDBKeyRange"
      ],
      "shortname": "indexeddb"
    },
    "bound(lower, upper, lowerOpen, upperOpen)": {
      "args": [
        "lower",
        "upper",
        "lowerOpen",
        "upperOpen"
      ],
      "for": [
        "IDBKeyRange"
      ],
      "shortname": "indexeddb"
    }
  },
  "browsingTopics()": {
    "browsingTopics()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "topics"
    },
    "browsingTopics(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Document"
      ],
      "shortname": "topics"
    }
  },
  "btoa()": {
    "btoa(data)": {
      "args": [
        "data"
      ],
      "for": [
        "WindowOrWorkerGlobalScope"
      ],
      "shortname": "html"
    }
  },
  "build()": {
    "build(outputs)": {
      "args": [
        "outputs"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "bytes()": {
    "bytes()": {
      "args": [],
      "for": [
        "Blob",
        "Body",
        "PushMessageData"
      ],
      "shortname": "fetch"
    }
  },
  "call()": {
    "call(thisArg, ...args)": {
      "args": [
        "thisArg",
        "...args"
      ],
      "for": [
        "Function"
      ],
      "shortname": "ecmascript"
    }
  },
  "canLoadAdAuctionFencedFrame()": {
    "canLoadAdAuctionFencedFrame()": {
      "args": [],
      "for": [
        "Navigator"
      ],
      "shortname": "turtledove"
    }
  },
  "canMakePayment()": {
    "canMakePayment()": {
      "args": [],
      "for": [
        "PaymentRequest"
      ],
      "shortname": "payment-request"
    }
  },
  "canParse()": {
    "canParse(url)": {
      "args": [
        "url"
      ],
      "for": [
        "URL"
      ],
      "shortname": "url"
    },
    "canParse(url, base)": {
      "args": [
        "url",
        "base"
      ],
      "for": [
        "URL"
      ],
      "shortname": "url"
    }
  },
  "canPlayType()": {
    "canPlayType(type)": {
      "args": [
        "type"
      ],
      "for": [
        "HTMLMediaElement"
      ],
      "shortname": "html"
    }
  },
  "canShare()": {
    "canShare()": {
      "args": [],
      "for": [
        "Navigator"
      ],
      "shortname": "web-share"
    },
    "canShare(data)": {
      "args": [
        "data"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "web-share"
    }
  },
  "cancel()": {
    "cancel()": {
      "args": [],
      "for": [
        "Animation",
        "ReadableStream",
        "ReadableStreamGenericReader",
        "SpeechSynthesis",
        "XRHitTestSource",
        "XRTransientInputHitTestSource"
      ],
      "shortname": "streams"
    },
    "cancel(reason)": {
      "args": [
        "reason"
      ],
      "for": [
        "ReadableStream",
        "ReadableStreamGenericReader"
      ],
      "shortname": "streams"
    }
  },
  "cancelAndHoldAtTime()": {
    "cancelAndHoldAtTime(cancelTime)": {
      "args": [
        "cancelTime"
      ],
      "for": [
        "AudioParam"
      ],
      "shortname": "webaudio"
    }
  },
  "cancelAnimationFrame()": {
    "cancelAnimationFrame(handle)": {
      "args": [
        "handle"
      ],
      "for": [
        "AnimationFrameProvider",
        "XRSession"
      ],
      "shortname": "html"
    }
  },
  "cancelIdleCallback()": {
    "cancelIdleCallback()": {
      "args": [],
      "for": [
        "Window"
      ],
      "shortname": "requestidlecallback"
    },
    "cancelIdleCallback(handle)": {
      "args": [
        "handle"
      ],
      "for": [
        "Window"
      ],
      "shortname": "requestidlecallback"
    }
  },
  "cancelScheduledValues()": {
    "cancelScheduledValues(cancelTime)": {
      "args": [
        "cancelTime"
      ],
      "for": [
        "AudioParam"
      ],
      "shortname": "webaudio"
    }
  },
  "cancelVideoFrameCallback()": {
    "cancelVideoFrameCallback(handle)": {
      "args": [
        "handle"
      ],
      "for": [
        "HTMLVideoElement"
      ],
      "shortname": "video-rvfc"
    }
  },
  "cancelWatchAvailability()": {
    "cancelWatchAvailability()": {
      "args": [],
      "for": [
        "RemotePlayback"
      ],
      "shortname": "remote-playback"
    },
    "cancelWatchAvailability(id)": {
      "args": [
        "id"
      ],
      "for": [
        "RemotePlayback"
      ],
      "shortname": "remote-playback"
    }
  },
  "canonicalUUID()": {
    "canonicalUUID(alias)": {
      "args": [
        "alias"
      ],
      "for": [
        "BluetoothUUID"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "cap()": {
    "cap(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "captureEvents()": {
    "captureEvents()": {
      "args": [],
      "for": [
        "Document",
        "Window"
      ],
      "shortname": "html"
    }
  },
  "captureStream()": {
    "captureStream()": {
      "args": [],
      "for": [
        "HTMLCanvasElement",
        "HTMLMediaElement"
      ],
      "shortname": "mediacapture-fromelement"
    },
    "captureStream(frameRequestRate)": {
      "args": [
        "frameRequestRate"
      ],
      "for": [
        "HTMLCanvasElement"
      ],
      "shortname": "mediacapture-fromelement"
    }
  },
  "caretPositionFromPoint()": {
    "caretPositionFromPoint(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "Document"
      ],
      "shortname": "cssom-view"
    },
    "caretPositionFromPoint(x, y, options)": {
      "args": [
        "x",
        "y",
        "options"
      ],
      "for": [
        "Document"
      ],
      "shortname": "cssom-view"
    }
  },
  "cast()": {
    "cast(input, type)": {
      "args": [
        "input",
        "type"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "cast(input, type, options)": {
      "args": [
        "input",
        "type",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "catch()": {
    "catch(onRejected)": {
      "args": [
        "onRejected"
      ],
      "for": [
        "Promise"
      ],
      "shortname": "ecmascript"
    }
  },
  "cbrt()": {
    "cbrt(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "ceil()": {
    "ceil(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "ceil(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "ceil(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "ch()": {
    "ch(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "changePaymentMethod()": {
    "changePaymentMethod()": {
      "args": [],
      "for": [
        "PaymentRequestEvent"
      ],
      "shortname": "payment-handler"
    },
    "changePaymentMethod(methodName)": {
      "args": [
        "methodName"
      ],
      "for": [
        "PaymentRequestEvent"
      ],
      "shortname": "payment-handler"
    },
    "changePaymentMethod(methodName, methodDetails)": {
      "args": [
        "methodName",
        "methodDetails"
      ],
      "for": [
        "PaymentRequestEvent"
      ],
      "shortname": "payment-handler"
    }
  },
  "changeShippingAddress()": {
    "changeShippingAddress()": {
      "args": [],
      "for": [
        "PaymentRequestEvent"
      ],
      "shortname": "payment-handler"
    },
    "changeShippingAddress(shippingAddress)": {
      "args": [
        "shippingAddress"
      ],
      "for": [
        "PaymentRequestEvent"
      ],
      "shortname": "payment-handler"
    }
  },
  "changeShippingOption()": {
    "changeShippingOption()": {
      "args": [],
      "for": [
        "PaymentRequestEvent"
      ],
      "shortname": "payment-handler"
    },
    "changeShippingOption(shippingOption)": {
      "args": [
        "shippingOption"
      ],
      "for": [
        "PaymentRequestEvent"
      ],
      "shortname": "payment-handler"
    }
  },
  "changeType()": {
    "changeType()": {
      "args": [],
      "for": [
        "SourceBuffer"
      ],
      "shortname": "media-source"
    },
    "changeType(type)": {
      "args": [
        "type"
      ],
      "for": [
        "SourceBuffer"
      ],
      "shortname": "media-source"
    }
  },
  "charAt()": {
    "charAt(pos)": {
      "args": [
        "pos"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "charCodeAt()": {
    "charCodeAt(pos)": {
      "args": [
        "pos"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "characterBounds()": {
    "characterBounds()": {
      "args": [],
      "for": [
        "EditContext"
      ],
      "shortname": "edit-context"
    }
  },
  "check()": {
    "check(font)": {
      "args": [
        "font"
      ],
      "for": [
        "FontFaceSet"
      ],
      "shortname": "css-font-loading"
    },
    "check(font, text)": {
      "args": [
        "font",
        "text"
      ],
      "for": [
        "FontFaceSet"
      ],
      "shortname": "css-font-loading"
    }
  },
  "checkValidity()": {
    "checkValidity()": {
      "args": [],
      "for": [
        "ElementInternals",
        "HTMLButtonElement",
        "HTMLFieldSetElement",
        "HTMLFormElement",
        "HTMLInputElement",
        "HTMLObjectElement",
        "HTMLOutputElement",
        "HTMLSelectElement",
        "HTMLTextAreaElement"
      ],
      "shortname": "html"
    }
  },
  "checkVisibility()": {
    "checkVisibility()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "cssom-view"
    },
    "checkVisibility(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Element"
      ],
      "shortname": "cssom-view"
    }
  },
  "claim()": {
    "claim()": {
      "args": [],
      "for": [
        "Clients"
      ],
      "shortname": "service-workers"
    }
  },
  "claimInterface()": {
    "claimInterface(interfaceNumber)": {
      "args": [
        "interfaceNumber"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    }
  },
  "clamp()": {
    "clamp(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "clamp(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "clear()": {
    "clear()": {
      "args": [],
      "for": [
        "DataTransferItemList",
        "Document",
        "FontFaceSet",
        "HandwritingDrawing",
        "HandwritingStroke",
        "IDBObjectStore",
        "MIDIOutput",
        "Map",
        "Set",
        "SharedStorage",
        "Storage",
        "StylePropertyMap",
        "console"
      ],
      "shortname": "console"
    }
  },
  "clearAppBadge()": {
    "clearAppBadge()": {
      "args": [],
      "for": [
        "NavigatorBadge"
      ],
      "shortname": "badging"
    }
  },
  "clearBuffer()": {
    "clearBuffer(buffer)": {
      "args": [
        "buffer"
      ],
      "for": [
        "GPUCommandEncoder"
      ],
      "shortname": "webgpu"
    },
    "clearBuffer(buffer, offset)": {
      "args": [
        "buffer",
        "offset"
      ],
      "for": [
        "GPUCommandEncoder"
      ],
      "shortname": "webgpu"
    },
    "clearBuffer(buffer, offset, size)": {
      "args": [
        "buffer",
        "offset",
        "size"
      ],
      "for": [
        "GPUCommandEncoder"
      ],
      "shortname": "webgpu"
    }
  },
  "clearData()": {
    "clearData(format)": {
      "args": [
        "format"
      ],
      "for": [
        "DataTransfer"
      ],
      "shortname": "html"
    }
  },
  "clearHalt()": {
    "clearHalt(direction, endpointNumber)": {
      "args": [
        "direction",
        "endpointNumber"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    }
  },
  "clearInterval()": {
    "clearInterval(id)": {
      "args": [
        "id"
      ],
      "for": [
        "WindowOrWorkerGlobalScope"
      ],
      "shortname": "html"
    }
  },
  "clearLiveSeekableRange()": {
    "clearLiveSeekableRange()": {
      "args": [],
      "for": [
        "MediaSource"
      ],
      "shortname": "media-source"
    }
  },
  "clearMarks()": {
    "clearMarks()": {
      "args": [],
      "for": [
        "Performance"
      ],
      "shortname": "user-timing"
    },
    "clearMarks(markName)": {
      "args": [
        "markName"
      ],
      "for": [
        "Performance"
      ],
      "shortname": "user-timing"
    }
  },
  "clearMeasures()": {
    "clearMeasures()": {
      "args": [],
      "for": [
        "Performance"
      ],
      "shortname": "user-timing"
    },
    "clearMeasures(measureName)": {
      "args": [
        "measureName"
      ],
      "for": [
        "Performance"
      ],
      "shortname": "user-timing"
    }
  },
  "clearOriginJoinedAdInterestGroups()": {
    "clearOriginJoinedAdInterestGroups(owner)": {
      "args": [
        "owner"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "turtledove"
    },
    "clearOriginJoinedAdInterestGroups(owner, interestGroupsToKeep)": {
      "args": [
        "owner",
        "interestGroupsToKeep"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "turtledove"
    }
  },
  "clearOverride()": {
    "clearOverride()": {
      "args": [],
      "for": [
        "PreferenceObject"
      ],
      "shortname": "web-preferences-api"
    }
  },
  "clearParameters()": {
    "clearParameters()": {
      "args": [],
      "for": [
        "XSLTProcessor"
      ],
      "shortname": "dom"
    }
  },
  "clearRect()": {
    "clearRect(x, y, w, h)": {
      "args": [
        "x",
        "y",
        "w",
        "h"
      ],
      "for": [
        "CanvasRect"
      ],
      "shortname": "html"
    }
  },
  "clearResourceTimings()": {
    "clearResourceTimings()": {
      "args": [],
      "for": [
        "Performance"
      ],
      "shortname": "resource-timing"
    }
  },
  "clearTimeout()": {
    "clearTimeout(id)": {
      "args": [
        "id"
      ],
      "for": [
        "WindowOrWorkerGlobalScope"
      ],
      "shortname": "html"
    }
  },
  "clearWatch()": {
    "clearWatch()": {
      "args": [],
      "for": [
        "Geolocation"
      ],
      "shortname": "geolocation"
    },
    "clearWatch(watchId)": {
      "args": [
        "watchId"
      ],
      "for": [
        "Geolocation"
      ],
      "shortname": "geolocation"
    }
  },
  "click()": {
    "click()": {
      "args": [],
      "for": [
        "HTMLElement"
      ],
      "shortname": "html"
    }
  },
  "clip()": {
    "clip(fillRule)": {
      "args": [
        "fillRule"
      ],
      "for": [
        "CanvasDrawPath"
      ],
      "shortname": "html"
    },
    "clip(path, fillRule)": {
      "args": [
        "path",
        "fillRule"
      ],
      "for": [
        "CanvasDrawPath"
      ],
      "shortname": "html"
    }
  },
  "clone()": {
    "clone()": {
      "args": [],
      "for": [
        "AudioData",
        "BrowserCaptureMediaStreamTrack",
        "GroupEffect",
        "MediaStream",
        "MediaStreamTrack",
        "Request",
        "Response",
        "SequenceEffect",
        "VideoFrame"
      ],
      "shortname": "fetch"
    }
  },
  "cloneContents()": {
    "cloneContents()": {
      "args": [],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "cloneNode()": {
    "cloneNode()": {
      "args": [],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    },
    "cloneNode(deep)": {
      "args": [
        "deep"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "cloneRange()": {
    "cloneRange()": {
      "args": [],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "close()": {
    "close()": {
      "args": [],
      "for": [
        "AudioContext",
        "AudioData",
        "AudioDecoder",
        "AudioEncoder",
        "BroadcastChannel",
        "CloseWatcher",
        "DedicatedWorkerGlobalScope",
        "Document",
        "EventSource",
        "FileSystemSyncAccessHandle",
        "HIDDevice",
        "IDBDatabase",
        "IdentityProvider",
        "ImageBitmap",
        "ImageDecoder",
        "MIDIPort",
        "MediaKeySession",
        "MessagePort",
        "Notification",
        "PresentationConnection",
        "RTCDataChannel",
        "RTCPeerConnection",
        "ReadableByteStreamController",
        "ReadableStreamDefaultController",
        "SerialPort",
        "SharedWorkerGlobalScope",
        "TCPServerSocket",
        "TCPSocket",
        "UDPSocket",
        "USBDevice",
        "VideoDecoder",
        "VideoEncoder",
        "VideoFrame",
        "WebSocket",
        "WebTransport",
        "Window",
        "WritableStream",
        "WritableStreamDefaultWriter"
      ],
      "shortname": "fedcm"
    },
    "close(closeInfo)": {
      "args": [
        "closeInfo"
      ],
      "for": [
        "WebTransport"
      ],
      "shortname": "webtransport"
    },
    "close(code)": {
      "args": [
        "code"
      ],
      "for": [
        "WebSocket"
      ],
      "shortname": "websockets"
    },
    "close(code, reason)": {
      "args": [
        "code",
        "reason"
      ],
      "for": [
        "WebSocket"
      ],
      "shortname": "websockets"
    },
    "close(returnValue)": {
      "args": [
        "returnValue"
      ],
      "for": [
        "HTMLDialogElement"
      ],
      "shortname": "html"
    }
  },
  "closePath()": {
    "closePath()": {
      "args": [],
      "for": [
        "CanvasPath"
      ],
      "shortname": "html"
    }
  },
  "closest()": {
    "closest(selectors)": {
      "args": [
        "selectors"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "clz32()": {
    "clz32(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "cm()": {
    "cm(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "cmp()": {
    "cmp(first, second)": {
      "args": [
        "first",
        "second"
      ],
      "for": [
        "IDBFactory"
      ],
      "shortname": "indexeddb"
    }
  },
  "codePointAt()": {
    "codePointAt(pos)": {
      "args": [
        "pos"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "collapse()": {
    "collapse()": {
      "args": [],
      "for": [
        "Range",
        "Selection"
      ],
      "shortname": "dom"
    },
    "collapse(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    },
    "collapse(node, offset)": {
      "args": [
        "node",
        "offset"
      ],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    },
    "collapse(toStart)": {
      "args": [
        "toStart"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "collapseToEnd()": {
    "collapseToEnd()": {
      "args": [],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    }
  },
  "collapseToStart()": {
    "collapseToStart()": {
      "args": [],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    }
  },
  "commit()": {
    "commit()": {
      "args": [],
      "for": [
        "IDBTransaction"
      ],
      "shortname": "indexeddb"
    }
  },
  "commitStyles()": {
    "commitStyles()": {
      "args": [],
      "for": [
        "Animation"
      ],
      "shortname": "web-animations"
    }
  },
  "compact()": {
    "compact()": {
      "args": [],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld-api"
    },
    "compact(input)": {
      "args": [
        "input"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld-api"
    },
    "compact(input, context)": {
      "args": [
        "input",
        "context"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld-api"
    },
    "compact(input, context, options)": {
      "args": [
        "input",
        "context",
        "options"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld-api"
    }
  },
  "compareBoundaryPoints()": {
    "compareBoundaryPoints(how, sourceRange)": {
      "args": [
        "how",
        "sourceRange"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "compareDocumentPosition()": {
    "compareDocumentPosition(other)": {
      "args": [
        "other"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "compareExchange()": {
    "compareExchange(typedArray, index, expectedValue, replacementValue)": {
      "args": [
        "typedArray",
        "index",
        "expectedValue",
        "replacementValue"
      ],
      "for": [
        "Atomics"
      ],
      "shortname": "ecmascript"
    }
  },
  "comparePoint()": {
    "comparePoint(node, offset)": {
      "args": [
        "node",
        "offset"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "compile()": {
    "compile(bytes)": {
      "args": [
        "bytes"
      ],
      "for": [
        "WebAssembly"
      ],
      "shortname": "wasm-js-api"
    },
    "compile(pattern, flags)": {
      "args": [
        "pattern",
        "flags"
      ],
      "for": [
        "RegExp"
      ],
      "shortname": "ecmascript"
    }
  },
  "compileStreaming()": {
    "compileStreaming(source)": {
      "args": [
        "source"
      ],
      "for": [
        "WebAssembly"
      ],
      "shortname": "wasm-web-api"
    }
  },
  "complete()": {
    "complete()": {
      "args": [],
      "for": [
        "PaymentResponse"
      ],
      "shortname": "payment-request"
    },
    "complete(result)": {
      "args": [
        "result"
      ],
      "for": [
        "PaymentResponse"
      ],
      "shortname": "payment-request"
    },
    "complete(result, details)": {
      "args": [
        "result",
        "details"
      ],
      "for": [
        "PaymentResponse"
      ],
      "shortname": "payment-request"
    }
  },
  "composedPath()": {
    "composedPath()": {
      "args": [],
      "for": [
        "Event"
      ],
      "shortname": "dom"
    }
  },
  "compute()": {
    "compute(graph, inputs, outputs)": {
      "args": [
        "graph",
        "inputs",
        "outputs"
      ],
      "for": [
        "MLContext"
      ],
      "shortname": "webnn"
    }
  },
  "computedStyleMap()": {
    "computedStyleMap()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "css-typed-om"
    }
  },
  "concat()": {
    "concat(...args)": {
      "args": [
        "...args"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    },
    "concat(...items)": {
      "args": [
        "...items"
      ],
      "for": [
        "Array"
      ],
      "shortname": "ecmascript"
    },
    "concat(inputs, axis)": {
      "args": [
        "inputs",
        "axis"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "concat(inputs, axis, options)": {
      "args": [
        "inputs",
        "axis",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "configure()": {
    "configure(config)": {
      "args": [
        "config"
      ],
      "for": [
        "AudioDecoder",
        "AudioEncoder",
        "VideoDecoder",
        "VideoEncoder"
      ],
      "shortname": "webcodecs"
    },
    "configure(configuration)": {
      "args": [
        "configuration"
      ],
      "for": [
        "GPUCanvasContext"
      ],
      "shortname": "webgpu"
    }
  },
  "confirm()": {
    "confirm(message)": {
      "args": [
        "message"
      ],
      "for": [
        "Window"
      ],
      "shortname": "html"
    }
  },
  "connect()": {
    "connect()": {
      "args": [],
      "for": [
        "BluetoothRemoteGATTServer",
        "SmartCardContext"
      ],
      "shortname": "web-bluetooth"
    },
    "connect(destinationNode)": {
      "args": [
        "destinationNode"
      ],
      "for": [
        "AudioNode"
      ],
      "shortname": "webaudio"
    },
    "connect(destinationNode, output)": {
      "args": [
        "destinationNode",
        "output"
      ],
      "for": [
        "AudioNode"
      ],
      "shortname": "webaudio"
    },
    "connect(destinationNode, output, input)": {
      "args": [
        "destinationNode",
        "output",
        "input"
      ],
      "for": [
        "AudioNode"
      ],
      "shortname": "webaudio"
    },
    "connect(destinationParam)": {
      "args": [
        "destinationParam"
      ],
      "for": [
        "AudioNode"
      ],
      "shortname": "webaudio"
    },
    "connect(destinationParam, output)": {
      "args": [
        "destinationParam",
        "output"
      ],
      "for": [
        "AudioNode"
      ],
      "shortname": "webaudio"
    },
    "connect(readerName, accessMode)": {
      "args": [
        "readerName",
        "accessMode"
      ],
      "for": [
        "SmartCardContext"
      ],
      "shortname": "web-smart-card"
    },
    "connect(readerName, accessMode, options)": {
      "args": [
        "readerName",
        "accessMode",
        "options"
      ],
      "for": [
        "SmartCardContext"
      ],
      "shortname": "web-smart-card"
    }
  },
  "constant()": {
    "constant(descriptor, bufferView)": {
      "args": [
        "descriptor",
        "bufferView"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "constant(type, value)": {
      "args": [
        "type",
        "value"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "construct()": {
    "construct(target, argumentsList, newTarget)": {
      "args": [
        "target",
        "argumentsList",
        "newTarget"
      ],
      "for": [
        "Reflect"
      ],
      "shortname": "ecmascript"
    }
  },
  "constructor!overload-1()": {
    "constructor!overload-1()": {
      "args": [],
      "for": [
        "MediaStream",
        "PresentationRequest"
      ],
      "shortname": "mediacapture-streams"
    },
    "constructor!overload-1(stream)": {
      "args": [
        "stream"
      ],
      "for": [
        "MediaStream"
      ],
      "shortname": "mediacapture-streams"
    },
    "constructor!overload-1(urls)": {
      "args": [
        "urls"
      ],
      "for": [
        "PresentationRequest"
      ],
      "shortname": "presentation-api"
    }
  },
  "constructor!overload-2()": {
    "constructor!overload-2()": {
      "args": [],
      "for": [
        "MediaStream"
      ],
      "shortname": "mediacapture-streams"
    },
    "constructor!overload-2(tracks)": {
      "args": [
        "tracks"
      ],
      "for": [
        "MediaStream"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "constructor()": {
    "constructor()": {
      "args": [],
      "for": [
        "AbortController",
        "AbsoluteOrientationSensor",
        "Accelerometer",
        "AmbientLightSensor",
        "Animation",
        "AudioContext",
        "AudioWorkletProcessor",
        "BarcodeDetector",
        "BeforeInstallPromptEvent",
        "Blob",
        "BluetoothDataFilter",
        "BluetoothLEScanFilter",
        "BluetoothManufacturerDataFilter",
        "BluetoothServiceDataFilter",
        "BufferedChangeEvent",
        "CSSMathMax",
        "CSSMathMin",
        "CSSMathProduct",
        "CSSMathSum",
        "CSSStyleSheet",
        "CanMakePaymentEvent",
        "CaptureActionEvent",
        "CaptureController",
        "CapturedMouseEvent",
        "CharacterBoundsUpdateEvent",
        "Comment",
        "DOMException",
        "DOMMatrix",
        "DOMMatrixReadOnly",
        "DOMPoint",
        "DOMPointReadOnly",
        "DOMQuad",
        "DOMRect",
        "DOMRectReadOnly",
        "DeviceChangeEvent",
        "Document",
        "DocumentFragment",
        "DocumentTimeline",
        "EditContext",
        "EventTarget",
        "EyeDropper",
        "FaceDetector",
        "FileReader",
        "FileReaderSync",
        "FormData",
        "FragmentResult",
        "GPUPipelineError",
        "GamepadEvent",
        "GeolocationSensor",
        "GravitySensor",
        "Gyroscope",
        "HIDConnectionEvent",
        "HIDInputReportEvent",
        "HTMLFencedFrameElement",
        "HTMLPortalElement",
        "HandwritingStroke",
        "Headers",
        "Highlight",
        "IdleDetector",
        "InputDeviceCapabilities",
        "JsonLdProcessor",
        "LinearAccelerationSensor",
        "MIDIConnectionEvent",
        "MIDIMessageEvent",
        "Magnetometer",
        "ManagedMediaSource",
        "MediaEncryptedEvent",
        "MediaKeyMessageEvent",
        "MediaMetadata",
        "MediaSource",
        "MediaStream",
        "MediaStreamTrackEvent",
        "NDEFMessage",
        "NDEFReader",
        "NDEFReadingEvent",
        "NDEFRecord",
        "OverconstrainedError",
        "PaymentMethodChangeEvent",
        "PaymentRequest",
        "PaymentRequestEvent",
        "PaymentRequestUpdateEvent",
        "PerformanceMark",
        "PerformanceObserver",
        "PointerEvent",
        "PresentationConnectionAvailableEvent",
        "PresentationConnectionCloseEvent",
        "PresentationRequest",
        "PressureObserver",
        "Profiler",
        "ProximitySensor",
        "PushEvent",
        "PushSubscriptionChangeEvent",
        "RTCDTMFToneChangeEvent",
        "RTCDataChannelEvent",
        "RTCEncodedAudioFrame",
        "RTCEncodedVideoFrame",
        "RTCError",
        "RTCErrorEvent",
        "RTCIceCandidate",
        "RTCIceTransport",
        "RTCIdentityAssertion",
        "RTCPeerConnection",
        "RTCPeerConnectionIceErrorEvent",
        "RTCPeerConnectionIceEvent",
        "RTCSessionDescription",
        "RTCTrackEvent",
        "Range",
        "RdfDataset",
        "RdfGraph",
        "RdfLiteral",
        "RdfTriple",
        "ReadableStream",
        "RelativeOrientationSensor",
        "RemoteDocument",
        "Response",
        "SFrameTransform",
        "Sanitizer",
        "ScrollTimeline",
        "SmartCardError",
        "SpeechGrammarList",
        "SpeechRecognition",
        "SpeechSynthesisUtterance",
        "TCPServerSocket",
        "TCPSocket",
        "TaskController",
        "Text",
        "TextDecoder",
        "TextDecoderStream",
        "TextDetector",
        "TextEncoder",
        "TextEncoderStream",
        "TextFormat",
        "TextFormatUpdateEvent",
        "TextUpdateEvent",
        "Touch",
        "TouchEvent",
        "TransformStream",
        "UDPSocket",
        "URLPattern",
        "URLSearchParams",
        "UncalibratedMagnetometer",
        "VTTRegion",
        "VideoColorSpace",
        "VideoTrackGenerator",
        "ViewTimeline",
        "WebTransportError",
        "WindowControlsOverlayGeometryChangeEvent",
        "WritableStream",
        "XMLHttpRequest",
        "XMLSerializer",
        "XPathEvaluator",
        "XRRay",
        "XRRigidTransform",
        "XSLTProcessor"
      ],
      "shortname": "dom"
    },
    "constructor(...args)": {
      "args": [
        "...args"
      ],
      "for": [
        "CSSMathMax",
        "CSSMathMin",
        "CSSMathProduct",
        "CSSMathSum"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(...initialRanges)": {
      "args": [
        "...initialRanges"
      ],
      "for": [
        "Highlight"
      ],
      "shortname": "css-highlight-api"
    },
    "constructor(alternate, endpointNumber, direction)": {
      "args": [
        "alternate",
        "endpointNumber",
        "direction"
      ],
      "for": [
        "USBEndpoint"
      ],
      "shortname": "webusb"
    },
    "constructor(angle)": {
      "args": [
        "angle"
      ],
      "for": [
        "CSSRotate"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(animatorName)": {
      "args": [
        "animatorName"
      ],
      "for": [
        "WorkletAnimation"
      ],
      "shortname": "css-animation-worklet"
    },
    "constructor(animatorName, effects)": {
      "args": [
        "animatorName",
        "effects"
      ],
      "for": [
        "WorkletAnimation"
      ],
      "shortname": "css-animation-worklet"
    },
    "constructor(animatorName, effects, timeline)": {
      "args": [
        "animatorName",
        "effects",
        "timeline"
      ],
      "for": [
        "WorkletAnimation"
      ],
      "shortname": "css-animation-worklet"
    },
    "constructor(animatorName, effects, timeline, options)": {
      "args": [
        "animatorName",
        "effects",
        "timeline",
        "options"
      ],
      "for": [
        "WorkletAnimation"
      ],
      "shortname": "css-animation-worklet"
    },
    "constructor(arg)": {
      "args": [
        "arg"
      ],
      "for": [
        "CSSMathInvert",
        "CSSMathNegate"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(ax)": {
      "args": [
        "ax"
      ],
      "for": [
        "CSSSkewX"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(ax, ay)": {
      "args": [
        "ax",
        "ay"
      ],
      "for": [
        "CSSSkew"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(ay)": {
      "args": [
        "ay"
      ],
      "for": [
        "CSSSkewY"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(barcodeDetectorOptions)": {
      "args": [
        "barcodeDetectorOptions"
      ],
      "for": [
        "BarcodeDetector"
      ],
      "shortname": "shape-detection-api"
    },
    "constructor(blobParts)": {
      "args": [
        "blobParts"
      ],
      "for": [
        "Blob"
      ],
      "shortname": "fileapi"
    },
    "constructor(blobParts, options)": {
      "args": [
        "blobParts",
        "options"
      ],
      "for": [
        "Blob"
      ],
      "shortname": "fileapi"
    },
    "constructor(body)": {
      "args": [
        "body"
      ],
      "for": [
        "Response"
      ],
      "shortname": "fetch"
    },
    "constructor(body, init)": {
      "args": [
        "body",
        "init"
      ],
      "for": [
        "Response"
      ],
      "shortname": "fetch"
    },
    "constructor(bytes)": {
      "args": [
        "bytes"
      ],
      "for": [
        "Module"
      ],
      "shortname": "wasm-js-api"
    },
    "constructor(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "IntersectionObserver",
        "MutationObserver",
        "PerformanceObserver",
        "PressureObserver",
        "ReportingObserver",
        "ResizeObserver"
      ],
      "shortname": "dom"
    },
    "constructor(callback, options)": {
      "args": [
        "callback",
        "options"
      ],
      "for": [
        "IntersectionObserver",
        "ReportingObserver"
      ],
      "shortname": "intersection-observer"
    },
    "constructor(candidateInitDict)": {
      "args": [
        "candidateInitDict"
      ],
      "for": [
        "RTCIceCandidate"
      ],
      "shortname": "webrtc"
    },
    "constructor(children)": {
      "args": [
        "children"
      ],
      "for": [
        "GroupEffect",
        "SequenceEffect"
      ],
      "shortname": "web-animations"
    },
    "constructor(children, timing)": {
      "args": [
        "children",
        "timing"
      ],
      "for": [
        "GroupEffect",
        "SequenceEffect"
      ],
      "shortname": "web-animations"
    },
    "constructor(colorSpace, channels)": {
      "args": [
        "colorSpace",
        "channels"
      ],
      "for": [
        "CSSColor"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(colorSpace, channels, alpha)": {
      "args": [
        "colorSpace",
        "channels",
        "alpha"
      ],
      "for": [
        "CSSColor"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(config)": {
      "args": [
        "config"
      ],
      "for": [
        "Sanitizer"
      ],
      "shortname": "sanitizer-api"
    },
    "constructor(configuration)": {
      "args": [
        "configuration"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "constructor(configuration, interfaceNumber)": {
      "args": [
        "configuration",
        "interfaceNumber"
      ],
      "for": [
        "USBInterface"
      ],
      "shortname": "webusb"
    },
    "constructor(constraint)": {
      "args": [
        "constraint"
      ],
      "for": [
        "OverconstrainedError"
      ],
      "shortname": "mediacapture-streams"
    },
    "constructor(constraint, message)": {
      "args": [
        "constraint",
        "message"
      ],
      "for": [
        "OverconstrainedError"
      ],
      "shortname": "mediacapture-streams"
    },
    "constructor(context)": {
      "args": [
        "context"
      ],
      "for": [
        "AnalyserNode",
        "AudioBufferSourceNode",
        "BiquadFilterNode",
        "ChannelMergerNode",
        "ChannelSplitterNode",
        "ConstantSourceNode",
        "ConvolverNode",
        "DelayNode",
        "DynamicsCompressorNode",
        "GainNode",
        "MLGraphBuilder",
        "MediaStreamAudioDestinationNode",
        "OscillatorNode",
        "PannerNode",
        "PeriodicWave",
        "StereoPannerNode",
        "WaveShaperNode"
      ],
      "shortname": "webaudio"
    },
    "constructor(context, name)": {
      "args": [
        "context",
        "name"
      ],
      "for": [
        "AudioWorkletNode"
      ],
      "shortname": "webaudio"
    },
    "constructor(context, name, options)": {
      "args": [
        "context",
        "name",
        "options"
      ],
      "for": [
        "AudioWorkletNode"
      ],
      "shortname": "webaudio"
    },
    "constructor(context, options)": {
      "args": [
        "context",
        "options"
      ],
      "for": [
        "AnalyserNode",
        "AudioBufferSourceNode",
        "BiquadFilterNode",
        "ChannelMergerNode",
        "ChannelSplitterNode",
        "ConstantSourceNode",
        "ConvolverNode",
        "DelayNode",
        "DynamicsCompressorNode",
        "GainNode",
        "IIRFilterNode",
        "MediaElementAudioSourceNode",
        "MediaStreamAudioDestinationNode",
        "MediaStreamAudioSourceNode",
        "MediaStreamTrackAudioSourceNode",
        "OscillatorNode",
        "PannerNode",
        "PeriodicWave",
        "StereoPannerNode",
        "WaveShaperNode"
      ],
      "shortname": "webaudio"
    },
    "constructor(contextOptions)": {
      "args": [
        "contextOptions"
      ],
      "for": [
        "AudioContext",
        "OfflineAudioContext"
      ],
      "shortname": "webaudio"
    },
    "constructor(data)": {
      "args": [
        "data"
      ],
      "for": [
        "Comment",
        "FederatedCredential",
        "PasswordCredential",
        "Text"
      ],
      "shortname": "dom"
    },
    "constructor(data, init)": {
      "args": [
        "data",
        "init"
      ],
      "for": [
        "VideoFrame"
      ],
      "shortname": "webcodecs"
    },
    "constructor(descriptionInitDict)": {
      "args": [
        "descriptionInitDict"
      ],
      "for": [
        "RTCSessionDescription"
      ],
      "shortname": "webrtc"
    },
    "constructor(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "Global",
        "Memory",
        "Table"
      ],
      "shortname": "wasm-js-api"
    },
    "constructor(descriptor, v)": {
      "args": [
        "descriptor",
        "v"
      ],
      "for": [
        "Global"
      ],
      "shortname": "wasm-js-api"
    },
    "constructor(descriptor, value)": {
      "args": [
        "descriptor",
        "value"
      ],
      "for": [
        "Table"
      ],
      "shortname": "wasm-js-api"
    },
    "constructor(device, configurationValue)": {
      "args": [
        "device",
        "configurationValue"
      ],
      "for": [
        "USBConfiguration"
      ],
      "shortname": "webusb"
    },
    "constructor(deviceInitDict)": {
      "args": [
        "deviceInitDict"
      ],
      "for": [
        "InputDeviceCapabilities"
      ],
      "shortname": "input-device-capabilities"
    },
    "constructor(deviceInterface, alternateSetting)": {
      "args": [
        "deviceInterface",
        "alternateSetting"
      ],
      "for": [
        "USBAlternateInterface"
      ],
      "shortname": "webusb"
    },
    "constructor(effect)": {
      "args": [
        "effect"
      ],
      "for": [
        "Animation"
      ],
      "shortname": "web-animations"
    },
    "constructor(effect, timeline)": {
      "args": [
        "effect",
        "timeline"
      ],
      "for": [
        "Animation"
      ],
      "shortname": "web-animations"
    },
    "constructor(faceDetectorOptions)": {
      "args": [
        "faceDetectorOptions"
      ],
      "for": [
        "FaceDetector"
      ],
      "shortname": "shape-detection-api"
    },
    "constructor(family, source)": {
      "args": [
        "family",
        "source"
      ],
      "for": [
        "FontFace"
      ],
      "shortname": "css-font-loading"
    },
    "constructor(family, source, descriptors)": {
      "args": [
        "family",
        "source",
        "descriptors"
      ],
      "for": [
        "FontFace"
      ],
      "shortname": "css-font-loading"
    },
    "constructor(fileBits, fileName)": {
      "args": [
        "fileBits",
        "fileName"
      ],
      "for": [
        "File"
      ],
      "shortname": "fileapi"
    },
    "constructor(fileBits, fileName, options)": {
      "args": [
        "fileBits",
        "fileName",
        "options"
      ],
      "for": [
        "File"
      ],
      "shortname": "fileapi"
    },
    "constructor(form)": {
      "args": [
        "form"
      ],
      "for": [
        "FormData",
        "PasswordCredential"
      ],
      "shortname": "credential-management"
    },
    "constructor(form, submitter)": {
      "args": [
        "form",
        "submitter"
      ],
      "for": [
        "FormData"
      ],
      "shortname": "xhr"
    },
    "constructor(format)": {
      "args": [
        "format"
      ],
      "for": [
        "CompressionStream",
        "DecompressionStream"
      ],
      "shortname": "compression"
    },
    "constructor(h, s, l)": {
      "args": [
        "h",
        "s",
        "l"
      ],
      "for": [
        "CSSHSL"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(h, s, l, alpha)": {
      "args": [
        "h",
        "s",
        "l",
        "alpha"
      ],
      "for": [
        "CSSHSL"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(h, w, b)": {
      "args": [
        "h",
        "w",
        "b"
      ],
      "for": [
        "CSSHWB"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(h, w, b, alpha)": {
      "args": [
        "h",
        "w",
        "b",
        "alpha"
      ],
      "for": [
        "CSSHWB"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(idp, name)": {
      "args": [
        "idp",
        "name"
      ],
      "for": [
        "RTCIdentityAssertion"
      ],
      "shortname": "webrtc-identity"
    },
    "constructor(image)": {
      "args": [
        "image"
      ],
      "for": [
        "VideoFrame"
      ],
      "shortname": "webcodecs"
    },
    "constructor(image, init)": {
      "args": [
        "image",
        "init"
      ],
      "for": [
        "VideoFrame"
      ],
      "shortname": "webcodecs"
    },
    "constructor(init)": {
      "args": [
        "init"
      ],
      "for": [
        "AudioData",
        "AudioDecoder",
        "AudioEncoder",
        "BluetoothDataFilter",
        "BluetoothLEScanFilter",
        "BluetoothManufacturerDataFilter",
        "BluetoothServiceDataFilter",
        "ByteLengthQueuingStrategy",
        "CaptureActionEvent",
        "CountQueuingStrategy",
        "DOMMatrix",
        "DOMMatrixReadOnly",
        "EncodedAudioChunk",
        "EncodedVideoChunk",
        "Headers",
        "ImageDecoder",
        "MediaMetadata",
        "MediaStreamTrackProcessor",
        "RTCError",
        "StaticRange",
        "TaskController",
        "URLSearchParams",
        "VideoColorSpace",
        "VideoDecoder",
        "VideoEncoder"
      ],
      "shortname": "dom"
    },
    "constructor(init, message)": {
      "args": [
        "init",
        "message"
      ],
      "for": [
        "RTCError"
      ],
      "shortname": "webrtc"
    },
    "constructor(initialFaces)": {
      "args": [
        "initialFaces"
      ],
      "for": [
        "FontFaceSet"
      ],
      "shortname": "css-font-loading"
    },
    "constructor(input)": {
      "args": [
        "input"
      ],
      "for": [
        "Request",
        "URLPattern"
      ],
      "shortname": "fetch"
    },
    "constructor(input, baseURL)": {
      "args": [
        "input",
        "baseURL"
      ],
      "for": [
        "URLPattern"
      ],
      "shortname": "urlpattern"
    },
    "constructor(input, baseURL, options)": {
      "args": [
        "input",
        "baseURL",
        "options"
      ],
      "for": [
        "URLPattern"
      ],
      "shortname": "urlpattern"
    },
    "constructor(input, init)": {
      "args": [
        "input",
        "init"
      ],
      "for": [
        "Request"
      ],
      "shortname": "fetch"
    },
    "constructor(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "URLPattern"
      ],
      "shortname": "urlpattern"
    },
    "constructor(intersectionObserverEntryInit)": {
      "args": [
        "intersectionObserverEntryInit"
      ],
      "for": [
        "IntersectionObserverEntry"
      ],
      "shortname": "intersection-observer"
    },
    "constructor(items)": {
      "args": [
        "items"
      ],
      "for": [
        "ClipboardItem"
      ],
      "shortname": "clipboard-apis"
    },
    "constructor(items, options)": {
      "args": [
        "items",
        "options"
      ],
      "for": [
        "ClipboardItem"
      ],
      "shortname": "clipboard-apis"
    },
    "constructor(l, a, b)": {
      "args": [
        "l",
        "a",
        "b"
      ],
      "for": [
        "CSSLab",
        "CSSOKLab"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(l, a, b, alpha)": {
      "args": [
        "l",
        "a",
        "b",
        "alpha"
      ],
      "for": [
        "CSSLab",
        "CSSOKLab"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(l, c, h)": {
      "args": [
        "l",
        "c",
        "h"
      ],
      "for": [
        "CSSLCH",
        "CSSOKLCH"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(l, c, h, alpha)": {
      "args": [
        "l",
        "c",
        "h",
        "alpha"
      ],
      "for": [
        "CSSLCH",
        "CSSOKLCH"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(label)": {
      "args": [
        "label"
      ],
      "for": [
        "TextDecoder",
        "TextDecoderStream"
      ],
      "shortname": "encoding"
    },
    "constructor(label, options)": {
      "args": [
        "label",
        "options"
      ],
      "for": [
        "TextDecoder",
        "TextDecoderStream"
      ],
      "shortname": "encoding"
    },
    "constructor(length)": {
      "args": [
        "length"
      ],
      "for": [
        "CSSPerspective"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(localAddress)": {
      "args": [
        "localAddress"
      ],
      "for": [
        "TCPServerSocket"
      ],
      "shortname": "direct-sockets"
    },
    "constructor(localAddress, options)": {
      "args": [
        "localAddress",
        "options"
      ],
      "for": [
        "TCPServerSocket"
      ],
      "shortname": "direct-sockets"
    },
    "constructor(lower, value, upper)": {
      "args": [
        "lower",
        "value",
        "upper"
      ],
      "for": [
        "CSSMathClamp"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(markName)": {
      "args": [
        "markName"
      ],
      "for": [
        "PerformanceMark"
      ],
      "shortname": "user-timing"
    },
    "constructor(markName, markOptions)": {
      "args": [
        "markName",
        "markOptions"
      ],
      "for": [
        "PerformanceMark"
      ],
      "shortname": "user-timing"
    },
    "constructor(matrix)": {
      "args": [
        "matrix"
      ],
      "for": [
        "CSSMatrixComponent"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(matrix, options)": {
      "args": [
        "matrix",
        "options"
      ],
      "for": [
        "CSSMatrixComponent"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(members)": {
      "args": [
        "members"
      ],
      "for": [
        "CSSUnparsedValue"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(message)": {
      "args": [
        "message"
      ],
      "for": [
        "DOMException",
        "GPUInternalError",
        "GPUOutOfMemoryError",
        "GPUPipelineError",
        "GPUValidationError",
        "WebTransportError"
      ],
      "shortname": "webidl"
    },
    "constructor(message, name)": {
      "args": [
        "message",
        "name"
      ],
      "for": [
        "DOMException"
      ],
      "shortname": "webidl"
    },
    "constructor(message, options)": {
      "args": [
        "message",
        "options"
      ],
      "for": [
        "GPUPipelineError",
        "WebTransportError"
      ],
      "shortname": "webgpu"
    },
    "constructor(messageInit)": {
      "args": [
        "messageInit"
      ],
      "for": [
        "NDEFMessage"
      ],
      "shortname": "web-nfc"
    },
    "constructor(methodData, details)": {
      "args": [
        "methodData",
        "details"
      ],
      "for": [
        "PaymentRequest"
      ],
      "shortname": "payment-request"
    },
    "constructor(methodData, details, options)": {
      "args": [
        "methodData",
        "details",
        "options"
      ],
      "for": [
        "PaymentRequest"
      ],
      "shortname": "payment-request"
    },
    "constructor(module)": {
      "args": [
        "module"
      ],
      "for": [
        "Instance"
      ],
      "shortname": "wasm-js-api"
    },
    "constructor(module, importObject)": {
      "args": [
        "module",
        "importObject"
      ],
      "for": [
        "Instance"
      ],
      "shortname": "wasm-js-api"
    },
    "constructor(name)": {
      "args": [
        "name"
      ],
      "for": [
        "CSSParserDeclaration"
      ],
      "shortname": "css-parser-api"
    },
    "constructor(name, args)": {
      "args": [
        "name",
        "args"
      ],
      "for": [
        "CSSParserFunction"
      ],
      "shortname": "css-parser-api"
    },
    "constructor(name, body)": {
      "args": [
        "name",
        "body"
      ],
      "for": [
        "CSSParserBlock",
        "CSSParserDeclaration"
      ],
      "shortname": "css-parser-api"
    },
    "constructor(name, prelude)": {
      "args": [
        "name",
        "prelude"
      ],
      "for": [
        "CSSParserAtRule"
      ],
      "shortname": "css-parser-api"
    },
    "constructor(name, prelude, body)": {
      "args": [
        "name",
        "prelude",
        "body"
      ],
      "for": [
        "CSSParserAtRule"
      ],
      "shortname": "css-parser-api"
    },
    "constructor(numberOfChannels, length, sampleRate)": {
      "args": [
        "numberOfChannels",
        "length",
        "sampleRate"
      ],
      "for": [
        "OfflineAudioContext"
      ],
      "shortname": "webaudio"
    },
    "constructor(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Accelerometer",
        "AudioBuffer",
        "CSSStyleSheet",
        "CharacterBoundsUpdateEvent",
        "DocumentTimeline",
        "EditContext",
        "FragmentResult",
        "GeolocationSensor",
        "GravitySensor",
        "LinearAccelerationSensor",
        "Profiler",
        "SFrameTransform",
        "ScrollTimeline",
        "SmartCardError",
        "TextFormat",
        "TextFormatUpdateEvent",
        "TextUpdateEvent",
        "UDPSocket",
        "ViewTimeline"
      ],
      "shortname": "direct-sockets"
    },
    "constructor(options, message)": {
      "args": [
        "options",
        "message"
      ],
      "for": [
        "SmartCardError"
      ],
      "shortname": "web-smart-card"
    },
    "constructor(origin)": {
      "args": [
        "origin"
      ],
      "for": [
        "XRRay"
      ],
      "shortname": "webxr-hit-test"
    },
    "constructor(origin, direction)": {
      "args": [
        "origin",
        "direction"
      ],
      "for": [
        "XRRay"
      ],
      "shortname": "webxr-hit-test"
    },
    "constructor(originalFrame)": {
      "args": [
        "originalFrame"
      ],
      "for": [
        "RTCEncodedAudioFrame",
        "RTCEncodedVideoFrame"
      ],
      "shortname": "webrtc-encoded-transform"
    },
    "constructor(originalFrame, options)": {
      "args": [
        "originalFrame",
        "options"
      ],
      "for": [
        "RTCEncodedAudioFrame",
        "RTCEncodedVideoFrame"
      ],
      "shortname": "webrtc-encoded-transform"
    },
    "constructor(p1)": {
      "args": [
        "p1"
      ],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    },
    "constructor(p1, p2)": {
      "args": [
        "p1",
        "p2"
      ],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    },
    "constructor(p1, p2, p3)": {
      "args": [
        "p1",
        "p2",
        "p3"
      ],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    },
    "constructor(p1, p2, p3, p4)": {
      "args": [
        "p1",
        "p2",
        "p3",
        "p4"
      ],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    },
    "constructor(packets)": {
      "args": [
        "packets"
      ],
      "for": [
        "USBIsochronousInTransferResult",
        "USBIsochronousOutTransferResult"
      ],
      "shortname": "webusb"
    },
    "constructor(packets, data)": {
      "args": [
        "packets",
        "data"
      ],
      "for": [
        "USBIsochronousInTransferResult"
      ],
      "shortname": "webusb"
    },
    "constructor(position)": {
      "args": [
        "position"
      ],
      "for": [
        "XRRigidTransform"
      ],
      "shortname": "webxr"
    },
    "constructor(position, orientation)": {
      "args": [
        "position",
        "orientation"
      ],
      "for": [
        "XRRigidTransform"
      ],
      "shortname": "webxr"
    },
    "constructor(prelude)": {
      "args": [
        "prelude"
      ],
      "for": [
        "CSSParserQualifiedRule"
      ],
      "shortname": "css-parser-api"
    },
    "constructor(prelude, body)": {
      "args": [
        "prelude",
        "body"
      ],
      "for": [
        "CSSParserQualifiedRule"
      ],
      "shortname": "css-parser-api"
    },
    "constructor(r, g, b)": {
      "args": [
        "r",
        "g",
        "b"
      ],
      "for": [
        "CSSRGB"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(r, g, b, alpha)": {
      "args": [
        "r",
        "g",
        "b",
        "alpha"
      ],
      "for": [
        "CSSRGB"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(recordInit)": {
      "args": [
        "recordInit"
      ],
      "for": [
        "NDEFRecord"
      ],
      "shortname": "web-nfc"
    },
    "constructor(remoteAddress, remotePort)": {
      "args": [
        "remoteAddress",
        "remotePort"
      ],
      "for": [
        "TCPSocket"
      ],
      "shortname": "direct-sockets"
    },
    "constructor(remoteAddress, remotePort, options)": {
      "args": [
        "remoteAddress",
        "remotePort",
        "options"
      ],
      "for": [
        "TCPSocket"
      ],
      "shortname": "direct-sockets"
    },
    "constructor(sensorOptions)": {
      "args": [
        "sensorOptions"
      ],
      "for": [
        "AbsoluteOrientationSensor",
        "AmbientLightSensor",
        "Gyroscope",
        "Magnetometer",
        "ProximitySensor",
        "RelativeOrientationSensor",
        "UncalibratedMagnetometer"
      ],
      "shortname": "ambient-light"
    },
    "constructor(session)": {
      "args": [
        "session"
      ],
      "for": [
        "XRMediaBinding"
      ],
      "shortname": "webxrlayers"
    },
    "constructor(session, context)": {
      "args": [
        "session",
        "context"
      ],
      "for": [
        "XRWebGLBinding",
        "XRWebGLLayer"
      ],
      "shortname": "webxr"
    },
    "constructor(session, context, layerInit)": {
      "args": [
        "session",
        "context",
        "layerInit"
      ],
      "for": [
        "XRWebGLLayer"
      ],
      "shortname": "webxr"
    },
    "constructor(source)": {
      "args": [
        "source"
      ],
      "for": [
        "KeyframeEffect"
      ],
      "shortname": "web-animations"
    },
    "constructor(startTime, endTime, text)": {
      "args": [
        "startTime",
        "endTime",
        "text"
      ],
      "for": [
        "VTTCue"
      ],
      "shortname": "webvtt"
    },
    "constructor(startTime, endTime, value)": {
      "args": [
        "startTime",
        "endTime",
        "value"
      ],
      "for": [
        "DataCue"
      ],
      "shortname": "datacue"
    },
    "constructor(startTime, endTime, value, type)": {
      "args": [
        "startTime",
        "endTime",
        "value",
        "type"
      ],
      "for": [
        "DataCue"
      ],
      "shortname": "datacue"
    },
    "constructor(status)": {
      "args": [
        "status"
      ],
      "for": [
        "USBInTransferResult",
        "USBIsochronousInTransferPacket",
        "USBIsochronousOutTransferPacket",
        "USBOutTransferResult"
      ],
      "shortname": "webusb"
    },
    "constructor(status, bytesWritten)": {
      "args": [
        "status",
        "bytesWritten"
      ],
      "for": [
        "USBIsochronousOutTransferPacket",
        "USBOutTransferResult"
      ],
      "shortname": "webusb"
    },
    "constructor(status, data)": {
      "args": [
        "status",
        "data"
      ],
      "for": [
        "USBInTransferResult",
        "USBIsochronousInTransferPacket"
      ],
      "shortname": "webusb"
    },
    "constructor(stream)": {
      "args": [
        "stream"
      ],
      "for": [
        "MediaRecorder",
        "ReadableStreamBYOBReader",
        "ReadableStreamDefaultReader",
        "WritableStreamDefaultWriter"
      ],
      "shortname": "streams"
    },
    "constructor(stream, options)": {
      "args": [
        "stream",
        "options"
      ],
      "for": [
        "MediaRecorder"
      ],
      "shortname": "mediastream-recording"
    },
    "constructor(target, keyframes)": {
      "args": [
        "target",
        "keyframes"
      ],
      "for": [
        "KeyframeEffect"
      ],
      "shortname": "web-animations"
    },
    "constructor(target, keyframes, options)": {
      "args": [
        "target",
        "keyframes",
        "options"
      ],
      "for": [
        "KeyframeEffect"
      ],
      "shortname": "web-animations"
    },
    "constructor(target, observedBox)": {
      "args": [
        "target",
        "observedBox"
      ],
      "for": [
        "ResizeObservation"
      ],
      "shortname": "resize-observer"
    },
    "constructor(text)": {
      "args": [
        "text"
      ],
      "for": [
        "SpeechSynthesisUtterance"
      ],
      "shortname": "speech-api"
    },
    "constructor(title)": {
      "args": [
        "title"
      ],
      "for": [
        "Notification"
      ],
      "shortname": "notifications"
    },
    "constructor(title, options)": {
      "args": [
        "title",
        "options"
      ],
      "for": [
        "Notification"
      ],
      "shortname": "notifications"
    },
    "constructor(touchInitDict)": {
      "args": [
        "touchInitDict"
      ],
      "for": [
        "Touch"
      ],
      "shortname": "touch-events"
    },
    "constructor(transform)": {
      "args": [
        "transform"
      ],
      "for": [
        "XRRay"
      ],
      "shortname": "webxr-hit-test"
    },
    "constructor(transformer)": {
      "args": [
        "transformer"
      ],
      "for": [
        "TransformStream"
      ],
      "shortname": "streams"
    },
    "constructor(transformer, writableStrategy)": {
      "args": [
        "transformer",
        "writableStrategy"
      ],
      "for": [
        "TransformStream"
      ],
      "shortname": "streams"
    },
    "constructor(transformer, writableStrategy, readableStrategy)": {
      "args": [
        "transformer",
        "writableStrategy",
        "readableStrategy"
      ],
      "for": [
        "TransformStream"
      ],
      "shortname": "streams"
    },
    "constructor(transforms)": {
      "args": [
        "transforms"
      ],
      "for": [
        "CSSTransformValue"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(type)": {
      "args": [
        "type"
      ],
      "for": [
        "AnimationEvent",
        "AnimationPlaybackEvent",
        "AudioRenderCapacityEvent",
        "BeforeInstallPromptEvent",
        "BufferedChangeEvent",
        "CanMakePaymentEvent",
        "CapturedMouseEvent",
        "CharacterBoundsUpdateEvent",
        "ClipboardEvent",
        "CloseEvent",
        "CompositionEvent",
        "ContentVisibilityAutoStateChangeEvent",
        "ContentVisibilityAutoStateChangedEvent",
        "CookieChangeEvent",
        "CustomEvent",
        "DeviceChangeEvent",
        "DeviceMotionEvent",
        "DeviceOrientationEvent",
        "Event",
        "ExtendableCookieChangeEvent",
        "ExtendableEvent",
        "ExtendableMessageEvent",
        "FocusEvent",
        "FontFaceSetLoadEvent",
        "IDBVersionChangeEvent",
        "InputEvent",
        "KeyFrameRequestEvent",
        "KeyboardEvent",
        "MIDIConnectionEvent",
        "MIDIMessageEvent",
        "MediaEncryptedEvent",
        "MediaQueryListEvent",
        "MouseEvent",
        "NavigationEvent",
        "PaymentMethodChangeEvent",
        "PaymentRequestEvent",
        "PaymentRequestUpdateEvent",
        "PointerEvent",
        "PortalActivateEvent",
        "ProgressEvent",
        "PushEvent",
        "PushSubscriptionChangeEvent",
        "RTCDTMFToneChangeEvent",
        "RTCPeerConnectionIceEvent",
        "SecurityPolicyViolationEvent",
        "SnapEvent",
        "TextFormatUpdateEvent",
        "TextUpdateEvent",
        "TouchEvent",
        "TransitionEvent",
        "UIEvent",
        "ValueEvent",
        "WheelEvent"
      ],
      "shortname": "dom"
    },
    "constructor(type, animationEventInitDict)": {
      "args": [
        "type",
        "animationEventInitDict"
      ],
      "for": [
        "AnimationEvent"
      ],
      "shortname": "css-animations"
    },
    "constructor(type, errorEventInitDict)": {
      "args": [
        "type",
        "errorEventInitDict"
      ],
      "for": [
        "SensorErrorEvent"
      ],
      "shortname": "generic-sensor"
    },
    "constructor(type, eventInitDict)": {
      "args": [
        "type",
        "eventInitDict"
      ],
      "for": [
        "AnimationPlaybackEvent",
        "AudioProcessingEvent",
        "AudioRenderCapacityEvent",
        "BeforeInstallPromptEvent",
        "BlobEvent",
        "BufferedChangeEvent",
        "CapturedMouseEvent",
        "ClipboardEvent",
        "CloseEvent",
        "CompositionEvent",
        "ContentVisibilityAutoStateChangeEvent",
        "ContentVisibilityAutoStateChangedEvent",
        "CookieChangeEvent",
        "CustomEvent",
        "DeviceChangeEvent",
        "DeviceMotionEvent",
        "DeviceOrientationEvent",
        "DocumentPictureInPictureEvent",
        "Event",
        "ExtendableCookieChangeEvent",
        "ExtendableEvent",
        "ExtendableMessageEvent",
        "FetchEvent",
        "FocusEvent",
        "FontFaceSetLoadEvent",
        "GamepadEvent",
        "HIDConnectionEvent",
        "HIDInputReportEvent",
        "IDBVersionChangeEvent",
        "InputEvent",
        "KeyboardEvent",
        "MIDIConnectionEvent",
        "MIDIMessageEvent",
        "MediaEncryptedEvent",
        "MediaKeyMessageEvent",
        "MediaQueryListEvent",
        "MediaStreamTrackEvent",
        "MouseEvent",
        "NavigationEvent",
        "NotificationEvent",
        "OfflineAudioCompletionEvent",
        "PaymentMethodChangeEvent",
        "PaymentRequestEvent",
        "PaymentRequestUpdateEvent",
        "PictureInPictureEvent",
        "PointerEvent",
        "PortalActivateEvent",
        "PresentationConnectionAvailableEvent",
        "PresentationConnectionCloseEvent",
        "ProgressEvent",
        "PushEvent",
        "PushSubscriptionChangeEvent",
        "RTCDTMFToneChangeEvent",
        "RTCDataChannelEvent",
        "RTCErrorEvent",
        "RTCPeerConnectionIceErrorEvent",
        "RTCPeerConnectionIceEvent",
        "RTCTrackEvent",
        "SFrameTransformErrorEvent",
        "SecurityPolicyViolationEvent",
        "SnapEvent",
        "SpeechRecognitionErrorEvent",
        "SpeechRecognitionEvent",
        "SpeechSynthesisErrorEvent",
        "SpeechSynthesisEvent",
        "TouchEvent",
        "UIEvent",
        "USBConnectionEvent",
        "WheelEvent",
        "WindowControlsOverlayGeometryChangeEvent",
        "XRInputSourceEvent",
        "XRInputSourcesChangeEvent",
        "XRLayerEvent",
        "XRReferenceSpaceEvent",
        "XRSessionEvent"
      ],
      "shortname": "dom"
    },
    "constructor(type, gpuUncapturedErrorEventInitDict)": {
      "args": [
        "type",
        "gpuUncapturedErrorEventInitDict"
      ],
      "for": [
        "GPUUncapturedErrorEvent"
      ],
      "shortname": "webgpu"
    },
    "constructor(type, init)": {
      "args": [
        "type",
        "init"
      ],
      "for": [
        "BackgroundFetchEvent",
        "BackgroundFetchUpdateUIEvent",
        "BluetoothAdvertisingEvent",
        "ContentIndexEvent",
        "PeriodicSyncEvent",
        "SyncEvent"
      ],
      "shortname": "web-bluetooth"
    },
    "constructor(type, initDict)": {
      "args": [
        "type",
        "initDict"
      ],
      "for": [
        "ValueEvent"
      ],
      "shortname": "web-bluetooth"
    },
    "constructor(type, options)": {
      "args": [
        "type",
        "options"
      ],
      "for": [
        "CharacterBoundsUpdateEvent",
        "TextFormatUpdateEvent",
        "TextUpdateEvent"
      ],
      "shortname": "edit-context"
    },
    "constructor(type, priorityChangeEventInitDict)": {
      "args": [
        "type",
        "priorityChangeEventInitDict"
      ],
      "for": [
        "TaskPriorityChangeEvent"
      ],
      "shortname": "scheduling-apis"
    },
    "constructor(type, readingEventInitDict)": {
      "args": [
        "type",
        "readingEventInitDict"
      ],
      "for": [
        "NDEFReadingEvent"
      ],
      "shortname": "web-nfc"
    },
    "constructor(type, rid)": {
      "args": [
        "type",
        "rid"
      ],
      "for": [
        "KeyFrameRequestEvent"
      ],
      "shortname": "webrtc-encoded-transform"
    },
    "constructor(type, transitionEventInitDict)": {
      "args": [
        "type",
        "transitionEventInitDict"
      ],
      "for": [
        "TransitionEvent"
      ],
      "shortname": "css-transitions"
    },
    "constructor(underlyingSink)": {
      "args": [
        "underlyingSink"
      ],
      "for": [
        "WritableStream"
      ],
      "shortname": "streams"
    },
    "constructor(underlyingSink, strategy)": {
      "args": [
        "underlyingSink",
        "strategy"
      ],
      "for": [
        "WritableStream"
      ],
      "shortname": "streams"
    },
    "constructor(underlyingSource)": {
      "args": [
        "underlyingSource"
      ],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    },
    "constructor(underlyingSource, strategy)": {
      "args": [
        "underlyingSource",
        "strategy"
      ],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    },
    "constructor(url)": {
      "args": [
        "url"
      ],
      "for": [
        "FencedFrameConfig",
        "PresentationRequest",
        "URL",
        "WebSocket",
        "WebTransport"
      ],
      "shortname": "url"
    },
    "constructor(url, base)": {
      "args": [
        "url",
        "base"
      ],
      "for": [
        "URL"
      ],
      "shortname": "url"
    },
    "constructor(url, options)": {
      "args": [
        "url",
        "options"
      ],
      "for": [
        "WebTransport"
      ],
      "shortname": "webtransport"
    },
    "constructor(url, protocols)": {
      "args": [
        "url",
        "protocols"
      ],
      "for": [
        "WebSocket"
      ],
      "shortname": "websockets"
    },
    "constructor(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSSKeywordValue"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(value, unit)": {
      "args": [
        "value",
        "unit"
      ],
      "for": [
        "CSSUnitValue"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(variable)": {
      "args": [
        "variable"
      ],
      "for": [
        "CSSVariableReferenceValue"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(variable, fallback)": {
      "args": [
        "variable",
        "fallback"
      ],
      "for": [
        "CSSVariableReferenceValue"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(videoTrack)": {
      "args": [
        "videoTrack"
      ],
      "for": [
        "ImageCapture"
      ],
      "shortname": "image-capture"
    },
    "constructor(worker)": {
      "args": [
        "worker"
      ],
      "for": [
        "RTCRtpScriptTransform"
      ],
      "shortname": "webrtc-encoded-transform"
    },
    "constructor(worker, options)": {
      "args": [
        "worker",
        "options"
      ],
      "for": [
        "RTCRtpScriptTransform"
      ],
      "shortname": "webrtc-encoded-transform"
    },
    "constructor(worker, options, transfer)": {
      "args": [
        "worker",
        "options",
        "transfer"
      ],
      "for": [
        "RTCRtpScriptTransform"
      ],
      "shortname": "webrtc-encoded-transform"
    },
    "constructor(x)": {
      "args": [
        "x"
      ],
      "for": [
        "DOMPoint",
        "DOMPointReadOnly",
        "DOMRect",
        "DOMRectReadOnly"
      ],
      "shortname": "geometry"
    },
    "constructor(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "CSSScale",
        "CSSTranslate",
        "DOMPoint",
        "DOMPointReadOnly",
        "DOMRect",
        "DOMRectReadOnly"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(x, y, width)": {
      "args": [
        "x",
        "y",
        "width"
      ],
      "for": [
        "DOMRect",
        "DOMRectReadOnly"
      ],
      "shortname": "geometry"
    },
    "constructor(x, y, width, height)": {
      "args": [
        "x",
        "y",
        "width",
        "height"
      ],
      "for": [
        "DOMRect",
        "DOMRectReadOnly"
      ],
      "shortname": "geometry"
    },
    "constructor(x, y, z)": {
      "args": [
        "x",
        "y",
        "z"
      ],
      "for": [
        "CSSScale",
        "CSSTranslate",
        "DOMPoint",
        "DOMPointReadOnly"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(x, y, z, angle)": {
      "args": [
        "x",
        "y",
        "z",
        "angle"
      ],
      "for": [
        "CSSRotate"
      ],
      "shortname": "css-typed-om"
    },
    "constructor(x, y, z, w)": {
      "args": [
        "x",
        "y",
        "z",
        "w"
      ],
      "for": [
        "DOMPoint",
        "DOMPointReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "consume()": {
    "consume(purchaseToken)": {
      "args": [
        "purchaseToken"
      ],
      "for": [
        "DigitalGoodsService"
      ],
      "shortname": "digital-goods"
    }
  },
  "contains()": {
    "contains(other)": {
      "args": [
        "other"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    },
    "contains(string)": {
      "args": [
        "string"
      ],
      "for": [
        "DOMStringList"
      ],
      "shortname": "html"
    },
    "contains(token)": {
      "args": [
        "token"
      ],
      "for": [
        "DOMTokenList"
      ],
      "shortname": "dom"
    }
  },
  "containsNode()": {
    "containsNode()": {
      "args": [],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    },
    "containsNode(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    },
    "containsNode(node, allowPartialContainment)": {
      "args": [
        "node",
        "allowPartialContainment"
      ],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    }
  },
  "continue()": {
    "continue()": {
      "args": [],
      "for": [
        "IDBCursor"
      ],
      "shortname": "indexeddb"
    },
    "continue(key)": {
      "args": [
        "key"
      ],
      "for": [
        "IDBCursor"
      ],
      "shortname": "indexeddb"
    }
  },
  "continuePrimaryKey()": {
    "continuePrimaryKey(key, primaryKey)": {
      "args": [
        "key",
        "primaryKey"
      ],
      "for": [
        "IDBCursor"
      ],
      "shortname": "indexeddb"
    }
  },
  "contributeToHistogram()": {
    "contributeToHistogram(contribution)": {
      "args": [
        "contribution"
      ],
      "for": [
        "PrivateAggregation",
        "RealTimeReporting"
      ],
      "shortname": "private-aggregation-api"
    }
  },
  "contributeToHistogramOnEvent()": {
    "contributeToHistogramOnEvent(event, contribution)": {
      "args": [
        "event",
        "contribution"
      ],
      "for": [
        "PrivateAggregation"
      ],
      "shortname": "private-aggregation-api"
    }
  },
  "control()": {
    "control()": {
      "args": [],
      "for": [
        "SmartCardConnection"
      ],
      "shortname": "web-smart-card"
    },
    "control(controlCode, data)": {
      "args": [
        "controlCode",
        "data"
      ],
      "for": [
        "SmartCardConnection"
      ],
      "shortname": "web-smart-card"
    }
  },
  "controlTransferIn()": {
    "controlTransferIn(setup, length)": {
      "args": [
        "setup",
        "length"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    }
  },
  "controlTransferOut()": {
    "controlTransferOut(setup)": {
      "args": [
        "setup"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    },
    "controlTransferOut(setup, data)": {
      "args": [
        "setup",
        "data"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    }
  },
  "conv2d()": {
    "conv2d(input, filter)": {
      "args": [
        "input",
        "filter"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "conv2d(input, filter, options)": {
      "args": [
        "input",
        "filter",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "convTranspose2d()": {
    "convTranspose2d(input, filter)": {
      "args": [
        "input",
        "filter"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "convTranspose2d(input, filter, options)": {
      "args": [
        "input",
        "filter",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "convertPointFromNode()": {
    "convertPointFromNode(point, from)": {
      "args": [
        "point",
        "from"
      ],
      "for": [
        "GeometryUtils"
      ],
      "shortname": "cssom-view"
    },
    "convertPointFromNode(point, from, options)": {
      "args": [
        "point",
        "from",
        "options"
      ],
      "for": [
        "GeometryUtils"
      ],
      "shortname": "cssom-view"
    }
  },
  "convertQuadFromNode()": {
    "convertQuadFromNode(quad, from)": {
      "args": [
        "quad",
        "from"
      ],
      "for": [
        "GeometryUtils"
      ],
      "shortname": "cssom-view"
    },
    "convertQuadFromNode(quad, from, options)": {
      "args": [
        "quad",
        "from",
        "options"
      ],
      "for": [
        "GeometryUtils"
      ],
      "shortname": "cssom-view"
    }
  },
  "convertRectFromNode()": {
    "convertRectFromNode(rect, from)": {
      "args": [
        "rect",
        "from"
      ],
      "for": [
        "GeometryUtils"
      ],
      "shortname": "cssom-view"
    },
    "convertRectFromNode(rect, from, options)": {
      "args": [
        "rect",
        "from",
        "options"
      ],
      "for": [
        "GeometryUtils"
      ],
      "shortname": "cssom-view"
    }
  },
  "convertToBlob()": {
    "convertToBlob(options)": {
      "args": [
        "options"
      ],
      "for": [
        "OffscreenCanvas"
      ],
      "shortname": "html"
    }
  },
  "copyBufferToBuffer()": {
    "copyBufferToBuffer(source, sourceOffset, destination, destinationOffset, size)": {
      "args": [
        "source",
        "sourceOffset",
        "destination",
        "destinationOffset",
        "size"
      ],
      "for": [
        "GPUCommandEncoder"
      ],
      "shortname": "webgpu"
    }
  },
  "copyBufferToTexture()": {
    "copyBufferToTexture(source, destination, copySize)": {
      "args": [
        "source",
        "destination",
        "copySize"
      ],
      "for": [
        "GPUCommandEncoder"
      ],
      "shortname": "webgpu"
    }
  },
  "copyExternalImageToTexture()": {
    "copyExternalImageToTexture(source, destination, copySize)": {
      "args": [
        "source",
        "destination",
        "copySize"
      ],
      "for": [
        "GPUQueue"
      ],
      "shortname": "webgpu"
    }
  },
  "copyFromChannel()": {
    "copyFromChannel(destination, channelNumber)": {
      "args": [
        "destination",
        "channelNumber"
      ],
      "for": [
        "AudioBuffer"
      ],
      "shortname": "webaudio"
    },
    "copyFromChannel(destination, channelNumber, bufferOffset)": {
      "args": [
        "destination",
        "channelNumber",
        "bufferOffset"
      ],
      "for": [
        "AudioBuffer"
      ],
      "shortname": "webaudio"
    }
  },
  "copyTextureToBuffer()": {
    "copyTextureToBuffer(source, destination, copySize)": {
      "args": [
        "source",
        "destination",
        "copySize"
      ],
      "for": [
        "GPUCommandEncoder"
      ],
      "shortname": "webgpu"
    }
  },
  "copyTextureToTexture()": {
    "copyTextureToTexture(source, destination, copySize)": {
      "args": [
        "source",
        "destination",
        "copySize"
      ],
      "for": [
        "GPUCommandEncoder"
      ],
      "shortname": "webgpu"
    }
  },
  "copyTo()": {
    "copyTo(destination)": {
      "args": [
        "destination"
      ],
      "for": [
        "EncodedAudioChunk",
        "EncodedVideoChunk",
        "VideoFrame"
      ],
      "shortname": "webcodecs"
    },
    "copyTo(destination, options)": {
      "args": [
        "destination",
        "options"
      ],
      "for": [
        "AudioData",
        "VideoFrame"
      ],
      "shortname": "webcodecs"
    }
  },
  "copyToChannel()": {
    "copyToChannel(source, channelNumber)": {
      "args": [
        "source",
        "channelNumber"
      ],
      "for": [
        "AudioBuffer"
      ],
      "shortname": "webaudio"
    },
    "copyToChannel(source, channelNumber, bufferOffset)": {
      "args": [
        "source",
        "channelNumber",
        "bufferOffset"
      ],
      "for": [
        "AudioBuffer"
      ],
      "shortname": "webaudio"
    }
  },
  "copyWithin()": {
    "copyWithin(target, start, end)": {
      "args": [
        "target",
        "start",
        "end"
      ],
      "for": [
        "%TypedArray%",
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "cos()": {
    "cos(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "cos(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "cos(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "cosh()": {
    "cosh(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "count()": {
    "count()": {
      "args": [],
      "for": [
        "IDBIndex",
        "IDBObjectStore",
        "console"
      ],
      "shortname": "console"
    },
    "count(label)": {
      "args": [
        "label"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "count(query)": {
      "args": [
        "query"
      ],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    }
  },
  "countReset()": {
    "countReset()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "countReset(label)": {
      "args": [
        "label"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "cqb()": {
    "cqb(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "cqh()": {
    "cqh(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "cqi()": {
    "cqi(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "cqmax()": {
    "cqmax(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "cqmin()": {
    "cqmin(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "cqw()": {
    "cqw(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "create()": {
    "create()": {
      "args": [],
      "for": [
        "CredentialsContainer"
      ],
      "shortname": "credential-management"
    },
    "create(O, Properties)": {
      "args": [
        "O",
        "Properties"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    },
    "create(options)": {
      "args": [
        "options"
      ],
      "for": [
        "CredentialsContainer"
      ],
      "shortname": "credential-management"
    }
  },
  "createAnalyser()": {
    "createAnalyser()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createAnchor()": {
    "createAnchor()": {
      "args": [],
      "for": [
        "XRHitTestResult"
      ],
      "shortname": "anchors"
    },
    "createAnchor(pose, space)": {
      "args": [
        "pose",
        "space"
      ],
      "for": [
        "XRFrame"
      ],
      "shortname": "anchors"
    }
  },
  "createAnswer!overload-1()": {
    "createAnswer!overload-1()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "createAnswer!overload-1(successCallback, failureCallback)": {
      "args": [
        "successCallback",
        "failureCallback"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "createAnswer()": {
    "createAnswer()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "createAnswer(options)": {
      "args": [
        "options"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "createAttribute()": {
    "createAttribute(localName)": {
      "args": [
        "localName"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createAttributeNS()": {
    "createAttributeNS(namespace, qualifiedName)": {
      "args": [
        "namespace",
        "qualifiedName"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createAuctionNonce()": {
    "createAuctionNonce()": {
      "args": [],
      "for": [
        "Navigator"
      ],
      "shortname": "turtledove"
    }
  },
  "createBidirectionalStream()": {
    "createBidirectionalStream()": {
      "args": [],
      "for": [
        "WebTransport"
      ],
      "shortname": "webtransport"
    },
    "createBidirectionalStream(options)": {
      "args": [
        "options"
      ],
      "for": [
        "WebTransport"
      ],
      "shortname": "webtransport"
    }
  },
  "createBindGroup()": {
    "createBindGroup(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "GPUDevice"
      ],
      "shortname": "webgpu"
    }
  },
  "createBindGroupLayout()": {
    "createBindGroupLayout(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "GPUDevice"
      ],
      "shortname": "webgpu"
    }
  },
  "createBiquadFilter()": {
    "createBiquadFilter()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createBuffer()": {
    "createBuffer(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "GPUDevice"
      ],
      "shortname": "webgpu"
    },
    "createBuffer(numberOfChannels, length, sampleRate)": {
      "args": [
        "numberOfChannels",
        "length",
        "sampleRate"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createBufferSource()": {
    "createBufferSource()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createCDATASection()": {
    "createCDATASection(data)": {
      "args": [
        "data"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createCaption()": {
    "createCaption()": {
      "args": [],
      "for": [
        "HTMLTableElement"
      ],
      "shortname": "html"
    }
  },
  "createChannelMerger()": {
    "createChannelMerger()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    },
    "createChannelMerger(numberOfInputs)": {
      "args": [
        "numberOfInputs"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createChannelSplitter()": {
    "createChannelSplitter()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    },
    "createChannelSplitter(numberOfOutputs)": {
      "args": [
        "numberOfOutputs"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createCommandEncoder()": {
    "createCommandEncoder()": {
      "args": [],
      "for": [
        "GPUDevice"
      ],
      "shortname": "webgpu"
    },
    "createCommandEncoder(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "GPUDevice"
      ],
      "shortname": "webgpu"
    }
  },
  "createComment()": {
    "createComment(data)": {
      "args": [
        "data"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createComputePipeline()": {
    "createComputePipeline(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "GPUDevice"
      ],
      "shortname": "webgpu"
    }
  },
  "createComputePipelineAsync()": {
    "createComputePipelineAsync(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "GPUDevice"
      ],
      "shortname": "webgpu"
    }
  },
  "createConicGradient()": {
    "createConicGradient(startAngle, x, y)": {
      "args": [
        "startAngle",
        "x",
        "y"
      ],
      "for": [
        "CanvasFillStrokeStyles"
      ],
      "shortname": "html"
    }
  },
  "createConstantSource()": {
    "createConstantSource()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createContext()": {
    "createContext()": {
      "args": [],
      "for": [
        "ML"
      ],
      "shortname": "webnn"
    },
    "createContext(gpuDevice)": {
      "args": [
        "gpuDevice"
      ],
      "for": [
        "ML"
      ],
      "shortname": "webnn"
    },
    "createContext(options)": {
      "args": [
        "options"
      ],
      "for": [
        "ML"
      ],
      "shortname": "webnn"
    }
  },
  "createContextualFragment()": {
    "createContextualFragment(string)": {
      "args": [
        "string"
      ],
      "for": [
        "Range"
      ],
      "shortname": "html"
    }
  },
  "createConvolver()": {
    "createConvolver()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createCubeLayer()": {
    "createCubeLayer()": {
      "args": [],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxrlayers"
    },
    "createCubeLayer(init)": {
      "args": [
        "init"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxrlayers"
    }
  },
  "createCylinderLayer()": {
    "createCylinderLayer()": {
      "args": [],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxrlayers"
    },
    "createCylinderLayer(init)": {
      "args": [
        "init"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxrlayers"
    },
    "createCylinderLayer(video)": {
      "args": [
        "video"
      ],
      "for": [
        "XRMediaBinding"
      ],
      "shortname": "webxrlayers"
    },
    "createCylinderLayer(video, init)": {
      "args": [
        "video",
        "init"
      ],
      "for": [
        "XRMediaBinding"
      ],
      "shortname": "webxrlayers"
    }
  },
  "createDataChannel()": {
    "createDataChannel()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "createDataChannel(label)": {
      "args": [
        "label"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "createDataChannel(label, dataChannelDict)": {
      "args": [
        "label",
        "dataChannelDict"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "createDelay()": {
    "createDelay()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    },
    "createDelay(maxDelayTime)": {
      "args": [
        "maxDelayTime"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createDocument()": {
    "createDocument(namespace, qualifiedName)": {
      "args": [
        "namespace",
        "qualifiedName"
      ],
      "for": [
        "DOMImplementation"
      ],
      "shortname": "dom"
    },
    "createDocument(namespace, qualifiedName, doctype)": {
      "args": [
        "namespace",
        "qualifiedName",
        "doctype"
      ],
      "for": [
        "DOMImplementation"
      ],
      "shortname": "dom"
    }
  },
  "createDocumentFragment()": {
    "createDocumentFragment()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createDocumentType()": {
    "createDocumentType(qualifiedName, publicId, systemId)": {
      "args": [
        "qualifiedName",
        "publicId",
        "systemId"
      ],
      "for": [
        "DOMImplementation"
      ],
      "shortname": "dom"
    }
  },
  "createDynamicsCompressor()": {
    "createDynamicsCompressor()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createElement()": {
    "createElement(localName)": {
      "args": [
        "localName"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    },
    "createElement(localName, options)": {
      "args": [
        "localName",
        "options"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createElementNS()": {
    "createElementNS(namespace, qualifiedName)": {
      "args": [
        "namespace",
        "qualifiedName"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    },
    "createElementNS(namespace, qualifiedName, options)": {
      "args": [
        "namespace",
        "qualifiedName",
        "options"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createEntityReference()": {
    "createEntityReference()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createEquirectLayer()": {
    "createEquirectLayer()": {
      "args": [],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxrlayers"
    },
    "createEquirectLayer(init)": {
      "args": [
        "init"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxrlayers"
    },
    "createEquirectLayer(video)": {
      "args": [
        "video"
      ],
      "for": [
        "XRMediaBinding"
      ],
      "shortname": "webxrlayers"
    },
    "createEquirectLayer(video, init)": {
      "args": [
        "video",
        "init"
      ],
      "for": [
        "XRMediaBinding"
      ],
      "shortname": "webxrlayers"
    }
  },
  "createEvent()": {
    "createEvent(interface)": {
      "args": [
        "interface"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createExpression()": {
    "createExpression(expression)": {
      "args": [
        "expression"
      ],
      "for": [
        "XPathEvaluatorBase"
      ],
      "shortname": "dom"
    },
    "createExpression(expression, resolver)": {
      "args": [
        "expression",
        "resolver"
      ],
      "for": [
        "XPathEvaluatorBase"
      ],
      "shortname": "dom"
    }
  },
  "createGain()": {
    "createGain()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createHTML()": {
    "createHTML(input)": {
      "args": [
        "input"
      ],
      "for": [
        "TrustedTypePolicy"
      ],
      "shortname": "trusted-types"
    },
    "createHTML(input, ...arguments)": {
      "args": [
        "input",
        "...arguments"
      ],
      "for": [
        "TrustedTypePolicy"
      ],
      "shortname": "trusted-types"
    }
  },
  "createHTMLDocument()": {
    "createHTMLDocument()": {
      "args": [],
      "for": [
        "DOMImplementation"
      ],
      "shortname": "dom"
    },
    "createHTMLDocument(title)": {
      "args": [
        "title"
      ],
      "for": [
        "DOMImplementation"
      ],
      "shortname": "dom"
    }
  },
  "createHandwritingRecognizer()": {
    "createHandwritingRecognizer(constraint)": {
      "args": [
        "constraint"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "handwriting-recognition"
    }
  },
  "createIIRFilter()": {
    "createIIRFilter(feedforward, feedback)": {
      "args": [
        "feedforward",
        "feedback"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createImageBitmap()": {
    "createImageBitmap(image, options)": {
      "args": [
        "image",
        "options"
      ],
      "for": [
        "WindowOrWorkerGlobalScope"
      ],
      "shortname": "html"
    }
  },
  "createImageData()": {
    "createImageData(imagedata)": {
      "args": [
        "imagedata"
      ],
      "for": [
        "CanvasImageData"
      ],
      "shortname": "html"
    },
    "createImageData(sw, sh, settings)": {
      "args": [
        "sw",
        "sh",
        "settings"
      ],
      "for": [
        "CanvasImageData"
      ],
      "shortname": "html"
    }
  },
  "createIndex()": {
    "createIndex(name, keyPath)": {
      "args": [
        "name",
        "keyPath"
      ],
      "for": [
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    },
    "createIndex(name, keyPath, options)": {
      "args": [
        "name",
        "keyPath",
        "options"
      ],
      "for": [
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    }
  },
  "createLinearGradient()": {
    "createLinearGradient(x0, y0, x1, y1)": {
      "args": [
        "x0",
        "y0",
        "x1",
        "y1"
      ],
      "for": [
        "CanvasFillStrokeStyles"
      ],
      "shortname": "html"
    }
  },
  "createMediaElementSource()": {
    "createMediaElementSource(mediaElement)": {
      "args": [
        "mediaElement"
      ],
      "for": [
        "AudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createMediaKeys()": {
    "createMediaKeys()": {
      "args": [],
      "for": [
        "MediaKeySystemAccess"
      ],
      "shortname": "encrypted-media"
    }
  },
  "createMediaStreamDestination()": {
    "createMediaStreamDestination()": {
      "args": [],
      "for": [
        "AudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createMediaStreamSource()": {
    "createMediaStreamSource(mediaStream)": {
      "args": [
        "mediaStream"
      ],
      "for": [
        "AudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createMediaStreamTrackSource()": {
    "createMediaStreamTrackSource(mediaStreamTrack)": {
      "args": [
        "mediaStreamTrack"
      ],
      "for": [
        "AudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createNSResolver()": {
    "createNSResolver(nodeResolver)": {
      "args": [
        "nodeResolver"
      ],
      "for": [
        "XPathEvaluatorBase"
      ],
      "shortname": "dom"
    }
  },
  "createNodeIterator()": {
    "createNodeIterator(root)": {
      "args": [
        "root"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    },
    "createNodeIterator(root, whatToShow)": {
      "args": [
        "root",
        "whatToShow"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    },
    "createNodeIterator(root, whatToShow, filter)": {
      "args": [
        "root",
        "whatToShow",
        "filter"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createObjectStore()": {
    "createObjectStore(name)": {
      "args": [
        "name"
      ],
      "for": [
        "IDBDatabase"
      ],
      "shortname": "indexeddb"
    },
    "createObjectStore(name, options)": {
      "args": [
        "name",
        "options"
      ],
      "for": [
        "IDBDatabase"
      ],
      "shortname": "indexeddb"
    }
  },
  "createObjectURL()": {
    "createObjectURL(obj)": {
      "args": [
        "obj"
      ],
      "for": [
        "StorageAccessHandle",
        "URL"
      ],
      "shortname": "saa-non-cookie-storage"
    }
  },
  "createOffer!overload-1()": {
    "createOffer!overload-1()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "createOffer!overload-1(successCallback, failureCallback)": {
      "args": [
        "successCallback",
        "failureCallback"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "createOffer!overload-1(successCallback, failureCallback, options)": {
      "args": [
        "successCallback",
        "failureCallback",
        "options"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "createOffer()": {
    "createOffer()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "createOffer(options)": {
      "args": [
        "options"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "createOscillator()": {
    "createOscillator()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createPanner()": {
    "createPanner()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createPattern()": {
    "createPattern(image, repetition)": {
      "args": [
        "image",
        "repetition"
      ],
      "for": [
        "CanvasFillStrokeStyles"
      ],
      "shortname": "html"
    }
  },
  "createPeriodicWave()": {
    "createPeriodicWave(real, imag)": {
      "args": [
        "real",
        "imag"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    },
    "createPeriodicWave(real, imag, constraints)": {
      "args": [
        "real",
        "imag",
        "constraints"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createPipelineLayout()": {
    "createPipelineLayout(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "GPUDevice"
      ],
      "shortname": "webgpu"
    }
  },
  "createPolicy()": {
    "createPolicy(policyName)": {
      "args": [
        "policyName"
      ],
      "for": [
        "TrustedTypePolicyFactory"
      ],
      "shortname": "trusted-types"
    },
    "createPolicy(policyName, policyOptions)": {
      "args": [
        "policyName",
        "policyOptions"
      ],
      "for": [
        "TrustedTypePolicyFactory"
      ],
      "shortname": "trusted-types"
    }
  },
  "createProcessingInstruction()": {
    "createProcessingInstruction(target, data)": {
      "args": [
        "target",
        "data"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createProjectionLayer()": {
    "createProjectionLayer()": {
      "args": [],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxrlayers"
    },
    "createProjectionLayer(init)": {
      "args": [
        "init"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxrlayers"
    }
  },
  "createQuadLayer()": {
    "createQuadLayer()": {
      "args": [],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxrlayers"
    },
    "createQuadLayer(init)": {
      "args": [
        "init"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxrlayers"
    },
    "createQuadLayer(video)": {
      "args": [
        "video"
      ],
      "for": [
        "XRMediaBinding"
      ],
      "shortname": "webxrlayers"
    },
    "createQuadLayer(video, init)": {
      "args": [
        "video",
        "init"
      ],
      "for": [
        "XRMediaBinding"
      ],
      "shortname": "webxrlayers"
    }
  },
  "createQuerySet()": {
    "createQuerySet(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "GPUDevice"
      ],
      "shortname": "webgpu"
    }
  },
  "createRadialGradient()": {
    "createRadialGradient(x0, y0, r0, x1, y1, r1)": {
      "args": [
        "x0",
        "y0",
        "r0",
        "x1",
        "y1",
        "r1"
      ],
      "for": [
        "CanvasFillStrokeStyles"
      ],
      "shortname": "html"
    }
  },
  "createRange()": {
    "createRange()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createReader()": {
    "createReader()": {
      "args": [],
      "for": [
        "FileSystemDirectoryEntry"
      ],
      "shortname": "entries-api"
    }
  },
  "createRenderBundleEncoder()": {
    "createRenderBundleEncoder(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "GPUDevice"
      ],
      "shortname": "webgpu"
    }
  },
  "createRenderPipeline()": {
    "createRenderPipeline(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "GPUDevice"
      ],
      "shortname": "webgpu"
    }
  },
  "createRenderPipelineAsync()": {
    "createRenderPipelineAsync(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "GPUDevice"
      ],
      "shortname": "webgpu"
    }
  },
  "createSampler()": {
    "createSampler()": {
      "args": [],
      "for": [
        "GPUDevice"
      ],
      "shortname": "webgpu"
    },
    "createSampler(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "GPUDevice"
      ],
      "shortname": "webgpu"
    }
  },
  "createScript()": {
    "createScript(input)": {
      "args": [
        "input"
      ],
      "for": [
        "TrustedTypePolicy"
      ],
      "shortname": "trusted-types"
    },
    "createScript(input, ...arguments)": {
      "args": [
        "input",
        "...arguments"
      ],
      "for": [
        "TrustedTypePolicy"
      ],
      "shortname": "trusted-types"
    }
  },
  "createScriptProcessor()": {
    "createScriptProcessor()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    },
    "createScriptProcessor(bufferSize)": {
      "args": [
        "bufferSize"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    },
    "createScriptProcessor(bufferSize, numberOfInputChannels)": {
      "args": [
        "bufferSize",
        "numberOfInputChannels"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    },
    "createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels)": {
      "args": [
        "bufferSize",
        "numberOfInputChannels",
        "numberOfOutputChannels"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createScriptURL()": {
    "createScriptURL(input)": {
      "args": [
        "input"
      ],
      "for": [
        "TrustedTypePolicy"
      ],
      "shortname": "trusted-types"
    },
    "createScriptURL(input, ...arguments)": {
      "args": [
        "input",
        "...arguments"
      ],
      "for": [
        "TrustedTypePolicy"
      ],
      "shortname": "trusted-types"
    }
  },
  "createSendGroup()": {
    "createSendGroup()": {
      "args": [],
      "for": [
        "WebTransport"
      ],
      "shortname": "webtransport"
    }
  },
  "createSession()": {
    "createSession()": {
      "args": [],
      "for": [
        "MediaKeys"
      ],
      "shortname": "encrypted-media"
    },
    "createSession(sessionType)": {
      "args": [
        "sessionType"
      ],
      "for": [
        "MediaKeys"
      ],
      "shortname": "encrypted-media"
    }
  },
  "createShaderModule()": {
    "createShaderModule(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "GPUDevice"
      ],
      "shortname": "webgpu"
    }
  },
  "createStereoPanner()": {
    "createStereoPanner()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createSyncAccessHandle()": {
    "createSyncAccessHandle()": {
      "args": [],
      "for": [
        "FileSystemFileHandle"
      ],
      "shortname": "fs"
    }
  },
  "createTBody()": {
    "createTBody()": {
      "args": [],
      "for": [
        "HTMLTableElement"
      ],
      "shortname": "html"
    }
  },
  "createTFoot()": {
    "createTFoot()": {
      "args": [],
      "for": [
        "HTMLTableElement"
      ],
      "shortname": "html"
    }
  },
  "createTHead()": {
    "createTHead()": {
      "args": [],
      "for": [
        "HTMLTableElement"
      ],
      "shortname": "html"
    }
  },
  "createTextNode()": {
    "createTextNode(data)": {
      "args": [
        "data"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createTexture()": {
    "createTexture(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "GPUDevice"
      ],
      "shortname": "webgpu"
    }
  },
  "createTreeWalker()": {
    "createTreeWalker(root)": {
      "args": [
        "root"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    },
    "createTreeWalker(root, whatToShow)": {
      "args": [
        "root",
        "whatToShow"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    },
    "createTreeWalker(root, whatToShow, filter)": {
      "args": [
        "root",
        "whatToShow",
        "filter"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "createUnidirectionalStream()": {
    "createUnidirectionalStream()": {
      "args": [],
      "for": [
        "WebTransport"
      ],
      "shortname": "webtransport"
    },
    "createUnidirectionalStream(options)": {
      "args": [
        "options"
      ],
      "for": [
        "WebTransport"
      ],
      "shortname": "webtransport"
    }
  },
  "createView()": {
    "createView()": {
      "args": [],
      "for": [
        "GPUTexture"
      ],
      "shortname": "webgpu"
    },
    "createView(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "GPUTexture"
      ],
      "shortname": "webgpu"
    }
  },
  "createWaveShaper()": {
    "createWaveShaper()": {
      "args": [],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "createWorklet()": {
    "createWorklet(moduleURL)": {
      "args": [
        "moduleURL"
      ],
      "for": [
        "SharedStorage"
      ],
      "shortname": "shared-storage"
    },
    "createWorklet(moduleURL, options)": {
      "args": [
        "moduleURL",
        "options"
      ],
      "for": [
        "SharedStorage"
      ],
      "shortname": "shared-storage"
    }
  },
  "createWritable()": {
    "createWritable()": {
      "args": [],
      "for": [
        "FileSystemFileHandle"
      ],
      "shortname": "fs"
    },
    "createWritable(options)": {
      "args": [
        "options"
      ],
      "for": [
        "FileSystemFileHandle"
      ],
      "shortname": "fs"
    }
  },
  "cropTo()": {
    "cropTo()": {
      "args": [],
      "for": [
        "BrowserCaptureMediaStreamTrack"
      ],
      "shortname": "mediacapture-region"
    },
    "cropTo(cropTarget)": {
      "args": [
        "cropTarget"
      ],
      "for": [
        "BrowserCaptureMediaStreamTrack"
      ],
      "shortname": "mediacapture-region"
    }
  },
  "customSections()": {
    "customSections(moduleObject, sectionName)": {
      "args": [
        "moduleObject",
        "sectionName"
      ],
      "for": [
        "Module"
      ],
      "shortname": "wasm-js-api"
    }
  },
  "dataType()": {
    "dataType()": {
      "args": [],
      "for": [
        "MLOperand"
      ],
      "shortname": "webnn"
    }
  },
  "databases()": {
    "databases()": {
      "args": [],
      "for": [
        "IDBFactory"
      ],
      "shortname": "indexeddb"
    }
  },
  "debug()": {
    "debug()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "debug(...data)": {
      "args": [
        "...data"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "decode()": {
    "decode()": {
      "args": [],
      "for": [
        "HTMLImageElement",
        "ImageDecoder",
        "TextDecoder"
      ],
      "shortname": "encoding"
    },
    "decode(chunk)": {
      "args": [
        "chunk"
      ],
      "for": [
        "AudioDecoder",
        "VideoDecoder"
      ],
      "shortname": "webcodecs"
    },
    "decode(input)": {
      "args": [
        "input"
      ],
      "for": [
        "TextDecoder"
      ],
      "shortname": "encoding"
    },
    "decode(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "TextDecoder"
      ],
      "shortname": "encoding"
    },
    "decode(options)": {
      "args": [
        "options"
      ],
      "for": [
        "ImageDecoder"
      ],
      "shortname": "webcodecs"
    }
  },
  "decodeAudioData()": {
    "decodeAudioData(audioData)": {
      "args": [
        "audioData"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    },
    "decodeAudioData(audioData, successCallback)": {
      "args": [
        "audioData",
        "successCallback"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    },
    "decodeAudioData(audioData, successCallback, errorCallback)": {
      "args": [
        "audioData",
        "successCallback",
        "errorCallback"
      ],
      "for": [
        "BaseAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "decodeURI()": {
    "decodeURI(encodedURI)": {
      "args": [
        "encodedURI"
      ],
      "for": [
        "globalThis"
      ],
      "shortname": "ecmascript"
    }
  },
  "decodeURIComponent()": {
    "decodeURIComponent(encodedURIComponent)": {
      "args": [
        "encodedURIComponent"
      ],
      "for": [
        "globalThis"
      ],
      "shortname": "ecmascript"
    }
  },
  "decodingInfo()": {
    "decodingInfo(configuration)": {
      "args": [
        "configuration"
      ],
      "for": [
        "MediaCapabilities"
      ],
      "shortname": "media-capabilities"
    }
  },
  "decrypt()": {
    "decrypt()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "decrypt(algorithm, key, data)": {
      "args": [
        "algorithm",
        "key",
        "data"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "define()": {
    "define(name, constructor, options)": {
      "args": [
        "name",
        "constructor",
        "options"
      ],
      "for": [
        "CustomElementRegistry"
      ],
      "shortname": "html"
    }
  },
  "defineProperties()": {
    "defineProperties(O, Properties)": {
      "args": [
        "O",
        "Properties"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    }
  },
  "defineProperty()": {
    "defineProperty(O, P, Attributes)": {
      "args": [
        "O",
        "P",
        "Attributes"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    },
    "defineProperty(target, propertyKey, attributes)": {
      "args": [
        "target",
        "propertyKey",
        "attributes"
      ],
      "for": [
        "Reflect"
      ],
      "shortname": "ecmascript"
    }
  },
  "deg()": {
    "deg(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "delete()": {
    "delete()": {
      "args": [],
      "for": [
        "IDBCursor",
        "NamedFlowMap",
        "XRAnchor"
      ],
      "shortname": "anchors"
    },
    "delete(cacheName)": {
      "args": [
        "cacheName"
      ],
      "for": [
        "CacheStorage"
      ],
      "shortname": "service-workers"
    },
    "delete(font)": {
      "args": [
        "font"
      ],
      "for": [
        "FontFaceSet"
      ],
      "shortname": "css-font-loading"
    },
    "delete(id)": {
      "args": [
        "id"
      ],
      "for": [
        "ContentIndex"
      ],
      "shortname": "content-index"
    },
    "delete(key)": {
      "args": [
        "key"
      ],
      "for": [
        "Map",
        "SharedStorage",
        "WeakMap"
      ],
      "shortname": "ecmascript"
    },
    "delete(name)": {
      "args": [
        "name"
      ],
      "for": [
        "CookieStore",
        "FormData",
        "Headers",
        "StorageBucketManager",
        "URLSearchParams"
      ],
      "shortname": "fetch"
    },
    "delete(name, value)": {
      "args": [
        "name",
        "value"
      ],
      "for": [
        "URLSearchParams"
      ],
      "shortname": "url"
    },
    "delete(options)": {
      "args": [
        "options"
      ],
      "for": [
        "CookieStore"
      ],
      "shortname": "cookie-store"
    },
    "delete(property)": {
      "args": [
        "property"
      ],
      "for": [
        "StylePropertyMap"
      ],
      "shortname": "css-typed-om"
    },
    "delete(query)": {
      "args": [
        "query"
      ],
      "for": [
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    },
    "delete(request)": {
      "args": [
        "request"
      ],
      "for": [
        "Cache"
      ],
      "shortname": "service-workers"
    },
    "delete(request, options)": {
      "args": [
        "request",
        "options"
      ],
      "for": [
        "Cache"
      ],
      "shortname": "service-workers"
    },
    "delete(value)": {
      "args": [
        "value"
      ],
      "for": [
        "Set",
        "WeakSet"
      ],
      "shortname": "ecmascript"
    }
  },
  "deleteCaption()": {
    "deleteCaption()": {
      "args": [],
      "for": [
        "HTMLTableElement"
      ],
      "shortname": "html"
    }
  },
  "deleteCell()": {
    "deleteCell(index)": {
      "args": [
        "index"
      ],
      "for": [
        "HTMLTableRowElement"
      ],
      "shortname": "html"
    }
  },
  "deleteContents()": {
    "deleteContents()": {
      "args": [],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "deleteData()": {
    "deleteData(offset, count)": {
      "args": [
        "offset",
        "count"
      ],
      "for": [
        "CharacterData"
      ],
      "shortname": "dom"
    }
  },
  "deleteDatabase()": {
    "deleteDatabase(name)": {
      "args": [
        "name"
      ],
      "for": [
        "IDBFactory"
      ],
      "shortname": "indexeddb"
    }
  },
  "deleteFromDocument()": {
    "deleteFromDocument()": {
      "args": [],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    }
  },
  "deleteIndex()": {
    "deleteIndex(name)": {
      "args": [
        "name"
      ],
      "for": [
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    }
  },
  "deleteMedium()": {
    "deleteMedium(medium)": {
      "args": [
        "medium"
      ],
      "for": [
        "MediaList"
      ],
      "shortname": "cssom"
    }
  },
  "deleteObjectStore()": {
    "deleteObjectStore(name)": {
      "args": [
        "name"
      ],
      "for": [
        "IDBDatabase"
      ],
      "shortname": "indexeddb"
    }
  },
  "deletePersistentAnchor()": {
    "deletePersistentAnchor(uuid)": {
      "args": [
        "uuid"
      ],
      "for": [
        "XRSession"
      ],
      "shortname": "anchors"
    }
  },
  "deleteProperty()": {
    "deleteProperty(target, propertyKey)": {
      "args": [
        "target",
        "propertyKey"
      ],
      "for": [
        "Reflect"
      ],
      "shortname": "ecmascript"
    }
  },
  "deleteRow()": {
    "deleteRow(index)": {
      "args": [
        "index"
      ],
      "for": [
        "HTMLTableElement",
        "HTMLTableSectionElement"
      ],
      "shortname": "html"
    }
  },
  "deleteRule()": {
    "deleteRule(index)": {
      "args": [
        "index"
      ],
      "for": [
        "CSSGroupingRule",
        "CSSStyleRule",
        "CSSStyleSheet"
      ],
      "shortname": "css-nesting"
    },
    "deleteRule(select)": {
      "args": [
        "select"
      ],
      "for": [
        "CSSKeyframesRule"
      ],
      "shortname": "css-animations"
    }
  },
  "deleteTFoot()": {
    "deleteTFoot()": {
      "args": [],
      "for": [
        "HTMLTableElement"
      ],
      "shortname": "html"
    }
  },
  "deleteTHead()": {
    "deleteTHead()": {
      "args": [],
      "for": [
        "HTMLTableElement"
      ],
      "shortname": "html"
    }
  },
  "deprecatedReplaceInURN()": {
    "deprecatedReplaceInURN(urnOrConfig, replacements)": {
      "args": [
        "urnOrConfig",
        "replacements"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "fenced-frame"
    }
  },
  "deprecatedURNtoURL()": {
    "deprecatedURNtoURL(urnOrConfig)": {
      "args": [
        "urnOrConfig"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "fenced-frame"
    },
    "deprecatedURNtoURL(urnOrConfig, send_reports)": {
      "args": [
        "urnOrConfig",
        "send_reports"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "fenced-frame"
    }
  },
  "deref()": {
    "deref()": {
      "args": [],
      "for": [
        "WeakRef"
      ],
      "shortname": "ecmascript"
    }
  },
  "deriveBits()": {
    "deriveBits()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "deriveBits(algorithm, baseKey)": {
      "args": [
        "algorithm",
        "baseKey"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "deriveBits(algorithm, baseKey, length)": {
      "args": [
        "algorithm",
        "baseKey",
        "length"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "deriveKey()": {
    "deriveKey()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "deriveKey(algorithm, baseKey, derivedKeyType, extractable, keyUsages)": {
      "args": [
        "algorithm",
        "baseKey",
        "derivedKeyType",
        "extractable",
        "keyUsages"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "destroy()": {
    "destroy()": {
      "args": [],
      "for": [
        "CloseWatcher",
        "GPUBuffer",
        "GPUDevice",
        "GPUQuerySet",
        "GPUTexture",
        "XRCompositionLayer"
      ],
      "shortname": "html"
    }
  },
  "detach()": {
    "detach()": {
      "args": [],
      "for": [
        "NodeIterator",
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "detect()": {
    "detect(image)": {
      "args": [
        "image"
      ],
      "for": [
        "BarcodeDetector",
        "FaceDetector",
        "TextDetector"
      ],
      "shortname": "shape-detection-api"
    }
  },
  "difference()": {
    "difference(other)": {
      "args": [
        "other"
      ],
      "for": [
        "Set"
      ],
      "shortname": "ecmascript"
    }
  },
  "digest()": {
    "digest()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "digest(algorithm, data)": {
      "args": [
        "algorithm",
        "data"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "dir()": {
    "dir()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "dir(item)": {
      "args": [
        "item"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "dir(item, options)": {
      "args": [
        "item",
        "options"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "dirxml()": {
    "dirxml()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "dirxml(...data)": {
      "args": [
        "...data"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "disable()": {
    "disable()": {
      "args": [],
      "for": [
        "NavigationPreloadManager"
      ],
      "shortname": "service-workers"
    }
  },
  "disconnect()": {
    "disconnect()": {
      "args": [],
      "for": [
        "AudioNode",
        "BluetoothRemoteGATTServer",
        "IdentityCredential",
        "IntersectionObserver",
        "MutationObserver",
        "PerformanceObserver",
        "PressureObserver",
        "ReportingObserver",
        "ResizeObserver",
        "SmartCardConnection"
      ],
      "shortname": "dom"
    },
    "disconnect(destinationNode)": {
      "args": [
        "destinationNode"
      ],
      "for": [
        "AudioNode"
      ],
      "shortname": "webaudio"
    },
    "disconnect(destinationNode, output)": {
      "args": [
        "destinationNode",
        "output"
      ],
      "for": [
        "AudioNode"
      ],
      "shortname": "webaudio"
    },
    "disconnect(destinationNode, output, input)": {
      "args": [
        "destinationNode",
        "output",
        "input"
      ],
      "for": [
        "AudioNode"
      ],
      "shortname": "webaudio"
    },
    "disconnect(destinationParam)": {
      "args": [
        "destinationParam"
      ],
      "for": [
        "AudioNode"
      ],
      "shortname": "webaudio"
    },
    "disconnect(destinationParam, output)": {
      "args": [
        "destinationParam",
        "output"
      ],
      "for": [
        "AudioNode"
      ],
      "shortname": "webaudio"
    },
    "disconnect(disposition)": {
      "args": [
        "disposition"
      ],
      "for": [
        "SmartCardConnection"
      ],
      "shortname": "web-smart-card"
    },
    "disconnect(options)": {
      "args": [
        "options"
      ],
      "for": [
        "IdentityCredential"
      ],
      "shortname": "fedcm"
    },
    "disconnect(output)": {
      "args": [
        "output"
      ],
      "for": [
        "AudioNode"
      ],
      "shortname": "webaudio"
    }
  },
  "dispatchEvent()": {
    "dispatchEvent(event)": {
      "args": [
        "event"
      ],
      "for": [
        "EventTarget"
      ],
      "shortname": "dom"
    }
  },
  "dispatchWorkgroups()": {
    "dispatchWorkgroups(workgroupCountX)": {
      "args": [
        "workgroupCountX"
      ],
      "for": [
        "GPUComputePassEncoder"
      ],
      "shortname": "webgpu"
    },
    "dispatchWorkgroups(workgroupCountX, workgroupCountY)": {
      "args": [
        "workgroupCountX",
        "workgroupCountY"
      ],
      "for": [
        "GPUComputePassEncoder"
      ],
      "shortname": "webgpu"
    },
    "dispatchWorkgroups(workgroupCountX, workgroupCountY, workgroupCountZ)": {
      "args": [
        "workgroupCountX",
        "workgroupCountY",
        "workgroupCountZ"
      ],
      "for": [
        "GPUComputePassEncoder"
      ],
      "shortname": "webgpu"
    }
  },
  "dispatchWorkgroupsIndirect()": {
    "dispatchWorkgroupsIndirect(indirectBuffer, indirectOffset)": {
      "args": [
        "indirectBuffer",
        "indirectOffset"
      ],
      "for": [
        "GPUComputePassEncoder"
      ],
      "shortname": "webgpu"
    }
  },
  "div()": {
    "div()": {
      "args": [],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "div(...values)": {
      "args": [
        "...values"
      ],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "div(a, b)": {
      "args": [
        "a",
        "b"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "div(a, b, options)": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "document.write()": {
    "document.write(...text)": {
      "args": [
        "...text"
      ],
      "for": [
        "Document"
      ],
      "shortname": "html"
    }
  },
  "document.writeln()": {
    "document.writeln(...text)": {
      "args": [
        "...text"
      ],
      "for": [
        "Document"
      ],
      "shortname": "html"
    }
  },
  "dpcm()": {
    "dpcm(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "dpi()": {
    "dpi(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "dppx()": {
    "dppx(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "draw()": {
    "draw(vertexCount)": {
      "args": [
        "vertexCount"
      ],
      "for": [
        "GPURenderCommandsMixin"
      ],
      "shortname": "webgpu"
    },
    "draw(vertexCount, instanceCount)": {
      "args": [
        "vertexCount",
        "instanceCount"
      ],
      "for": [
        "GPURenderCommandsMixin"
      ],
      "shortname": "webgpu"
    },
    "draw(vertexCount, instanceCount, firstVertex)": {
      "args": [
        "vertexCount",
        "instanceCount",
        "firstVertex"
      ],
      "for": [
        "GPURenderCommandsMixin"
      ],
      "shortname": "webgpu"
    },
    "draw(vertexCount, instanceCount, firstVertex, firstInstance)": {
      "args": [
        "vertexCount",
        "instanceCount",
        "firstVertex",
        "firstInstance"
      ],
      "for": [
        "GPURenderCommandsMixin"
      ],
      "shortname": "webgpu"
    }
  },
  "drawFocusIfNeeded()": {
    "drawFocusIfNeeded(element)": {
      "args": [
        "element"
      ],
      "for": [
        "CanvasUserInterface"
      ],
      "shortname": "html"
    },
    "drawFocusIfNeeded(path, element)": {
      "args": [
        "path",
        "element"
      ],
      "for": [
        "CanvasUserInterface"
      ],
      "shortname": "html"
    }
  },
  "drawImage()": {
    "drawImage()": {
      "args": [],
      "for": [
        "CanvasDrawImage"
      ],
      "shortname": "html"
    }
  },
  "drawIndexed()": {
    "drawIndexed(indexCount)": {
      "args": [
        "indexCount"
      ],
      "for": [
        "GPURenderCommandsMixin"
      ],
      "shortname": "webgpu"
    },
    "drawIndexed(indexCount, instanceCount)": {
      "args": [
        "indexCount",
        "instanceCount"
      ],
      "for": [
        "GPURenderCommandsMixin"
      ],
      "shortname": "webgpu"
    },
    "drawIndexed(indexCount, instanceCount, firstIndex)": {
      "args": [
        "indexCount",
        "instanceCount",
        "firstIndex"
      ],
      "for": [
        "GPURenderCommandsMixin"
      ],
      "shortname": "webgpu"
    },
    "drawIndexed(indexCount, instanceCount, firstIndex, baseVertex)": {
      "args": [
        "indexCount",
        "instanceCount",
        "firstIndex",
        "baseVertex"
      ],
      "for": [
        "GPURenderCommandsMixin"
      ],
      "shortname": "webgpu"
    },
    "drawIndexed(indexCount, instanceCount, firstIndex, baseVertex, firstInstance)": {
      "args": [
        "indexCount",
        "instanceCount",
        "firstIndex",
        "baseVertex",
        "firstInstance"
      ],
      "for": [
        "GPURenderCommandsMixin"
      ],
      "shortname": "webgpu"
    }
  },
  "drawIndexedIndirect()": {
    "drawIndexedIndirect(indirectBuffer, indirectOffset)": {
      "args": [
        "indirectBuffer",
        "indirectOffset"
      ],
      "for": [
        "GPURenderCommandsMixin"
      ],
      "shortname": "webgpu"
    }
  },
  "drawIndirect()": {
    "drawIndirect(indirectBuffer, indirectOffset)": {
      "args": [
        "indirectBuffer",
        "indirectOffset"
      ],
      "for": [
        "GPURenderCommandsMixin"
      ],
      "shortname": "webgpu"
    }
  },
  "dvb()": {
    "dvb(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "dvh()": {
    "dvh(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "dvi()": {
    "dvi(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "dvmax()": {
    "dvmax(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "dvmin()": {
    "dvmin(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "dvw()": {
    "dvw(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "elementFromPoint()": {
    "elementFromPoint(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "Document"
      ],
      "shortname": "cssom-view"
    }
  },
  "elementsFromPoint()": {
    "elementsFromPoint(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "Document"
      ],
      "shortname": "cssom-view"
    }
  },
  "ellipse()": {
    "ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, counterclockwise)": {
      "args": [
        "x",
        "y",
        "radiusX",
        "radiusY",
        "rotation",
        "startAngle",
        "endAngle",
        "counterclockwise"
      ],
      "for": [
        "CanvasPath"
      ],
      "shortname": "html"
    }
  },
  "elu()": {
    "elu(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "elu(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "em()": {
    "em(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "empty()": {
    "empty()": {
      "args": [],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    }
  },
  "enable()": {
    "enable()": {
      "args": [],
      "for": [
        "NavigationPreloadManager"
      ],
      "shortname": "service-workers"
    }
  },
  "enableDebugMode()": {
    "enableDebugMode()": {
      "args": [],
      "for": [
        "PrivateAggregation"
      ],
      "shortname": "private-aggregation-api"
    },
    "enableDebugMode(options)": {
      "args": [
        "options"
      ],
      "for": [
        "PrivateAggregation"
      ],
      "shortname": "private-aggregation-api"
    }
  },
  "enableDelegations()": {
    "enableDelegations()": {
      "args": [],
      "for": [
        "PaymentManager"
      ],
      "shortname": "payment-handler"
    },
    "enableDelegations(delegations)": {
      "args": [
        "delegations"
      ],
      "for": [
        "PaymentManager"
      ],
      "shortname": "payment-handler"
    }
  },
  "encode()": {
    "encode()": {
      "args": [],
      "for": [
        "TextEncoder"
      ],
      "shortname": "encoding"
    },
    "encode(data)": {
      "args": [
        "data"
      ],
      "for": [
        "AudioEncoder"
      ],
      "shortname": "webcodecs"
    },
    "encode(frame)": {
      "args": [
        "frame"
      ],
      "for": [
        "VideoEncoder"
      ],
      "shortname": "webcodecs"
    },
    "encode(frame, options)": {
      "args": [
        "frame",
        "options"
      ],
      "for": [
        "VideoEncoder"
      ],
      "shortname": "webcodecs"
    },
    "encode(input)": {
      "args": [
        "input"
      ],
      "for": [
        "TextEncoder"
      ],
      "shortname": "encoding"
    }
  },
  "encodeInto()": {
    "encodeInto(source, destination)": {
      "args": [
        "source",
        "destination"
      ],
      "for": [
        "TextEncoder"
      ],
      "shortname": "encoding"
    }
  },
  "encodeURI()": {
    "encodeURI(uri)": {
      "args": [
        "uri"
      ],
      "for": [
        "globalThis"
      ],
      "shortname": "ecmascript"
    }
  },
  "encodeURIComponent()": {
    "encodeURIComponent(uriComponent)": {
      "args": [
        "uriComponent"
      ],
      "for": [
        "globalThis"
      ],
      "shortname": "ecmascript"
    }
  },
  "encodingInfo()": {
    "encodingInfo(configuration)": {
      "args": [
        "configuration"
      ],
      "for": [
        "MediaCapabilities"
      ],
      "shortname": "media-capabilities"
    }
  },
  "encrypt()": {
    "encrypt()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "encrypt(algorithm, key, data)": {
      "args": [
        "algorithm",
        "key",
        "data"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "end()": {
    "end()": {
      "args": [],
      "for": [
        "GPUComputePassEncoder",
        "GPURenderPassEncoder",
        "XRSession"
      ],
      "shortname": "webgpu"
    },
    "end(index)": {
      "args": [
        "index"
      ],
      "for": [
        "TimeRanges"
      ],
      "shortname": "html"
    }
  },
  "endOcclusionQuery()": {
    "endOcclusionQuery()": {
      "args": [],
      "for": [
        "GPURenderPassEncoder"
      ],
      "shortname": "webgpu"
    }
  },
  "endOfStream()": {
    "endOfStream()": {
      "args": [],
      "for": [
        "MediaSource"
      ],
      "shortname": "media-source"
    },
    "endOfStream(error)": {
      "args": [
        "error"
      ],
      "for": [
        "MediaSource"
      ],
      "shortname": "media-source"
    }
  },
  "endpointNumber()": {
    "endpointNumber(alternate, endpointNumber, direction)": {
      "args": [
        "alternate",
        "endpointNumber",
        "direction"
      ],
      "for": [
        "endpointNumber"
      ],
      "shortname": "webusb"
    }
  },
  "endsWith()": {
    "endsWith(searchString, endPosition)": {
      "args": [
        "searchString",
        "endPosition"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "enqueue()": {
    "enqueue()": {
      "args": [],
      "for": [
        "ReadableStreamDefaultController",
        "TransformStreamDefaultController"
      ],
      "shortname": "streams"
    },
    "enqueue(chunk)": {
      "args": [
        "chunk"
      ],
      "for": [
        "ReadableByteStreamController",
        "ReadableStreamDefaultController",
        "TransformStreamDefaultController"
      ],
      "shortname": "streams"
    }
  },
  "entries()": {
    "entries()": {
      "args": [],
      "for": [
        "%TypedArray%",
        "Array",
        "Map",
        "Navigation",
        "Set"
      ],
      "shortname": "html"
    },
    "entries(O)": {
      "args": [
        "O"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    }
  },
  "enumerateDevices()": {
    "enumerateDevices()": {
      "args": [],
      "for": [
        "MediaDevices"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "equal()": {
    "equal(a, b)": {
      "args": [
        "a",
        "b"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "equal(a, b, options)": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "equals()": {
    "equals()": {
      "args": [],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "equals(...value)": {
      "args": [
        "...value"
      ],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "equals(...values)": {
      "args": [
        "...values"
      ],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "erf()": {
    "erf(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "erf(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "error()": {
    "error()": {
      "args": [],
      "for": [
        "ReadableByteStreamController",
        "ReadableStreamDefaultController",
        "Response",
        "TransformStreamDefaultController",
        "WritableStreamDefaultController",
        "console"
      ],
      "shortname": "console"
    },
    "error(...data)": {
      "args": [
        "...data"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "error(e)": {
      "args": [
        "e"
      ],
      "for": [
        "ReadableByteStreamController",
        "ReadableStreamDefaultController",
        "TransformStreamDefaultController",
        "WritableStreamDefaultController"
      ],
      "shortname": "streams"
    },
    "error(reason)": {
      "args": [
        "reason"
      ],
      "for": [
        "TransformStreamDefaultController"
      ],
      "shortname": "streams"
    }
  },
  "escape()": {
    "escape(ident)": {
      "args": [
        "ident"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "cssom"
    },
    "escape(string)": {
      "args": [
        "string"
      ],
      "for": [
        "globalThis"
      ],
      "shortname": "ecmascript"
    }
  },
  "establishContext()": {
    "establishContext()": {
      "args": [],
      "for": [
        "SmartCardResourceManager"
      ],
      "shortname": "web-smart-card"
    }
  },
  "estimate()": {
    "estimate()": {
      "args": [],
      "for": [
        "StorageAccessHandle",
        "StorageBucket",
        "StorageManager"
      ],
      "shortname": "saa-non-cookie-storage"
    }
  },
  "eval()": {
    "eval(x)": {
      "args": [
        "x"
      ],
      "for": [
        "globalThis"
      ],
      "shortname": "ecmascript"
    }
  },
  "evaluate()": {
    "evaluate(contextNode)": {
      "args": [
        "contextNode"
      ],
      "for": [
        "XPathExpression"
      ],
      "shortname": "dom"
    },
    "evaluate(contextNode, type)": {
      "args": [
        "contextNode",
        "type"
      ],
      "for": [
        "XPathExpression"
      ],
      "shortname": "dom"
    },
    "evaluate(contextNode, type, result)": {
      "args": [
        "contextNode",
        "type",
        "result"
      ],
      "for": [
        "XPathExpression"
      ],
      "shortname": "dom"
    },
    "evaluate(expression, contextNode)": {
      "args": [
        "expression",
        "contextNode"
      ],
      "for": [
        "XPathEvaluatorBase"
      ],
      "shortname": "dom"
    },
    "evaluate(expression, contextNode, resolver)": {
      "args": [
        "expression",
        "contextNode",
        "resolver"
      ],
      "for": [
        "XPathEvaluatorBase"
      ],
      "shortname": "dom"
    },
    "evaluate(expression, contextNode, resolver, type)": {
      "args": [
        "expression",
        "contextNode",
        "resolver",
        "type"
      ],
      "for": [
        "XPathEvaluatorBase"
      ],
      "shortname": "dom"
    },
    "evaluate(expression, contextNode, resolver, type, result)": {
      "args": [
        "expression",
        "contextNode",
        "resolver",
        "type",
        "result"
      ],
      "for": [
        "XPathEvaluatorBase"
      ],
      "shortname": "dom"
    }
  },
  "every()": {
    "every(callback, thisArg)": {
      "args": [
        "callback",
        "thisArg"
      ],
      "for": [
        "%TypedArray%",
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "ex()": {
    "ex(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "exchange()": {
    "exchange(typedArray, index, value)": {
      "args": [
        "typedArray",
        "index",
        "value"
      ],
      "for": [
        "Atomics"
      ],
      "shortname": "ecmascript"
    }
  },
  "exec()": {
    "exec()": {
      "args": [],
      "for": [
        "URLPattern"
      ],
      "shortname": "urlpattern"
    },
    "exec(input)": {
      "args": [
        "input"
      ],
      "for": [
        "URLPattern"
      ],
      "shortname": "urlpattern"
    },
    "exec(input, baseURL)": {
      "args": [
        "input",
        "baseURL"
      ],
      "for": [
        "URLPattern"
      ],
      "shortname": "urlpattern"
    },
    "exec(string)": {
      "args": [
        "string"
      ],
      "for": [
        "RegExp"
      ],
      "shortname": "ecmascript"
    }
  },
  "executeBundles()": {
    "executeBundles(bundles)": {
      "args": [
        "bundles"
      ],
      "for": [
        "GPURenderPassEncoder"
      ],
      "shortname": "webgpu"
    }
  },
  "exitFullscreen()": {
    "exitFullscreen()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "fullscreen"
    }
  },
  "exitPictureInPicture()": {
    "exitPictureInPicture()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "picture-in-picture"
    }
  },
  "exitPointerLock()": {
    "exitPointerLock()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "pointerlock"
    }
  },
  "exp()": {
    "exp(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "exp(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "exp(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "expand()": {
    "expand()": {
      "args": [],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld-api"
    },
    "expand(input)": {
      "args": [
        "input"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld-api"
    },
    "expand(input, newShape)": {
      "args": [
        "input",
        "newShape"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "expand(input, newShape, options)": {
      "args": [
        "input",
        "newShape",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "expand(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld-api"
    }
  },
  "expires()": {
    "expires()": {
      "args": [],
      "for": [
        "StorageBucket"
      ],
      "shortname": "storage-buckets"
    }
  },
  "expm1()": {
    "expm1(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "exponentialRampToValueAtTime()": {
    "exponentialRampToValueAtTime(value, endTime)": {
      "args": [
        "value",
        "endTime"
      ],
      "for": [
        "AudioParam"
      ],
      "shortname": "webaudio"
    }
  },
  "exportKey()": {
    "exportKey()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "exportKey(format, key)": {
      "args": [
        "format",
        "key"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "exports()": {
    "exports(moduleObject)": {
      "args": [
        "moduleObject"
      ],
      "for": [
        "Module"
      ],
      "shortname": "wasm-js-api"
    }
  },
  "extend()": {
    "extend()": {
      "args": [],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    },
    "extend(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    },
    "extend(node, offset)": {
      "args": [
        "node",
        "offset"
      ],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    }
  },
  "extractContents()": {
    "extractContents()": {
      "args": [],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "fastSeek()": {
    "fastSeek(time)": {
      "args": [
        "time"
      ],
      "for": [
        "HTMLMediaElement"
      ],
      "shortname": "html"
    }
  },
  "features()": {
    "features()": {
      "args": [],
      "for": [
        "PermissionsPolicy"
      ],
      "shortname": "permissions-policy"
    }
  },
  "fetch()": {
    "fetch(id, requests)": {
      "args": [
        "id",
        "requests"
      ],
      "for": [
        "BackgroundFetchManager"
      ],
      "shortname": "background-fetch"
    },
    "fetch(id, requests, options)": {
      "args": [
        "id",
        "requests",
        "options"
      ],
      "for": [
        "BackgroundFetchManager"
      ],
      "shortname": "background-fetch"
    },
    "fetch(input)": {
      "args": [
        "input"
      ],
      "for": [
        "WindowOrWorkerGlobalScope"
      ],
      "shortname": "fetch"
    },
    "fetch(input, init)": {
      "args": [
        "input",
        "init"
      ],
      "for": [
        "WindowOrWorkerGlobalScope"
      ],
      "shortname": "fetch"
    }
  },
  "file()": {
    "file(successCallback)": {
      "args": [
        "successCallback"
      ],
      "for": [
        "FileSystemFileEntry"
      ],
      "shortname": "entries-api"
    },
    "file(successCallback, errorCallback)": {
      "args": [
        "successCallback",
        "errorCallback"
      ],
      "for": [
        "FileSystemFileEntry"
      ],
      "shortname": "entries-api"
    }
  },
  "fill()": {
    "fill(fillRule)": {
      "args": [
        "fillRule"
      ],
      "for": [
        "CanvasDrawPath"
      ],
      "shortname": "html"
    },
    "fill(path, fillRule)": {
      "args": [
        "path",
        "fillRule"
      ],
      "for": [
        "CanvasDrawPath"
      ],
      "shortname": "html"
    },
    "fill(value, start, end)": {
      "args": [
        "value",
        "start",
        "end"
      ],
      "for": [
        "%TypedArray%",
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "fillJointRadii()": {
    "fillJointRadii(jointSpaces, radii)": {
      "args": [
        "jointSpaces",
        "radii"
      ],
      "for": [
        "XRFrame"
      ],
      "shortname": "webxr-hand-input"
    }
  },
  "fillPoses()": {
    "fillPoses(spaces, baseSpace, transforms)": {
      "args": [
        "spaces",
        "baseSpace",
        "transforms"
      ],
      "for": [
        "XRFrame"
      ],
      "shortname": "webxr-hand-input"
    }
  },
  "fillRect()": {
    "fillRect(x, y, w, h)": {
      "args": [
        "x",
        "y",
        "w",
        "h"
      ],
      "for": [
        "CanvasRect"
      ],
      "shortname": "html"
    }
  },
  "fillText()": {
    "fillText(text, x, y, maxWidth)": {
      "args": [
        "text",
        "x",
        "y",
        "maxWidth"
      ],
      "for": [
        "CanvasText"
      ],
      "shortname": "html"
    }
  },
  "filter()": {
    "filter(callback, thisArg)": {
      "args": [
        "callback",
        "thisArg"
      ],
      "for": [
        "%TypedArray%",
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "finally()": {
    "finally(onFinally)": {
      "args": [
        "onFinally"
      ],
      "for": [
        "Promise"
      ],
      "shortname": "ecmascript"
    }
  },
  "find()": {
    "find(predicate, thisArg)": {
      "args": [
        "predicate",
        "thisArg"
      ],
      "for": [
        "%TypedArray%",
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "findIndex()": {
    "findIndex(predicate, thisArg)": {
      "args": [
        "predicate",
        "thisArg"
      ],
      "for": [
        "%TypedArray%",
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "findLast()": {
    "findLast(predicate, thisArg)": {
      "args": [
        "predicate",
        "thisArg"
      ],
      "for": [
        "%TypedArray%",
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "findLastIndex()": {
    "findLastIndex(predicate, thisArg)": {
      "args": [
        "predicate",
        "thisArg"
      ],
      "for": [
        "%TypedArray%",
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "findRule()": {
    "findRule(select)": {
      "args": [
        "select"
      ],
      "for": [
        "CSSKeyframesRule"
      ],
      "shortname": "css-animations"
    }
  },
  "finish()": {
    "finish()": {
      "args": [],
      "for": [
        "Animation",
        "GPUCommandEncoder",
        "GPURenderBundleEncoder",
        "HandwritingRecognizer"
      ],
      "shortname": "handwriting-recognition"
    },
    "finish(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "GPUCommandEncoder",
        "GPURenderBundleEncoder"
      ],
      "shortname": "webgpu"
    }
  },
  "firstChild()": {
    "firstChild()": {
      "args": [],
      "for": [
        "TreeWalker"
      ],
      "shortname": "dom"
    }
  },
  "fixed()": {
    "fixed()": {
      "args": [],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "flat()": {
    "flat(depth)": {
      "args": [
        "depth"
      ],
      "for": [
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "flatMap()": {
    "flatMap(mapperFunction, thisArg)": {
      "args": [
        "mapperFunction",
        "thisArg"
      ],
      "for": [
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "flatten()": {
    "flatten()": {
      "args": [],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld-api"
    },
    "flatten(input)": {
      "args": [
        "input"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld-api"
    },
    "flatten(input, context)": {
      "args": [
        "input",
        "context"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld-api"
    },
    "flatten(input, context, options)": {
      "args": [
        "input",
        "context",
        "options"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld-api"
    }
  },
  "flipX()": {
    "flipX()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "flipY()": {
    "flipY()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "floor()": {
    "floor(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "floor(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "floor(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "flush()": {
    "flush()": {
      "args": [],
      "for": [
        "AudioDecoder",
        "AudioEncoder",
        "FileSystemSyncAccessHandle",
        "VideoDecoder",
        "VideoEncoder"
      ],
      "shortname": "fs"
    }
  },
  "focus()": {
    "focus()": {
      "args": [],
      "for": [
        "Window",
        "WindowClient"
      ],
      "shortname": "html"
    },
    "focus(options)": {
      "args": [
        "options"
      ],
      "for": [
        "HTMLOrSVGElement"
      ],
      "shortname": "html"
    }
  },
  "focusableAreas()": {
    "focusableAreas()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "css-nav"
    },
    "focusableAreas(option)": {
      "args": [
        "option"
      ],
      "for": [
        "Element"
      ],
      "shortname": "css-nav"
    }
  },
  "fontcolor()": {
    "fontcolor(colour)": {
      "args": [
        "colour"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "fontsize()": {
    "fontsize(size)": {
      "args": [
        "size"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "for()": {
    "for(key)": {
      "args": [
        "key"
      ],
      "for": [
        "Symbol"
      ],
      "shortname": "ecmascript"
    }
  },
  "forEach()": {
    "forEach(callback, thisArg)": {
      "args": [
        "callback",
        "thisArg"
      ],
      "for": [
        "%TypedArray%",
        "Array",
        "Map",
        "Set"
      ],
      "shortname": "ecmascript"
    }
  },
  "forget()": {
    "forget()": {
      "args": [],
      "for": [
        "BluetoothDevice",
        "HIDDevice",
        "SerialPort",
        "USBDevice"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "formData()": {
    "formData()": {
      "args": [],
      "for": [
        "Body"
      ],
      "shortname": "fetch"
    }
  },
  "forward()": {
    "forward()": {
      "args": [],
      "for": [
        "History"
      ],
      "shortname": "html"
    },
    "forward(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Navigation"
      ],
      "shortname": "html"
    }
  },
  "fr()": {
    "fr(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "frame()": {
    "frame()": {
      "args": [],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld-framing"
    },
    "frame(input, frame)": {
      "args": [
        "input",
        "frame"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld-framing"
    },
    "frame(input, frame, options)": {
      "args": [
        "input",
        "frame",
        "options"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld-framing"
    }
  },
  "freeze()": {
    "freeze(O)": {
      "args": [
        "O"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    }
  },
  "from()": {
    "from(asyncIterable)": {
      "args": [
        "asyncIterable"
      ],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    },
    "from(items, mapper, thisArg)": {
      "args": [
        "items",
        "mapper",
        "thisArg"
      ],
      "for": [
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "fromCharCode()": {
    "fromCharCode(...codeUnits)": {
      "args": [
        "...codeUnits"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "fromCodePoint()": {
    "fromCodePoint(...codePoints)": {
      "args": [
        "...codePoints"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "fromElement()": {
    "fromElement()": {
      "args": [],
      "for": [
        "CropTarget",
        "RestrictionTarget"
      ],
      "shortname": "element-capture"
    },
    "fromElement(element)": {
      "args": [
        "element"
      ],
      "for": [
        "CropTarget",
        "RestrictionTarget"
      ],
      "shortname": "element-capture"
    }
  },
  "fromEntries()": {
    "fromEntries(iterable)": {
      "args": [
        "iterable"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    }
  },
  "fromFloat32Array()": {
    "fromFloat32Array(array32)": {
      "args": [
        "array32"
      ],
      "for": [
        "DOMMatrix",
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "fromFloat64Array()": {
    "fromFloat64Array(array64)": {
      "args": [
        "array64"
      ],
      "for": [
        "DOMMatrix",
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "fromMatrix()": {
    "fromMatrix()": {
      "args": [],
      "for": [
        "DOMMatrix",
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "fromMatrix(other)": {
      "args": [
        "other"
      ],
      "for": [
        "DOMMatrix",
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "fromPoint()": {
    "fromPoint()": {
      "args": [],
      "for": [
        "DOMPoint",
        "DOMPointReadOnly"
      ],
      "shortname": "geometry"
    },
    "fromPoint(other)": {
      "args": [
        "other"
      ],
      "for": [
        "DOMPoint",
        "DOMPointReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "fromQuad()": {
    "fromQuad()": {
      "args": [],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    },
    "fromQuad(other)": {
      "args": [
        "other"
      ],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    }
  },
  "fromRdf()": {
    "fromRdf()": {
      "args": [],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld-api"
    },
    "fromRdf(input)": {
      "args": [
        "input"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld-api"
    },
    "fromRdf(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld-api"
    }
  },
  "fromRect()": {
    "fromRect()": {
      "args": [],
      "for": [
        "DOMQuad",
        "DOMRect",
        "DOMRectReadOnly"
      ],
      "shortname": "geometry"
    },
    "fromRect(other)": {
      "args": [
        "other"
      ],
      "for": [
        "DOMQuad",
        "DOMRect",
        "DOMRectReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "fround()": {
    "fround(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "gather()": {
    "gather()": {
      "args": [],
      "for": [
        "RTCIceTransport"
      ],
      "shortname": "webrtc-ice"
    },
    "gather(input, indices)": {
      "args": [
        "input",
        "indices"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "gather(input, indices, options)": {
      "args": [
        "input",
        "indices",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "gather(options)": {
      "args": [
        "options"
      ],
      "for": [
        "RTCIceTransport"
      ],
      "shortname": "webrtc-ice"
    }
  },
  "gc()": {
    "gc()": {
      "args": [],
      "for": [
        "TestUtils"
      ],
      "shortname": "testutils"
    }
  },
  "gelu()": {
    "gelu(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "gelu(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "gemm()": {
    "gemm(a, b)": {
      "args": [
        "a",
        "b"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "gemm(a, b, options)": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "generateCertificate()": {
    "generateCertificate()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "generateCertificate(keygenAlgorithm)": {
      "args": [
        "keygenAlgorithm"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "generateKey()": {
    "generateKey()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "generateKey(algorithm, extractable, keyUsages)": {
      "args": [
        "algorithm",
        "extractable",
        "keyUsages"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "generateKeyFrame()": {
    "generateKeyFrame()": {
      "args": [],
      "for": [
        "RTCRtpScriptTransformer",
        "RTCRtpSender"
      ],
      "shortname": "webrtc-encoded-transform"
    },
    "generateKeyFrame(rid)": {
      "args": [
        "rid"
      ],
      "for": [
        "RTCRtpScriptTransform",
        "RTCRtpScriptTransformer"
      ],
      "shortname": "webrtc-encoded-transform"
    },
    "generateKeyFrame(rids)": {
      "args": [
        "rids"
      ],
      "for": [
        "RTCRtpSender"
      ],
      "shortname": "webrtc-encoded-transform"
    }
  },
  "generateRequest()": {
    "generateRequest()": {
      "args": [],
      "for": [
        "MediaKeySession"
      ],
      "shortname": "encrypted-media"
    },
    "generateRequest(initDataType, initData)": {
      "args": [
        "initDataType",
        "initData"
      ],
      "for": [
        "MediaKeySession"
      ],
      "shortname": "encrypted-media"
    }
  },
  "get()": {
    "get()": {
      "args": [],
      "for": [
        "CookieStore",
        "CredentialsContainer",
        "MediaKeyStatusMap",
        "NamedFlowMap",
        "Sanitizer"
      ],
      "shortname": "cookie-store"
    },
    "get(id)": {
      "args": [
        "id"
      ],
      "for": [
        "BackgroundFetchManager",
        "Clients"
      ],
      "shortname": "background-fetch"
    },
    "get(index)": {
      "args": [
        "index"
      ],
      "for": [
        "Table"
      ],
      "shortname": "wasm-js-api"
    },
    "get(jointName)": {
      "args": [
        "jointName"
      ],
      "for": [
        "XRHand"
      ],
      "shortname": "webxr-hand-input"
    },
    "get(key)": {
      "args": [
        "key"
      ],
      "for": [
        "Map",
        "SharedStorage",
        "WeakMap",
        "XRHand"
      ],
      "shortname": "ecmascript"
    },
    "get(keyId)": {
      "args": [
        "keyId"
      ],
      "for": [
        "MediaKeyStatusMap"
      ],
      "shortname": "encrypted-media"
    },
    "get(name)": {
      "args": [
        "name"
      ],
      "for": [
        "CookieStore",
        "CustomElementRegistry",
        "FormData",
        "Headers",
        "URLSearchParams"
      ],
      "shortname": "fetch"
    },
    "get(options)": {
      "args": [
        "options"
      ],
      "for": [
        "CookieStore",
        "CredentialsContainer"
      ],
      "shortname": "cookie-store"
    },
    "get(property)": {
      "args": [
        "property"
      ],
      "for": [
        "StylePropertyMap",
        "StylePropertyMapReadOnly"
      ],
      "shortname": "css-typed-om"
    },
    "get(query)": {
      "args": [
        "query"
      ],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    },
    "get(target, propertyKey, receiver)": {
      "args": [
        "target",
        "propertyKey",
        "receiver"
      ],
      "for": [
        "Reflect"
      ],
      "shortname": "ecmascript"
    }
  },
  "getAll()": {
    "getAll()": {
      "args": [],
      "for": [
        "ContentIndex",
        "CookieStore",
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "content-index"
    },
    "getAll(name)": {
      "args": [
        "name"
      ],
      "for": [
        "CookieStore",
        "FormData",
        "URLSearchParams"
      ],
      "shortname": "url"
    },
    "getAll(options)": {
      "args": [
        "options"
      ],
      "for": [
        "CookieStore"
      ],
      "shortname": "cookie-store"
    },
    "getAll(property)": {
      "args": [
        "property"
      ],
      "for": [
        "StylePropertyMap",
        "StylePropertyMapReadOnly"
      ],
      "shortname": "css-typed-om"
    },
    "getAll(query)": {
      "args": [
        "query"
      ],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    },
    "getAll(query, count)": {
      "args": [
        "query",
        "count"
      ],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    }
  },
  "getAllKeys()": {
    "getAllKeys()": {
      "args": [],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    },
    "getAllKeys(query)": {
      "args": [
        "query"
      ],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    },
    "getAllKeys(query, count)": {
      "args": [
        "query",
        "count"
      ],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    }
  },
  "getAllResponseHeaders()": {
    "getAllResponseHeaders()": {
      "args": [],
      "for": [
        "XMLHttpRequest"
      ],
      "shortname": "xhr"
    }
  },
  "getAllowlistForFeature()": {
    "getAllowlistForFeature(feature)": {
      "args": [
        "feature"
      ],
      "for": [
        "PermissionsPolicy"
      ],
      "shortname": "permissions-policy"
    }
  },
  "getAnimations()": {
    "getAnimations()": {
      "args": [],
      "for": [
        "Animatable",
        "DocumentOrShadowRoot"
      ],
      "shortname": "web-animations"
    },
    "getAnimations(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Animatable"
      ],
      "shortname": "web-animations"
    }
  },
  "getAnnotatedAssetId()": {
    "getAnnotatedAssetId()": {
      "args": [],
      "for": [
        "NavigatorManagedData"
      ],
      "shortname": "device-attributes"
    }
  },
  "getAnnotatedLocation()": {
    "getAnnotatedLocation()": {
      "args": [],
      "for": [
        "NavigatorManagedData"
      ],
      "shortname": "device-attributes"
    }
  },
  "getAsFile()": {
    "getAsFile()": {
      "args": [],
      "for": [
        "DataTransferItem"
      ],
      "shortname": "html"
    }
  },
  "getAsFileSystemHandle()": {
    "getAsFileSystemHandle()": {
      "args": [],
      "for": [
        "DataTransferItem"
      ],
      "shortname": "file-system-access"
    }
  },
  "getAsString()": {
    "getAsString(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "DataTransferItem"
      ],
      "shortname": "html"
    }
  },
  "getAttribute()": {
    "getAttribute()": {
      "args": [],
      "for": [
        "SmartCardConnection"
      ],
      "shortname": "web-smart-card"
    },
    "getAttribute(qualifiedName)": {
      "args": [
        "qualifiedName"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    },
    "getAttribute(tag)": {
      "args": [
        "tag"
      ],
      "for": [
        "SmartCardConnection"
      ],
      "shortname": "web-smart-card"
    }
  },
  "getAttributeNS()": {
    "getAttributeNS(namespace, localName)": {
      "args": [
        "namespace",
        "localName"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "getAttributeNames()": {
    "getAttributeNames()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "getAttributeNode()": {
    "getAttributeNode(qualifiedName)": {
      "args": [
        "qualifiedName"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "getAttributeNodeNS()": {
    "getAttributeNodeNS(namespace, localName)": {
      "args": [
        "namespace",
        "localName"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "getAttributeType()": {
    "getAttributeType(tagName, attribute)": {
      "args": [
        "tagName",
        "attribute"
      ],
      "for": [
        "TrustedTypePolicyFactory"
      ],
      "shortname": "trusted-types"
    },
    "getAttributeType(tagName, attribute, elementNs)": {
      "args": [
        "tagName",
        "attribute",
        "elementNs"
      ],
      "for": [
        "TrustedTypePolicyFactory"
      ],
      "shortname": "trusted-types"
    },
    "getAttributeType(tagName, attribute, elementNs, attrNs)": {
      "args": [
        "tagName",
        "attribute",
        "elementNs",
        "attrNs"
      ],
      "for": [
        "TrustedTypePolicyFactory"
      ],
      "shortname": "trusted-types"
    }
  },
  "getAudioTracks()": {
    "getAudioTracks()": {
      "args": [],
      "for": [
        "MediaStream"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "getAuthenticatorData()": {
    "getAuthenticatorData()": {
      "args": [],
      "for": [
        "AuthenticatorAttestationResponse"
      ],
      "shortname": "webauthn"
    }
  },
  "getAutoplayPolicy()": {
    "getAutoplayPolicy(context)": {
      "args": [
        "context"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "autoplay-detection"
    },
    "getAutoplayPolicy(element)": {
      "args": [
        "element"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "autoplay-detection"
    },
    "getAutoplayPolicy(type)": {
      "args": [
        "type"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "autoplay-detection"
    }
  },
  "getAvailability()": {
    "getAvailability()": {
      "args": [],
      "for": [
        "Bluetooth",
        "PresentationRequest"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "getBattery()": {
    "getBattery()": {
      "args": [],
      "for": [
        "Navigator"
      ],
      "shortname": "battery-status"
    }
  },
  "getBigInt64()": {
    "getBigInt64(byteOffset, littleEndian)": {
      "args": [
        "byteOffset",
        "littleEndian"
      ],
      "for": [
        "DataView"
      ],
      "shortname": "ecmascript"
    }
  },
  "getBigUint64()": {
    "getBigUint64(byteOffset, littleEndian)": {
      "args": [
        "byteOffset",
        "littleEndian"
      ],
      "for": [
        "DataView"
      ],
      "shortname": "ecmascript"
    }
  },
  "getBindGroupLayout()": {
    "getBindGroupLayout(index)": {
      "args": [
        "index"
      ],
      "for": [
        "GPUPipelineBase"
      ],
      "shortname": "webgpu"
    }
  },
  "getBoundingClientRect()": {
    "getBoundingClientRect()": {
      "args": [],
      "for": [
        "Element",
        "Range"
      ],
      "shortname": "cssom-view"
    }
  },
  "getBounds()": {
    "getBounds()": {
      "args": [],
      "for": [
        "DOMQuad"
      ],
      "shortname": "geometry"
    }
  },
  "getBoxQuads()": {
    "getBoxQuads()": {
      "args": [],
      "for": [
        "GeometryUtils"
      ],
      "shortname": "cssom-view"
    },
    "getBoxQuads(options)": {
      "args": [
        "options"
      ],
      "for": [
        "GeometryUtils"
      ],
      "shortname": "cssom-view"
    }
  },
  "getByteFrequencyData()": {
    "getByteFrequencyData(array)": {
      "args": [
        "array"
      ],
      "for": [
        "AnalyserNode"
      ],
      "shortname": "webaudio"
    }
  },
  "getByteTimeDomainData()": {
    "getByteTimeDomainData(array)": {
      "args": [
        "array"
      ],
      "for": [
        "AnalyserNode"
      ],
      "shortname": "webaudio"
    }
  },
  "getCameraImage()": {
    "getCameraImage(camera)": {
      "args": [
        "camera"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "raw-camera-access"
    }
  },
  "getCapabilities()": {
    "getCapabilities()": {
      "args": [],
      "for": [
        "ConstrainablePattern",
        "InputDeviceInfo",
        "MediaStreamTrack",
        "RTCRtpReceiver",
        "RTCRtpSender"
      ],
      "shortname": "mediacapture-streams"
    },
    "getCapabilities(kind)": {
      "args": [
        "kind"
      ],
      "for": [
        "RTCRtpReceiver",
        "RTCRtpSender"
      ],
      "shortname": "webrtc"
    }
  },
  "getCaptureHandle()": {
    "getCaptureHandle()": {
      "args": [],
      "for": [
        "MediaStreamTrack"
      ],
      "shortname": "capture-handle-identity"
    }
  },
  "getChannelData()": {
    "getChannelData(channel)": {
      "args": [
        "channel"
      ],
      "for": [
        "AudioBuffer"
      ],
      "shortname": "webaudio"
    }
  },
  "getCharacteristic()": {
    "getCharacteristic(characteristic)": {
      "args": [
        "characteristic"
      ],
      "for": [
        "BluetoothRemoteGATTService"
      ],
      "shortname": "web-bluetooth"
    },
    "getCharacteristic(name)": {
      "args": [
        "name"
      ],
      "for": [
        "BluetoothUUID"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "getCharacteristics()": {
    "getCharacteristics()": {
      "args": [],
      "for": [
        "BluetoothRemoteGATTService"
      ],
      "shortname": "web-bluetooth"
    },
    "getCharacteristics(characteristic)": {
      "args": [
        "characteristic"
      ],
      "for": [
        "BluetoothRemoteGATTService"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "getChildren()": {
    "getChildren()": {
      "args": [],
      "for": [
        "WorkletGroupEffect"
      ],
      "shortname": "css-animation-worklet"
    }
  },
  "getClientCapabilities()": {
    "getClientCapabilities()": {
      "args": [],
      "for": [
        "PublicKeyCredential"
      ],
      "shortname": "webauthn"
    }
  },
  "getClientExtensionResults()": {
    "getClientExtensionResults()": {
      "args": [],
      "for": [
        "PublicKeyCredential"
      ],
      "shortname": "webauthn"
    }
  },
  "getClientRect()": {
    "getClientRect()": {
      "args": [],
      "for": [
        "CaretPosition"
      ],
      "shortname": "cssom-view"
    }
  },
  "getClientRects()": {
    "getClientRects()": {
      "args": [],
      "for": [
        "Element",
        "Range"
      ],
      "shortname": "cssom-view"
    }
  },
  "getCoalescedEvents()": {
    "getCoalescedEvents()": {
      "args": [],
      "for": [
        "PointerEvent"
      ],
      "shortname": "pointerevents"
    }
  },
  "getCompilationInfo()": {
    "getCompilationInfo()": {
      "args": [],
      "for": [
        "GPUShaderModule"
      ],
      "shortname": "webgpu"
    }
  },
  "getComposedRanges()": {
    "getComposedRanges()": {
      "args": [],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    },
    "getComposedRanges(shadowRoots)": {
      "args": [
        "shadowRoots"
      ],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    }
  },
  "getComputedStyle()": {
    "getComputedStyle(elt)": {
      "args": [
        "elt"
      ],
      "for": [
        "Window"
      ],
      "shortname": "cssom"
    },
    "getComputedStyle(elt, pseudoElt)": {
      "args": [
        "elt",
        "pseudoElt"
      ],
      "for": [
        "Window"
      ],
      "shortname": "cssom"
    }
  },
  "getComputedTiming()": {
    "getComputedTiming()": {
      "args": [],
      "for": [
        "AnimationEffect",
        "WorkletAnimationEffect"
      ],
      "shortname": "css-animation-worklet"
    }
  },
  "getConfiguration()": {
    "getConfiguration()": {
      "args": [],
      "for": [
        "MediaKeySystemAccess",
        "RTCPeerConnection"
      ],
      "shortname": "encrypted-media"
    }
  },
  "getConstraints()": {
    "getConstraints()": {
      "args": [],
      "for": [
        "ConstrainablePattern",
        "MediaStreamTrack"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "getContent()": {
    "getContent()": {
      "args": [],
      "for": [
        "NamedFlow"
      ],
      "shortname": "css-regions"
    }
  },
  "getContext()": {
    "getContext(contextId, options)": {
      "args": [
        "contextId",
        "options"
      ],
      "for": [
        "HTMLCanvasElement",
        "OffscreenCanvas"
      ],
      "shortname": "html"
    }
  },
  "getContextAttributes()": {
    "getContextAttributes()": {
      "args": [],
      "for": [
        "CanvasRenderingContext2D"
      ],
      "shortname": "html"
    }
  },
  "getContributingSources()": {
    "getContributingSources()": {
      "args": [],
      "for": [
        "RTCRtpReceiver"
      ],
      "shortname": "webrtc"
    }
  },
  "getCueAsHTML()": {
    "getCueAsHTML()": {
      "args": [],
      "for": [
        "VTTCue"
      ],
      "shortname": "webvtt"
    }
  },
  "getCueById()": {
    "getCueById(id)": {
      "args": [
        "id"
      ],
      "for": [
        "TextTrackCueList"
      ],
      "shortname": "html"
    }
  },
  "getCurrentPosition()": {
    "getCurrentPosition()": {
      "args": [],
      "for": [
        "Geolocation"
      ],
      "shortname": "geolocation"
    },
    "getCurrentPosition(successCallback)": {
      "args": [
        "successCallback"
      ],
      "for": [
        "Geolocation"
      ],
      "shortname": "geolocation"
    },
    "getCurrentPosition(successCallback, errorCallback)": {
      "args": [
        "successCallback",
        "errorCallback"
      ],
      "for": [
        "Geolocation"
      ],
      "shortname": "geolocation"
    },
    "getCurrentPosition(successCallback, errorCallback, options)": {
      "args": [
        "successCallback",
        "errorCallback",
        "options"
      ],
      "for": [
        "Geolocation"
      ],
      "shortname": "geolocation"
    }
  },
  "getCurrentTexture()": {
    "getCurrentTexture()": {
      "args": [],
      "for": [
        "GPUCanvasContext"
      ],
      "shortname": "webgpu"
    }
  },
  "getCurrentTime()": {
    "getCurrentTime()": {
      "args": [],
      "for": [
        "AnimationTimeline"
      ],
      "shortname": "scroll-animations"
    },
    "getCurrentTime(options)": {
      "args": [
        "options"
      ],
      "for": [
        "AnimationTimeline"
      ],
      "shortname": "scroll-animations"
    }
  },
  "getData()": {
    "getData(format)": {
      "args": [
        "format"
      ],
      "for": [
        "DataTransfer"
      ],
      "shortname": "html"
    }
  },
  "getDate()": {
    "getDate()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "getDay()": {
    "getDay()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "getDepthInMeters()": {
    "getDepthInMeters(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "XRCPUDepthInformation"
      ],
      "shortname": "webxr-depth-sensing"
    }
  },
  "getDepthInformation()": {
    "getDepthInformation(view)": {
      "args": [
        "view"
      ],
      "for": [
        "XRFrame",
        "XRWebGLBinding",
        "XRWebGLDepthInformation"
      ],
      "shortname": "webxr-depth-sensing"
    }
  },
  "getDescriptor()": {
    "getDescriptor(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "BluetoothRemoteGATTCharacteristic"
      ],
      "shortname": "web-bluetooth"
    },
    "getDescriptor(name)": {
      "args": [
        "name"
      ],
      "for": [
        "BluetoothUUID"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "getDescriptors()": {
    "getDescriptors()": {
      "args": [],
      "for": [
        "BluetoothRemoteGATTCharacteristic"
      ],
      "shortname": "web-bluetooth"
    },
    "getDescriptors(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "BluetoothRemoteGATTCharacteristic"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "getDetails()": {
    "getDetails(itemIds)": {
      "args": [
        "itemIds"
      ],
      "for": [
        "DigitalGoodsService"
      ],
      "shortname": "digital-goods"
    }
  },
  "getDevices()": {
    "getDevices()": {
      "args": [],
      "for": [
        "Bluetooth",
        "HID",
        "USB"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "getDigitalGoodsService()": {
    "getDigitalGoodsService(serviceProvider)": {
      "args": [
        "serviceProvider"
      ],
      "for": [
        "Window"
      ],
      "shortname": "digital-goods"
    }
  },
  "getDirectory()": {
    "getDirectory()": {
      "args": [],
      "for": [
        "FileSystemDirectoryEntry",
        "StorageAccessHandle",
        "StorageBucket",
        "StorageManager"
      ],
      "shortname": "fs"
    },
    "getDirectory(path)": {
      "args": [
        "path"
      ],
      "for": [
        "FileSystemDirectoryEntry"
      ],
      "shortname": "entries-api"
    },
    "getDirectory(path, options)": {
      "args": [
        "path",
        "options"
      ],
      "for": [
        "FileSystemDirectoryEntry"
      ],
      "shortname": "entries-api"
    },
    "getDirectory(path, options, successCallback)": {
      "args": [
        "path",
        "options",
        "successCallback"
      ],
      "for": [
        "FileSystemDirectoryEntry"
      ],
      "shortname": "entries-api"
    },
    "getDirectory(path, options, successCallback, errorCallback)": {
      "args": [
        "path",
        "options",
        "successCallback",
        "errorCallback"
      ],
      "for": [
        "FileSystemDirectoryEntry"
      ],
      "shortname": "entries-api"
    }
  },
  "getDirectoryHandle()": {
    "getDirectoryHandle(name)": {
      "args": [
        "name"
      ],
      "for": [
        "FileSystemDirectoryHandle"
      ],
      "shortname": "fs"
    },
    "getDirectoryHandle(name, options)": {
      "args": [
        "name",
        "options"
      ],
      "for": [
        "FileSystemDirectoryHandle"
      ],
      "shortname": "fs"
    }
  },
  "getDirectoryId()": {
    "getDirectoryId()": {
      "args": [],
      "for": [
        "NavigatorManagedData"
      ],
      "shortname": "device-attributes"
    }
  },
  "getDisplayMedia()": {
    "getDisplayMedia()": {
      "args": [],
      "for": [
        "MediaDevices"
      ],
      "shortname": "screen-capture"
    },
    "getDisplayMedia(options)": {
      "args": [
        "options"
      ],
      "for": [
        "MediaDevices"
      ],
      "shortname": "screen-capture"
    }
  },
  "getElementById()": {
    "getElementById(elementId)": {
      "args": [
        "elementId"
      ],
      "for": [
        "NonElementParentNode"
      ],
      "shortname": "dom"
    }
  },
  "getElementsByClassName()": {
    "getElementsByClassName(classNames)": {
      "args": [
        "classNames"
      ],
      "for": [
        "Document",
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "getElementsByName()": {
    "getElementsByName(elementName)": {
      "args": [
        "elementName"
      ],
      "for": [
        "Document"
      ],
      "shortname": "html"
    }
  },
  "getElementsByTagName()": {
    "getElementsByTagName(qualifiedName)": {
      "args": [
        "qualifiedName"
      ],
      "for": [
        "Document",
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "getElementsByTagNameNS()": {
    "getElementsByTagNameNS(namespace, localName)": {
      "args": [
        "namespace",
        "localName"
      ],
      "for": [
        "Document",
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "getEntries()": {
    "getEntries()": {
      "args": [],
      "for": [
        "Performance",
        "PerformanceObserverEntryList"
      ],
      "shortname": "performance-timeline"
    }
  },
  "getEntriesByName()": {
    "getEntriesByName()": {
      "args": [],
      "for": [
        "Performance",
        "PerformanceObserverEntryList"
      ],
      "shortname": "performance-timeline"
    },
    "getEntriesByName(name)": {
      "args": [
        "name"
      ],
      "for": [
        "Performance",
        "PerformanceObserverEntryList"
      ],
      "shortname": "performance-timeline"
    },
    "getEntriesByName(name, type)": {
      "args": [
        "name",
        "type"
      ],
      "for": [
        "Performance",
        "PerformanceObserverEntryList"
      ],
      "shortname": "performance-timeline"
    }
  },
  "getEntriesByType()": {
    "getEntriesByType()": {
      "args": [],
      "for": [
        "Performance",
        "PerformanceObserverEntryList"
      ],
      "shortname": "performance-timeline"
    },
    "getEntriesByType(type)": {
      "args": [
        "type"
      ],
      "for": [
        "Performance",
        "PerformanceObserverEntryList"
      ],
      "shortname": "performance-timeline"
    }
  },
  "getFeature()": {
    "getFeature()": {
      "args": [],
      "for": [
        "DOMImplementation",
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "getFile()": {
    "getFile()": {
      "args": [],
      "for": [
        "FileSystemDirectoryEntry",
        "FileSystemFileHandle"
      ],
      "shortname": "fs"
    },
    "getFile(path)": {
      "args": [
        "path"
      ],
      "for": [
        "FileSystemDirectoryEntry"
      ],
      "shortname": "entries-api"
    },
    "getFile(path, options)": {
      "args": [
        "path",
        "options"
      ],
      "for": [
        "FileSystemDirectoryEntry"
      ],
      "shortname": "entries-api"
    },
    "getFile(path, options, successCallback)": {
      "args": [
        "path",
        "options",
        "successCallback"
      ],
      "for": [
        "FileSystemDirectoryEntry"
      ],
      "shortname": "entries-api"
    },
    "getFile(path, options, successCallback, errorCallback)": {
      "args": [
        "path",
        "options",
        "successCallback",
        "errorCallback"
      ],
      "for": [
        "FileSystemDirectoryEntry"
      ],
      "shortname": "entries-api"
    }
  },
  "getFileHandle()": {
    "getFileHandle(name)": {
      "args": [
        "name"
      ],
      "for": [
        "FileSystemDirectoryHandle"
      ],
      "shortname": "fs"
    },
    "getFileHandle(name, options)": {
      "args": [
        "name",
        "options"
      ],
      "for": [
        "FileSystemDirectoryHandle"
      ],
      "shortname": "fs"
    }
  },
  "getFingerprints()": {
    "getFingerprints()": {
      "args": [],
      "for": [
        "RTCCertificate"
      ],
      "shortname": "webrtc"
    }
  },
  "getFloat32()": {
    "getFloat32(byteOffset, littleEndian)": {
      "args": [
        "byteOffset",
        "littleEndian"
      ],
      "for": [
        "DataView"
      ],
      "shortname": "ecmascript"
    }
  },
  "getFloat64()": {
    "getFloat64(byteOffset, littleEndian)": {
      "args": [
        "byteOffset",
        "littleEndian"
      ],
      "for": [
        "DataView"
      ],
      "shortname": "ecmascript"
    }
  },
  "getFloatFrequencyData()": {
    "getFloatFrequencyData(array)": {
      "args": [
        "array"
      ],
      "for": [
        "AnalyserNode"
      ],
      "shortname": "webaudio"
    }
  },
  "getFloatTimeDomainData()": {
    "getFloatTimeDomainData(array)": {
      "args": [
        "array"
      ],
      "for": [
        "AnalyserNode"
      ],
      "shortname": "webaudio"
    }
  },
  "getFrequencyResponse()": {
    "getFrequencyResponse(frequencyHz, magResponse, phaseResponse)": {
      "args": [
        "frequencyHz",
        "magResponse",
        "phaseResponse"
      ],
      "for": [
        "BiquadFilterNode",
        "IIRFilterNode"
      ],
      "shortname": "webaudio"
    }
  },
  "getFullYear()": {
    "getFullYear()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "getGamepads()": {
    "getGamepads()": {
      "args": [],
      "for": [
        "Navigator"
      ],
      "shortname": "gamepad"
    }
  },
  "getHTML()": {
    "getHTML(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Element",
        "ShadowRoot"
      ],
      "shortname": "html"
    }
  },
  "getHighEntropyValues()": {
    "getHighEntropyValues(hints)": {
      "args": [
        "hints"
      ],
      "for": [
        "NavigatorUA",
        "NavigatorUAData"
      ],
      "shortname": "ua-client-hints"
    }
  },
  "getHitTestResults()": {
    "getHitTestResults(hitTestSource)": {
      "args": [
        "hitTestSource"
      ],
      "for": [
        "XRFrame"
      ],
      "shortname": "webxr-hit-test"
    }
  },
  "getHitTestResultsForTransientInput()": {
    "getHitTestResultsForTransientInput(hitTestSource)": {
      "args": [
        "hitTestSource"
      ],
      "for": [
        "XRFrame"
      ],
      "shortname": "webxr-hit-test"
    }
  },
  "getHostname()": {
    "getHostname()": {
      "args": [],
      "for": [
        "NavigatorManagedData"
      ],
      "shortname": "device-attributes"
    }
  },
  "getHours()": {
    "getHours()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "getIdentityAssertion()": {
    "getIdentityAssertion()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc-identity"
    }
  },
  "getIds()": {
    "getIds()": {
      "args": [],
      "for": [
        "BackgroundFetchManager"
      ],
      "shortname": "background-fetch"
    }
  },
  "getImageData()": {
    "getImageData(sx, sy, sw, sh, settings)": {
      "args": [
        "sx",
        "sy",
        "sw",
        "sh",
        "settings"
      ],
      "for": [
        "CanvasImageData"
      ],
      "shortname": "html"
    }
  },
  "getIncludedService()": {
    "getIncludedService(service)": {
      "args": [
        "service"
      ],
      "for": [
        "BluetoothRemoteGATTService"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "getIncludedServices()": {
    "getIncludedServices()": {
      "args": [],
      "for": [
        "BluetoothRemoteGATTService"
      ],
      "shortname": "web-bluetooth"
    },
    "getIncludedServices(service)": {
      "args": [
        "service"
      ],
      "for": [
        "BluetoothRemoteGATTService"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "getInfo()": {
    "getInfo()": {
      "args": [],
      "for": [
        "SerialPort"
      ],
      "shortname": "serial"
    }
  },
  "getInstalledRelatedApps()": {
    "getInstalledRelatedApps()": {
      "args": [],
      "for": [
        "Navigator"
      ],
      "shortname": "get-installed-related-apps"
    }
  },
  "getInt16()": {
    "getInt16(byteOffset, littleEndian)": {
      "args": [
        "byteOffset",
        "littleEndian"
      ],
      "for": [
        "DataView"
      ],
      "shortname": "ecmascript"
    }
  },
  "getInt32()": {
    "getInt32(byteOffset, littleEndian)": {
      "args": [
        "byteOffset",
        "littleEndian"
      ],
      "for": [
        "DataView"
      ],
      "shortname": "ecmascript"
    }
  },
  "getInt8()": {
    "getInt8(byteOffset)": {
      "args": [
        "byteOffset"
      ],
      "for": [
        "DataView"
      ],
      "shortname": "ecmascript"
    }
  },
  "getInterestGroupAdAuctionData()": {
    "getInterestGroupAdAuctionData(config)": {
      "args": [
        "config"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "turtledove"
    }
  },
  "getItem()": {
    "getItem(key)": {
      "args": [
        "key"
      ],
      "for": [
        "Storage"
      ],
      "shortname": "html"
    }
  },
  "getJointPose()": {
    "getJointPose(joint, baseSpace)": {
      "args": [
        "joint",
        "baseSpace"
      ],
      "for": [
        "XRFrame"
      ],
      "shortname": "webxr-hand-input"
    }
  },
  "getKey()": {
    "getKey()": {
      "args": [],
      "for": [
        "PushSubscription"
      ],
      "shortname": "push-api"
    },
    "getKey(name)": {
      "args": [
        "name"
      ],
      "for": [
        "PushSubscription"
      ],
      "shortname": "push-api"
    },
    "getKey(query)": {
      "args": [
        "query"
      ],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    }
  },
  "getKeyframes()": {
    "getKeyframes()": {
      "args": [],
      "for": [
        "KeyframeEffect"
      ],
      "shortname": "web-animations"
    }
  },
  "getLayoutMap()": {
    "getLayoutMap()": {
      "args": [],
      "for": [
        "Keyboard"
      ],
      "shortname": "keyboard-map"
    }
  },
  "getLightEstimate()": {
    "getLightEstimate(lightProbe)": {
      "args": [
        "lightProbe"
      ],
      "for": [
        "XRFrame"
      ],
      "shortname": "webxr-lighting-estimation"
    }
  },
  "getLineDash()": {
    "getLineDash()": {
      "args": [],
      "for": [
        "CanvasPathDrawingStyles"
      ],
      "shortname": "html"
    }
  },
  "getLocalCandidates()": {
    "getLocalCandidates()": {
      "args": [],
      "for": [
        "RTCIceTransport"
      ],
      "shortname": "webrtc"
    }
  },
  "getLocalParameters()": {
    "getLocalParameters()": {
      "args": [],
      "for": [
        "RTCIceTransport"
      ],
      "shortname": "webrtc"
    }
  },
  "getManagedConfiguration()": {
    "getManagedConfiguration(keys)": {
      "args": [
        "keys"
      ],
      "for": [
        "NavigatorManagedData"
      ],
      "shortname": "managed-configuration"
    }
  },
  "getMappedRange()": {
    "getMappedRange()": {
      "args": [],
      "for": [
        "GPUBuffer"
      ],
      "shortname": "webgpu"
    },
    "getMappedRange(offset)": {
      "args": [
        "offset"
      ],
      "for": [
        "GPUBuffer"
      ],
      "shortname": "webgpu"
    },
    "getMappedRange(offset, size)": {
      "args": [
        "offset",
        "size"
      ],
      "for": [
        "GPUBuffer"
      ],
      "shortname": "webgpu"
    }
  },
  "getMetadata()": {
    "getMetadata()": {
      "args": [],
      "for": [
        "RTCEncodedAudioFrame",
        "RTCEncodedVideoFrame"
      ],
      "shortname": "webrtc-encoded-transform"
    }
  },
  "getMilliseconds()": {
    "getMilliseconds()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "getMinutes()": {
    "getMinutes()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "getModifierState()": {
    "getModifierState()": {
      "args": [],
      "for": [
        "TouchEvent"
      ],
      "shortname": "touch-events"
    },
    "getModifierState(keyArg)": {
      "args": [
        "keyArg"
      ],
      "for": [
        "KeyboardEvent",
        "MouseEvent",
        "TouchEvent"
      ],
      "shortname": "touch-events"
    }
  },
  "getMonth()": {
    "getMonth()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "getName()": {
    "getName(constructor)": {
      "args": [
        "constructor"
      ],
      "for": [
        "CustomElementRegistry"
      ],
      "shortname": "html"
    }
  },
  "getNamedItem()": {
    "getNamedItem(qualifiedName)": {
      "args": [
        "qualifiedName"
      ],
      "for": [
        "NamedNodeMap"
      ],
      "shortname": "dom"
    }
  },
  "getNamedItemNS()": {
    "getNamedItemNS(namespace, localName)": {
      "args": [
        "namespace",
        "localName"
      ],
      "for": [
        "NamedNodeMap"
      ],
      "shortname": "dom"
    }
  },
  "getNativeFramebufferScaleFactor()": {
    "getNativeFramebufferScaleFactor(session)": {
      "args": [
        "session"
      ],
      "for": [
        "XRWebGLLayer"
      ],
      "shortname": "webxr"
    }
  },
  "getNestedConfigs()": {
    "getNestedConfigs()": {
      "args": [],
      "for": [
        "Fence"
      ],
      "shortname": "fenced-frame"
    }
  },
  "getNotifications()": {
    "getNotifications()": {
      "args": [],
      "for": [
        "ServiceWorkerRegistration"
      ],
      "shortname": "notifications"
    },
    "getNotifications(filter)": {
      "args": [
        "filter"
      ],
      "for": [
        "ServiceWorkerRegistration"
      ],
      "shortname": "notifications"
    }
  },
  "getOffsetReferenceSpace()": {
    "getOffsetReferenceSpace(originOffset)": {
      "args": [
        "originOffset"
      ],
      "for": [
        "XRReferenceSpace"
      ],
      "shortname": "webxr"
    }
  },
  "getOutputTimestamp()": {
    "getOutputTimestamp()": {
      "args": [],
      "for": [
        "AudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "getOwnPropertyDescriptor()": {
    "getOwnPropertyDescriptor(O, P)": {
      "args": [
        "O",
        "P"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    },
    "getOwnPropertyDescriptor(target, propertyKey)": {
      "args": [
        "target",
        "propertyKey"
      ],
      "for": [
        "Reflect"
      ],
      "shortname": "ecmascript"
    }
  },
  "getOwnPropertyDescriptors()": {
    "getOwnPropertyDescriptors(O)": {
      "args": [
        "O"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    }
  },
  "getOwnPropertyNames()": {
    "getOwnPropertyNames(O)": {
      "args": [
        "O"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    }
  },
  "getOwnPropertySymbols()": {
    "getOwnPropertySymbols(O)": {
      "args": [
        "O"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    }
  },
  "getParameter()": {
    "getParameter(namespaceURI, localName)": {
      "args": [
        "namespaceURI",
        "localName"
      ],
      "for": [
        "XSLTProcessor"
      ],
      "shortname": "dom"
    }
  },
  "getParameters()": {
    "getParameters()": {
      "args": [],
      "for": [
        "RTCRtpReceiver",
        "RTCRtpSender"
      ],
      "shortname": "webrtc"
    }
  },
  "getParent()": {
    "getParent()": {
      "args": [],
      "for": [
        "FileSystemEntry"
      ],
      "shortname": "entries-api"
    },
    "getParent(successCallback)": {
      "args": [
        "successCallback"
      ],
      "for": [
        "FileSystemEntry"
      ],
      "shortname": "entries-api"
    },
    "getParent(successCallback, errorCallback)": {
      "args": [
        "successCallback",
        "errorCallback"
      ],
      "for": [
        "FileSystemEntry"
      ],
      "shortname": "entries-api"
    }
  },
  "getPhotoCapabilities()": {
    "getPhotoCapabilities()": {
      "args": [],
      "for": [
        "ImageCapture"
      ],
      "shortname": "image-capture"
    }
  },
  "getPhotoSettings()": {
    "getPhotoSettings()": {
      "args": [],
      "for": [
        "ImageCapture"
      ],
      "shortname": "image-capture"
    }
  },
  "getPoints()": {
    "getPoints()": {
      "args": [],
      "for": [
        "HandwritingStroke"
      ],
      "shortname": "handwriting-recognition"
    }
  },
  "getPorts()": {
    "getPorts()": {
      "args": [],
      "for": [
        "Serial"
      ],
      "shortname": "serial"
    }
  },
  "getPose()": {
    "getPose(baseSpace)": {
      "args": [
        "baseSpace"
      ],
      "for": [
        "XRHitTestResult"
      ],
      "shortname": "webxr-hit-test"
    },
    "getPose(space, baseSpace)": {
      "args": [
        "space",
        "baseSpace"
      ],
      "for": [
        "XRFrame"
      ],
      "shortname": "webxr"
    }
  },
  "getPredictedEvents()": {
    "getPredictedEvents()": {
      "args": [],
      "for": [
        "PointerEvent"
      ],
      "shortname": "pointerevents"
    }
  },
  "getPrediction()": {
    "getPrediction()": {
      "args": [],
      "for": [
        "HandwritingDrawing"
      ],
      "shortname": "handwriting-recognition"
    }
  },
  "getPreferredCanvasFormat()": {
    "getPreferredCanvasFormat()": {
      "args": [],
      "for": [
        "GPU"
      ],
      "shortname": "webgpu"
    }
  },
  "getPrimaryService()": {
    "getPrimaryService(service)": {
      "args": [
        "service"
      ],
      "for": [
        "BluetoothRemoteGATTServer"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "getPrimaryServices()": {
    "getPrimaryServices()": {
      "args": [],
      "for": [
        "BluetoothRemoteGATTServer"
      ],
      "shortname": "web-bluetooth"
    },
    "getPrimaryServices(service)": {
      "args": [
        "service"
      ],
      "for": [
        "BluetoothRemoteGATTServer"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "getProperties()": {
    "getProperties()": {
      "args": [],
      "for": [
        "ContactsManager"
      ],
      "shortname": "contact-picker"
    }
  },
  "getPropertyPriority()": {
    "getPropertyPriority(property)": {
      "args": [
        "property"
      ],
      "for": [
        "CSSStyleDeclaration"
      ],
      "shortname": "cssom"
    }
  },
  "getPropertyType()": {
    "getPropertyType(tagName, property)": {
      "args": [
        "tagName",
        "property"
      ],
      "for": [
        "TrustedTypePolicyFactory"
      ],
      "shortname": "trusted-types"
    },
    "getPropertyType(tagName, property, elementNs)": {
      "args": [
        "tagName",
        "property",
        "elementNs"
      ],
      "for": [
        "TrustedTypePolicyFactory"
      ],
      "shortname": "trusted-types"
    }
  },
  "getPropertyValue()": {
    "getPropertyValue(property)": {
      "args": [
        "property"
      ],
      "for": [
        "CSSStyleDeclaration"
      ],
      "shortname": "cssom"
    }
  },
  "getPrototypeOf()": {
    "getPrototypeOf(O)": {
      "args": [
        "O"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    },
    "getPrototypeOf(target)": {
      "args": [
        "target"
      ],
      "for": [
        "Reflect"
      ],
      "shortname": "ecmascript"
    }
  },
  "getPublicKey()": {
    "getPublicKey()": {
      "args": [],
      "for": [
        "AuthenticatorAttestationResponse"
      ],
      "shortname": "webauthn"
    }
  },
  "getPublicKeyAlgorithm()": {
    "getPublicKeyAlgorithm()": {
      "args": [],
      "for": [
        "AuthenticatorAttestationResponse"
      ],
      "shortname": "webauthn"
    }
  },
  "getRandomValues()": {
    "getRandomValues()": {
      "args": [],
      "for": [
        "Crypto"
      ],
      "shortname": "webcryptoapi"
    },
    "getRandomValues(array)": {
      "args": [
        "array"
      ],
      "for": [
        "Crypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "getRangeAt()": {
    "getRangeAt()": {
      "args": [],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    },
    "getRangeAt(index)": {
      "args": [
        "index"
      ],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    }
  },
  "getReader()": {
    "getReader()": {
      "args": [],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    },
    "getReader(options)": {
      "args": [
        "options"
      ],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    }
  },
  "getReceivers()": {
    "getReceivers()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "getReflectionCubeMap()": {
    "getReflectionCubeMap(lightProbe)": {
      "args": [
        "lightProbe"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxr-lighting-estimation"
    }
  },
  "getRegionFlowRanges()": {
    "getRegionFlowRanges()": {
      "args": [],
      "for": [
        "Region"
      ],
      "shortname": "css-regions"
    }
  },
  "getRegions()": {
    "getRegions()": {
      "args": [],
      "for": [
        "NamedFlow"
      ],
      "shortname": "css-regions"
    }
  },
  "getRegionsByContent()": {
    "getRegionsByContent()": {
      "args": [],
      "for": [
        "NamedFlow"
      ],
      "shortname": "css-regions"
    },
    "getRegionsByContent(node)": {
      "args": [
        "node"
      ],
      "for": [
        "NamedFlow"
      ],
      "shortname": "css-regions"
    }
  },
  "getRegistration()": {
    "getRegistration()": {
      "args": [],
      "for": [
        "ServiceWorkerContainer"
      ],
      "shortname": "service-workers"
    },
    "getRegistration(clientURL)": {
      "args": [
        "clientURL"
      ],
      "for": [
        "ServiceWorkerContainer"
      ],
      "shortname": "service-workers"
    }
  },
  "getRegistrations()": {
    "getRegistrations()": {
      "args": [],
      "for": [
        "ServiceWorkerContainer"
      ],
      "shortname": "service-workers"
    }
  },
  "getRemoteCandidates()": {
    "getRemoteCandidates()": {
      "args": [],
      "for": [
        "RTCIceTransport"
      ],
      "shortname": "webrtc"
    }
  },
  "getRemoteCertificates()": {
    "getRemoteCertificates()": {
      "args": [],
      "for": [
        "RTCDtlsTransport"
      ],
      "shortname": "webrtc"
    }
  },
  "getRemoteParameters()": {
    "getRemoteParameters()": {
      "args": [],
      "for": [
        "RTCIceTransport"
      ],
      "shortname": "webrtc"
    }
  },
  "getResponseHeader()": {
    "getResponseHeader(name)": {
      "args": [
        "name"
      ],
      "for": [
        "XMLHttpRequest"
      ],
      "shortname": "xhr"
    }
  },
  "getRootNode()": {
    "getRootNode()": {
      "args": [],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    },
    "getRootNode(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "getSVGDocument()": {
    "getSVGDocument()": {
      "args": [],
      "for": [
        "HTMLEmbedElement",
        "HTMLIFrameElement",
        "HTMLObjectElement"
      ],
      "shortname": "html"
    }
  },
  "getScreenDetails()": {
    "getScreenDetails()": {
      "args": [],
      "for": [
        "Window"
      ],
      "shortname": "window-management"
    }
  },
  "getSeconds()": {
    "getSeconds()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "getSelectedCandidatePair()": {
    "getSelectedCandidatePair()": {
      "args": [],
      "for": [
        "RTCIceTransport"
      ],
      "shortname": "webrtc"
    }
  },
  "getSelection()": {
    "getSelection()": {
      "args": [],
      "for": [
        "Document",
        "Window"
      ],
      "shortname": "selection-api"
    }
  },
  "getSenders()": {
    "getSenders()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "getSerialNumber()": {
    "getSerialNumber()": {
      "args": [],
      "for": [
        "NavigatorManagedData"
      ],
      "shortname": "device-attributes"
    }
  },
  "getService()": {
    "getService(name)": {
      "args": [
        "name"
      ],
      "for": [
        "BluetoothUUID"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "getSetCookie()": {
    "getSetCookie()": {
      "args": [],
      "for": [
        "Headers"
      ],
      "shortname": "fetch"
    }
  },
  "getSettings()": {
    "getSettings()": {
      "args": [],
      "for": [
        "ConstrainablePattern",
        "MediaStreamTrack"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "getSignals()": {
    "getSignals()": {
      "args": [],
      "for": [
        "SerialPort"
      ],
      "shortname": "serial"
    }
  },
  "getSize()": {
    "getSize()": {
      "args": [],
      "for": [
        "FileSystemSyncAccessHandle"
      ],
      "shortname": "fs"
    }
  },
  "getSpatialNavigationContainer()": {
    "getSpatialNavigationContainer()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "css-nav"
    }
  },
  "getStartDate()": {
    "getStartDate()": {
      "args": [],
      "for": [
        "HTMLMediaElement"
      ],
      "shortname": "html"
    }
  },
  "getState()": {
    "getState()": {
      "args": [],
      "for": [
        "NavigationHistoryEntry",
        "NavigationPreloadManager"
      ],
      "shortname": "html"
    }
  },
  "getStats()": {
    "getStats()": {
      "args": [],
      "for": [
        "RTCPeerConnection",
        "RTCRtpReceiver",
        "RTCRtpSender",
        "WebTransport",
        "WebTransportReceiveStream",
        "WebTransportSendGroup",
        "WebTransportSendStream"
      ],
      "shortname": "webrtc"
    },
    "getStats(selector)": {
      "args": [
        "selector"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "getStatusChange()": {
    "getStatusChange()": {
      "args": [],
      "for": [
        "SmartCardContext"
      ],
      "shortname": "web-smart-card"
    },
    "getStatusChange(readerStates)": {
      "args": [
        "readerStates"
      ],
      "for": [
        "SmartCardContext"
      ],
      "shortname": "web-smart-card"
    },
    "getStatusChange(readerStates, options)": {
      "args": [
        "readerStates",
        "options"
      ],
      "for": [
        "SmartCardContext"
      ],
      "shortname": "web-smart-card"
    }
  },
  "getStatusForPolicy()": {
    "getStatusForPolicy()": {
      "args": [],
      "for": [
        "MediaKeys"
      ],
      "shortname": "encrypted-media"
    },
    "getStatusForPolicy(policy)": {
      "args": [
        "policy"
      ],
      "for": [
        "MediaKeys"
      ],
      "shortname": "encrypted-media"
    }
  },
  "getStrokes()": {
    "getStrokes()": {
      "args": [],
      "for": [
        "HandwritingDrawing"
      ],
      "shortname": "handwriting-recognition"
    }
  },
  "getSubImage()": {
    "getSubImage(layer, frame)": {
      "args": [
        "layer",
        "frame"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxrlayers"
    },
    "getSubImage(layer, frame, eye)": {
      "args": [
        "layer",
        "frame",
        "eye"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxrlayers"
    }
  },
  "getSubscription()": {
    "getSubscription()": {
      "args": [],
      "for": [
        "PushManager"
      ],
      "shortname": "push-api"
    }
  },
  "getSubscriptions()": {
    "getSubscriptions()": {
      "args": [],
      "for": [
        "CookieStoreManager"
      ],
      "shortname": "cookie-store"
    }
  },
  "getSupportedCaptureActions()": {
    "getSupportedCaptureActions()": {
      "args": [],
      "for": [
        "MediaStreamTrack"
      ],
      "shortname": "mediacapture-handle-actions"
    }
  },
  "getSupportedConstraints()": {
    "getSupportedConstraints()": {
      "args": [],
      "for": [
        "MediaDevices"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "getSupportedFormats()": {
    "getSupportedFormats()": {
      "args": [],
      "for": [
        "BarcodeDetector"
      ],
      "shortname": "shape-detection-api"
    }
  },
  "getSynchronizationSources()": {
    "getSynchronizationSources()": {
      "args": [],
      "for": [
        "RTCRtpReceiver"
      ],
      "shortname": "webrtc"
    }
  },
  "getTags()": {
    "getTags()": {
      "args": [],
      "for": [
        "PeriodicSyncManager",
        "SyncManager"
      ],
      "shortname": "background-sync"
    }
  },
  "getTargetRanges()": {
    "getTargetRanges()": {
      "args": [],
      "for": [
        "InputEvent"
      ],
      "shortname": "input-events"
    }
  },
  "getTextFormats()": {
    "getTextFormats()": {
      "args": [],
      "for": [
        "TextFormatUpdateEvent"
      ],
      "shortname": "edit-context"
    }
  },
  "getTime()": {
    "getTime()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "getTimezoneOffset()": {
    "getTimezoneOffset()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "getTiming()": {
    "getTiming()": {
      "args": [],
      "for": [
        "AnimationEffect",
        "WorkletAnimationEffect"
      ],
      "shortname": "css-animation-worklet"
    }
  },
  "getTitlebarAreaRect()": {
    "getTitlebarAreaRect()": {
      "args": [],
      "for": [
        "WindowControlsOverlay"
      ],
      "shortname": "window-controls-overlay"
    }
  },
  "getTrackById()": {
    "getTrackById()": {
      "args": [],
      "for": [
        "MediaStream"
      ],
      "shortname": "mediacapture-streams"
    },
    "getTrackById(id)": {
      "args": [
        "id"
      ],
      "for": [
        "AudioTrackList",
        "TextTrackList",
        "VideoTrackList"
      ],
      "shortname": "html"
    },
    "getTrackById(trackId)": {
      "args": [
        "trackId"
      ],
      "for": [
        "MediaStream"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "getTracks()": {
    "getTracks()": {
      "args": [],
      "for": [
        "MediaStream"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "getTransceivers()": {
    "getTransceivers()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "getTransform()": {
    "getTransform()": {
      "args": [],
      "for": [
        "CanvasTransform"
      ],
      "shortname": "html"
    }
  },
  "getTransports()": {
    "getTransports()": {
      "args": [],
      "for": [
        "AuthenticatorAttestationResponse"
      ],
      "shortname": "webauthn"
    }
  },
  "getType()": {
    "getType(type)": {
      "args": [
        "type"
      ],
      "for": [
        "ClipboardItem"
      ],
      "shortname": "clipboard-apis"
    }
  },
  "getUTCDate()": {
    "getUTCDate()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "getUTCDay()": {
    "getUTCDay()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "getUTCFullYear()": {
    "getUTCFullYear()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "getUTCHours()": {
    "getUTCHours()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "getUTCMilliseconds()": {
    "getUTCMilliseconds()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "getUTCMinutes()": {
    "getUTCMinutes()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "getUTCMonth()": {
    "getUTCMonth()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "getUTCSeconds()": {
    "getUTCSeconds()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "getUint16()": {
    "getUint16(byteOffset, littleEndian)": {
      "args": [
        "byteOffset",
        "littleEndian"
      ],
      "for": [
        "DataView"
      ],
      "shortname": "ecmascript"
    }
  },
  "getUint32()": {
    "getUint32(byteOffset, littleEndian)": {
      "args": [
        "byteOffset",
        "littleEndian"
      ],
      "for": [
        "DataView"
      ],
      "shortname": "ecmascript"
    }
  },
  "getUint8()": {
    "getUint8(byteOffset)": {
      "args": [
        "byteOffset"
      ],
      "for": [
        "DataView"
      ],
      "shortname": "ecmascript"
    }
  },
  "getUnsafe()": {
    "getUnsafe()": {
      "args": [],
      "for": [
        "Sanitizer"
      ],
      "shortname": "sanitizer-api"
    }
  },
  "getUserData()": {
    "getUserData()": {
      "args": [],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "getUserInfo()": {
    "getUserInfo(config)": {
      "args": [
        "config"
      ],
      "for": [
        "IdentityProvider"
      ],
      "shortname": "fedcm"
    }
  },
  "getUserMedia()": {
    "getUserMedia()": {
      "args": [],
      "for": [
        "MediaDevices",
        "Navigator"
      ],
      "shortname": "mediacapture-streams"
    },
    "getUserMedia(constraints)": {
      "args": [
        "constraints"
      ],
      "for": [
        "MediaDevices"
      ],
      "shortname": "mediacapture-streams"
    },
    "getUserMedia(constraints, successCallback, errorCallback)": {
      "args": [
        "constraints",
        "successCallback",
        "errorCallback"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "getVideoPlaybackQuality()": {
    "getVideoPlaybackQuality()": {
      "args": [],
      "for": [
        "HTMLVideoElement"
      ],
      "shortname": "media-playback-quality"
    }
  },
  "getVideoTracks()": {
    "getVideoTracks()": {
      "args": [],
      "for": [
        "MediaStream"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "getViewSubImage()": {
    "getViewSubImage(layer, view)": {
      "args": [
        "layer",
        "view"
      ],
      "for": [
        "XRWebGLBinding"
      ],
      "shortname": "webxrlayers"
    }
  },
  "getViewerPose()": {
    "getViewerPose(referenceSpace)": {
      "args": [
        "referenceSpace"
      ],
      "for": [
        "XRFrame"
      ],
      "shortname": "webxr"
    }
  },
  "getViewport()": {
    "getViewport(view)": {
      "args": [
        "view"
      ],
      "for": [
        "XRWebGLLayer"
      ],
      "shortname": "webxr"
    }
  },
  "getViewportMedia()": {
    "getViewportMedia()": {
      "args": [],
      "for": [
        "MediaDevices"
      ],
      "shortname": "mediacapture-viewport"
    },
    "getViewportMedia(constraints)": {
      "args": [
        "constraints"
      ],
      "for": [
        "MediaDevices"
      ],
      "shortname": "mediacapture-viewport"
    }
  },
  "getVoices()": {
    "getVoices()": {
      "args": [],
      "for": [
        "SpeechSynthesis"
      ],
      "shortname": "speech-api"
    }
  },
  "getWriter()": {
    "getWriter()": {
      "args": [],
      "for": [
        "WebTransportSendStream",
        "WritableStream"
      ],
      "shortname": "streams"
    }
  },
  "getYear()": {
    "getYear()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "getter()": {
    "getter()": {
      "args": [],
      "for": [
        "SourceBufferList"
      ],
      "shortname": "media-source"
    },
    "getter(index)": {
      "args": [
        "index"
      ],
      "for": [
        "SourceBufferList"
      ],
      "shortname": "media-source"
    }
  },
  "go()": {
    "go(delta)": {
      "args": [
        "delta"
      ],
      "for": [
        "History"
      ],
      "shortname": "html"
    }
  },
  "grabFrame()": {
    "grabFrame()": {
      "args": [],
      "for": [
        "ImageCapture"
      ],
      "shortname": "image-capture"
    }
  },
  "grad()": {
    "grad(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "greater()": {
    "greater(a, b)": {
      "args": [
        "a",
        "b"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "greater(a, b, options)": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "greaterOrEqual()": {
    "greaterOrEqual(a, b)": {
      "args": [
        "a",
        "b"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "greaterOrEqual(a, b, options)": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "group()": {
    "group()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "group(...data)": {
      "args": [
        "...data"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "groupBy()": {
    "groupBy(items, callback)": {
      "args": [
        "items",
        "callback"
      ],
      "for": [
        "Map",
        "Object"
      ],
      "shortname": "ecmascript"
    }
  },
  "groupCollapsed()": {
    "groupCollapsed()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "groupCollapsed(...data)": {
      "args": [
        "...data"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "groupEnd()": {
    "groupEnd()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "grow()": {
    "grow(delta)": {
      "args": [
        "delta"
      ],
      "for": [
        "Memory",
        "Table"
      ],
      "shortname": "wasm-js-api"
    },
    "grow(delta, value)": {
      "args": [
        "delta",
        "value"
      ],
      "for": [
        "Table"
      ],
      "shortname": "wasm-js-api"
    },
    "grow(newLength)": {
      "args": [
        "newLength"
      ],
      "for": [
        "SharedArrayBuffer"
      ],
      "shortname": "ecmascript"
    }
  },
  "gru()": {
    "gru(input, weight, recurrentWeight, steps, hiddenSize)": {
      "args": [
        "input",
        "weight",
        "recurrentWeight",
        "steps",
        "hiddenSize"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "gru(input, weight, recurrentWeight, steps, hiddenSize, options)": {
      "args": [
        "input",
        "weight",
        "recurrentWeight",
        "steps",
        "hiddenSize",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "gruCell()": {
    "gruCell(input, weight, recurrentWeight, hiddenState, hiddenSize)": {
      "args": [
        "input",
        "weight",
        "recurrentWeight",
        "hiddenState",
        "hiddenSize"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "gruCell(input, weight, recurrentWeight, hiddenState, hiddenSize, options)": {
      "args": [
        "input",
        "weight",
        "recurrentWeight",
        "hiddenState",
        "hiddenSize",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "handleEvent()": {
    "handleEvent(event)": {
      "args": [
        "event"
      ],
      "for": [
        "EventListener"
      ],
      "shortname": "dom"
    }
  },
  "hardSigmoid()": {
    "hardSigmoid(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "hardSigmoid(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "hardSwish()": {
    "hardSwish(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "hardSwish(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "has()": {
    "has()": {
      "args": [],
      "for": [
        "MediaKeyStatusMap",
        "NamedFlowMap"
      ],
      "shortname": "css-regions"
    },
    "has(cacheName)": {
      "args": [
        "cacheName"
      ],
      "for": [
        "CacheStorage"
      ],
      "shortname": "service-workers"
    },
    "has(key)": {
      "args": [
        "key"
      ],
      "for": [
        "Map",
        "WeakMap"
      ],
      "shortname": "ecmascript"
    },
    "has(keyId)": {
      "args": [
        "keyId"
      ],
      "for": [
        "MediaKeyStatusMap"
      ],
      "shortname": "encrypted-media"
    },
    "has(name)": {
      "args": [
        "name"
      ],
      "for": [
        "FormData",
        "Headers",
        "URLSearchParams"
      ],
      "shortname": "fetch"
    },
    "has(name, value)": {
      "args": [
        "name",
        "value"
      ],
      "for": [
        "URLSearchParams"
      ],
      "shortname": "url"
    },
    "has(property)": {
      "args": [
        "property"
      ],
      "for": [
        "StylePropertyMap",
        "StylePropertyMapReadOnly"
      ],
      "shortname": "css-typed-om"
    },
    "has(target, propertyKey)": {
      "args": [
        "target",
        "propertyKey"
      ],
      "for": [
        "Reflect"
      ],
      "shortname": "ecmascript"
    },
    "has(value)": {
      "args": [
        "value"
      ],
      "for": [
        "Set",
        "WeakSet"
      ],
      "shortname": "ecmascript"
    }
  },
  "hasAttribute()": {
    "hasAttribute(qualifiedName)": {
      "args": [
        "qualifiedName"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "hasAttributeNS()": {
    "hasAttributeNS(namespace, localName)": {
      "args": [
        "namespace",
        "localName"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "hasAttributes()": {
    "hasAttributes()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "hasChildNodes()": {
    "hasChildNodes()": {
      "args": [],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "hasFeature()": {
    "hasFeature()": {
      "args": [],
      "for": [
        "DOMImplementation",
        "EpubReadingSystem"
      ],
      "shortname": "dom"
    },
    "hasFeature(feature)": {
      "args": [
        "feature"
      ],
      "for": [
        "EpubReadingSystem"
      ],
      "shortname": "epub-rs"
    },
    "hasFeature(feature, version)": {
      "args": [
        "feature",
        "version"
      ],
      "for": [
        "EpubReadingSystem"
      ],
      "shortname": "epub-rs"
    }
  },
  "hasFocus()": {
    "hasFocus()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "html"
    }
  },
  "hasOwn()": {
    "hasOwn(O, P)": {
      "args": [
        "O",
        "P"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    }
  },
  "hasOwnProperty()": {
    "hasOwnProperty(V)": {
      "args": [
        "V"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    }
  },
  "hasPointerCapture()": {
    "hasPointerCapture()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "pointerevents"
    },
    "hasPointerCapture(pointerId)": {
      "args": [
        "pointerId"
      ],
      "for": [
        "Element"
      ],
      "shortname": "pointerevents"
    }
  },
  "hasPrivateToken()": {
    "hasPrivateToken(issuer)": {
      "args": [
        "issuer"
      ],
      "for": [
        "Document"
      ],
      "shortname": "trust-token-api"
    }
  },
  "hasRedemptionRecord()": {
    "hasRedemptionRecord(issuer)": {
      "args": [
        "issuer"
      ],
      "for": [
        "Document"
      ],
      "shortname": "trust-token-api"
    }
  },
  "hasStorageAccess()": {
    "hasStorageAccess()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "storage-access"
    }
  },
  "hasUnpartitionedCookieAccess()": {
    "hasUnpartitionedCookieAccess()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "saa-non-cookie-storage"
    }
  },
  "hide()": {
    "hide()": {
      "args": [],
      "for": [
        "VirtualKeyboard"
      ],
      "shortname": "virtual-keyboard"
    }
  },
  "hidePopover()": {
    "hidePopover()": {
      "args": [],
      "for": [
        "HTMLElement"
      ],
      "shortname": "html"
    }
  },
  "hypot()": {
    "hypot(...args)": {
      "args": [
        "...args"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "ic()": {
    "ic(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "identity()": {
    "identity(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "identity(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "importExternalTexture()": {
    "importExternalTexture(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "GPUDevice"
      ],
      "shortname": "webgpu"
    }
  },
  "importKey()": {
    "importKey()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "importKey(format, keyData, algorithm, extractable, keyUsages)": {
      "args": [
        "format",
        "keyData",
        "algorithm",
        "extractable",
        "keyUsages"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "importNode()": {
    "importNode(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    },
    "importNode(node, deep)": {
      "args": [
        "node",
        "deep"
      ],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "importScripts()": {
    "importScripts(...urls)": {
      "args": [
        "...urls"
      ],
      "for": [
        "WorkerGlobalScope"
      ],
      "shortname": "html"
    },
    "importScripts(urls)": {
      "args": [
        "urls"
      ],
      "for": [
        "ServiceWorkerGlobalScope"
      ],
      "shortname": "service-workers"
    }
  },
  "importStylesheet()": {
    "importStylesheet(style)": {
      "args": [
        "style"
      ],
      "for": [
        "XSLTProcessor"
      ],
      "shortname": "dom"
    }
  },
  "imports()": {
    "imports(moduleObject)": {
      "args": [
        "moduleObject"
      ],
      "for": [
        "Module"
      ],
      "shortname": "wasm-js-api"
    }
  },
  "imul()": {
    "imul(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "in()": {
    "in(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "includes()": {
    "includes(key)": {
      "args": [
        "key"
      ],
      "for": [
        "IDBKeyRange"
      ],
      "shortname": "indexeddb"
    },
    "includes(searchElement, fromIndex)": {
      "args": [
        "searchElement",
        "fromIndex"
      ],
      "for": [
        "%TypedArray%",
        "Array"
      ],
      "shortname": "ecmascript"
    },
    "includes(searchString, position)": {
      "args": [
        "searchString",
        "position"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "index()": {
    "index(name)": {
      "args": [
        "name"
      ],
      "for": [
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    }
  },
  "indexOf()": {
    "indexOf(searchElement, fromIndex)": {
      "args": [
        "searchElement",
        "fromIndex"
      ],
      "for": [
        "%TypedArray%",
        "Array"
      ],
      "shortname": "ecmascript"
    },
    "indexOf(searchString, position)": {
      "args": [
        "searchString",
        "position"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "info()": {
    "info()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "info(...data)": {
      "args": [
        "...data"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "initCompositionEvent()": {
    "initCompositionEvent(typeArg)": {
      "args": [
        "typeArg"
      ],
      "for": [
        "CompositionEvent"
      ],
      "shortname": "uievents"
    },
    "initCompositionEvent(typeArg, bubblesArg)": {
      "args": [
        "typeArg",
        "bubblesArg"
      ],
      "for": [
        "CompositionEvent"
      ],
      "shortname": "uievents"
    },
    "initCompositionEvent(typeArg, bubblesArg, cancelableArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg"
      ],
      "for": [
        "CompositionEvent"
      ],
      "shortname": "uievents"
    },
    "initCompositionEvent(typeArg, bubblesArg, cancelableArg, viewArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "viewArg"
      ],
      "for": [
        "CompositionEvent"
      ],
      "shortname": "uievents"
    },
    "initCompositionEvent(typeArg, bubblesArg, cancelableArg, viewArg, dataArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "viewArg",
        "dataArg"
      ],
      "for": [
        "CompositionEvent"
      ],
      "shortname": "uievents"
    }
  },
  "initCustomEvent()": {
    "initCustomEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "CustomEvent"
      ],
      "shortname": "dom"
    },
    "initCustomEvent(type, bubbles)": {
      "args": [
        "type",
        "bubbles"
      ],
      "for": [
        "CustomEvent"
      ],
      "shortname": "dom"
    },
    "initCustomEvent(type, bubbles, cancelable)": {
      "args": [
        "type",
        "bubbles",
        "cancelable"
      ],
      "for": [
        "CustomEvent"
      ],
      "shortname": "dom"
    },
    "initCustomEvent(type, bubbles, cancelable, detail)": {
      "args": [
        "type",
        "bubbles",
        "cancelable",
        "detail"
      ],
      "for": [
        "CustomEvent"
      ],
      "shortname": "dom"
    }
  },
  "initEvent()": {
    "initEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "Event"
      ],
      "shortname": "dom"
    },
    "initEvent(type, bubbles)": {
      "args": [
        "type",
        "bubbles"
      ],
      "for": [
        "Event"
      ],
      "shortname": "dom"
    },
    "initEvent(type, bubbles, cancelable)": {
      "args": [
        "type",
        "bubbles",
        "cancelable"
      ],
      "for": [
        "Event"
      ],
      "shortname": "dom"
    }
  },
  "initKeyboardEvent()": {
    "initKeyboardEvent(typeArg)": {
      "args": [
        "typeArg"
      ],
      "for": [
        "KeyboardEvent"
      ],
      "shortname": "uievents"
    },
    "initKeyboardEvent(typeArg, bubblesArg)": {
      "args": [
        "typeArg",
        "bubblesArg"
      ],
      "for": [
        "KeyboardEvent"
      ],
      "shortname": "uievents"
    },
    "initKeyboardEvent(typeArg, bubblesArg, cancelableArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg"
      ],
      "for": [
        "KeyboardEvent"
      ],
      "shortname": "uievents"
    },
    "initKeyboardEvent(typeArg, bubblesArg, cancelableArg, viewArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "viewArg"
      ],
      "for": [
        "KeyboardEvent"
      ],
      "shortname": "uievents"
    },
    "initKeyboardEvent(typeArg, bubblesArg, cancelableArg, viewArg, keyArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "viewArg",
        "keyArg"
      ],
      "for": [
        "KeyboardEvent"
      ],
      "shortname": "uievents"
    },
    "initKeyboardEvent(typeArg, bubblesArg, cancelableArg, viewArg, keyArg, locationArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "viewArg",
        "keyArg",
        "locationArg"
      ],
      "for": [
        "KeyboardEvent"
      ],
      "shortname": "uievents"
    },
    "initKeyboardEvent(typeArg, bubblesArg, cancelableArg, viewArg, keyArg, locationArg, ctrlKey)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "viewArg",
        "keyArg",
        "locationArg",
        "ctrlKey"
      ],
      "for": [
        "KeyboardEvent"
      ],
      "shortname": "uievents"
    },
    "initKeyboardEvent(typeArg, bubblesArg, cancelableArg, viewArg, keyArg, locationArg, ctrlKey, altKey)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "viewArg",
        "keyArg",
        "locationArg",
        "ctrlKey",
        "altKey"
      ],
      "for": [
        "KeyboardEvent"
      ],
      "shortname": "uievents"
    },
    "initKeyboardEvent(typeArg, bubblesArg, cancelableArg, viewArg, keyArg, locationArg, ctrlKey, altKey, shiftKey)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "viewArg",
        "keyArg",
        "locationArg",
        "ctrlKey",
        "altKey",
        "shiftKey"
      ],
      "for": [
        "KeyboardEvent"
      ],
      "shortname": "uievents"
    },
    "initKeyboardEvent(typeArg, bubblesArg, cancelableArg, viewArg, keyArg, locationArg, ctrlKey, altKey, shiftKey, metaKey)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "viewArg",
        "keyArg",
        "locationArg",
        "ctrlKey",
        "altKey",
        "shiftKey",
        "metaKey"
      ],
      "for": [
        "KeyboardEvent"
      ],
      "shortname": "uievents"
    }
  },
  "initMessageEvent()": {
    "initMessageEvent(type, bubbles, cancelable, data, origin, lastEventId, source, ports)": {
      "args": [
        "type",
        "bubbles",
        "cancelable",
        "data",
        "origin",
        "lastEventId",
        "source",
        "ports"
      ],
      "for": [
        "MessageEvent"
      ],
      "shortname": "html"
    }
  },
  "initMouseEvent()": {
    "initMouseEvent(typeArg)": {
      "args": [
        "typeArg"
      ],
      "for": [
        "MouseEvent"
      ],
      "shortname": "uievents"
    },
    "initMouseEvent(typeArg, bubblesArg)": {
      "args": [
        "typeArg",
        "bubblesArg"
      ],
      "for": [
        "MouseEvent"
      ],
      "shortname": "uievents"
    },
    "initMouseEvent(typeArg, bubblesArg, cancelableArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg"
      ],
      "for": [
        "MouseEvent"
      ],
      "shortname": "uievents"
    },
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "viewArg"
      ],
      "for": [
        "MouseEvent"
      ],
      "shortname": "uievents"
    },
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "viewArg",
        "detailArg"
      ],
      "for": [
        "MouseEvent"
      ],
      "shortname": "uievents"
    },
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "viewArg",
        "detailArg",
        "screenXArg"
      ],
      "for": [
        "MouseEvent"
      ],
      "shortname": "uievents"
    },
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "viewArg",
        "detailArg",
        "screenXArg",
        "screenYArg"
      ],
      "for": [
        "MouseEvent"
      ],
      "shortname": "uievents"
    },
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "viewArg",
        "detailArg",
        "screenXArg",
        "screenYArg",
        "clientXArg"
      ],
      "for": [
        "MouseEvent"
      ],
      "shortname": "uievents"
    },
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "viewArg",
        "detailArg",
        "screenXArg",
        "screenYArg",
        "clientXArg",
        "clientYArg"
      ],
      "for": [
        "MouseEvent"
      ],
      "shortname": "uievents"
    },
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "viewArg",
        "detailArg",
        "screenXArg",
        "screenYArg",
        "clientXArg",
        "clientYArg",
        "ctrlKeyArg"
      ],
      "for": [
        "MouseEvent"
      ],
      "shortname": "uievents"
    },
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "viewArg",
        "detailArg",
        "screenXArg",
        "screenYArg",
        "clientXArg",
        "clientYArg",
        "ctrlKeyArg",
        "altKeyArg"
      ],
      "for": [
        "MouseEvent"
      ],
      "shortname": "uievents"
    },
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "viewArg",
        "detailArg",
        "screenXArg",
        "screenYArg",
        "clientXArg",
        "clientYArg",
        "ctrlKeyArg",
        "altKeyArg",
        "shiftKeyArg"
      ],
      "for": [
        "MouseEvent"
      ],
      "shortname": "uievents"
    },
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "viewArg",
        "detailArg",
        "screenXArg",
        "screenYArg",
        "clientXArg",
        "clientYArg",
        "ctrlKeyArg",
        "altKeyArg",
        "shiftKeyArg",
        "metaKeyArg"
      ],
      "for": [
        "MouseEvent"
      ],
      "shortname": "uievents"
    },
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "viewArg",
        "detailArg",
        "screenXArg",
        "screenYArg",
        "clientXArg",
        "clientYArg",
        "ctrlKeyArg",
        "altKeyArg",
        "shiftKeyArg",
        "metaKeyArg",
        "buttonArg"
      ],
      "for": [
        "MouseEvent"
      ],
      "shortname": "uievents"
    },
    "initMouseEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg, relatedTargetArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "viewArg",
        "detailArg",
        "screenXArg",
        "screenYArg",
        "clientXArg",
        "clientYArg",
        "ctrlKeyArg",
        "altKeyArg",
        "shiftKeyArg",
        "metaKeyArg",
        "buttonArg",
        "relatedTargetArg"
      ],
      "for": [
        "MouseEvent"
      ],
      "shortname": "uievents"
    }
  },
  "initMutationEvent()": {
    "initMutationEvent(typeArg)": {
      "args": [
        "typeArg"
      ],
      "for": [
        "MutationEvent"
      ],
      "shortname": "uievents"
    },
    "initMutationEvent(typeArg, bubblesArg)": {
      "args": [
        "typeArg",
        "bubblesArg"
      ],
      "for": [
        "MutationEvent"
      ],
      "shortname": "uievents"
    },
    "initMutationEvent(typeArg, bubblesArg, cancelableArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg"
      ],
      "for": [
        "MutationEvent"
      ],
      "shortname": "uievents"
    },
    "initMutationEvent(typeArg, bubblesArg, cancelableArg, relatedNodeArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "relatedNodeArg"
      ],
      "for": [
        "MutationEvent"
      ],
      "shortname": "uievents"
    },
    "initMutationEvent(typeArg, bubblesArg, cancelableArg, relatedNodeArg, prevValueArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "relatedNodeArg",
        "prevValueArg"
      ],
      "for": [
        "MutationEvent"
      ],
      "shortname": "uievents"
    },
    "initMutationEvent(typeArg, bubblesArg, cancelableArg, relatedNodeArg, prevValueArg, newValueArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "relatedNodeArg",
        "prevValueArg",
        "newValueArg"
      ],
      "for": [
        "MutationEvent"
      ],
      "shortname": "uievents"
    },
    "initMutationEvent(typeArg, bubblesArg, cancelableArg, relatedNodeArg, prevValueArg, newValueArg, attrNameArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "relatedNodeArg",
        "prevValueArg",
        "newValueArg",
        "attrNameArg"
      ],
      "for": [
        "MutationEvent"
      ],
      "shortname": "uievents"
    },
    "initMutationEvent(typeArg, bubblesArg, cancelableArg, relatedNodeArg, prevValueArg, newValueArg, attrNameArg, attrChangeArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "relatedNodeArg",
        "prevValueArg",
        "newValueArg",
        "attrNameArg",
        "attrChangeArg"
      ],
      "for": [
        "MutationEvent"
      ],
      "shortname": "uievents"
    }
  },
  "initStorageEvent()": {
    "initStorageEvent(type, bubbles, cancelable, key, oldValue, newValue, url, storageArea)": {
      "args": [
        "type",
        "bubbles",
        "cancelable",
        "key",
        "oldValue",
        "newValue",
        "url",
        "storageArea"
      ],
      "for": [
        "StorageEvent"
      ],
      "shortname": "html"
    }
  },
  "initTextEvent()": {
    "initTextEvent(type)": {
      "args": [
        "type"
      ],
      "for": [
        "TextEvent"
      ],
      "shortname": "uievents"
    },
    "initTextEvent(type, bubbles)": {
      "args": [
        "type",
        "bubbles"
      ],
      "for": [
        "TextEvent"
      ],
      "shortname": "uievents"
    },
    "initTextEvent(type, bubbles, cancelable)": {
      "args": [
        "type",
        "bubbles",
        "cancelable"
      ],
      "for": [
        "TextEvent"
      ],
      "shortname": "uievents"
    },
    "initTextEvent(type, bubbles, cancelable, view)": {
      "args": [
        "type",
        "bubbles",
        "cancelable",
        "view"
      ],
      "for": [
        "TextEvent"
      ],
      "shortname": "uievents"
    },
    "initTextEvent(type, bubbles, cancelable, view, data)": {
      "args": [
        "type",
        "bubbles",
        "cancelable",
        "view",
        "data"
      ],
      "for": [
        "TextEvent"
      ],
      "shortname": "uievents"
    }
  },
  "initUIEvent()": {
    "initUIEvent(typeArg)": {
      "args": [
        "typeArg"
      ],
      "for": [
        "UIEvent"
      ],
      "shortname": "uievents"
    },
    "initUIEvent(typeArg, bubblesArg)": {
      "args": [
        "typeArg",
        "bubblesArg"
      ],
      "for": [
        "UIEvent"
      ],
      "shortname": "uievents"
    },
    "initUIEvent(typeArg, bubblesArg, cancelableArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg"
      ],
      "for": [
        "UIEvent"
      ],
      "shortname": "uievents"
    },
    "initUIEvent(typeArg, bubblesArg, cancelableArg, viewArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "viewArg"
      ],
      "for": [
        "UIEvent"
      ],
      "shortname": "uievents"
    },
    "initUIEvent(typeArg, bubblesArg, cancelableArg, viewArg, detailArg)": {
      "args": [
        "typeArg",
        "bubblesArg",
        "cancelableArg",
        "viewArg",
        "detailArg"
      ],
      "for": [
        "UIEvent"
      ],
      "shortname": "uievents"
    }
  },
  "initiateRoomCapture()": {
    "initiateRoomCapture()": {
      "args": [],
      "for": [
        "XRSession"
      ],
      "shortname": "webxr-plane-detection"
    }
  },
  "input()": {
    "input(name, descriptor)": {
      "args": [
        "name",
        "descriptor"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "insertAdjacentElement()": {
    "insertAdjacentElement(where, element)": {
      "args": [
        "where",
        "element"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "insertAdjacentHTML()": {
    "insertAdjacentHTML(position, string)": {
      "args": [
        "position",
        "string"
      ],
      "for": [
        "Element"
      ],
      "shortname": "html"
    }
  },
  "insertAdjacentText()": {
    "insertAdjacentText(where, data)": {
      "args": [
        "where",
        "data"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "insertBefore()": {
    "insertBefore(node, child)": {
      "args": [
        "node",
        "child"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "insertCell()": {
    "insertCell(index)": {
      "args": [
        "index"
      ],
      "for": [
        "HTMLTableRowElement"
      ],
      "shortname": "html"
    }
  },
  "insertDTMF()": {
    "insertDTMF()": {
      "args": [],
      "for": [
        "RTCDTMFSender"
      ],
      "shortname": "webrtc"
    },
    "insertDTMF(tones)": {
      "args": [
        "tones"
      ],
      "for": [
        "RTCDTMFSender"
      ],
      "shortname": "webrtc"
    },
    "insertDTMF(tones, duration)": {
      "args": [
        "tones",
        "duration"
      ],
      "for": [
        "RTCDTMFSender"
      ],
      "shortname": "webrtc"
    },
    "insertDTMF(tones, duration, interToneGap)": {
      "args": [
        "tones",
        "duration",
        "interToneGap"
      ],
      "for": [
        "RTCDTMFSender"
      ],
      "shortname": "webrtc"
    }
  },
  "insertData()": {
    "insertData(offset, data)": {
      "args": [
        "offset",
        "data"
      ],
      "for": [
        "CharacterData"
      ],
      "shortname": "dom"
    }
  },
  "insertDebugMarker()": {
    "insertDebugMarker(markerLabel)": {
      "args": [
        "markerLabel"
      ],
      "for": [
        "GPUDebugCommandsMixin"
      ],
      "shortname": "webgpu"
    }
  },
  "insertNode()": {
    "insertNode(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "insertRow()": {
    "insertRow(index)": {
      "args": [
        "index"
      ],
      "for": [
        "HTMLTableElement",
        "HTMLTableSectionElement"
      ],
      "shortname": "html"
    }
  },
  "insertRule()": {
    "insertRule(rule)": {
      "args": [
        "rule"
      ],
      "for": [
        "CSSGroupingRule",
        "CSSStyleRule",
        "CSSStyleSheet"
      ],
      "shortname": "css-nesting"
    },
    "insertRule(rule, index)": {
      "args": [
        "rule",
        "index"
      ],
      "for": [
        "CSSGroupingRule",
        "CSSStyleRule",
        "CSSStyleSheet"
      ],
      "shortname": "css-nesting"
    }
  },
  "instanceNormalization()": {
    "instanceNormalization(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "instanceNormalization(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "instantiate()": {
    "instantiate(bytes)": {
      "args": [
        "bytes"
      ],
      "for": [
        "WebAssembly"
      ],
      "shortname": "wasm-js-api"
    },
    "instantiate(bytes, importObject)": {
      "args": [
        "bytes",
        "importObject"
      ],
      "for": [
        "WebAssembly"
      ],
      "shortname": "wasm-js-api"
    },
    "instantiate(moduleObject)": {
      "args": [
        "moduleObject"
      ],
      "for": [
        "WebAssembly"
      ],
      "shortname": "wasm-js-api"
    },
    "instantiate(moduleObject, importObject)": {
      "args": [
        "moduleObject",
        "importObject"
      ],
      "for": [
        "WebAssembly"
      ],
      "shortname": "wasm-js-api"
    }
  },
  "instantiateStreaming()": {
    "instantiateStreaming(source)": {
      "args": [
        "source"
      ],
      "for": [
        "WebAssembly"
      ],
      "shortname": "wasm-web-api"
    },
    "instantiateStreaming(source, importObject)": {
      "args": [
        "source",
        "importObject"
      ],
      "for": [
        "WebAssembly"
      ],
      "shortname": "wasm-web-api"
    }
  },
  "intercept()": {
    "intercept(options)": {
      "args": [
        "options"
      ],
      "for": [
        "NavigateEvent"
      ],
      "shortname": "html"
    }
  },
  "intersection()": {
    "intersection(other)": {
      "args": [
        "other"
      ],
      "for": [
        "Set"
      ],
      "shortname": "ecmascript"
    }
  },
  "intersectsNode()": {
    "intersectsNode(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "intrinsicSizes()": {
    "intrinsicSizes()": {
      "args": [],
      "for": [
        "LayoutChild"
      ],
      "shortname": "css-layout-api"
    }
  },
  "inverse()": {
    "inverse()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "invertSelf()": {
    "invertSelf()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "is()": {
    "is(value1, value2)": {
      "args": [
        "value1",
        "value2"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    }
  },
  "isActive()": {
    "isActive()": {
      "args": [],
      "for": [
        "ResizeObservation"
      ],
      "shortname": "resize-observer"
    }
  },
  "isArray()": {
    "isArray(arg)": {
      "args": [
        "arg"
      ],
      "for": [
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "isConditionalMediationAvailable()": {
    "isConditionalMediationAvailable()": {
      "args": [],
      "for": [
        "Credential",
        "PublicKeyCredential"
      ],
      "shortname": "credential-management"
    }
  },
  "isConfigSupported()": {
    "isConfigSupported(config)": {
      "args": [
        "config"
      ],
      "for": [
        "AudioDecoder",
        "AudioEncoder",
        "VideoDecoder",
        "VideoEncoder"
      ],
      "shortname": "webcodecs"
    }
  },
  "isContextLost()": {
    "isContextLost()": {
      "args": [],
      "for": [
        "CanvasState"
      ],
      "shortname": "html"
    }
  },
  "isDefaultNamespace()": {
    "isDefaultNamespace(namespace)": {
      "args": [
        "namespace"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "isDisjointFrom()": {
    "isDisjointFrom(other)": {
      "args": [
        "other"
      ],
      "for": [
        "Set"
      ],
      "shortname": "ecmascript"
    }
  },
  "isEqualNode()": {
    "isEqualNode(otherNode)": {
      "args": [
        "otherNode"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "isExtensible()": {
    "isExtensible(O)": {
      "args": [
        "O"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    },
    "isExtensible(target)": {
      "args": [
        "target"
      ],
      "for": [
        "Reflect"
      ],
      "shortname": "ecmascript"
    }
  },
  "isFinite()": {
    "isFinite(number)": {
      "args": [
        "number"
      ],
      "for": [
        "Number",
        "globalThis"
      ],
      "shortname": "ecmascript"
    }
  },
  "isFrozen()": {
    "isFrozen(O)": {
      "args": [
        "O"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    }
  },
  "isHTML()": {
    "isHTML(value)": {
      "args": [
        "value"
      ],
      "for": [
        "TrustedTypePolicyFactory"
      ],
      "shortname": "trusted-types"
    }
  },
  "isInputPending()": {
    "isInputPending()": {
      "args": [],
      "for": [
        "Scheduling"
      ],
      "shortname": "is-input-pending"
    },
    "isInputPending(isInputPendingOptions)": {
      "args": [
        "isInputPendingOptions"
      ],
      "for": [
        "Scheduling"
      ],
      "shortname": "is-input-pending"
    }
  },
  "isInteger()": {
    "isInteger(number)": {
      "args": [
        "number"
      ],
      "for": [
        "Number"
      ],
      "shortname": "ecmascript"
    }
  },
  "isLockFree()": {
    "isLockFree(size)": {
      "args": [
        "size"
      ],
      "for": [
        "Atomics"
      ],
      "shortname": "ecmascript"
    }
  },
  "isNaN()": {
    "isNaN(number)": {
      "args": [
        "number"
      ],
      "for": [
        "Number",
        "globalThis"
      ],
      "shortname": "ecmascript"
    }
  },
  "isPasskeyPlatformAuthenticatorAvailable()": {
    "isPasskeyPlatformAuthenticatorAvailable()": {
      "args": [],
      "for": [
        "PublicKeyCredential"
      ],
      "shortname": "webauthn"
    }
  },
  "isPointInPath()": {
    "isPointInPath(path, x, y, fillRule)": {
      "args": [
        "path",
        "x",
        "y",
        "fillRule"
      ],
      "for": [
        "CanvasDrawPath"
      ],
      "shortname": "html"
    },
    "isPointInPath(x, y, fillRule)": {
      "args": [
        "x",
        "y",
        "fillRule"
      ],
      "for": [
        "CanvasDrawPath"
      ],
      "shortname": "html"
    }
  },
  "isPointInRange()": {
    "isPointInRange(node, offset)": {
      "args": [
        "node",
        "offset"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "isPointInStroke()": {
    "isPointInStroke(path, x, y)": {
      "args": [
        "path",
        "x",
        "y"
      ],
      "for": [
        "CanvasDrawPath"
      ],
      "shortname": "html"
    },
    "isPointInStroke(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "CanvasDrawPath"
      ],
      "shortname": "html"
    }
  },
  "isPrototypeOf()": {
    "isPrototypeOf(V)": {
      "args": [
        "V"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    }
  },
  "isSafeInteger()": {
    "isSafeInteger(number)": {
      "args": [
        "number"
      ],
      "for": [
        "Number"
      ],
      "shortname": "ecmascript"
    }
  },
  "isSameEntry()": {
    "isSameEntry(other)": {
      "args": [
        "other"
      ],
      "for": [
        "FileSystemHandle"
      ],
      "shortname": "fs"
    }
  },
  "isSameNode()": {
    "isSameNode(otherNode)": {
      "args": [
        "otherNode"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "isScript()": {
    "isScript(value)": {
      "args": [
        "value"
      ],
      "for": [
        "TrustedTypePolicyFactory"
      ],
      "shortname": "trusted-types"
    }
  },
  "isScriptURL()": {
    "isScriptURL(value)": {
      "args": [
        "value"
      ],
      "for": [
        "TrustedTypePolicyFactory"
      ],
      "shortname": "trusted-types"
    }
  },
  "isSealed()": {
    "isSealed(O)": {
      "args": [
        "O"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    }
  },
  "isSecurePaymentConfirmationAvailable()": {
    "isSecurePaymentConfirmationAvailable()": {
      "args": [],
      "for": [
        "PaymentRequest"
      ],
      "shortname": "secure-payment-confirmation"
    }
  },
  "isSessionSupported()": {
    "isSessionSupported(mode)": {
      "args": [
        "mode"
      ],
      "for": [
        "XRSystem"
      ],
      "shortname": "webxr"
    }
  },
  "isSubsetOf()": {
    "isSubsetOf(other)": {
      "args": [
        "other"
      ],
      "for": [
        "Set"
      ],
      "shortname": "ecmascript"
    }
  },
  "isSupersetOf()": {
    "isSupersetOf(other)": {
      "args": [
        "other"
      ],
      "for": [
        "Set"
      ],
      "shortname": "ecmascript"
    }
  },
  "isTypeSupported()": {
    "isTypeSupported()": {
      "args": [],
      "for": [
        "MediaSource"
      ],
      "shortname": "media-source"
    },
    "isTypeSupported(type)": {
      "args": [
        "type"
      ],
      "for": [
        "ImageDecoder",
        "MediaRecorder",
        "MediaSource"
      ],
      "shortname": "media-source"
    }
  },
  "isUserVerifyingPlatformAuthenticatorAvailable()": {
    "isUserVerifyingPlatformAuthenticatorAvailable()": {
      "args": [],
      "for": [
        "PublicKeyCredential"
      ],
      "shortname": "webauthn"
    }
  },
  "isView()": {
    "isView(arg)": {
      "args": [
        "arg"
      ],
      "for": [
        "ArrayBuffer"
      ],
      "shortname": "ecmascript"
    }
  },
  "isWellFormed()": {
    "isWellFormed()": {
      "args": [],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "isochronousTransferIn()": {
    "isochronousTransferIn(endpointNumber, packetLengths)": {
      "args": [
        "endpointNumber",
        "packetLengths"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    }
  },
  "isochronousTransferOut()": {
    "isochronousTransferOut(endpointNumber, data, packetLengths)": {
      "args": [
        "endpointNumber",
        "data",
        "packetLengths"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    }
  },
  "italics()": {
    "italics()": {
      "args": [],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "item()": {
    "item()": {
      "args": [],
      "for": [
        "TouchList"
      ],
      "shortname": "touch-events"
    },
    "item(index)": {
      "args": [
        "index"
      ],
      "for": [
        "AnimationNodeList",
        "CSSRuleList",
        "CSSStyleDeclaration",
        "DOMRectList",
        "DOMStringList",
        "DOMTokenList",
        "FileList",
        "HTMLCollection",
        "HTMLSelectElement",
        "MediaList",
        "MimeTypeArray",
        "NamedNodeMap",
        "NodeList",
        "Plugin",
        "PluginArray",
        "SpeechGrammarList",
        "SpeechRecognitionResult",
        "SpeechRecognitionResultList",
        "StyleSheetList",
        "TouchList"
      ],
      "shortname": "dom"
    },
    "item(nameOrIndex)": {
      "args": [
        "nameOrIndex"
      ],
      "for": [
        "HTMLAllCollection"
      ],
      "shortname": "html"
    }
  },
  "iterateNext()": {
    "iterateNext()": {
      "args": [],
      "for": [
        "XPathResult"
      ],
      "shortname": "dom"
    }
  },
  "javaEnabled()": {
    "javaEnabled()": {
      "args": [],
      "for": [
        "NavigatorPlugins"
      ],
      "shortname": "html"
    }
  },
  "join()": {
    "join(separator)": {
      "args": [
        "separator"
      ],
      "for": [
        "%TypedArray%",
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "joinAdInterestGroup()": {
    "joinAdInterestGroup(group)": {
      "args": [
        "group"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "turtledove"
    }
  },
  "json()": {
    "json()": {
      "args": [],
      "for": [
        "Body",
        "PushMessageData"
      ],
      "shortname": "fetch"
    },
    "json(data)": {
      "args": [
        "data"
      ],
      "for": [
        "Response"
      ],
      "shortname": "fetch"
    },
    "json(data, init)": {
      "args": [
        "data",
        "init"
      ],
      "for": [
        "Response"
      ],
      "shortname": "fetch"
    }
  },
  "kHz()": {
    "kHz(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "key()": {
    "key(index)": {
      "args": [
        "index"
      ],
      "for": [
        "Storage"
      ],
      "shortname": "html"
    }
  },
  "keyFor()": {
    "keyFor(sym)": {
      "args": [
        "sym"
      ],
      "for": [
        "Symbol"
      ],
      "shortname": "ecmascript"
    }
  },
  "keys()": {
    "keys()": {
      "args": [],
      "for": [
        "%TypedArray%",
        "Array",
        "Cache",
        "CacheStorage",
        "Map",
        "Set",
        "StorageBucketManager"
      ],
      "shortname": "ecmascript"
    },
    "keys(O)": {
      "args": [
        "O"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    },
    "keys(request)": {
      "args": [
        "request"
      ],
      "for": [
        "Cache"
      ],
      "shortname": "service-workers"
    },
    "keys(request, options)": {
      "args": [
        "request",
        "options"
      ],
      "for": [
        "Cache"
      ],
      "shortname": "service-workers"
    }
  },
  "l2Pool2d()": {
    "l2Pool2d(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "l2Pool2d(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "lastChild()": {
    "lastChild()": {
      "args": [],
      "for": [
        "TreeWalker"
      ],
      "shortname": "dom"
    }
  },
  "lastIndexOf()": {
    "lastIndexOf(searchElement, fromIndex)": {
      "args": [
        "searchElement",
        "fromIndex"
      ],
      "for": [
        "%TypedArray%",
        "Array"
      ],
      "shortname": "ecmascript"
    },
    "lastIndexOf(searchString, position)": {
      "args": [
        "searchString",
        "position"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "layerNormalization()": {
    "layerNormalization(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "layerNormalization(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "layoutNextFragment()": {
    "layoutNextFragment(constraints, breakToken)": {
      "args": [
        "constraints",
        "breakToken"
      ],
      "for": [
        "LayoutChild"
      ],
      "shortname": "css-layout-api"
    }
  },
  "leakyRelu()": {
    "leakyRelu(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "leakyRelu(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "leaveAdInterestGroup()": {
    "leaveAdInterestGroup()": {
      "args": [],
      "for": [
        "Navigator"
      ],
      "shortname": "turtledove"
    },
    "leaveAdInterestGroup(group)": {
      "args": [
        "group"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "turtledove"
    }
  },
  "length()": {
    "length()": {
      "args": [],
      "for": [
        "SharedStorage"
      ],
      "shortname": "shared-storage"
    }
  },
  "lesser()": {
    "lesser(a, b)": {
      "args": [
        "a",
        "b"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "lesser(a, b, options)": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "lesserOrEqual()": {
    "lesserOrEqual(a, b)": {
      "args": [
        "a",
        "b"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "lesserOrEqual(a, b, options)": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "lh()": {
    "lh(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "lineTo()": {
    "lineTo(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "CanvasPath"
      ],
      "shortname": "html"
    }
  },
  "linear()": {
    "linear(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "linear(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "linearRampToValueAtTime()": {
    "linearRampToValueAtTime(value, endTime)": {
      "args": [
        "value",
        "endTime"
      ],
      "for": [
        "AudioParam"
      ],
      "shortname": "webaudio"
    }
  },
  "link()": {
    "link(url)": {
      "args": [
        "url"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "listPurchaseHistory()": {
    "listPurchaseHistory()": {
      "args": [],
      "for": [
        "DigitalGoodsService"
      ],
      "shortname": "digital-goods"
    }
  },
  "listPurchases()": {
    "listPurchases()": {
      "args": [],
      "for": [
        "DigitalGoodsService"
      ],
      "shortname": "digital-goods"
    }
  },
  "listReaders()": {
    "listReaders()": {
      "args": [],
      "for": [
        "SmartCardContext"
      ],
      "shortname": "web-smart-card"
    }
  },
  "load()": {
    "load()": {
      "args": [],
      "for": [
        "FontFace",
        "HTMLMediaElement",
        "MediaKeySession"
      ],
      "shortname": "html"
    },
    "load(font)": {
      "args": [
        "font"
      ],
      "for": [
        "FontFaceSet"
      ],
      "shortname": "css-font-loading"
    },
    "load(font, text)": {
      "args": [
        "font",
        "text"
      ],
      "for": [
        "FontFaceSet"
      ],
      "shortname": "css-font-loading"
    },
    "load(sessionId)": {
      "args": [
        "sessionId"
      ],
      "for": [
        "MediaKeySession"
      ],
      "shortname": "encrypted-media"
    },
    "load(typedArray, index)": {
      "args": [
        "typedArray",
        "index"
      ],
      "for": [
        "Atomics"
      ],
      "shortname": "ecmascript"
    }
  },
  "localeCompare()": {
    "localeCompare(that, reserved1, reserved2)": {
      "args": [
        "that",
        "reserved1",
        "reserved2"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "lock()": {
    "lock()": {
      "args": [],
      "for": [
        "Keyboard",
        "ScreenOrientation"
      ],
      "shortname": "keyboard-lock"
    },
    "lock(keyCodes)": {
      "args": [
        "keyCodes"
      ],
      "for": [
        "Keyboard"
      ],
      "shortname": "keyboard-lock"
    },
    "lock(orientation)": {
      "args": [
        "orientation"
      ],
      "for": [
        "ScreenOrientation"
      ],
      "shortname": "screen-orientation"
    }
  },
  "log()": {
    "log()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "log(...data)": {
      "args": [
        "...data"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "log(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "log(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "log(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "log10()": {
    "log10(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "log1p()": {
    "log1p(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "log2()": {
    "log2(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "logicalNot()": {
    "logicalNot(a)": {
      "args": [
        "a"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "logicalNot(a, options)": {
      "args": [
        "a",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "lookupNamespaceURI()": {
    "lookupNamespaceURI(prefix)": {
      "args": [
        "prefix"
      ],
      "for": [
        "Node",
        "XPathNSResolver"
      ],
      "shortname": "dom"
    }
  },
  "lookupPrefix()": {
    "lookupPrefix(namespace)": {
      "args": [
        "namespace"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "lowerBound()": {
    "lowerBound(lower)": {
      "args": [
        "lower"
      ],
      "for": [
        "IDBKeyRange"
      ],
      "shortname": "indexeddb"
    },
    "lowerBound(lower, open)": {
      "args": [
        "lower",
        "open"
      ],
      "for": [
        "IDBKeyRange"
      ],
      "shortname": "indexeddb"
    }
  },
  "lstm()": {
    "lstm(input, weight, recurrentWeight, steps, hiddenSize)": {
      "args": [
        "input",
        "weight",
        "recurrentWeight",
        "steps",
        "hiddenSize"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "lstm(input, weight, recurrentWeight, steps, hiddenSize, options)": {
      "args": [
        "input",
        "weight",
        "recurrentWeight",
        "steps",
        "hiddenSize",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "lstmCell()": {
    "lstmCell(input, weight, recurrentWeight, hiddenState, cellState, hiddenSize)": {
      "args": [
        "input",
        "weight",
        "recurrentWeight",
        "hiddenState",
        "cellState",
        "hiddenSize"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "lstmCell(input, weight, recurrentWeight, hiddenState, cellState, hiddenSize, options)": {
      "args": [
        "input",
        "weight",
        "recurrentWeight",
        "hiddenState",
        "cellState",
        "hiddenSize",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "lvb()": {
    "lvb(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "lvh()": {
    "lvh(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "lvi()": {
    "lvi(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "lvmax()": {
    "lvmax(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "lvmin()": {
    "lvmin(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "lvw()": {
    "lvw(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "makeReadOnly()": {
    "makeReadOnly()": {
      "args": [],
      "for": [
        "NDEFReader"
      ],
      "shortname": "web-nfc"
    },
    "makeReadOnly(options)": {
      "args": [
        "options"
      ],
      "for": [
        "NDEFReader"
      ],
      "shortname": "web-nfc"
    }
  },
  "makeXRCompatible()": {
    "makeXRCompatible()": {
      "args": [],
      "for": [
        "WebGLRenderingContextBase"
      ],
      "shortname": "webxr"
    }
  },
  "map()": {
    "map(callback, thisArg)": {
      "args": [
        "callback",
        "thisArg"
      ],
      "for": [
        "%TypedArray%",
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "mapAsync()": {
    "mapAsync(mode)": {
      "args": [
        "mode"
      ],
      "for": [
        "GPUBuffer"
      ],
      "shortname": "webgpu"
    },
    "mapAsync(mode, offset)": {
      "args": [
        "mode",
        "offset"
      ],
      "for": [
        "GPUBuffer"
      ],
      "shortname": "webgpu"
    },
    "mapAsync(mode, offset, size)": {
      "args": [
        "mode",
        "offset",
        "size"
      ],
      "for": [
        "GPUBuffer"
      ],
      "shortname": "webgpu"
    }
  },
  "mark()": {
    "mark()": {
      "args": [],
      "for": [
        "Performance"
      ],
      "shortname": "user-timing"
    },
    "mark(markName)": {
      "args": [
        "markName"
      ],
      "for": [
        "Performance"
      ],
      "shortname": "user-timing"
    },
    "mark(markName, markOptions)": {
      "args": [
        "markName",
        "markOptions"
      ],
      "for": [
        "Performance"
      ],
      "shortname": "user-timing"
    }
  },
  "match()": {
    "match(regexp)": {
      "args": [
        "regexp"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    },
    "match(request)": {
      "args": [
        "request"
      ],
      "for": [
        "BackgroundFetchRegistration",
        "Cache",
        "CacheStorage"
      ],
      "shortname": "background-fetch"
    },
    "match(request, options)": {
      "args": [
        "request",
        "options"
      ],
      "for": [
        "BackgroundFetchRegistration",
        "Cache",
        "CacheStorage"
      ],
      "shortname": "background-fetch"
    }
  },
  "matchAll()": {
    "matchAll()": {
      "args": [],
      "for": [
        "BackgroundFetchRegistration",
        "Cache",
        "Clients"
      ],
      "shortname": "background-fetch"
    },
    "matchAll(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Clients"
      ],
      "shortname": "service-workers"
    },
    "matchAll(regexp)": {
      "args": [
        "regexp"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    },
    "matchAll(request)": {
      "args": [
        "request"
      ],
      "for": [
        "BackgroundFetchRegistration",
        "Cache"
      ],
      "shortname": "background-fetch"
    },
    "matchAll(request, options)": {
      "args": [
        "request",
        "options"
      ],
      "for": [
        "BackgroundFetchRegistration",
        "Cache"
      ],
      "shortname": "background-fetch"
    }
  },
  "matchMedia()": {
    "matchMedia(query)": {
      "args": [
        "query"
      ],
      "for": [
        "Window"
      ],
      "shortname": "cssom-view"
    }
  },
  "matches()": {
    "matches(selectors)": {
      "args": [
        "selectors"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "matmul()": {
    "matmul(a, b)": {
      "args": [
        "a",
        "b"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "matmul(a, b, options)": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "matrixTransform()": {
    "matrixTransform()": {
      "args": [],
      "for": [
        "DOMPointReadOnly"
      ],
      "shortname": "geometry"
    },
    "matrixTransform(matrix)": {
      "args": [
        "matrix"
      ],
      "for": [
        "DOMPointReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "max()": {
    "max()": {
      "args": [],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "max(...args)": {
      "args": [
        "...args"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    },
    "max(...values)": {
      "args": [
        "...values"
      ],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "max(a, b)": {
      "args": [
        "a",
        "b"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "max(a, b, options)": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "maxPool2d()": {
    "maxPool2d(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "maxPool2d(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "measure()": {
    "measure()": {
      "args": [],
      "for": [
        "Performance"
      ],
      "shortname": "user-timing"
    },
    "measure(measureName)": {
      "args": [
        "measureName"
      ],
      "for": [
        "Performance"
      ],
      "shortname": "user-timing"
    },
    "measure(measureName, startOrMeasureOptions)": {
      "args": [
        "measureName",
        "startOrMeasureOptions"
      ],
      "for": [
        "Performance"
      ],
      "shortname": "user-timing"
    },
    "measure(measureName, startOrMeasureOptions, endMark)": {
      "args": [
        "measureName",
        "startOrMeasureOptions",
        "endMark"
      ],
      "for": [
        "Performance"
      ],
      "shortname": "user-timing"
    }
  },
  "measureElement()": {
    "measureElement(element)": {
      "args": [
        "element"
      ],
      "for": [
        "Document"
      ],
      "shortname": "font-metrics-api"
    }
  },
  "measureText()": {
    "measureText(text)": {
      "args": [
        "text"
      ],
      "for": [
        "CanvasText"
      ],
      "shortname": "html"
    },
    "measureText(text, styleMap)": {
      "args": [
        "text",
        "styleMap"
      ],
      "for": [
        "Document"
      ],
      "shortname": "font-metrics-api"
    }
  },
  "measureUserAgentSpecificMemory()": {
    "measureUserAgentSpecificMemory()": {
      "args": [],
      "for": [
        "Performance"
      ],
      "shortname": "performance-measure-memory"
    }
  },
  "metadata()": {
    "metadata()": {
      "args": [],
      "for": [
        "VideoFrame"
      ],
      "shortname": "webcodecs"
    }
  },
  "min()": {
    "min()": {
      "args": [],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "min(...args)": {
      "args": [
        "...args"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    },
    "min(...values)": {
      "args": [
        "...values"
      ],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "min(a, b)": {
      "args": [
        "a",
        "b"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "min(a, b, options)": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "mm()": {
    "mm(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "modify()": {
    "modify()": {
      "args": [],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    },
    "modify(alter)": {
      "args": [
        "alter"
      ],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    },
    "modify(alter, direction)": {
      "args": [
        "alter",
        "direction"
      ],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    },
    "modify(alter, direction, granularity)": {
      "args": [
        "alter",
        "direction",
        "granularity"
      ],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    }
  },
  "moveBy()": {
    "moveBy(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "Window"
      ],
      "shortname": "cssom-view"
    }
  },
  "moveTo()": {
    "moveTo(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "CanvasPath",
        "Window"
      ],
      "shortname": "html"
    }
  },
  "ms()": {
    "ms(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "mul()": {
    "mul()": {
      "args": [],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "mul(...values)": {
      "args": [
        "...values"
      ],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "mul(a, b)": {
      "args": [
        "a",
        "b"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "mul(a, b, options)": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "multiply()": {
    "multiply()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "multiply(other)": {
      "args": [
        "other"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "multiplySelf()": {
    "multiplySelf()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "multiplySelf(other)": {
      "args": [
        "other"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "namedItem()": {
    "namedItem(key)": {
      "args": [
        "key"
      ],
      "for": [
        "HTMLCollection"
      ],
      "shortname": "dom"
    },
    "namedItem(name)": {
      "args": [
        "name"
      ],
      "for": [
        "HTMLAllCollection",
        "HTMLCollection",
        "HTMLFormControlsCollection",
        "HTMLSelectElement",
        "MimeTypeArray",
        "Plugin",
        "PluginArray"
      ],
      "shortname": "dom"
    }
  },
  "navigate()": {
    "navigate(dir)": {
      "args": [
        "dir"
      ],
      "for": [
        "Window"
      ],
      "shortname": "css-nav"
    },
    "navigate(url)": {
      "args": [
        "url"
      ],
      "for": [
        "WindowClient"
      ],
      "shortname": "service-workers"
    },
    "navigate(url, options)": {
      "args": [
        "url",
        "options"
      ],
      "for": [
        "Navigation"
      ],
      "shortname": "html"
    }
  },
  "neg()": {
    "neg(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "neg(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "new ImageData()": {
    "new ImageData(data, sw, sh, settings)": {
      "args": [
        "data",
        "sw",
        "sh",
        "settings"
      ],
      "for": [
        "ImageData"
      ],
      "shortname": "html"
    },
    "new ImageData(sw, sh, settings)": {
      "args": [
        "sw",
        "sh",
        "settings"
      ],
      "for": [
        "ImageData"
      ],
      "shortname": "html"
    }
  },
  "new Profiler()": {
    "new Profiler(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Profiler"
      ],
      "shortname": "js-self-profiling"
    }
  },
  "nextNode()": {
    "nextNode()": {
      "args": [],
      "for": [
        "NodeIterator",
        "TreeWalker"
      ],
      "shortname": "dom"
    }
  },
  "nextSibling()": {
    "nextSibling()": {
      "args": [],
      "for": [
        "TreeWalker"
      ],
      "shortname": "dom"
    }
  },
  "normalize()": {
    "normalize()": {
      "args": [],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    },
    "normalize(form)": {
      "args": [
        "form"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "normalizeDocument()": {
    "normalizeDocument()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "notify()": {
    "notify(typedArray, index, count)": {
      "args": [
        "typedArray",
        "index",
        "count"
      ],
      "for": [
        "Atomics"
      ],
      "shortname": "ecmascript"
    }
  },
  "now()": {
    "now()": {
      "args": [],
      "for": [
        "Date",
        "Performance"
      ],
      "shortname": "ecmascript"
    }
  },
  "number()": {
    "number(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "objectStore()": {
    "objectStore(name)": {
      "args": [
        "name"
      ],
      "for": [
        "IDBTransaction"
      ],
      "shortname": "indexeddb"
    }
  },
  "observe()": {
    "observe()": {
      "args": [],
      "for": [
        "PerformanceObserver",
        "PressureObserver",
        "ReportingObserver"
      ],
      "shortname": "compute-pressure"
    },
    "observe(options)": {
      "args": [
        "options"
      ],
      "for": [
        "PerformanceObserver"
      ],
      "shortname": "performance-timeline"
    },
    "observe(source)": {
      "args": [
        "source"
      ],
      "for": [
        "PressureObserver"
      ],
      "shortname": "compute-pressure"
    },
    "observe(source, options)": {
      "args": [
        "source",
        "options"
      ],
      "for": [
        "PressureObserver"
      ],
      "shortname": "compute-pressure"
    },
    "observe(target)": {
      "args": [
        "target"
      ],
      "for": [
        "IntersectionObserver",
        "MutationObserver",
        "ResizeObserver"
      ],
      "shortname": "dom"
    },
    "observe(target, options)": {
      "args": [
        "target",
        "options"
      ],
      "for": [
        "MutationObserver",
        "ResizeObserver"
      ],
      "shortname": "dom"
    }
  },
  "of()": {
    "of(...items)": {
      "args": [
        "...items"
      ],
      "for": [
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "onSubmittedWorkDone()": {
    "onSubmittedWorkDone()": {
      "args": [],
      "for": [
        "GPUQueue"
      ],
      "shortname": "webgpu"
    }
  },
  "only()": {
    "only(value)": {
      "args": [
        "value"
      ],
      "for": [
        "IDBKeyRange"
      ],
      "shortname": "indexeddb"
    }
  },
  "open()": {
    "open()": {
      "args": [],
      "for": [
        "EyeDropper",
        "HIDDevice",
        "MIDIPort",
        "SerialPort",
        "USBDevice"
      ],
      "shortname": "eyedropper-api"
    },
    "open(cacheName)": {
      "args": [
        "cacheName"
      ],
      "for": [
        "CacheStorage"
      ],
      "shortname": "service-workers"
    },
    "open(method, url)": {
      "args": [
        "method",
        "url"
      ],
      "for": [
        "XMLHttpRequest"
      ],
      "shortname": "xhr"
    },
    "open(method, url, async)": {
      "args": [
        "method",
        "url",
        "async"
      ],
      "for": [
        "XMLHttpRequest"
      ],
      "shortname": "xhr"
    },
    "open(method, url, async, username)": {
      "args": [
        "method",
        "url",
        "async",
        "username"
      ],
      "for": [
        "XMLHttpRequest"
      ],
      "shortname": "xhr"
    },
    "open(method, url, async, username, password)": {
      "args": [
        "method",
        "url",
        "async",
        "username",
        "password"
      ],
      "for": [
        "XMLHttpRequest"
      ],
      "shortname": "xhr"
    },
    "open(name)": {
      "args": [
        "name"
      ],
      "for": [
        "IDBFactory",
        "StorageBucketManager"
      ],
      "shortname": "storage-buckets"
    },
    "open(name, options)": {
      "args": [
        "name",
        "options"
      ],
      "for": [
        "StorageBucketManager"
      ],
      "shortname": "storage-buckets"
    },
    "open(name, version)": {
      "args": [
        "name",
        "version"
      ],
      "for": [
        "IDBFactory"
      ],
      "shortname": "indexeddb"
    },
    "open(options)": {
      "args": [
        "options"
      ],
      "for": [
        "EyeDropper",
        "SerialPort"
      ],
      "shortname": "eyedropper-api"
    },
    "open(unused1, unused2)": {
      "args": [
        "unused1",
        "unused2"
      ],
      "for": [
        "Document"
      ],
      "shortname": "html"
    },
    "open(url, name, features)": {
      "args": [
        "url",
        "name",
        "features"
      ],
      "for": [
        "Document"
      ],
      "shortname": "html"
    },
    "open(url, target, features)": {
      "args": [
        "url",
        "target",
        "features"
      ],
      "for": [
        "Window"
      ],
      "shortname": "html"
    }
  },
  "openCursor()": {
    "openCursor()": {
      "args": [],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    },
    "openCursor(query)": {
      "args": [
        "query"
      ],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    },
    "openCursor(query, direction)": {
      "args": [
        "query",
        "direction"
      ],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    }
  },
  "openKeyCursor()": {
    "openKeyCursor()": {
      "args": [],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    },
    "openKeyCursor(query)": {
      "args": [
        "query"
      ],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    },
    "openKeyCursor(query, direction)": {
      "args": [
        "query",
        "direction"
      ],
      "for": [
        "IDBIndex",
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    }
  },
  "openWindow()": {
    "openWindow()": {
      "args": [],
      "for": [
        "PaymentRequestEvent"
      ],
      "shortname": "payment-handler"
    },
    "openWindow(url)": {
      "args": [
        "url"
      ],
      "for": [
        "Clients",
        "PaymentRequestEvent"
      ],
      "shortname": "payment-handler"
    }
  },
  "or()": {
    "or(typedArray, index, value)": {
      "args": [
        "typedArray",
        "index",
        "value"
      ],
      "for": [
        "Atomics"
      ],
      "shortname": "ecmascript"
    }
  },
  "overrideMimeType()": {
    "overrideMimeType(mime)": {
      "args": [
        "mime"
      ],
      "for": [
        "XMLHttpRequest"
      ],
      "shortname": "xhr"
    }
  },
  "ownKeys()": {
    "ownKeys(target)": {
      "args": [
        "target"
      ],
      "for": [
        "Reflect"
      ],
      "shortname": "ecmascript"
    }
  },
  "pad()": {
    "pad(input, beginningPadding, endingPadding)": {
      "args": [
        "input",
        "beginningPadding",
        "endingPadding"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "pad(input, beginningPadding, endingPadding, options)": {
      "args": [
        "input",
        "beginningPadding",
        "endingPadding",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "padEnd()": {
    "padEnd(maxLength, fillString)": {
      "args": [
        "maxLength",
        "fillString"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "padStart()": {
    "padStart(maxLength, fillString)": {
      "args": [
        "maxLength",
        "fillString"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "parentNode()": {
    "parentNode()": {
      "args": [],
      "for": [
        "TreeWalker"
      ],
      "shortname": "dom"
    }
  },
  "parse()": {
    "parse(cssText)": {
      "args": [
        "cssText"
      ],
      "for": [
        "CSSColorValue",
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "parse(property, cssText)": {
      "args": [
        "property",
        "cssText"
      ],
      "for": [
        "CSSStyleValue"
      ],
      "shortname": "css-typed-om"
    },
    "parse(string)": {
      "args": [
        "string"
      ],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    },
    "parse(text, reviver)": {
      "args": [
        "text",
        "reviver"
      ],
      "for": [
        "JSON"
      ],
      "shortname": "ecmascript"
    },
    "parse(url)": {
      "args": [
        "url"
      ],
      "for": [
        "URL"
      ],
      "shortname": "url"
    },
    "parse(url, base)": {
      "args": [
        "url",
        "base"
      ],
      "for": [
        "URL"
      ],
      "shortname": "url"
    }
  },
  "parseAll()": {
    "parseAll(property, cssText)": {
      "args": [
        "property",
        "cssText"
      ],
      "for": [
        "CSSStyleValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "parseCommaValueList()": {
    "parseCommaValueList(css)": {
      "args": [
        "css"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-parser-api"
    }
  },
  "parseCreationOptionsFromJSON()": {
    "parseCreationOptionsFromJSON(options)": {
      "args": [
        "options"
      ],
      "for": [
        "PublicKeyCredential"
      ],
      "shortname": "webauthn"
    }
  },
  "parseDeclaration()": {
    "parseDeclaration(css)": {
      "args": [
        "css"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-parser-api"
    },
    "parseDeclaration(css, options)": {
      "args": [
        "css",
        "options"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-parser-api"
    }
  },
  "parseDeclarationList()": {
    "parseDeclarationList(css)": {
      "args": [
        "css"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-parser-api"
    },
    "parseDeclarationList(css, options)": {
      "args": [
        "css",
        "options"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-parser-api"
    }
  },
  "parseFloat()": {
    "parseFloat(string)": {
      "args": [
        "string"
      ],
      "for": [
        "Number",
        "globalThis"
      ],
      "shortname": "ecmascript"
    }
  },
  "parseFromString()": {
    "parseFromString(string, type)": {
      "args": [
        "string",
        "type"
      ],
      "for": [
        "DOMParser"
      ],
      "shortname": "html"
    }
  },
  "parseHTML()": {
    "parseHTML(html)": {
      "args": [
        "html"
      ],
      "for": [
        "Document"
      ],
      "shortname": "sanitizer-api"
    },
    "parseHTML(html, options)": {
      "args": [
        "html",
        "options"
      ],
      "for": [
        "Document"
      ],
      "shortname": "sanitizer-api"
    }
  },
  "parseHTMLUnsafe()": {
    "parseHTMLUnsafe(html)": {
      "args": [
        "html"
      ],
      "for": [
        "Document"
      ],
      "shortname": "html"
    },
    "parseHTMLUnsafe(html, options)": {
      "args": [
        "html",
        "options"
      ],
      "for": [
        "Document"
      ],
      "shortname": "sanitizer-api"
    }
  },
  "parseInt()": {
    "parseInt(string, radix)": {
      "args": [
        "string",
        "radix"
      ],
      "for": [
        "Number",
        "globalThis"
      ],
      "shortname": "ecmascript"
    }
  },
  "parseRequestOptionsFromJSON()": {
    "parseRequestOptionsFromJSON(options)": {
      "args": [
        "options"
      ],
      "for": [
        "PublicKeyCredential"
      ],
      "shortname": "webauthn"
    }
  },
  "parseRule()": {
    "parseRule(css)": {
      "args": [
        "css"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-parser-api"
    },
    "parseRule(css, options)": {
      "args": [
        "css",
        "options"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-parser-api"
    }
  },
  "parseRuleList()": {
    "parseRuleList(css)": {
      "args": [
        "css"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-parser-api"
    },
    "parseRuleList(css, options)": {
      "args": [
        "css",
        "options"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-parser-api"
    }
  },
  "parseStylesheet()": {
    "parseStylesheet(css)": {
      "args": [
        "css"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-parser-api"
    },
    "parseStylesheet(css, options)": {
      "args": [
        "css",
        "options"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-parser-api"
    }
  },
  "parseValue()": {
    "parseValue(css)": {
      "args": [
        "css"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-parser-api"
    }
  },
  "parseValueList()": {
    "parseValueList(css)": {
      "args": [
        "css"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-parser-api"
    }
  },
  "pause()": {
    "pause()": {
      "args": [],
      "for": [
        "Animation",
        "HTMLMediaElement",
        "MediaRecorder",
        "SpeechSynthesis"
      ],
      "shortname": "html"
    }
  },
  "pc()": {
    "pc(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "percent()": {
    "percent(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "permissionState()": {
    "permissionState()": {
      "args": [],
      "for": [
        "PushManager"
      ],
      "shortname": "push-api"
    },
    "permissionState(options)": {
      "args": [
        "options"
      ],
      "for": [
        "PushManager"
      ],
      "shortname": "push-api"
    }
  },
  "persist()": {
    "persist()": {
      "args": [],
      "for": [
        "Animation",
        "StorageBucket",
        "StorageManager"
      ],
      "shortname": "storage"
    }
  },
  "persisted()": {
    "persisted()": {
      "args": [],
      "for": [
        "StorageBucket",
        "StorageManager"
      ],
      "shortname": "storage"
    }
  },
  "pipeThrough()": {
    "pipeThrough(transform)": {
      "args": [
        "transform"
      ],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    },
    "pipeThrough(transform, options)": {
      "args": [
        "transform",
        "options"
      ],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    }
  },
  "pipeTo()": {
    "pipeTo(destination)": {
      "args": [
        "destination"
      ],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    },
    "pipeTo(destination, options)": {
      "args": [
        "destination",
        "options"
      ],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    }
  },
  "play()": {
    "play()": {
      "args": [],
      "for": [
        "Animation",
        "AnimationTimeline",
        "HTMLMediaElement"
      ],
      "shortname": "html"
    },
    "play(effect)": {
      "args": [
        "effect"
      ],
      "for": [
        "AnimationTimeline"
      ],
      "shortname": "web-animations"
    }
  },
  "playEffect()": {
    "playEffect()": {
      "args": [],
      "for": [
        "GamepadHapticActuator"
      ],
      "shortname": "gamepad"
    },
    "playEffect(type)": {
      "args": [
        "type"
      ],
      "for": [
        "GamepadHapticActuator"
      ],
      "shortname": "gamepad"
    },
    "playEffect(type, params)": {
      "args": [
        "type",
        "params"
      ],
      "for": [
        "GamepadHapticActuator"
      ],
      "shortname": "gamepad"
    }
  },
  "pop()": {
    "pop()": {
      "args": [],
      "for": [
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "popDebugGroup()": {
    "popDebugGroup()": {
      "args": [],
      "for": [
        "GPUDebugCommandsMixin"
      ],
      "shortname": "webgpu"
    }
  },
  "popErrorScope()": {
    "popErrorScope()": {
      "args": [],
      "for": [
        "GPUDevice"
      ],
      "shortname": "webgpu"
    }
  },
  "populateMatrix()": {
    "populateMatrix(targetMatrix)": {
      "args": [
        "targetMatrix"
      ],
      "for": [
        "OrientationSensor"
      ],
      "shortname": "orientation-sensor"
    }
  },
  "postMessage()": {
    "postMessage(message)": {
      "args": [
        "message"
      ],
      "for": [
        "BroadcastChannel",
        "Client",
        "HTMLPortalElement",
        "PortalHost",
        "ServiceWorker"
      ],
      "shortname": "html"
    },
    "postMessage(message, options)": {
      "args": [
        "message",
        "options"
      ],
      "for": [
        "Client",
        "DedicatedWorkerGlobalScope",
        "HTMLPortalElement",
        "MessagePort",
        "PortalHost",
        "ServiceWorker",
        "Window",
        "Worker"
      ],
      "shortname": "html"
    },
    "postMessage(message, targetOrigin, transfer)": {
      "args": [
        "message",
        "targetOrigin",
        "transfer"
      ],
      "for": [
        "Window"
      ],
      "shortname": "html"
    },
    "postMessage(message, transfer)": {
      "args": [
        "message",
        "transfer"
      ],
      "for": [
        "Client",
        "DedicatedWorkerGlobalScope",
        "MessagePort",
        "ServiceWorker",
        "Worker"
      ],
      "shortname": "html"
    }
  },
  "postTask()": {
    "postTask(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "Scheduler"
      ],
      "shortname": "scheduling-apis"
    },
    "postTask(callback, options)": {
      "args": [
        "callback",
        "options"
      ],
      "for": [
        "Scheduler"
      ],
      "shortname": "scheduling-apis"
    }
  },
  "pow()": {
    "pow(a, b)": {
      "args": [
        "a",
        "b"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "pow(a, b, options)": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "pow(base, exponent)": {
      "args": [
        "base",
        "exponent"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "preMultiplySelf()": {
    "preMultiplySelf()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "preMultiplySelf(other)": {
      "args": [
        "other"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "prelu()": {
    "prelu(input, slope)": {
      "args": [
        "input",
        "slope"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "prelu(input, slope, options)": {
      "args": [
        "input",
        "slope",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "prepend()": {
    "prepend()": {
      "args": [],
      "for": [
        "GroupEffect",
        "ParentNode"
      ],
      "shortname": "dom"
    },
    "prepend(...effects)": {
      "args": [
        "...effects"
      ],
      "for": [
        "GroupEffect"
      ],
      "shortname": "web-animations"
    },
    "prepend(...nodes)": {
      "args": [
        "...nodes"
      ],
      "for": [
        "ParentNode"
      ],
      "shortname": "dom"
    }
  },
  "preventDefault()": {
    "preventDefault()": {
      "args": [],
      "for": [
        "Event"
      ],
      "shortname": "dom"
    }
  },
  "preventExtensions()": {
    "preventExtensions(O)": {
      "args": [
        "O"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    },
    "preventExtensions(target)": {
      "args": [
        "target"
      ],
      "for": [
        "Reflect"
      ],
      "shortname": "ecmascript"
    }
  },
  "preventSilentAccess()": {
    "preventSilentAccess()": {
      "args": [],
      "for": [
        "CredentialsContainer"
      ],
      "shortname": "credential-management"
    }
  },
  "previousNode()": {
    "previousNode()": {
      "args": [],
      "for": [
        "NodeIterator",
        "TreeWalker"
      ],
      "shortname": "dom"
    }
  },
  "previousSibling()": {
    "previousSibling()": {
      "args": [],
      "for": [
        "TreeWalker"
      ],
      "shortname": "dom"
    }
  },
  "print()": {
    "print()": {
      "args": [],
      "for": [
        "Window"
      ],
      "shortname": "html"
    }
  },
  "prompt()": {
    "prompt()": {
      "args": [],
      "for": [
        "BeforeInstallPromptEvent",
        "RemotePlayback"
      ],
      "shortname": "manifest-incubations"
    },
    "prompt(message, default)": {
      "args": [
        "message",
        "default"
      ],
      "for": [
        "Window"
      ],
      "shortname": "html"
    }
  },
  "propertyIsEnumerable()": {
    "propertyIsEnumerable(V)": {
      "args": [
        "V"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    }
  },
  "pseudo()": {
    "pseudo(type)": {
      "args": [
        "type"
      ],
      "for": [
        "CSSPseudoElement",
        "Element"
      ],
      "shortname": "css-pseudo"
    }
  },
  "pt()": {
    "pt(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "pulse()": {
    "pulse()": {
      "args": [],
      "for": [
        "GamepadHapticActuator"
      ],
      "shortname": "gamepad-extensions"
    },
    "pulse(value, duration)": {
      "args": [
        "value",
        "duration"
      ],
      "for": [
        "GamepadHapticActuator"
      ],
      "shortname": "gamepad-extensions"
    }
  },
  "push()": {
    "push(...items)": {
      "args": [
        "...items"
      ],
      "for": [
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "pushDebugGroup()": {
    "pushDebugGroup(groupLabel)": {
      "args": [
        "groupLabel"
      ],
      "for": [
        "GPUDebugCommandsMixin"
      ],
      "shortname": "webgpu"
    }
  },
  "pushErrorScope()": {
    "pushErrorScope(filter)": {
      "args": [
        "filter"
      ],
      "for": [
        "GPUDevice"
      ],
      "shortname": "webgpu"
    }
  },
  "pushState()": {
    "pushState(data, unused, url)": {
      "args": [
        "data",
        "unused",
        "url"
      ],
      "for": [
        "History"
      ],
      "shortname": "html"
    }
  },
  "put()": {
    "put(request, response)": {
      "args": [
        "request",
        "response"
      ],
      "for": [
        "Cache"
      ],
      "shortname": "service-workers"
    },
    "put(value)": {
      "args": [
        "value"
      ],
      "for": [
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    },
    "put(value, key)": {
      "args": [
        "value",
        "key"
      ],
      "for": [
        "IDBObjectStore"
      ],
      "shortname": "indexeddb"
    }
  },
  "putImageData()": {
    "putImageData()": {
      "args": [],
      "for": [
        "CanvasImageData"
      ],
      "shortname": "html"
    }
  },
  "px()": {
    "px(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "quadraticCurveTo()": {
    "quadraticCurveTo(cpx, cpy, x, y)": {
      "args": [
        "cpx",
        "cpy",
        "x",
        "y"
      ],
      "for": [
        "CanvasPath"
      ],
      "shortname": "html"
    }
  },
  "query()": {
    "query()": {
      "args": [],
      "for": [
        "LockManager",
        "Permissions"
      ],
      "shortname": "permissions"
    },
    "query(permissionDesc)": {
      "args": [
        "permissionDesc"
      ],
      "for": [
        "Permissions"
      ],
      "shortname": "permissions"
    }
  },
  "queryFeatureSupport()": {
    "queryFeatureSupport(feature)": {
      "args": [
        "feature"
      ],
      "for": [
        "ProtectedAudience"
      ],
      "shortname": "turtledove"
    }
  },
  "queryHandwritingRecognizer()": {
    "queryHandwritingRecognizer(constraint)": {
      "args": [
        "constraint"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "handwriting-recognition"
    }
  },
  "queryLocalFonts()": {
    "queryLocalFonts()": {
      "args": [],
      "for": [
        "Window"
      ],
      "shortname": "local-font-access"
    },
    "queryLocalFonts(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Window"
      ],
      "shortname": "local-font-access"
    }
  },
  "queryPermission()": {
    "queryPermission()": {
      "args": [],
      "for": [
        "FileSystemHandle"
      ],
      "shortname": "file-system-access"
    },
    "queryPermission(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "FileSystemHandle"
      ],
      "shortname": "file-system-access"
    }
  },
  "querySelector()": {
    "querySelector(selectors)": {
      "args": [
        "selectors"
      ],
      "for": [
        "ParentNode"
      ],
      "shortname": "dom"
    }
  },
  "querySelectorAll()": {
    "querySelectorAll(selectors)": {
      "args": [
        "selectors"
      ],
      "for": [
        "ParentNode"
      ],
      "shortname": "dom"
    }
  },
  "queueMicrotask()": {
    "queueMicrotask(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "WindowOrWorkerGlobalScope"
      ],
      "shortname": "html"
    }
  },
  "race()": {
    "race(iterable)": {
      "args": [
        "iterable"
      ],
      "for": [
        "Promise"
      ],
      "shortname": "ecmascript"
    }
  },
  "rad()": {
    "rad(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "random()": {
    "random()": {
      "args": [],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "randomUUID()": {
    "randomUUID()": {
      "args": [],
      "for": [
        "Crypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "raw()": {
    "raw(template, ...substitutions)": {
      "args": [
        "template",
        "...substitutions"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "rcap()": {
    "rcap(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "rch()": {
    "rch(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "read()": {
    "read()": {
      "args": [],
      "for": [
        "Clipboard",
        "GeolocationSensor",
        "ReadableStreamDefaultReader"
      ],
      "shortname": "streams"
    },
    "read(buffer)": {
      "args": [
        "buffer"
      ],
      "for": [
        "FileSystemSyncAccessHandle"
      ],
      "shortname": "fs"
    },
    "read(buffer, FileSystemReadWriteOptions: options)": {
      "args": [
        "buffer",
        "FileSystemReadWriteOptions: options"
      ],
      "for": [
        "FileSystemSyncAccessHandle"
      ],
      "shortname": "fs"
    },
    "read(buffer, options)": {
      "args": [
        "buffer",
        "options"
      ],
      "for": [
        "FileSystemSyncAccessHandle"
      ],
      "shortname": "fs"
    },
    "read(formats)": {
      "args": [
        "formats"
      ],
      "for": [
        "Clipboard"
      ],
      "shortname": "clipboard-apis"
    },
    "read(readOptions)": {
      "args": [
        "readOptions"
      ],
      "for": [
        "GeolocationSensor"
      ],
      "shortname": "geolocation-sensor"
    },
    "read(view)": {
      "args": [
        "view"
      ],
      "for": [
        "ReadableStreamBYOBReader"
      ],
      "shortname": "streams"
    },
    "read(view, options)": {
      "args": [
        "view",
        "options"
      ],
      "for": [
        "ReadableStreamBYOBReader"
      ],
      "shortname": "streams"
    }
  },
  "readAsArrayBuffer()": {
    "readAsArrayBuffer(blob)": {
      "args": [
        "blob"
      ],
      "for": [
        "FileReader",
        "FileReaderSync"
      ],
      "shortname": "fileapi"
    }
  },
  "readAsBinaryString()": {
    "readAsBinaryString(blob)": {
      "args": [
        "blob"
      ],
      "for": [
        "FileReader",
        "FileReaderSync"
      ],
      "shortname": "fileapi"
    }
  },
  "readAsDataURL()": {
    "readAsDataURL(blob)": {
      "args": [
        "blob"
      ],
      "for": [
        "FileReader",
        "FileReaderSync"
      ],
      "shortname": "fileapi"
    }
  },
  "readAsText()": {
    "readAsText(blob)": {
      "args": [
        "blob"
      ],
      "for": [
        "FileReader",
        "FileReaderSync"
      ],
      "shortname": "fileapi"
    },
    "readAsText(blob, encoding)": {
      "args": [
        "blob",
        "encoding"
      ],
      "for": [
        "FileReader",
        "FileReaderSync"
      ],
      "shortname": "fileapi"
    }
  },
  "readEntries()": {
    "readEntries(successCallback)": {
      "args": [
        "successCallback"
      ],
      "for": [
        "FileSystemDirectoryReader"
      ],
      "shortname": "entries-api"
    },
    "readEntries(successCallback, errorCallback)": {
      "args": [
        "successCallback",
        "errorCallback"
      ],
      "for": [
        "FileSystemDirectoryEntry",
        "FileSystemDirectoryReader"
      ],
      "shortname": "entries-api"
    }
  },
  "readText()": {
    "readText()": {
      "args": [],
      "for": [
        "Clipboard"
      ],
      "shortname": "clipboard-apis"
    }
  },
  "readValue()": {
    "readValue()": {
      "args": [],
      "for": [
        "BluetoothRemoteGATTCharacteristic",
        "BluetoothRemoteGATTDescriptor"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "receiveFeatureReport()": {
    "receiveFeatureReport()": {
      "args": [],
      "for": [
        "HIDDevice"
      ],
      "shortname": "webhid"
    },
    "receiveFeatureReport(reportId)": {
      "args": [
        "reportId"
      ],
      "for": [
        "HIDDevice"
      ],
      "shortname": "webhid"
    }
  },
  "reciprocal()": {
    "reciprocal(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "reciprocal(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "reconnect()": {
    "reconnect()": {
      "args": [],
      "for": [
        "PresentationRequest"
      ],
      "shortname": "presentation-api"
    },
    "reconnect(presentationId)": {
      "args": [
        "presentationId"
      ],
      "for": [
        "PresentationRequest"
      ],
      "shortname": "presentation-api"
    }
  },
  "rect()": {
    "rect(x, y, w, h)": {
      "args": [
        "x",
        "y",
        "w",
        "h"
      ],
      "for": [
        "CanvasPath"
      ],
      "shortname": "html"
    }
  },
  "redirect()": {
    "redirect(url)": {
      "args": [
        "url"
      ],
      "for": [
        "Response"
      ],
      "shortname": "fetch"
    },
    "redirect(url, status)": {
      "args": [
        "url",
        "status"
      ],
      "for": [
        "Response"
      ],
      "shortname": "fetch"
    }
  },
  "reduce()": {
    "reduce(callback, initialValue)": {
      "args": [
        "callback",
        "initialValue"
      ],
      "for": [
        "%TypedArray%",
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "reduceL1()": {
    "reduceL1(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "reduceL1(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "reduceL2()": {
    "reduceL2(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "reduceL2(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "reduceLogSum()": {
    "reduceLogSum(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "reduceLogSum(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "reduceLogSumExp()": {
    "reduceLogSumExp(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "reduceLogSumExp(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "reduceMax()": {
    "reduceMax(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "reduceMax(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "reduceMean()": {
    "reduceMean(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "reduceMean(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "reduceMin()": {
    "reduceMin(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "reduceMin(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "reduceProduct()": {
    "reduceProduct(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "reduceProduct(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "reduceRight()": {
    "reduceRight(callback, initialValue)": {
      "args": [
        "callback",
        "initialValue"
      ],
      "for": [
        "%TypedArray%",
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "reduceSum()": {
    "reduceSum(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "reduceSum(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "reduceSumSquare()": {
    "reduceSumSquare(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "reduceSumSquare(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "refresh()": {
    "refresh()": {
      "args": [],
      "for": [
        "PluginArray"
      ],
      "shortname": "html"
    }
  },
  "register()": {
    "register()": {
      "args": [],
      "for": [
        "RTCIdentityProviderRegistrar"
      ],
      "shortname": "webrtc-identity"
    },
    "register(idp)": {
      "args": [
        "idp"
      ],
      "for": [
        "RTCIdentityProviderRegistrar"
      ],
      "shortname": "webrtc-identity"
    },
    "register(name, operationCtor)": {
      "args": [
        "name",
        "operationCtor"
      ],
      "for": [
        "SharedStorageWorkletGlobalScope"
      ],
      "shortname": "shared-storage"
    },
    "register(scriptURL)": {
      "args": [
        "scriptURL"
      ],
      "for": [
        "ServiceWorkerContainer"
      ],
      "shortname": "service-workers"
    },
    "register(scriptURL, options)": {
      "args": [
        "scriptURL",
        "options"
      ],
      "for": [
        "ServiceWorkerContainer"
      ],
      "shortname": "service-workers"
    },
    "register(tag)": {
      "args": [
        "tag"
      ],
      "for": [
        "PeriodicSyncManager",
        "SyncManager"
      ],
      "shortname": "background-sync"
    },
    "register(tag, options)": {
      "args": [
        "tag",
        "options"
      ],
      "for": [
        "PeriodicSyncManager"
      ],
      "shortname": "periodic-background-sync"
    },
    "register(target, heldValue, unregisterToken)": {
      "args": [
        "target",
        "heldValue",
        "unregisterToken"
      ],
      "for": [
        "FinalizationRegistry"
      ],
      "shortname": "ecmascript"
    }
  },
  "registerAdBeacon()": {
    "registerAdBeacon(map)": {
      "args": [
        "map"
      ],
      "for": [
        "InterestGroupReportingScriptRunnerGlobalScope"
      ],
      "shortname": "turtledove"
    }
  },
  "registerAdMacro()": {
    "registerAdMacro(name, value)": {
      "args": [
        "name",
        "value"
      ],
      "for": [
        "InterestGroupReportingScriptRunnerGlobalScope"
      ],
      "shortname": "turtledove"
    }
  },
  "registerAnimator()": {
    "registerAnimator(name, animatorCtor)": {
      "args": [
        "name",
        "animatorCtor"
      ],
      "for": [
        "AnimationWorkletGlobalScope"
      ],
      "shortname": "css-animation-worklet"
    }
  },
  "registerLayout()": {
    "registerLayout(name, layoutCtor)": {
      "args": [
        "name",
        "layoutCtor"
      ],
      "for": [
        "LayoutWorkletGlobalScope"
      ],
      "shortname": "css-layout-api"
    }
  },
  "registerPaint()": {
    "registerPaint(name, paintCtor)": {
      "args": [
        "name",
        "paintCtor"
      ],
      "for": [
        "PaintWorkletGlobalScope"
      ],
      "shortname": "css-paint-api"
    }
  },
  "registerProcessor()": {
    "registerProcessor(name, processorCtor)": {
      "args": [
        "name",
        "processorCtor"
      ],
      "for": [
        "AudioWorkletGlobalScope"
      ],
      "shortname": "webaudio"
    }
  },
  "registerProperty()": {
    "registerProperty(definition)": {
      "args": [
        "definition"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-properties-values-api"
    }
  },
  "registerProtocolHandler()": {
    "registerProtocolHandler(scheme, url)": {
      "args": [
        "scheme",
        "url"
      ],
      "for": [
        "NavigatorContentUtils"
      ],
      "shortname": "html"
    }
  },
  "reject()": {
    "reject(r)": {
      "args": [
        "r"
      ],
      "for": [
        "Promise"
      ],
      "shortname": "ecmascript"
    }
  },
  "release()": {
    "release()": {
      "args": [],
      "for": [
        "WakeLockSentinel"
      ],
      "shortname": "screen-wake-lock"
    }
  },
  "releaseEvents()": {
    "releaseEvents()": {
      "args": [],
      "for": [
        "Document",
        "Window"
      ],
      "shortname": "html"
    }
  },
  "releaseInterface()": {
    "releaseInterface(interfaceNumber)": {
      "args": [
        "interfaceNumber"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    }
  },
  "releaseLock()": {
    "releaseLock()": {
      "args": [],
      "for": [
        "ReadableStreamBYOBReader",
        "ReadableStreamDefaultReader",
        "WritableStreamDefaultWriter"
      ],
      "shortname": "streams"
    }
  },
  "releasePointerCapture()": {
    "releasePointerCapture()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "pointerevents"
    },
    "releasePointerCapture(pointerId)": {
      "args": [
        "pointerId"
      ],
      "for": [
        "Element"
      ],
      "shortname": "pointerevents"
    }
  },
  "reload()": {
    "reload()": {
      "args": [],
      "for": [
        "Location"
      ],
      "shortname": "html"
    },
    "reload(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Navigation"
      ],
      "shortname": "html"
    }
  },
  "relu()": {
    "relu(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "relu(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "rem()": {
    "rem(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "remainingBudget()": {
    "remainingBudget()": {
      "args": [],
      "for": [
        "SharedStorage"
      ],
      "shortname": "shared-storage"
    }
  },
  "remove()": {
    "remove()": {
      "args": [],
      "for": [
        "AnimationEffect",
        "ChildNode",
        "DOMTokenList",
        "HTMLSelectElement",
        "MediaKeySession",
        "SourceBuffer"
      ],
      "shortname": "dom"
    },
    "remove(...tokens)": {
      "args": [
        "...tokens"
      ],
      "for": [
        "DOMTokenList"
      ],
      "shortname": "dom"
    },
    "remove(index)": {
      "args": [
        "index"
      ],
      "for": [
        "DataTransferItemList",
        "HTMLOptionsCollection"
      ],
      "shortname": "html"
    },
    "remove(start, end)": {
      "args": [
        "start",
        "end"
      ],
      "for": [
        "SourceBuffer"
      ],
      "shortname": "media-source"
    },
    "remove(tokens)": {
      "args": [
        "tokens"
      ],
      "for": [
        "DOMTokenList"
      ],
      "shortname": "dom"
    }
  },
  "removeAllRanges()": {
    "removeAllRanges()": {
      "args": [],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    }
  },
  "removeAttribute()": {
    "removeAttribute(qualifiedName)": {
      "args": [
        "qualifiedName"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "removeAttributeNS()": {
    "removeAttributeNS(namespace, localName)": {
      "args": [
        "namespace",
        "localName"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "removeAttributeNode()": {
    "removeAttributeNode(attr)": {
      "args": [
        "attr"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "removeChild()": {
    "removeChild(child)": {
      "args": [
        "child"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "removeCue()": {
    "removeCue(cue)": {
      "args": [
        "cue"
      ],
      "for": [
        "TextTrack"
      ],
      "shortname": "html"
    }
  },
  "removeEntry()": {
    "removeEntry(name)": {
      "args": [
        "name"
      ],
      "for": [
        "FileSystemDirectoryHandle"
      ],
      "shortname": "fs"
    },
    "removeEntry(name, options)": {
      "args": [
        "name",
        "options"
      ],
      "for": [
        "FileSystemDirectoryHandle"
      ],
      "shortname": "fs"
    }
  },
  "removeEventListener()": {
    "removeEventListener(type, callback)": {
      "args": [
        "type",
        "callback"
      ],
      "for": [
        "EventTarget"
      ],
      "shortname": "dom"
    },
    "removeEventListener(type, callback, options)": {
      "args": [
        "type",
        "callback",
        "options"
      ],
      "for": [
        "EventTarget"
      ],
      "shortname": "dom"
    }
  },
  "removeItem()": {
    "removeItem(key)": {
      "args": [
        "key"
      ],
      "for": [
        "Storage"
      ],
      "shortname": "html"
    }
  },
  "removeListener()": {
    "removeListener(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "MediaQueryList"
      ],
      "shortname": "cssom-view"
    },
    "removeListener(listener)": {
      "args": [
        "listener"
      ],
      "for": [
        "MediaQueryList"
      ],
      "shortname": "cssom-view"
    }
  },
  "removeNamedItem()": {
    "removeNamedItem(qualifiedName)": {
      "args": [
        "qualifiedName"
      ],
      "for": [
        "NamedNodeMap"
      ],
      "shortname": "dom"
    }
  },
  "removeNamedItemNS()": {
    "removeNamedItemNS(namespace, localName)": {
      "args": [
        "namespace",
        "localName"
      ],
      "for": [
        "NamedNodeMap"
      ],
      "shortname": "dom"
    }
  },
  "removeParameter()": {
    "removeParameter(namespaceURI, localName)": {
      "args": [
        "namespaceURI",
        "localName"
      ],
      "for": [
        "XSLTProcessor"
      ],
      "shortname": "dom"
    }
  },
  "removeProperty()": {
    "removeProperty(property)": {
      "args": [
        "property"
      ],
      "for": [
        "CSSStyleDeclaration"
      ],
      "shortname": "cssom"
    }
  },
  "removeRange()": {
    "removeRange()": {
      "args": [],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    },
    "removeRange(range)": {
      "args": [
        "range"
      ],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    }
  },
  "removeRule()": {
    "removeRule()": {
      "args": [],
      "for": [
        "CSSStyleSheet"
      ],
      "shortname": "cssom"
    },
    "removeRule(index)": {
      "args": [
        "index"
      ],
      "for": [
        "CSSStyleSheet"
      ],
      "shortname": "cssom"
    }
  },
  "removeSourceBuffer()": {
    "removeSourceBuffer()": {
      "args": [],
      "for": [
        "MediaSource"
      ],
      "shortname": "media-source"
    },
    "removeSourceBuffer(sourceBuffer)": {
      "args": [
        "sourceBuffer"
      ],
      "for": [
        "MediaSource"
      ],
      "shortname": "media-source"
    }
  },
  "removeStroke()": {
    "removeStroke(stroke)": {
      "args": [
        "stroke"
      ],
      "for": [
        "HandwritingDrawing"
      ],
      "shortname": "handwriting-recognition"
    }
  },
  "removeTrack()": {
    "removeTrack()": {
      "args": [],
      "for": [
        "MediaStream",
        "RTCPeerConnection"
      ],
      "shortname": "mediacapture-streams"
    },
    "removeTrack(sender)": {
      "args": [
        "sender"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "removeTrack(track)": {
      "args": [
        "track"
      ],
      "for": [
        "MediaStream"
      ],
      "shortname": "mediacapture-streams"
    }
  },
  "removeTrackingException()": {
    "removeTrackingException()": {
      "args": [],
      "for": [
        "Navigator"
      ],
      "shortname": "tracking-dnt"
    },
    "removeTrackingException(properties)": {
      "args": [
        "properties"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "tracking-dnt"
    }
  },
  "renameNode()": {
    "renameNode()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "dom"
    }
  },
  "repeat()": {
    "repeat(count)": {
      "args": [
        "count"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "replace()": {
    "replace()": {
      "args": [],
      "for": [
        "AnimationEffect"
      ],
      "shortname": "web-animations"
    },
    "replace(...effects)": {
      "args": [
        "...effects"
      ],
      "for": [
        "AnimationEffect"
      ],
      "shortname": "web-animations"
    },
    "replace(searchValue, replaceValue)": {
      "args": [
        "searchValue",
        "replaceValue"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    },
    "replace(text)": {
      "args": [
        "text"
      ],
      "for": [
        "CSSStyleSheet"
      ],
      "shortname": "cssom"
    },
    "replace(token, newToken)": {
      "args": [
        "token",
        "newToken"
      ],
      "for": [
        "DOMTokenList"
      ],
      "shortname": "dom"
    },
    "replace(url)": {
      "args": [
        "url"
      ],
      "for": [
        "Location"
      ],
      "shortname": "html"
    }
  },
  "replaceAll()": {
    "replaceAll(searchValue, replaceValue)": {
      "args": [
        "searchValue",
        "replaceValue"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "replaceChild()": {
    "replaceChild(node, child)": {
      "args": [
        "node",
        "child"
      ],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "replaceChildren()": {
    "replaceChildren()": {
      "args": [],
      "for": [
        "ParentNode"
      ],
      "shortname": "dom"
    },
    "replaceChildren(...nodes)": {
      "args": [
        "...nodes"
      ],
      "for": [
        "ParentNode"
      ],
      "shortname": "dom"
    }
  },
  "replaceData()": {
    "replaceData(offset, count, data)": {
      "args": [
        "offset",
        "count",
        "data"
      ],
      "for": [
        "CharacterData"
      ],
      "shortname": "dom"
    }
  },
  "replaceState()": {
    "replaceState(data, unused, url)": {
      "args": [
        "data",
        "unused",
        "url"
      ],
      "for": [
        "History"
      ],
      "shortname": "html"
    }
  },
  "replaceSync()": {
    "replaceSync(text)": {
      "args": [
        "text"
      ],
      "for": [
        "CSSStyleSheet"
      ],
      "shortname": "cssom"
    }
  },
  "replaceTrack()": {
    "replaceTrack()": {
      "args": [],
      "for": [
        "RTCRtpSender"
      ],
      "shortname": "webrtc"
    },
    "replaceTrack(withTrack)": {
      "args": [
        "withTrack"
      ],
      "for": [
        "RTCRtpSender"
      ],
      "shortname": "webrtc"
    }
  },
  "replaceWholeText()": {
    "replaceWholeText()": {
      "args": [],
      "for": [
        "Text"
      ],
      "shortname": "dom"
    }
  },
  "replaceWith()": {
    "replaceWith()": {
      "args": [],
      "for": [
        "ChildNode"
      ],
      "shortname": "dom"
    },
    "replaceWith(...nodes)": {
      "args": [
        "...nodes"
      ],
      "for": [
        "ChildNode"
      ],
      "shortname": "dom"
    }
  },
  "reportAdAuctionLoss()": {
    "reportAdAuctionLoss(url)": {
      "args": [
        "url"
      ],
      "for": [
        "ForDebuggingOnly"
      ],
      "shortname": "turtledove"
    }
  },
  "reportAdAuctionWin()": {
    "reportAdAuctionWin(url)": {
      "args": [
        "url"
      ],
      "for": [
        "ForDebuggingOnly"
      ],
      "shortname": "turtledove"
    }
  },
  "reportError()": {
    "reportError(e)": {
      "args": [
        "e"
      ],
      "for": [
        "WindowOrWorkerGlobalScope"
      ],
      "shortname": "html"
    }
  },
  "reportEvent()": {
    "reportEvent()": {
      "args": [],
      "for": [
        "Fence"
      ],
      "shortname": "fenced-frame"
    },
    "reportEvent(event)": {
      "args": [
        "event"
      ],
      "for": [
        "Fence"
      ],
      "shortname": "fenced-frame"
    }
  },
  "reportValidity()": {
    "reportValidity()": {
      "args": [],
      "for": [
        "ElementInternals",
        "HTMLButtonElement",
        "HTMLFieldSetElement",
        "HTMLFormElement",
        "HTMLInputElement",
        "HTMLObjectElement",
        "HTMLOutputElement",
        "HTMLSelectElement",
        "HTMLTextAreaElement"
      ],
      "shortname": "html"
    }
  },
  "request()": {
    "request()": {
      "args": [],
      "for": [
        "WakeLock"
      ],
      "shortname": "screen-wake-lock"
    },
    "request(name, callback)": {
      "args": [
        "name",
        "callback"
      ],
      "for": [
        "LockManager"
      ],
      "shortname": "web-locks"
    },
    "request(name, options, callback)": {
      "args": [
        "name",
        "options",
        "callback"
      ],
      "for": [
        "LockManager"
      ],
      "shortname": "web-locks"
    },
    "request(permissionDesc)": {
      "args": [
        "permissionDesc"
      ],
      "for": [
        "Permissions"
      ],
      "shortname": "permissions-request"
    },
    "request(type)": {
      "args": [
        "type"
      ],
      "for": [
        "WakeLock"
      ],
      "shortname": "screen-wake-lock"
    }
  },
  "requestAdapter()": {
    "requestAdapter()": {
      "args": [],
      "for": [
        "GPU"
      ],
      "shortname": "webgpu"
    },
    "requestAdapter(options)": {
      "args": [
        "options"
      ],
      "for": [
        "GPU"
      ],
      "shortname": "webgpu"
    }
  },
  "requestAnimationFrame()": {
    "requestAnimationFrame(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "AnimationFrameProvider",
        "XRSession"
      ],
      "shortname": "html"
    }
  },
  "requestClose()": {
    "requestClose()": {
      "args": [],
      "for": [
        "CloseWatcher"
      ],
      "shortname": "html"
    }
  },
  "requestData()": {
    "requestData()": {
      "args": [],
      "for": [
        "MediaRecorder"
      ],
      "shortname": "mediastream-recording"
    }
  },
  "requestDevice()": {
    "requestDevice()": {
      "args": [],
      "for": [
        "Bluetooth",
        "GPUAdapter",
        "HID"
      ],
      "shortname": "web-bluetooth"
    },
    "requestDevice(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "GPUAdapter"
      ],
      "shortname": "webgpu"
    },
    "requestDevice(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Bluetooth",
        "HID",
        "USB"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "requestFrame()": {
    "requestFrame()": {
      "args": [],
      "for": [
        "CanvasCaptureMediaStreamTrack"
      ],
      "shortname": "mediacapture-fromelement"
    }
  },
  "requestFullscreen()": {
    "requestFullscreen()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "fullscreen"
    },
    "requestFullscreen(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Element"
      ],
      "shortname": "fullscreen"
    }
  },
  "requestHitTestSource()": {
    "requestHitTestSource(options)": {
      "args": [
        "options"
      ],
      "for": [
        "XRSession"
      ],
      "shortname": "webxr-hit-test"
    }
  },
  "requestHitTestSourceForTransientInput()": {
    "requestHitTestSourceForTransientInput(options)": {
      "args": [
        "options"
      ],
      "for": [
        "XRSession"
      ],
      "shortname": "webxr-hit-test"
    }
  },
  "requestIdleCallback()": {
    "requestIdleCallback()": {
      "args": [],
      "for": [
        "Window"
      ],
      "shortname": "requestidlecallback"
    },
    "requestIdleCallback(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "Window"
      ],
      "shortname": "requestidlecallback"
    },
    "requestIdleCallback(callback, options)": {
      "args": [
        "callback",
        "options"
      ],
      "for": [
        "Window"
      ],
      "shortname": "requestidlecallback"
    }
  },
  "requestLEScan()": {
    "requestLEScan()": {
      "args": [],
      "for": [
        "Bluetooth"
      ],
      "shortname": "web-bluetooth-scanning"
    },
    "requestLEScan(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Bluetooth"
      ],
      "shortname": "web-bluetooth-scanning"
    }
  },
  "requestLightProbe()": {
    "requestLightProbe()": {
      "args": [],
      "for": [
        "XRSession"
      ],
      "shortname": "webxr-lighting-estimation"
    },
    "requestLightProbe(options)": {
      "args": [
        "options"
      ],
      "for": [
        "XRSession"
      ],
      "shortname": "webxr-lighting-estimation"
    }
  },
  "requestMIDIAccess()": {
    "requestMIDIAccess()": {
      "args": [],
      "for": [
        "Navigator"
      ],
      "shortname": "webmidi"
    },
    "requestMIDIAccess(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "webmidi"
    }
  },
  "requestMediaKeySystemAccess()": {
    "requestMediaKeySystemAccess()": {
      "args": [],
      "for": [
        "Navigator"
      ],
      "shortname": "encrypted-media"
    },
    "requestMediaKeySystemAccess(keySystem, supportedConfigurations)": {
      "args": [
        "keySystem",
        "supportedConfigurations"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "encrypted-media"
    }
  },
  "requestOverride()": {
    "requestOverride(value)": {
      "args": [
        "value"
      ],
      "for": [
        "PreferenceObject"
      ],
      "shortname": "web-preferences-api"
    }
  },
  "requestPermission()": {
    "requestPermission()": {
      "args": [],
      "for": [
        "DeviceMotionEvent",
        "DeviceOrientationEvent",
        "FileSystemHandle",
        "IdleDetector",
        "Notification"
      ],
      "shortname": "notifications"
    },
    "requestPermission(absolute)": {
      "args": [
        "absolute"
      ],
      "for": [
        "DeviceOrientationEvent"
      ],
      "shortname": "orientation-event"
    },
    "requestPermission(deprecatedCallback)": {
      "args": [
        "deprecatedCallback"
      ],
      "for": [
        "Notification"
      ],
      "shortname": "notifications"
    },
    "requestPermission(descriptor)": {
      "args": [
        "descriptor"
      ],
      "for": [
        "FileSystemHandle"
      ],
      "shortname": "file-system-access"
    }
  },
  "requestPersistentHandle()": {
    "requestPersistentHandle()": {
      "args": [],
      "for": [
        "XRAnchor"
      ],
      "shortname": "anchors"
    }
  },
  "requestPictureInPicture()": {
    "requestPictureInPicture()": {
      "args": [],
      "for": [
        "HTMLVideoElement"
      ],
      "shortname": "picture-in-picture"
    }
  },
  "requestPointerLock()": {
    "requestPointerLock()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "pointerlock"
    },
    "requestPointerLock(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Element"
      ],
      "shortname": "pointerlock"
    }
  },
  "requestPort()": {
    "requestPort()": {
      "args": [],
      "for": [
        "Serial"
      ],
      "shortname": "serial"
    },
    "requestPort(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Serial"
      ],
      "shortname": "serial"
    }
  },
  "requestPresenter()": {
    "requestPresenter()": {
      "args": [],
      "for": [
        "Ink"
      ],
      "shortname": "ink-enhancement"
    },
    "requestPresenter(param)": {
      "args": [
        "param"
      ],
      "for": [
        "Ink"
      ],
      "shortname": "ink-enhancement"
    }
  },
  "requestReferenceSpace()": {
    "requestReferenceSpace(type)": {
      "args": [
        "type"
      ],
      "for": [
        "XRSession"
      ],
      "shortname": "webxr"
    }
  },
  "requestSession()": {
    "requestSession(mode)": {
      "args": [
        "mode"
      ],
      "for": [
        "XRSystem"
      ],
      "shortname": "webxr"
    },
    "requestSession(mode, options)": {
      "args": [
        "mode",
        "options"
      ],
      "for": [
        "XRSystem"
      ],
      "shortname": "webxr"
    }
  },
  "requestStorageAccess()": {
    "requestStorageAccess()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "storage-access"
    },
    "requestStorageAccess(types)": {
      "args": [
        "types"
      ],
      "for": [
        "Document"
      ],
      "shortname": "saa-non-cookie-storage"
    }
  },
  "requestStorageAccessFor()": {
    "requestStorageAccessFor(requestedOrigin)": {
      "args": [
        "requestedOrigin"
      ],
      "for": [
        "Document"
      ],
      "shortname": "requeststorageaccessfor"
    }
  },
  "requestSubmit()": {
    "requestSubmit(submitter)": {
      "args": [
        "submitter"
      ],
      "for": [
        "HTMLFormElement"
      ],
      "shortname": "html"
    }
  },
  "requestVideoFrameCallback()": {
    "requestVideoFrameCallback(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "HTMLVideoElement"
      ],
      "shortname": "video-rvfc"
    }
  },
  "requestViewportScale()": {
    "requestViewportScale(scale)": {
      "args": [
        "scale"
      ],
      "for": [
        "XRView"
      ],
      "shortname": "webxr"
    }
  },
  "requestWindow()": {
    "requestWindow()": {
      "args": [],
      "for": [
        "DocumentPictureInPicture"
      ],
      "shortname": "document-picture-in-picture"
    },
    "requestWindow(options)": {
      "args": [
        "options"
      ],
      "for": [
        "DocumentPictureInPicture"
      ],
      "shortname": "document-picture-in-picture"
    }
  },
  "resample2d()": {
    "resample2d(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "resample2d(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "reset()": {
    "reset()": {
      "args": [],
      "for": [
        "AudioDecoder",
        "AudioEncoder",
        "CanvasState",
        "GamepadHapticActuator",
        "HTMLFormElement",
        "ImageDecoder",
        "USBDevice",
        "VideoDecoder",
        "VideoEncoder",
        "XSLTProcessor"
      ],
      "shortname": "dom"
    }
  },
  "resetTransform()": {
    "resetTransform()": {
      "args": [],
      "for": [
        "CanvasTransform"
      ],
      "shortname": "html"
    }
  },
  "reshape()": {
    "reshape(input, newShape)": {
      "args": [
        "input",
        "newShape"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "reshape(input, newShape, options)": {
      "args": [
        "input",
        "newShape",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "resize()": {
    "resize(newLength)": {
      "args": [
        "newLength"
      ],
      "for": [
        "ArrayBuffer"
      ],
      "shortname": "ecmascript"
    }
  },
  "resizeBy()": {
    "resizeBy(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "Window"
      ],
      "shortname": "cssom-view"
    }
  },
  "resizeTo()": {
    "resizeTo(width, height)": {
      "args": [
        "width",
        "height"
      ],
      "for": [
        "Window"
      ],
      "shortname": "cssom-view"
    },
    "resizeTo(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "Window"
      ],
      "shortname": "cssom-view"
    }
  },
  "resolve()": {
    "resolve(possibleDescendant)": {
      "args": [
        "possibleDescendant"
      ],
      "for": [
        "FileSystemDirectoryHandle"
      ],
      "shortname": "fs"
    },
    "resolve(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Promise"
      ],
      "shortname": "ecmascript"
    }
  },
  "resolveQuerySet()": {
    "resolveQuerySet(querySet, firstQuery, queryCount, destination, destinationOffset)": {
      "args": [
        "querySet",
        "firstQuery",
        "queryCount",
        "destination",
        "destinationOffset"
      ],
      "for": [
        "GPUCommandEncoder"
      ],
      "shortname": "webgpu"
    }
  },
  "respond()": {
    "respond(bytesWritten)": {
      "args": [
        "bytesWritten"
      ],
      "for": [
        "ReadableStreamBYOBRequest"
      ],
      "shortname": "streams"
    }
  },
  "respondWith()": {
    "respondWith()": {
      "args": [],
      "for": [
        "CanMakePaymentEvent",
        "PaymentRequestEvent"
      ],
      "shortname": "payment-handler"
    },
    "respondWith(canMakePaymentResponse)": {
      "args": [
        "canMakePaymentResponse"
      ],
      "for": [
        "CanMakePaymentEvent"
      ],
      "shortname": "payment-handler"
    },
    "respondWith(handlerResponsePromise)": {
      "args": [
        "handlerResponsePromise"
      ],
      "for": [
        "PaymentRequestEvent"
      ],
      "shortname": "payment-handler"
    },
    "respondWith(r)": {
      "args": [
        "r"
      ],
      "for": [
        "FetchEvent"
      ],
      "shortname": "service-workers"
    }
  },
  "respondWithNewView()": {
    "respondWithNewView(view)": {
      "args": [
        "view"
      ],
      "for": [
        "ReadableStreamBYOBRequest"
      ],
      "shortname": "streams"
    }
  },
  "restartIce()": {
    "restartIce()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "restore()": {
    "restore()": {
      "args": [],
      "for": [
        "CanvasState"
      ],
      "shortname": "html"
    }
  },
  "restorePersistentAnchor()": {
    "restorePersistentAnchor(uuid)": {
      "args": [
        "uuid"
      ],
      "for": [
        "XRSession"
      ],
      "shortname": "anchors"
    }
  },
  "restrictTo()": {
    "restrictTo()": {
      "args": [],
      "for": [
        "BrowserCaptureMediaStreamTrack"
      ],
      "shortname": "element-capture"
    },
    "restrictTo(RestrictionTarget)": {
      "args": [
        "RestrictionTarget"
      ],
      "for": [
        "BrowserCaptureMediaStreamTrack"
      ],
      "shortname": "element-capture"
    }
  },
  "resume()": {
    "resume()": {
      "args": [],
      "for": [
        "AudioContext",
        "MediaRecorder",
        "OfflineAudioContext",
        "SpeechSynthesis"
      ],
      "shortname": "speech-api"
    }
  },
  "retry()": {
    "retry()": {
      "args": [],
      "for": [
        "PaymentResponse"
      ],
      "shortname": "payment-request"
    },
    "retry(errorFields)": {
      "args": [
        "errorFields"
      ],
      "for": [
        "PaymentResponse"
      ],
      "shortname": "payment-request"
    }
  },
  "reverse()": {
    "reverse()": {
      "args": [],
      "for": [
        "%TypedArray%",
        "Animation",
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "revocable()": {
    "revocable(target, handler)": {
      "args": [
        "target",
        "handler"
      ],
      "for": [
        "Proxy"
      ],
      "shortname": "ecmascript"
    }
  },
  "revoke()": {
    "revoke(permissionDesc)": {
      "args": [
        "permissionDesc"
      ],
      "for": [
        "Permissions"
      ],
      "shortname": "permissions-revoke"
    }
  },
  "revokeObjectURL()": {
    "revokeObjectURL(url)": {
      "args": [
        "url"
      ],
      "for": [
        "StorageAccessHandle",
        "URL"
      ],
      "shortname": "saa-non-cookie-storage"
    }
  },
  "rex()": {
    "rex(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "ric()": {
    "ric(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "rlh()": {
    "rlh(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "rotate()": {
    "rotate()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "rotate(angle)": {
      "args": [
        "angle"
      ],
      "for": [
        "CanvasTransform"
      ],
      "shortname": "html"
    },
    "rotate(rotX)": {
      "args": [
        "rotX"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "rotate(rotX, rotY)": {
      "args": [
        "rotX",
        "rotY"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "rotate(rotX, rotY, rotZ)": {
      "args": [
        "rotX",
        "rotY",
        "rotZ"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "rotateAxisAngle()": {
    "rotateAxisAngle()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "rotateAxisAngle(x)": {
      "args": [
        "x"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "rotateAxisAngle(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "rotateAxisAngle(x, y, z)": {
      "args": [
        "x",
        "y",
        "z"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "rotateAxisAngle(x, y, z, angle)": {
      "args": [
        "x",
        "y",
        "z",
        "angle"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "rotateAxisAngleSelf()": {
    "rotateAxisAngleSelf()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "rotateAxisAngleSelf(x)": {
      "args": [
        "x"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "rotateAxisAngleSelf(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "rotateAxisAngleSelf(x, y, z)": {
      "args": [
        "x",
        "y",
        "z"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "rotateAxisAngleSelf(x, y, z, angle)": {
      "args": [
        "x",
        "y",
        "z",
        "angle"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "rotateFromVector()": {
    "rotateFromVector()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "rotateFromVector(x)": {
      "args": [
        "x"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "rotateFromVector(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "rotateFromVectorSelf()": {
    "rotateFromVectorSelf()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "rotateFromVectorSelf(x)": {
      "args": [
        "x"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "rotateFromVectorSelf(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "rotateSelf()": {
    "rotateSelf()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "rotateSelf(rotX)": {
      "args": [
        "rotX"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "rotateSelf(rotX, rotY)": {
      "args": [
        "rotX",
        "rotY"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "rotateSelf(rotX, rotY, rotZ)": {
      "args": [
        "rotX",
        "rotY",
        "rotZ"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "round()": {
    "round(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "roundRect()": {
    "roundRect(x, y, w, h, radii)": {
      "args": [
        "x",
        "y",
        "w",
        "h",
        "radii"
      ],
      "for": [
        "CanvasPath"
      ],
      "shortname": "html"
    }
  },
  "run()": {
    "run(name)": {
      "args": [
        "name"
      ],
      "for": [
        "SharedStorage",
        "SharedStorageWorklet"
      ],
      "shortname": "shared-storage"
    },
    "run(name, options)": {
      "args": [
        "name",
        "options"
      ],
      "for": [
        "SharedStorage",
        "SharedStorageWorklet"
      ],
      "shortname": "shared-storage"
    }
  },
  "runAdAuction()": {
    "runAdAuction(config)": {
      "args": [
        "config"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "turtledove"
    }
  },
  "s()": {
    "s(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "save()": {
    "save()": {
      "args": [],
      "for": [
        "CanvasState"
      ],
      "shortname": "html"
    }
  },
  "scale()": {
    "scale()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scale(scaleX)": {
      "args": [
        "scaleX"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scale(scaleX, scaleY)": {
      "args": [
        "scaleX",
        "scaleY"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scale(scaleX, scaleY, scaleZ)": {
      "args": [
        "scaleX",
        "scaleY",
        "scaleZ"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scale(scaleX, scaleY, scaleZ, originX)": {
      "args": [
        "scaleX",
        "scaleY",
        "scaleZ",
        "originX"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scale(scaleX, scaleY, scaleZ, originX, originY)": {
      "args": [
        "scaleX",
        "scaleY",
        "scaleZ",
        "originX",
        "originY"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scale(scaleX, scaleY, scaleZ, originX, originY, originZ)": {
      "args": [
        "scaleX",
        "scaleY",
        "scaleZ",
        "originX",
        "originY",
        "originZ"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scale(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "CanvasTransform"
      ],
      "shortname": "html"
    }
  },
  "scale3d()": {
    "scale3d()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scale3d(scale)": {
      "args": [
        "scale"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scale3d(scale, originX)": {
      "args": [
        "scale",
        "originX"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scale3d(scale, originX, originY)": {
      "args": [
        "scale",
        "originX",
        "originY"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scale3d(scale, originX, originY, originZ)": {
      "args": [
        "scale",
        "originX",
        "originY",
        "originZ"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "scale3dSelf()": {
    "scale3dSelf()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "scale3dSelf(scale)": {
      "args": [
        "scale"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "scale3dSelf(scale, originX)": {
      "args": [
        "scale",
        "originX"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "scale3dSelf(scale, originX, originY)": {
      "args": [
        "scale",
        "originX",
        "originY"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "scale3dSelf(scale, originX, originY, originZ)": {
      "args": [
        "scale",
        "originX",
        "originY",
        "originZ"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "scaleNonUniform()": {
    "scaleNonUniform()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scaleNonUniform(scaleX)": {
      "args": [
        "scaleX"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "scaleNonUniform(scaleX, scaleY)": {
      "args": [
        "scaleX",
        "scaleY"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "scaleSelf()": {
    "scaleSelf()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "scaleSelf(scaleX)": {
      "args": [
        "scaleX"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "scaleSelf(scaleX, scaleY)": {
      "args": [
        "scaleX",
        "scaleY"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "scaleSelf(scaleX, scaleY, scaleZ)": {
      "args": [
        "scaleX",
        "scaleY",
        "scaleZ"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "scaleSelf(scaleX, scaleY, scaleZ, originX)": {
      "args": [
        "scaleX",
        "scaleY",
        "scaleZ",
        "originX"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "scaleSelf(scaleX, scaleY, scaleZ, originX, originY)": {
      "args": [
        "scaleX",
        "scaleY",
        "scaleZ",
        "originX",
        "originY"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "scaleSelf(scaleX, scaleY, scaleZ, originX, originY, originZ)": {
      "args": [
        "scaleX",
        "scaleY",
        "scaleZ",
        "originX",
        "originY",
        "originZ"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "scan()": {
    "scan()": {
      "args": [],
      "for": [
        "NDEFReader"
      ],
      "shortname": "web-nfc"
    },
    "scan(options)": {
      "args": [
        "options"
      ],
      "for": [
        "NDEFReader"
      ],
      "shortname": "web-nfc"
    }
  },
  "scroll()": {
    "scroll()": {
      "args": [],
      "for": [
        "Element",
        "NavigateEvent",
        "Window"
      ],
      "shortname": "html"
    },
    "scroll(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Element",
        "Window"
      ],
      "shortname": "cssom-view"
    },
    "scroll(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "Element",
        "Window"
      ],
      "shortname": "cssom-view"
    }
  },
  "scrollBy()": {
    "scrollBy()": {
      "args": [],
      "for": [
        "Element",
        "Window"
      ],
      "shortname": "cssom-view"
    },
    "scrollBy(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Element",
        "Window"
      ],
      "shortname": "cssom-view"
    },
    "scrollBy(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "Element",
        "Window"
      ],
      "shortname": "cssom-view"
    }
  },
  "scrollIntoView()": {
    "scrollIntoView()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "cssom-view"
    },
    "scrollIntoView(arg)": {
      "args": [
        "arg"
      ],
      "for": [
        "Element"
      ],
      "shortname": "cssom-view"
    }
  },
  "scrollTo()": {
    "scrollTo()": {
      "args": [],
      "for": [
        "Element",
        "Window"
      ],
      "shortname": "cssom-view"
    },
    "scrollTo(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Element",
        "Window"
      ],
      "shortname": "cssom-view"
    },
    "scrollTo(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "Element",
        "Window"
      ],
      "shortname": "cssom-view"
    }
  },
  "seal()": {
    "seal(O)": {
      "args": [
        "O"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    }
  },
  "search()": {
    "search(regexp)": {
      "args": [
        "regexp"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "seek()": {
    "seek(position)": {
      "args": [
        "position"
      ],
      "for": [
        "FileSystemWritableFileStream"
      ],
      "shortname": "fs"
    }
  },
  "select()": {
    "select()": {
      "args": [],
      "for": [
        "HTMLInputElement",
        "HTMLTextAreaElement"
      ],
      "shortname": "html"
    },
    "select(properties)": {
      "args": [
        "properties"
      ],
      "for": [
        "ContactsManager"
      ],
      "shortname": "contact-picker"
    },
    "select(properties, options)": {
      "args": [
        "properties",
        "options"
      ],
      "for": [
        "ContactsManager"
      ],
      "shortname": "contact-picker"
    }
  },
  "selectAllChildren()": {
    "selectAllChildren()": {
      "args": [],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    },
    "selectAllChildren(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    }
  },
  "selectAlternateInterface()": {
    "selectAlternateInterface(interfaceNumber, alternateSetting)": {
      "args": [
        "interfaceNumber",
        "alternateSetting"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    }
  },
  "selectAudioOutput()": {
    "selectAudioOutput()": {
      "args": [],
      "for": [
        "MediaDevices"
      ],
      "shortname": "audio-output"
    },
    "selectAudioOutput(options)": {
      "args": [
        "options"
      ],
      "for": [
        "MediaDevices"
      ],
      "shortname": "audio-output"
    }
  },
  "selectConfiguration()": {
    "selectConfiguration(configurationValue)": {
      "args": [
        "configurationValue"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    }
  },
  "selectNode()": {
    "selectNode(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "selectNodeContents()": {
    "selectNodeContents(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "selectURL()": {
    "selectURL(name, urls)": {
      "args": [
        "name",
        "urls"
      ],
      "for": [
        "SharedStorage",
        "SharedStorageWorklet"
      ],
      "shortname": "shared-storage"
    },
    "selectURL(name, urls, options)": {
      "args": [
        "name",
        "urls",
        "options"
      ],
      "for": [
        "SharedStorage",
        "SharedStorageWorklet"
      ],
      "shortname": "shared-storage"
    }
  },
  "send!overload-1()": {
    "send!overload-1()": {
      "args": [],
      "for": [
        "PresentationConnection",
        "RTCDataChannel"
      ],
      "shortname": "presentation-api"
    },
    "send!overload-1(data)": {
      "args": [
        "data"
      ],
      "for": [
        "PresentationConnection",
        "RTCDataChannel"
      ],
      "shortname": "presentation-api"
    }
  },
  "send!overload-2()": {
    "send!overload-2()": {
      "args": [],
      "for": [
        "PresentationConnection",
        "RTCDataChannel"
      ],
      "shortname": "presentation-api"
    },
    "send!overload-2(data)": {
      "args": [
        "data"
      ],
      "for": [
        "PresentationConnection",
        "RTCDataChannel"
      ],
      "shortname": "presentation-api"
    }
  },
  "send!overload-3()": {
    "send!overload-3()": {
      "args": [],
      "for": [
        "PresentationConnection",
        "RTCDataChannel"
      ],
      "shortname": "presentation-api"
    },
    "send!overload-3(data)": {
      "args": [
        "data"
      ],
      "for": [
        "PresentationConnection",
        "RTCDataChannel"
      ],
      "shortname": "presentation-api"
    }
  },
  "send()": {
    "send()": {
      "args": [],
      "for": [
        "MIDIOutput",
        "PresentationConnection",
        "RTCDataChannel",
        "XMLHttpRequest"
      ],
      "shortname": "presentation-api"
    },
    "send(body)": {
      "args": [
        "body"
      ],
      "for": [
        "XMLHttpRequest"
      ],
      "shortname": "xhr"
    },
    "send(data)": {
      "args": [
        "data"
      ],
      "for": [
        "MIDIOutput",
        "RTCDataChannel",
        "WebSocket"
      ],
      "shortname": "websockets"
    },
    "send(data, timestamp)": {
      "args": [
        "data",
        "timestamp"
      ],
      "for": [
        "MIDIOutput"
      ],
      "shortname": "webmidi"
    },
    "send(message)": {
      "args": [
        "message"
      ],
      "for": [
        "PresentationConnection"
      ],
      "shortname": "presentation-api"
    }
  },
  "sendBeacon()": {
    "sendBeacon()": {
      "args": [],
      "for": [
        "Navigator"
      ],
      "shortname": "beacon"
    },
    "sendBeacon(url)": {
      "args": [
        "url"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "beacon"
    },
    "sendBeacon(url, data)": {
      "args": [
        "url",
        "data"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "beacon"
    }
  },
  "sendCaptureAction()": {
    "sendCaptureAction()": {
      "args": [],
      "for": [
        "MediaStreamTrack"
      ],
      "shortname": "mediacapture-handle-actions"
    },
    "sendCaptureAction(action)": {
      "args": [
        "action"
      ],
      "for": [
        "MediaStreamTrack"
      ],
      "shortname": "mediacapture-handle-actions"
    }
  },
  "sendFeatureReport()": {
    "sendFeatureReport()": {
      "args": [],
      "for": [
        "HIDDevice"
      ],
      "shortname": "webhid"
    },
    "sendFeatureReport(reportId, data)": {
      "args": [
        "reportId",
        "data"
      ],
      "for": [
        "HIDDevice"
      ],
      "shortname": "webhid"
    }
  },
  "sendKeyFrameRequest()": {
    "sendKeyFrameRequest()": {
      "args": [],
      "for": [
        "RTCRtpScriptTransform",
        "RTCRtpScriptTransformer"
      ],
      "shortname": "webrtc-encoded-transform"
    }
  },
  "sendReport()": {
    "sendReport()": {
      "args": [],
      "for": [
        "HIDDevice"
      ],
      "shortname": "webhid"
    },
    "sendReport(reportId, data)": {
      "args": [
        "reportId",
        "data"
      ],
      "for": [
        "HIDDevice"
      ],
      "shortname": "webhid"
    }
  },
  "sendReportTo()": {
    "sendReportTo(url)": {
      "args": [
        "url"
      ],
      "for": [
        "InterestGroupReportingScriptRunnerGlobalScope"
      ],
      "shortname": "turtledove"
    }
  },
  "serializeToString()": {
    "serializeToString()": {
      "args": [],
      "for": [
        "XMLSerializer"
      ],
      "shortname": "dom-parsing"
    },
    "serializeToString(root)": {
      "args": [
        "root"
      ],
      "for": [
        "XMLSerializer"
      ],
      "shortname": "dom-parsing"
    }
  },
  "set()": {
    "set()": {
      "args": [],
      "for": [
        "NamedFlowMap"
      ],
      "shortname": "css-regions"
    },
    "set(featureValueName, values)": {
      "args": [
        "featureValueName",
        "values"
      ],
      "for": [
        "CSSFontFeatureValuesMap"
      ],
      "shortname": "css-fonts"
    },
    "set(index)": {
      "args": [
        "index"
      ],
      "for": [
        "Table"
      ],
      "shortname": "wasm-js-api"
    },
    "set(index, value)": {
      "args": [
        "index",
        "value"
      ],
      "for": [
        "Table"
      ],
      "shortname": "wasm-js-api"
    },
    "set(key, value)": {
      "args": [
        "key",
        "value"
      ],
      "for": [
        "Map",
        "SharedStorage",
        "WeakMap"
      ],
      "shortname": "ecmascript"
    },
    "set(key, value, options)": {
      "args": [
        "key",
        "value",
        "options"
      ],
      "for": [
        "SharedStorage"
      ],
      "shortname": "shared-storage"
    },
    "set(name, blobValue)": {
      "args": [
        "name",
        "blobValue"
      ],
      "for": [
        "FormData"
      ],
      "shortname": "xhr"
    },
    "set(name, blobValue, filename)": {
      "args": [
        "name",
        "blobValue",
        "filename"
      ],
      "for": [
        "FormData"
      ],
      "shortname": "xhr"
    },
    "set(name, value)": {
      "args": [
        "name",
        "value"
      ],
      "for": [
        "CookieStore",
        "FormData",
        "Headers",
        "URLSearchParams"
      ],
      "shortname": "fetch"
    },
    "set(options)": {
      "args": [
        "options"
      ],
      "for": [
        "CookieStore"
      ],
      "shortname": "cookie-store"
    },
    "set(property)": {
      "args": [
        "property"
      ],
      "for": [
        "StylePropertyMap"
      ],
      "shortname": "css-typed-om"
    },
    "set(property, ...values)": {
      "args": [
        "property",
        "...values"
      ],
      "for": [
        "StylePropertyMap"
      ],
      "shortname": "css-typed-om"
    },
    "set(source, offset)": {
      "args": [
        "source",
        "offset"
      ],
      "for": [
        "%TypedArray%"
      ],
      "shortname": "ecmascript"
    },
    "set(target, propertyKey, V, receiver)": {
      "args": [
        "target",
        "propertyKey",
        "V",
        "receiver"
      ],
      "for": [
        "Reflect"
      ],
      "shortname": "ecmascript"
    }
  },
  "setActionHandler()": {
    "setActionHandler(action, handler)": {
      "args": [
        "action",
        "handler"
      ],
      "for": [
        "MediaSession"
      ],
      "shortname": "mediasession"
    }
  },
  "setAppBadge()": {
    "setAppBadge()": {
      "args": [],
      "for": [
        "NavigatorBadge"
      ],
      "shortname": "badging"
    },
    "setAppBadge(contents)": {
      "args": [
        "contents"
      ],
      "for": [
        "NavigatorBadge"
      ],
      "shortname": "badging"
    }
  },
  "setAttribute()": {
    "setAttribute()": {
      "args": [],
      "for": [
        "SmartCardConnection"
      ],
      "shortname": "web-smart-card"
    },
    "setAttribute(qualifiedName, value)": {
      "args": [
        "qualifiedName",
        "value"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    },
    "setAttribute(tag, value)": {
      "args": [
        "tag",
        "value"
      ],
      "for": [
        "SmartCardConnection"
      ],
      "shortname": "web-smart-card"
    }
  },
  "setAttributeNS()": {
    "setAttributeNS(namespace, qualifiedName, value)": {
      "args": [
        "namespace",
        "qualifiedName",
        "value"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "setAttributeNode()": {
    "setAttributeNode(attr)": {
      "args": [
        "attr"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "setAttributeNodeNS()": {
    "setAttributeNodeNS(attr)": {
      "args": [
        "attr"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "setAttributionReporting()": {
    "setAttributionReporting(options)": {
      "args": [
        "options"
      ],
      "for": [
        "XMLHttpRequest"
      ],
      "shortname": "attribution-reporting-api"
    }
  },
  "setBaseAndExtent()": {
    "setBaseAndExtent()": {
      "args": [],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    },
    "setBaseAndExtent(anchorNode, anchorOffset, focusNode, focusOffset)": {
      "args": [
        "anchorNode",
        "anchorOffset",
        "focusNode",
        "focusOffset"
      ],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    }
  },
  "setBid()": {
    "setBid()": {
      "args": [],
      "for": [
        "InterestGroupBiddingScriptRunnerGlobalScope"
      ],
      "shortname": "turtledove"
    },
    "setBid(oneOrManyBids)": {
      "args": [
        "oneOrManyBids"
      ],
      "for": [
        "InterestGroupBiddingScriptRunnerGlobalScope"
      ],
      "shortname": "turtledove"
    }
  },
  "setBigInt64()": {
    "setBigInt64(byteOffset, value, littleEndian)": {
      "args": [
        "byteOffset",
        "value",
        "littleEndian"
      ],
      "for": [
        "DataView"
      ],
      "shortname": "ecmascript"
    }
  },
  "setBigUint64()": {
    "setBigUint64(byteOffset, value, littleEndian)": {
      "args": [
        "byteOffset",
        "value",
        "littleEndian"
      ],
      "for": [
        "DataView"
      ],
      "shortname": "ecmascript"
    }
  },
  "setBindGroup()": {
    "setBindGroup(index, bindGroup)": {
      "args": [
        "index",
        "bindGroup"
      ],
      "for": [
        "GPUBindingCommandsMixin"
      ],
      "shortname": "webgpu"
    },
    "setBindGroup(index, bindGroup, dynamicOffsets)": {
      "args": [
        "index",
        "bindGroup",
        "dynamicOffsets"
      ],
      "for": [
        "GPUBindingCommandsMixin"
      ],
      "shortname": "webgpu"
    },
    "setBindGroup(index, bindGroup, dynamicOffsetsData, dynamicOffsetsDataStart, dynamicOffsetsDataLength)": {
      "args": [
        "index",
        "bindGroup",
        "dynamicOffsetsData",
        "dynamicOffsetsDataStart",
        "dynamicOffsetsDataLength"
      ],
      "for": [
        "GPUBindingCommandsMixin"
      ],
      "shortname": "webgpu"
    }
  },
  "setBlendConstant()": {
    "setBlendConstant(color)": {
      "args": [
        "color"
      ],
      "for": [
        "GPURenderPassEncoder"
      ],
      "shortname": "webgpu"
    }
  },
  "setCameraActive()": {
    "setCameraActive(active)": {
      "args": [
        "active"
      ],
      "for": [
        "MediaSession"
      ],
      "shortname": "mediasession"
    }
  },
  "setCaptureHandleConfig()": {
    "setCaptureHandleConfig()": {
      "args": [],
      "for": [
        "MediaDevices"
      ],
      "shortname": "capture-handle-identity"
    },
    "setCaptureHandleConfig(config)": {
      "args": [
        "config"
      ],
      "for": [
        "MediaDevices"
      ],
      "shortname": "capture-handle-identity"
    }
  },
  "setCodecPreferences()": {
    "setCodecPreferences()": {
      "args": [],
      "for": [
        "RTCRtpTransceiver"
      ],
      "shortname": "webrtc"
    },
    "setCodecPreferences(codecs)": {
      "args": [
        "codecs"
      ],
      "for": [
        "RTCRtpTransceiver"
      ],
      "shortname": "webrtc"
    }
  },
  "setConfiguration()": {
    "setConfiguration()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "setConfiguration(configuration)": {
      "args": [
        "configuration"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "setConsumer()": {
    "setConsumer()": {
      "args": [],
      "for": [
        "LaunchQueue"
      ],
      "shortname": "web-app-launch"
    },
    "setConsumer(consumer)": {
      "args": [
        "consumer"
      ],
      "for": [
        "LaunchQueue"
      ],
      "shortname": "web-app-launch"
    }
  },
  "setCustomValidity()": {
    "setCustomValidity(error)": {
      "args": [
        "error"
      ],
      "for": [
        "HTMLButtonElement",
        "HTMLFieldSetElement",
        "HTMLInputElement",
        "HTMLObjectElement",
        "HTMLOutputElement",
        "HTMLSelectElement",
        "HTMLTextAreaElement"
      ],
      "shortname": "html"
    }
  },
  "setData()": {
    "setData(format, data)": {
      "args": [
        "format",
        "data"
      ],
      "for": [
        "DataTransfer"
      ],
      "shortname": "html"
    }
  },
  "setDate()": {
    "setDate(date)": {
      "args": [
        "date"
      ],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "setDragImage()": {
    "setDragImage(image, x, y)": {
      "args": [
        "image",
        "x",
        "y"
      ],
      "for": [
        "DataTransfer"
      ],
      "shortname": "html"
    }
  },
  "setEncryptionKey()": {
    "setEncryptionKey(key)": {
      "args": [
        "key"
      ],
      "for": [
        "SFrameTransform"
      ],
      "shortname": "webrtc-encoded-transform"
    },
    "setEncryptionKey(key, keyID)": {
      "args": [
        "key",
        "keyID"
      ],
      "for": [
        "SFrameTransform"
      ],
      "shortname": "webrtc-encoded-transform"
    }
  },
  "setEnd()": {
    "setEnd(node, offset)": {
      "args": [
        "node",
        "offset"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "setEndAfter()": {
    "setEndAfter(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "setEndBefore()": {
    "setEndBefore(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "setExpires()": {
    "setExpires(expires)": {
      "args": [
        "expires"
      ],
      "for": [
        "StorageBucket"
      ],
      "shortname": "storage-buckets"
    }
  },
  "setFloat32()": {
    "setFloat32(byteOffset, value, littleEndian)": {
      "args": [
        "byteOffset",
        "value",
        "littleEndian"
      ],
      "for": [
        "DataView"
      ],
      "shortname": "ecmascript"
    }
  },
  "setFloat64()": {
    "setFloat64(byteOffset, value, littleEndian)": {
      "args": [
        "byteOffset",
        "value",
        "littleEndian"
      ],
      "for": [
        "DataView"
      ],
      "shortname": "ecmascript"
    }
  },
  "setFocusBehavior()": {
    "setFocusBehavior()": {
      "args": [],
      "for": [
        "CaptureController"
      ],
      "shortname": "screen-capture"
    },
    "setFocusBehavior(focusBehavior)": {
      "args": [
        "focusBehavior"
      ],
      "for": [
        "CaptureController"
      ],
      "shortname": "screen-capture"
    }
  },
  "setFormValue()": {
    "setFormValue(value, state)": {
      "args": [
        "value",
        "state"
      ],
      "for": [
        "ElementInternals"
      ],
      "shortname": "html"
    }
  },
  "setFullYear()": {
    "setFullYear(year, month, date)": {
      "args": [
        "year",
        "month",
        "date"
      ],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "setHTML()": {
    "setHTML(html)": {
      "args": [
        "html"
      ],
      "for": [
        "Element",
        "ShadowRoot"
      ],
      "shortname": "sanitizer-api"
    },
    "setHTML(html, options)": {
      "args": [
        "html",
        "options"
      ],
      "for": [
        "Element",
        "ShadowRoot"
      ],
      "shortname": "sanitizer-api"
    }
  },
  "setHTMLUnsafe()": {
    "setHTMLUnsafe(html)": {
      "args": [
        "html"
      ],
      "for": [
        "Element",
        "ShadowRoot"
      ],
      "shortname": "html"
    },
    "setHTMLUnsafe(html, options)": {
      "args": [
        "html",
        "options"
      ],
      "for": [
        "Element",
        "ShadowRoot"
      ],
      "shortname": "sanitizer-api"
    }
  },
  "setHeaderValue()": {
    "setHeaderValue(value)": {
      "args": [
        "value"
      ],
      "for": [
        "NavigationPreloadManager"
      ],
      "shortname": "service-workers"
    }
  },
  "setHours()": {
    "setHours(hour, min, sec, ms)": {
      "args": [
        "hour",
        "min",
        "sec",
        "ms"
      ],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "setIdAttribute()": {
    "setIdAttribute()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "setIdAttributeNS()": {
    "setIdAttributeNS()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "setIdAttributeNode()": {
    "setIdAttributeNode()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "setIdentityProvider()": {
    "setIdentityProvider()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc-identity"
    },
    "setIdentityProvider(provider)": {
      "args": [
        "provider"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc-identity"
    },
    "setIdentityProvider(provider, options)": {
      "args": [
        "provider",
        "options"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc-identity"
    }
  },
  "setIndexBuffer()": {
    "setIndexBuffer(buffer, indexFormat)": {
      "args": [
        "buffer",
        "indexFormat"
      ],
      "for": [
        "GPURenderCommandsMixin"
      ],
      "shortname": "webgpu"
    },
    "setIndexBuffer(buffer, indexFormat, offset)": {
      "args": [
        "buffer",
        "indexFormat",
        "offset"
      ],
      "for": [
        "GPURenderCommandsMixin"
      ],
      "shortname": "webgpu"
    },
    "setIndexBuffer(buffer, indexFormat, offset, size)": {
      "args": [
        "buffer",
        "indexFormat",
        "offset",
        "size"
      ],
      "for": [
        "GPURenderCommandsMixin"
      ],
      "shortname": "webgpu"
    }
  },
  "setInt16()": {
    "setInt16(byteOffset, value, littleEndian)": {
      "args": [
        "byteOffset",
        "value",
        "littleEndian"
      ],
      "for": [
        "DataView"
      ],
      "shortname": "ecmascript"
    }
  },
  "setInt32()": {
    "setInt32(byteOffset, value, littleEndian)": {
      "args": [
        "byteOffset",
        "value",
        "littleEndian"
      ],
      "for": [
        "DataView"
      ],
      "shortname": "ecmascript"
    }
  },
  "setInt8()": {
    "setInt8(byteOffset, value)": {
      "args": [
        "byteOffset",
        "value"
      ],
      "for": [
        "DataView"
      ],
      "shortname": "ecmascript"
    }
  },
  "setInterval()": {
    "setInterval(handler, timeout, ...arguments)": {
      "args": [
        "handler",
        "timeout",
        "...arguments"
      ],
      "for": [
        "WindowOrWorkerGlobalScope"
      ],
      "shortname": "html"
    }
  },
  "setItem()": {
    "setItem(key, value)": {
      "args": [
        "key",
        "value"
      ],
      "for": [
        "Storage"
      ],
      "shortname": "html"
    }
  },
  "setKeyframes()": {
    "setKeyframes(keyframes)": {
      "args": [
        "keyframes"
      ],
      "for": [
        "KeyframeEffect"
      ],
      "shortname": "web-animations"
    }
  },
  "setLineDash()": {
    "setLineDash(segments)": {
      "args": [
        "segments"
      ],
      "for": [
        "CanvasPathDrawingStyles"
      ],
      "shortname": "html"
    }
  },
  "setLiveSeekableRange()": {
    "setLiveSeekableRange()": {
      "args": [],
      "for": [
        "MediaSource"
      ],
      "shortname": "media-source"
    },
    "setLiveSeekableRange(start, end)": {
      "args": [
        "start",
        "end"
      ],
      "for": [
        "MediaSource"
      ],
      "shortname": "media-source"
    }
  },
  "setLocalDescription!overload-1()": {
    "setLocalDescription!overload-1()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "setLocalDescription!overload-1(description, successCallback, failureCallback)": {
      "args": [
        "description",
        "successCallback",
        "failureCallback"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "setLocalDescription()": {
    "setLocalDescription()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "setLocalDescription(description)": {
      "args": [
        "description"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "setMatrixValue()": {
    "setMatrixValue(transformList)": {
      "args": [
        "transformList"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "setMediaKeys()": {
    "setMediaKeys()": {
      "args": [],
      "for": [
        "HTMLMediaElement"
      ],
      "shortname": "encrypted-media"
    },
    "setMediaKeys(mediaKeys)": {
      "args": [
        "mediaKeys"
      ],
      "for": [
        "HTMLMediaElement"
      ],
      "shortname": "encrypted-media"
    }
  },
  "setMicrophoneActive()": {
    "setMicrophoneActive(active)": {
      "args": [
        "active"
      ],
      "for": [
        "MediaSession"
      ],
      "shortname": "mediasession"
    }
  },
  "setMilliseconds()": {
    "setMilliseconds(ms)": {
      "args": [
        "ms"
      ],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "setMinutes()": {
    "setMinutes(min, sec, ms)": {
      "args": [
        "min",
        "sec",
        "ms"
      ],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "setMonth()": {
    "setMonth(month, date)": {
      "args": [
        "month",
        "date"
      ],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "setNamedItem()": {
    "setNamedItem(attr)": {
      "args": [
        "attr"
      ],
      "for": [
        "NamedNodeMap"
      ],
      "shortname": "dom"
    }
  },
  "setNamedItemNS()": {
    "setNamedItemNS(attr)": {
      "args": [
        "attr"
      ],
      "for": [
        "NamedNodeMap"
      ],
      "shortname": "dom"
    }
  },
  "setOrientation()": {
    "setOrientation(x, y, z)": {
      "args": [
        "x",
        "y",
        "z"
      ],
      "for": [
        "PannerNode"
      ],
      "shortname": "webaudio"
    },
    "setOrientation(x, y, z, xUp, yUp, zUp)": {
      "args": [
        "x",
        "y",
        "z",
        "xUp",
        "yUp",
        "zUp"
      ],
      "for": [
        "AudioListener"
      ],
      "shortname": "webaudio"
    }
  },
  "setParameter()": {
    "setParameter(namespaceURI, localName, value)": {
      "args": [
        "namespaceURI",
        "localName",
        "value"
      ],
      "for": [
        "XSLTProcessor"
      ],
      "shortname": "dom"
    }
  },
  "setParameters()": {
    "setParameters()": {
      "args": [],
      "for": [
        "RTCRtpSender"
      ],
      "shortname": "webrtc"
    },
    "setParameters(parameters)": {
      "args": [
        "parameters"
      ],
      "for": [
        "RTCRtpSender"
      ],
      "shortname": "webrtc"
    },
    "setParameters(parameters, setParameterOptions)": {
      "args": [
        "parameters",
        "setParameterOptions"
      ],
      "for": [
        "RTCRtpSender"
      ],
      "shortname": "webrtc"
    }
  },
  "setPeriodicWave()": {
    "setPeriodicWave(periodicWave)": {
      "args": [
        "periodicWave"
      ],
      "for": [
        "OscillatorNode"
      ],
      "shortname": "webaudio"
    }
  },
  "setPipeline()": {
    "setPipeline(pipeline)": {
      "args": [
        "pipeline"
      ],
      "for": [
        "GPUComputePassEncoder",
        "GPURenderCommandsMixin"
      ],
      "shortname": "webgpu"
    }
  },
  "setPointerCapture()": {
    "setPointerCapture()": {
      "args": [],
      "for": [
        "Element"
      ],
      "shortname": "pointerevents"
    },
    "setPointerCapture(pointerId)": {
      "args": [
        "pointerId"
      ],
      "for": [
        "Element"
      ],
      "shortname": "pointerevents"
    }
  },
  "setPosition()": {
    "setPosition()": {
      "args": [],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    },
    "setPosition(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    },
    "setPosition(node, offset)": {
      "args": [
        "node",
        "offset"
      ],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    },
    "setPosition(x, y, z)": {
      "args": [
        "x",
        "y",
        "z"
      ],
      "for": [
        "AudioListener",
        "PannerNode"
      ],
      "shortname": "webaudio"
    }
  },
  "setPositionState()": {
    "setPositionState()": {
      "args": [],
      "for": [
        "MediaSession"
      ],
      "shortname": "mediasession"
    },
    "setPositionState(state)": {
      "args": [
        "state"
      ],
      "for": [
        "MediaSession"
      ],
      "shortname": "mediasession"
    }
  },
  "setPriority()": {
    "setPriority(priority)": {
      "args": [
        "priority"
      ],
      "for": [
        "InterestGroupBiddingScriptRunnerGlobalScope",
        "TaskController"
      ],
      "shortname": "scheduling-apis"
    }
  },
  "setPrioritySignalsOverride()": {
    "setPrioritySignalsOverride(key)": {
      "args": [
        "key"
      ],
      "for": [
        "InterestGroupBiddingScriptRunnerGlobalScope"
      ],
      "shortname": "turtledove"
    },
    "setPrioritySignalsOverride(key, priority)": {
      "args": [
        "key",
        "priority"
      ],
      "for": [
        "InterestGroupBiddingScriptRunnerGlobalScope"
      ],
      "shortname": "turtledove"
    }
  },
  "setPrivateToken()": {
    "setPrivateToken(privateToken)": {
      "args": [
        "privateToken"
      ],
      "for": [
        "XMLHttpRequest"
      ],
      "shortname": "trust-token-api"
    }
  },
  "setProperty()": {
    "setProperty(property, value)": {
      "args": [
        "property",
        "value"
      ],
      "for": [
        "CSSStyleDeclaration"
      ],
      "shortname": "cssom"
    },
    "setProperty(property, value, priority)": {
      "args": [
        "property",
        "value",
        "priority"
      ],
      "for": [
        "CSSStyleDeclaration"
      ],
      "shortname": "cssom"
    }
  },
  "setPrototypeOf()": {
    "setPrototypeOf(O, proto)": {
      "args": [
        "O",
        "proto"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    },
    "setPrototypeOf(target, proto)": {
      "args": [
        "target",
        "proto"
      ],
      "for": [
        "Reflect"
      ],
      "shortname": "ecmascript"
    }
  },
  "setRangeText()": {
    "setRangeText(replacement, start, end, selectMode)": {
      "args": [
        "replacement",
        "start",
        "end",
        "selectMode"
      ],
      "for": [
        "HTMLInputElement",
        "HTMLTextAreaElement"
      ],
      "shortname": "html"
    }
  },
  "setRemoteDescription!overload-1()": {
    "setRemoteDescription!overload-1()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "setRemoteDescription!overload-1(description, successCallback, failureCallback)": {
      "args": [
        "description",
        "successCallback",
        "failureCallback"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "setRemoteDescription()": {
    "setRemoteDescription()": {
      "args": [],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    },
    "setRemoteDescription(description)": {
      "args": [
        "description"
      ],
      "for": [
        "RTCPeerConnection"
      ],
      "shortname": "webrtc"
    }
  },
  "setReportEventDataForAutomaticBeacons()": {
    "setReportEventDataForAutomaticBeacons()": {
      "args": [],
      "for": [
        "Fence"
      ],
      "shortname": "fenced-frame"
    },
    "setReportEventDataForAutomaticBeacons(event)": {
      "args": [
        "event"
      ],
      "for": [
        "Fence"
      ],
      "shortname": "fenced-frame"
    }
  },
  "setRequestHeader()": {
    "setRequestHeader(name, value)": {
      "args": [
        "name",
        "value"
      ],
      "for": [
        "XMLHttpRequest"
      ],
      "shortname": "xhr"
    }
  },
  "setResourceTimingBufferSize()": {
    "setResourceTimingBufferSize()": {
      "args": [],
      "for": [
        "Performance"
      ],
      "shortname": "resource-timing"
    },
    "setResourceTimingBufferSize(maxSize)": {
      "args": [
        "maxSize"
      ],
      "for": [
        "Performance"
      ],
      "shortname": "resource-timing"
    }
  },
  "setScissorRect()": {
    "setScissorRect(x, y, width, height)": {
      "args": [
        "x",
        "y",
        "width",
        "height"
      ],
      "for": [
        "GPURenderPassEncoder"
      ],
      "shortname": "webgpu"
    }
  },
  "setScreenshareActive()": {
    "setScreenshareActive(active)": {
      "args": [
        "active"
      ],
      "for": [
        "MediaSession"
      ],
      "shortname": "mediasession"
    }
  },
  "setSeconds()": {
    "setSeconds(sec, ms)": {
      "args": [
        "sec",
        "ms"
      ],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "setSelectionRange()": {
    "setSelectionRange(start, end, direction)": {
      "args": [
        "start",
        "end",
        "direction"
      ],
      "for": [
        "HTMLInputElement",
        "HTMLTextAreaElement"
      ],
      "shortname": "html"
    }
  },
  "setServerCertificate()": {
    "setServerCertificate()": {
      "args": [],
      "for": [
        "MediaKeys"
      ],
      "shortname": "encrypted-media"
    },
    "setServerCertificate(serverCertificate)": {
      "args": [
        "serverCertificate"
      ],
      "for": [
        "MediaKeys"
      ],
      "shortname": "encrypted-media"
    }
  },
  "setSharedStorageContext()": {
    "setSharedStorageContext(contextString)": {
      "args": [
        "contextString"
      ],
      "for": [
        "FencedFrameConfig"
      ],
      "shortname": "fenced-frame"
    }
  },
  "setSignals()": {
    "setSignals()": {
      "args": [],
      "for": [
        "SerialPort"
      ],
      "shortname": "serial"
    },
    "setSignals(signals)": {
      "args": [
        "signals"
      ],
      "for": [
        "SerialPort"
      ],
      "shortname": "serial"
    }
  },
  "setSinkId()": {
    "setSinkId((DOMString or AudioSinkOptions) sinkId)": {
      "args": [
        "(DOMString or AudioSinkOptions) sinkId"
      ],
      "for": [
        "AudioContext"
      ],
      "shortname": "webaudio"
    },
    "setSinkId()": {
      "args": [],
      "for": [
        "HTMLMediaElement"
      ],
      "shortname": "audio-output"
    },
    "setSinkId(sinkId)": {
      "args": [
        "sinkId"
      ],
      "for": [
        "AudioContext",
        "HTMLMediaElement"
      ],
      "shortname": "audio-output"
    }
  },
  "setStart()": {
    "setStart(node, offset)": {
      "args": [
        "node",
        "offset"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "setStartAfter()": {
    "setStartAfter(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "setStartBefore()": {
    "setStartBefore(node)": {
      "args": [
        "node"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "setStatus()": {
    "setStatus(status)": {
      "args": [
        "status"
      ],
      "for": [
        "NavigatorLogin"
      ],
      "shortname": "fedcm"
    }
  },
  "setStdDeviation()": {
    "setStdDeviation(stdDeviationX, stdDeviationY)": {
      "args": [
        "stdDeviationX",
        "stdDeviationY"
      ],
      "for": [
        "SVGFEDropShadowElement",
        "SVGFEGaussianBlurElement"
      ],
      "shortname": "filter-effects"
    }
  },
  "setStencilReference()": {
    "setStencilReference(reference)": {
      "args": [
        "reference"
      ],
      "for": [
        "GPURenderPassEncoder"
      ],
      "shortname": "webgpu"
    }
  },
  "setStreams()": {
    "setStreams()": {
      "args": [],
      "for": [
        "RTCRtpSender"
      ],
      "shortname": "webrtc"
    },
    "setStreams(streams)": {
      "args": [
        "streams"
      ],
      "for": [
        "RTCRtpSender"
      ],
      "shortname": "webrtc"
    }
  },
  "setSupportedCaptureActions()": {
    "setSupportedCaptureActions()": {
      "args": [],
      "for": [
        "MediaDevices"
      ],
      "shortname": "mediacapture-handle-actions"
    },
    "setSupportedCaptureActions(actions)": {
      "args": [
        "actions"
      ],
      "for": [
        "MediaDevices"
      ],
      "shortname": "mediacapture-handle-actions"
    }
  },
  "setTargetAtTime()": {
    "setTargetAtTime(target, startTime, timeConstant)": {
      "args": [
        "target",
        "startTime",
        "timeConstant"
      ],
      "for": [
        "AudioParam"
      ],
      "shortname": "webaudio"
    }
  },
  "setTime()": {
    "setTime(time)": {
      "args": [
        "time"
      ],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "setTimeout()": {
    "setTimeout(handler, timeout, ...arguments)": {
      "args": [
        "handler",
        "timeout",
        "...arguments"
      ],
      "for": [
        "WindowOrWorkerGlobalScope"
      ],
      "shortname": "html"
    }
  },
  "setTransform()": {
    "setTransform(a, b, c, d, e, f)": {
      "args": [
        "a",
        "b",
        "c",
        "d",
        "e",
        "f"
      ],
      "for": [
        "CanvasTransform"
      ],
      "shortname": "html"
    },
    "setTransform(transform)": {
      "args": [
        "transform"
      ],
      "for": [
        "CanvasPattern",
        "CanvasTransform"
      ],
      "shortname": "html"
    }
  },
  "setUTCDate()": {
    "setUTCDate(date)": {
      "args": [
        "date"
      ],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "setUTCFullYear()": {
    "setUTCFullYear(year, month, date)": {
      "args": [
        "year",
        "month",
        "date"
      ],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "setUTCHours()": {
    "setUTCHours(hour, min, sec, ms)": {
      "args": [
        "hour",
        "min",
        "sec",
        "ms"
      ],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "setUTCMilliseconds()": {
    "setUTCMilliseconds(ms)": {
      "args": [
        "ms"
      ],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "setUTCMinutes()": {
    "setUTCMinutes(min, sec, ms)": {
      "args": [
        "min",
        "sec",
        "ms"
      ],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "setUTCMonth()": {
    "setUTCMonth(month, date)": {
      "args": [
        "month",
        "date"
      ],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "setUTCSeconds()": {
    "setUTCSeconds(sec, ms)": {
      "args": [
        "sec",
        "ms"
      ],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "setUint16()": {
    "setUint16(byteOffset, value, littleEndian)": {
      "args": [
        "byteOffset",
        "value",
        "littleEndian"
      ],
      "for": [
        "DataView"
      ],
      "shortname": "ecmascript"
    }
  },
  "setUint32()": {
    "setUint32(byteOffset, value, littleEndian)": {
      "args": [
        "byteOffset",
        "value",
        "littleEndian"
      ],
      "for": [
        "DataView"
      ],
      "shortname": "ecmascript"
    }
  },
  "setUint8()": {
    "setUint8(byteOffset, value)": {
      "args": [
        "byteOffset",
        "value"
      ],
      "for": [
        "DataView"
      ],
      "shortname": "ecmascript"
    }
  },
  "setUserData()": {
    "setUserData()": {
      "args": [],
      "for": [
        "Node"
      ],
      "shortname": "dom"
    }
  },
  "setValidity()": {
    "setValidity(flags, message, anchor)": {
      "args": [
        "flags",
        "message",
        "anchor"
      ],
      "for": [
        "ElementInternals"
      ],
      "shortname": "html"
    }
  },
  "setValueAtTime()": {
    "setValueAtTime(value, startTime)": {
      "args": [
        "value",
        "startTime"
      ],
      "for": [
        "AudioParam"
      ],
      "shortname": "webaudio"
    }
  },
  "setValueCurveAtTime()": {
    "setValueCurveAtTime(values, startTime, duration)": {
      "args": [
        "values",
        "startTime",
        "duration"
      ],
      "for": [
        "AudioParam"
      ],
      "shortname": "webaudio"
    }
  },
  "setVertexBuffer()": {
    "setVertexBuffer(slot, buffer)": {
      "args": [
        "slot",
        "buffer"
      ],
      "for": [
        "GPURenderCommandsMixin"
      ],
      "shortname": "webgpu"
    },
    "setVertexBuffer(slot, buffer, offset)": {
      "args": [
        "slot",
        "buffer",
        "offset"
      ],
      "for": [
        "GPURenderCommandsMixin"
      ],
      "shortname": "webgpu"
    },
    "setVertexBuffer(slot, buffer, offset, size)": {
      "args": [
        "slot",
        "buffer",
        "offset",
        "size"
      ],
      "for": [
        "GPURenderCommandsMixin"
      ],
      "shortname": "webgpu"
    }
  },
  "setViewport()": {
    "setViewport(x, y, width, height, minDepth, maxDepth)": {
      "args": [
        "x",
        "y",
        "width",
        "height",
        "minDepth",
        "maxDepth"
      ],
      "for": [
        "GPURenderPassEncoder"
      ],
      "shortname": "webgpu"
    }
  },
  "setYear()": {
    "setYear(year)": {
      "args": [
        "year"
      ],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "shape()": {
    "shape()": {
      "args": [],
      "for": [
        "MLOperand"
      ],
      "shortname": "webnn"
    }
  },
  "share()": {
    "share()": {
      "args": [],
      "for": [
        "Navigator"
      ],
      "shortname": "web-share"
    },
    "share(data)": {
      "args": [
        "data"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "web-share"
    }
  },
  "shift()": {
    "shift()": {
      "args": [],
      "for": [
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "show()": {
    "show()": {
      "args": [],
      "for": [
        "HTMLDialogElement",
        "PaymentRequest",
        "VirtualKeyboard"
      ],
      "shortname": "html"
    },
    "show(detailsPromise)": {
      "args": [
        "detailsPromise"
      ],
      "for": [
        "PaymentRequest"
      ],
      "shortname": "payment-request"
    }
  },
  "showDirectoryPicker()": {
    "showDirectoryPicker()": {
      "args": [],
      "for": [
        "Window"
      ],
      "shortname": "file-system-access"
    },
    "showDirectoryPicker(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Window"
      ],
      "shortname": "file-system-access"
    }
  },
  "showModal()": {
    "showModal()": {
      "args": [],
      "for": [
        "HTMLDialogElement"
      ],
      "shortname": "html"
    }
  },
  "showNotification()": {
    "showNotification(title)": {
      "args": [
        "title"
      ],
      "for": [
        "ServiceWorkerRegistration"
      ],
      "shortname": "notifications"
    },
    "showNotification(title, options)": {
      "args": [
        "title",
        "options"
      ],
      "for": [
        "ServiceWorkerRegistration"
      ],
      "shortname": "notifications"
    }
  },
  "showOpenFilePicker()": {
    "showOpenFilePicker()": {
      "args": [],
      "for": [
        "Window"
      ],
      "shortname": "file-system-access"
    },
    "showOpenFilePicker(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Window"
      ],
      "shortname": "file-system-access"
    }
  },
  "showPicker()": {
    "showPicker()": {
      "args": [],
      "for": [
        "HTMLInputElement",
        "HTMLSelectElement"
      ],
      "shortname": "html"
    }
  },
  "showPopover()": {
    "showPopover()": {
      "args": [],
      "for": [
        "HTMLElement"
      ],
      "shortname": "html"
    }
  },
  "showSaveFilePicker()": {
    "showSaveFilePicker()": {
      "args": [],
      "for": [
        "Window"
      ],
      "shortname": "file-system-access"
    },
    "showSaveFilePicker(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Window"
      ],
      "shortname": "file-system-access"
    }
  },
  "sigmoid()": {
    "sigmoid(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "sigmoid(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "sign()": {
    "sign()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "sign(algorithm, key, data)": {
      "args": [
        "algorithm",
        "key",
        "data"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "sign(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "sin()": {
    "sin(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "sin(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "sin(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "sinh()": {
    "sinh(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "skewX()": {
    "skewX()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "skewX(sx)": {
      "args": [
        "sx"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "skewXSelf()": {
    "skewXSelf()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "skewXSelf(sx)": {
      "args": [
        "sx"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "skewY()": {
    "skewY()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "skewY(sy)": {
      "args": [
        "sy"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "skewYSelf()": {
    "skewYSelf()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "skewYSelf(sy)": {
      "args": [
        "sy"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "skipTransition()": {
    "skipTransition()": {
      "args": [],
      "for": [
        "ViewTransition"
      ],
      "shortname": "css-view-transitions"
    }
  },
  "skipWaiting()": {
    "skipWaiting()": {
      "args": [],
      "for": [
        "ServiceWorkerGlobalScope"
      ],
      "shortname": "service-workers"
    }
  },
  "slice()": {
    "slice()": {
      "args": [],
      "for": [
        "Blob"
      ],
      "shortname": "fileapi"
    },
    "slice(input, starts, sizes)": {
      "args": [
        "input",
        "starts",
        "sizes"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "slice(input, starts, sizes, options)": {
      "args": [
        "input",
        "starts",
        "sizes",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "slice(start)": {
      "args": [
        "start"
      ],
      "for": [
        "Blob"
      ],
      "shortname": "fileapi"
    },
    "slice(start, end)": {
      "args": [
        "start",
        "end"
      ],
      "for": [
        "%TypedArray%",
        "Array",
        "ArrayBuffer",
        "Blob",
        "SharedArrayBuffer",
        "String"
      ],
      "shortname": "ecmascript"
    },
    "slice(start, end, contentType)": {
      "args": [
        "start",
        "end",
        "contentType"
      ],
      "for": [
        "Blob"
      ],
      "shortname": "fileapi"
    },
    "slice(start, end, contentType), slice(start, end), slice(start), slice()": {
      "args": [
        "start",
        "end",
        "contentType)",
        "slice(start",
        "end)",
        "slice(start)",
        "slice("
      ],
      "for": [
        "Blob"
      ],
      "shortname": "fileapi"
    }
  },
  "small()": {
    "small()": {
      "args": [],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "snapshotItem()": {
    "snapshotItem(index)": {
      "args": [
        "index"
      ],
      "for": [
        "XPathResult"
      ],
      "shortname": "dom"
    }
  },
  "softmax()": {
    "softmax(input, axis)": {
      "args": [
        "input",
        "axis"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "softmax(input, axis, options)": {
      "args": [
        "input",
        "axis",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "softplus()": {
    "softplus(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "softplus(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "softsign()": {
    "softsign(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "softsign(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "some()": {
    "some(callback, thisArg)": {
      "args": [
        "callback",
        "thisArg"
      ],
      "for": [
        "%TypedArray%",
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "sort()": {
    "sort()": {
      "args": [],
      "for": [
        "URLSearchParams"
      ],
      "shortname": "url"
    },
    "sort(comparator)": {
      "args": [
        "comparator"
      ],
      "for": [
        "%TypedArray%",
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "spatialNavigationSearch()": {
    "spatialNavigationSearch(dir)": {
      "args": [
        "dir"
      ],
      "for": [
        "Element"
      ],
      "shortname": "css-nav"
    },
    "spatialNavigationSearch(dir, options)": {
      "args": [
        "dir",
        "options"
      ],
      "for": [
        "Element"
      ],
      "shortname": "css-nav"
    },
    "spatialNavigationSearch(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Element"
      ],
      "shortname": "css-nav"
    }
  },
  "speak()": {
    "speak(utterance)": {
      "args": [
        "utterance"
      ],
      "for": [
        "SpeechSynthesis"
      ],
      "shortname": "speech-api"
    }
  },
  "splice()": {
    "splice(start, deleteCount, ...items)": {
      "args": [
        "start",
        "deleteCount",
        "...items"
      ],
      "for": [
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "split()": {
    "split(input, splits)": {
      "args": [
        "input",
        "splits"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "split(input, splits, options)": {
      "args": [
        "input",
        "splits",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "split(separator, limit)": {
      "args": [
        "separator",
        "limit"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "splitText()": {
    "splitText(offset)": {
      "args": [
        "offset"
      ],
      "for": [
        "Text"
      ],
      "shortname": "dom"
    }
  },
  "sqrt()": {
    "sqrt(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "sqrt(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "sqrt(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "start()": {
    "start()": {
      "args": [],
      "for": [
        "AudioBufferSourceNode",
        "AudioRenderCapacity",
        "AudioScheduledSourceNode",
        "HTMLMarqueeElement",
        "IdleDetector",
        "MediaRecorder",
        "MessagePort",
        "PresentationRequest",
        "RTCIceTransport",
        "Sensor",
        "SpeechRecognition"
      ],
      "shortname": "html"
    },
    "start(index)": {
      "args": [
        "index"
      ],
      "for": [
        "TimeRanges"
      ],
      "shortname": "html"
    },
    "start(options)": {
      "args": [
        "options"
      ],
      "for": [
        "AudioRenderCapacity",
        "IdleDetector"
      ],
      "shortname": "idle-detection"
    },
    "start(remoteParameters)": {
      "args": [
        "remoteParameters"
      ],
      "for": [
        "RTCIceTransport"
      ],
      "shortname": "webrtc-ice"
    },
    "start(remoteParameters, role)": {
      "args": [
        "remoteParameters",
        "role"
      ],
      "for": [
        "RTCIceTransport"
      ],
      "shortname": "webrtc-ice"
    },
    "start(timeslice)": {
      "args": [
        "timeslice"
      ],
      "for": [
        "MediaRecorder"
      ],
      "shortname": "mediastream-recording"
    },
    "start(when)": {
      "args": [
        "when"
      ],
      "for": [
        "AudioBufferSourceNode",
        "AudioScheduledSourceNode"
      ],
      "shortname": "webaudio"
    },
    "start(when, offset)": {
      "args": [
        "when",
        "offset"
      ],
      "for": [
        "AudioBufferSourceNode"
      ],
      "shortname": "webaudio"
    },
    "start(when, offset, duration)": {
      "args": [
        "when",
        "offset",
        "duration"
      ],
      "for": [
        "AudioBufferSourceNode"
      ],
      "shortname": "webaudio"
    }
  },
  "startDrawing()": {
    "startDrawing()": {
      "args": [],
      "for": [
        "HandwritingRecognizer"
      ],
      "shortname": "handwriting-recognition"
    },
    "startDrawing(hints)": {
      "args": [
        "hints"
      ],
      "for": [
        "HandwritingRecognizer"
      ],
      "shortname": "handwriting-recognition"
    }
  },
  "startMessages()": {
    "startMessages()": {
      "args": [],
      "for": [
        "ServiceWorkerContainer"
      ],
      "shortname": "service-workers"
    }
  },
  "startNotifications()": {
    "startNotifications()": {
      "args": [],
      "for": [
        "BluetoothRemoteGATTCharacteristic"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "startRendering()": {
    "startRendering()": {
      "args": [],
      "for": [
        "OfflineAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "startTransaction()": {
    "startTransaction()": {
      "args": [],
      "for": [
        "SmartCardConnection"
      ],
      "shortname": "web-smart-card"
    },
    "startTransaction(transaction)": {
      "args": [
        "transaction"
      ],
      "for": [
        "SmartCardConnection"
      ],
      "shortname": "web-smart-card"
    },
    "startTransaction(transaction, options)": {
      "args": [
        "transaction",
        "options"
      ],
      "for": [
        "SmartCardConnection"
      ],
      "shortname": "web-smart-card"
    }
  },
  "startViewTransition()": {
    "startViewTransition()": {
      "args": [],
      "for": [
        "Document"
      ],
      "shortname": "css-view-transitions"
    },
    "startViewTransition(callbackOptions)": {
      "args": [
        "callbackOptions"
      ],
      "for": [
        "Document"
      ],
      "shortname": "css-view-transitions"
    },
    "startViewTransition(updateCallback)": {
      "args": [
        "updateCallback"
      ],
      "for": [
        "Document"
      ],
      "shortname": "css-view-transitions"
    }
  },
  "startsWith()": {
    "startsWith(searchString, position)": {
      "args": [
        "searchString",
        "position"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "state()": {
    "state()": {
      "args": [],
      "for": [
        "StatefulAnimator"
      ],
      "shortname": "css-animation-worklet"
    }
  },
  "status()": {
    "status()": {
      "args": [],
      "for": [
        "SmartCardConnection"
      ],
      "shortname": "web-smart-card"
    }
  },
  "stepDown()": {
    "stepDown(n)": {
      "args": [
        "n"
      ],
      "for": [
        "HTMLInputElement"
      ],
      "shortname": "html"
    }
  },
  "stepUp()": {
    "stepUp(n)": {
      "args": [
        "n"
      ],
      "for": [
        "HTMLInputElement"
      ],
      "shortname": "html"
    }
  },
  "stop()": {
    "stop()": {
      "args": [],
      "for": [
        "AudioRenderCapacity",
        "AudioScheduledSourceNode",
        "BluetoothLEScan",
        "HTMLMarqueeElement",
        "MediaRecorder",
        "MediaStreamTrack",
        "Profiler",
        "RTCIceTransport",
        "RTCRtpTransceiver",
        "Sensor",
        "SpeechRecognition",
        "Window"
      ],
      "shortname": "html"
    },
    "stop(when)": {
      "args": [
        "when"
      ],
      "for": [
        "AudioScheduledSourceNode"
      ],
      "shortname": "webaudio"
    }
  },
  "stopImmediatePropagation()": {
    "stopImmediatePropagation()": {
      "args": [],
      "for": [
        "Event"
      ],
      "shortname": "dom"
    }
  },
  "stopNotifications()": {
    "stopNotifications()": {
      "args": [],
      "for": [
        "BluetoothRemoteGATTCharacteristic"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "stopPropagation()": {
    "stopPropagation()": {
      "args": [],
      "for": [
        "Event"
      ],
      "shortname": "dom"
    }
  },
  "store()": {
    "store()": {
      "args": [],
      "for": [
        "CredentialsContainer"
      ],
      "shortname": "credential-management"
    },
    "store(credential)": {
      "args": [
        "credential"
      ],
      "for": [
        "CredentialsContainer"
      ],
      "shortname": "credential-management"
    },
    "store(typedArray, index, value)": {
      "args": [
        "typedArray",
        "index",
        "value"
      ],
      "for": [
        "Atomics"
      ],
      "shortname": "ecmascript"
    }
  },
  "storeTrackingException()": {
    "storeTrackingException()": {
      "args": [],
      "for": [
        "Navigator"
      ],
      "shortname": "tracking-dnt"
    },
    "storeTrackingException(properties)": {
      "args": [
        "properties"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "tracking-dnt"
    }
  },
  "stream()": {
    "stream()": {
      "args": [],
      "for": [
        "Blob"
      ],
      "shortname": "fileapi"
    }
  },
  "strike()": {
    "strike()": {
      "args": [],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "stringifier()": {
    "stringifier()": {
      "args": [],
      "for": [
        "Selection"
      ],
      "shortname": "selection-api"
    }
  },
  "stringify()": {
    "stringify(value, replacer, space)": {
      "args": [
        "value",
        "replacer",
        "space"
      ],
      "for": [
        "JSON"
      ],
      "shortname": "ecmascript"
    }
  },
  "stroke()": {
    "stroke()": {
      "args": [],
      "for": [
        "CanvasDrawPath"
      ],
      "shortname": "html"
    },
    "stroke(path)": {
      "args": [
        "path"
      ],
      "for": [
        "CanvasDrawPath"
      ],
      "shortname": "html"
    }
  },
  "strokeRect()": {
    "strokeRect(x, y, w, h)": {
      "args": [
        "x",
        "y",
        "w",
        "h"
      ],
      "for": [
        "CanvasRect"
      ],
      "shortname": "html"
    }
  },
  "strokeText()": {
    "strokeText(text, x, y, maxWidth)": {
      "args": [
        "text",
        "x",
        "y",
        "maxWidth"
      ],
      "for": [
        "CanvasText"
      ],
      "shortname": "html"
    }
  },
  "structuredClone()": {
    "structuredClone(value, options)": {
      "args": [
        "value",
        "options"
      ],
      "for": [
        "WindowOrWorkerGlobalScope"
      ],
      "shortname": "html"
    }
  },
  "sub()": {
    "sub()": {
      "args": [],
      "for": [
        "CSSNumericValue",
        "String"
      ],
      "shortname": "ecmascript"
    },
    "sub(...values)": {
      "args": [
        "...values"
      ],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "sub(a, b)": {
      "args": [
        "a",
        "b"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "sub(a, b, options)": {
      "args": [
        "a",
        "b",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "sub(typedArray, index, value)": {
      "args": [
        "typedArray",
        "index",
        "value"
      ],
      "for": [
        "Atomics"
      ],
      "shortname": "ecmascript"
    }
  },
  "subarray()": {
    "subarray(start, end)": {
      "args": [
        "start",
        "end"
      ],
      "for": [
        "%TypedArray%"
      ],
      "shortname": "ecmascript"
    }
  },
  "submit()": {
    "submit()": {
      "args": [],
      "for": [
        "HTMLFormElement"
      ],
      "shortname": "html"
    },
    "submit(commandBuffers)": {
      "args": [
        "commandBuffers"
      ],
      "for": [
        "GPUQueue"
      ],
      "shortname": "webgpu"
    }
  },
  "subscribe()": {
    "subscribe()": {
      "args": [],
      "for": [
        "PushManager"
      ],
      "shortname": "push-api"
    },
    "subscribe(options)": {
      "args": [
        "options"
      ],
      "for": [
        "PushManager"
      ],
      "shortname": "push-api"
    },
    "subscribe(subscriptions)": {
      "args": [
        "subscriptions"
      ],
      "for": [
        "CookieStoreManager"
      ],
      "shortname": "cookie-store"
    }
  },
  "substr()": {
    "substr(start, length)": {
      "args": [
        "start",
        "length"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "substring()": {
    "substring(start, end)": {
      "args": [
        "start",
        "end"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "substringData()": {
    "substringData(offset, count)": {
      "args": [
        "offset",
        "count"
      ],
      "for": [
        "CharacterData"
      ],
      "shortname": "dom"
    }
  },
  "sup()": {
    "sup()": {
      "args": [],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "supports()": {
    "supports(conditionText)": {
      "args": [
        "conditionText"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-conditional"
    },
    "supports(property, value)": {
      "args": [
        "property",
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-conditional"
    },
    "supports(token)": {
      "args": [
        "token"
      ],
      "for": [
        "DOMTokenList"
      ],
      "shortname": "dom"
    },
    "supports(type)": {
      "args": [
        "type"
      ],
      "for": [
        "ClipboardItem",
        "HTMLScriptElement"
      ],
      "shortname": "html"
    }
  },
  "surroundContents()": {
    "surroundContents(newParent)": {
      "args": [
        "newParent"
      ],
      "for": [
        "Range"
      ],
      "shortname": "dom"
    }
  },
  "suspend()": {
    "suspend()": {
      "args": [],
      "for": [
        "AudioContext"
      ],
      "shortname": "webaudio"
    },
    "suspend(suspendTime)": {
      "args": [
        "suspendTime"
      ],
      "for": [
        "OfflineAudioContext"
      ],
      "shortname": "webaudio"
    }
  },
  "svb()": {
    "svb(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "svh()": {
    "svh(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "svi()": {
    "svi(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "svmax()": {
    "svmax(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "svmin()": {
    "svmin(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "svw()": {
    "svw(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "symmetricDifference()": {
    "symmetricDifference(other)": {
      "args": [
        "other"
      ],
      "for": [
        "Set"
      ],
      "shortname": "ecmascript"
    }
  },
  "table()": {
    "table()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "table(tabularData)": {
      "args": [
        "tabularData"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "table(tabularData, properties)": {
      "args": [
        "tabularData",
        "properties"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "taintEnabled()": {
    "taintEnabled()": {
      "args": [],
      "for": [
        "NavigatorID"
      ],
      "shortname": "html"
    }
  },
  "takePhoto()": {
    "takePhoto()": {
      "args": [],
      "for": [
        "ImageCapture"
      ],
      "shortname": "image-capture"
    },
    "takePhoto(photoSettings)": {
      "args": [
        "photoSettings"
      ],
      "for": [
        "ImageCapture"
      ],
      "shortname": "image-capture"
    }
  },
  "takeRecords()": {
    "takeRecords()": {
      "args": [],
      "for": [
        "IntersectionObserver",
        "MutationObserver",
        "PerformanceObserver",
        "PressureObserver",
        "ReportingObserver"
      ],
      "shortname": "dom"
    }
  },
  "tan()": {
    "tan(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "tan(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "tan(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "tanh()": {
    "tanh(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "tanh(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "tanh(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "tee()": {
    "tee()": {
      "args": [],
      "for": [
        "ReadableStream"
      ],
      "shortname": "streams"
    }
  },
  "terminate()": {
    "terminate()": {
      "args": [],
      "for": [
        "PresentationConnection",
        "TransformStreamDefaultController",
        "Worker"
      ],
      "shortname": "html"
    }
  },
  "test()": {
    "test()": {
      "args": [],
      "for": [
        "URLPattern"
      ],
      "shortname": "urlpattern"
    },
    "test(S)": {
      "args": [
        "S"
      ],
      "for": [
        "RegExp"
      ],
      "shortname": "ecmascript"
    },
    "test(input)": {
      "args": [
        "input"
      ],
      "for": [
        "URLPattern"
      ],
      "shortname": "urlpattern"
    },
    "test(input, baseURL)": {
      "args": [
        "input",
        "baseURL"
      ],
      "for": [
        "URLPattern"
      ],
      "shortname": "urlpattern"
    }
  },
  "text()": {
    "text()": {
      "args": [],
      "for": [
        "Blob",
        "Body",
        "PushMessageData"
      ],
      "shortname": "fetch"
    }
  },
  "then()": {
    "then(onFulfilled, onRejected)": {
      "args": [
        "onFulfilled",
        "onRejected"
      ],
      "for": [
        "Promise"
      ],
      "shortname": "ecmascript"
    }
  },
  "throwIfAborted()": {
    "throwIfAborted()": {
      "args": [],
      "for": [
        "AbortSignal"
      ],
      "shortname": "dom"
    }
  },
  "time()": {
    "time()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "time(label)": {
      "args": [
        "label"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "timeEnd()": {
    "timeEnd()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "timeEnd(label)": {
      "args": [
        "label"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "timeLog()": {
    "timeLog()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "timeLog(label)": {
      "args": [
        "label"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "timeLog(label, ...data)": {
      "args": [
        "label",
        "...data"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "timeRemaining()": {
    "timeRemaining()": {
      "args": [],
      "for": [
        "IdleDeadline"
      ],
      "shortname": "requestidlecallback"
    }
  },
  "timeout()": {
    "timeout(milliseconds)": {
      "args": [
        "milliseconds"
      ],
      "for": [
        "AbortSignal"
      ],
      "shortname": "dom"
    }
  },
  "to()": {
    "to(unit)": {
      "args": [
        "unit"
      ],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "toBlob()": {
    "toBlob(callback, type, quality)": {
      "args": [
        "callback",
        "type",
        "quality"
      ],
      "for": [
        "HTMLCanvasElement"
      ],
      "shortname": "html"
    }
  },
  "toDataURL()": {
    "toDataURL(type, quality)": {
      "args": [
        "type",
        "quality"
      ],
      "for": [
        "HTMLCanvasElement"
      ],
      "shortname": "html"
    }
  },
  "toDateString()": {
    "toDateString()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "toExponential()": {
    "toExponential(fractionDigits)": {
      "args": [
        "fractionDigits"
      ],
      "for": [
        "Number"
      ],
      "shortname": "ecmascript"
    }
  },
  "toFixed()": {
    "toFixed(fractionDigits)": {
      "args": [
        "fractionDigits"
      ],
      "for": [
        "Number"
      ],
      "shortname": "ecmascript"
    }
  },
  "toFixedLengthBuffer()": {
    "toFixedLengthBuffer()": {
      "args": [],
      "for": [
        "Memory"
      ],
      "shortname": "wasm-js-api"
    }
  },
  "toFloat32Array()": {
    "toFloat32Array()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "toFloat64Array()": {
    "toFloat64Array()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "toGMTString()": {
    "toGMTString()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "toISOString()": {
    "toISOString()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "toJSON()": {
    "toJSON()": {
      "args": [],
      "for": [
        "CSPViolationReportBody",
        "ContactAddress",
        "DOMMatrixReadOnly",
        "DOMPointReadOnly",
        "DOMQuad",
        "DOMRectReadOnly",
        "DeprecationReportBody",
        "GeolocationCoordinates",
        "GeolocationPosition",
        "InterventionReportBody",
        "LargestContentfulPaint",
        "LayoutShift",
        "MediaDeviceInfo",
        "NavigatorUA",
        "NavigatorUAData",
        "Performance",
        "PerformanceElementTiming",
        "PerformanceEntry",
        "PerformanceEventTiming",
        "PerformanceLongAnimationFrameTiming",
        "PerformanceLongTaskTiming",
        "PerformanceNavigation",
        "PerformanceNavigationTiming",
        "PerformanceResourceTiming",
        "PerformanceScriptTiming",
        "PerformanceServerTiming",
        "PerformanceTiming",
        "PermissionsPolicyViolationReportBody",
        "PressureRecord",
        "PublicKeyCredential",
        "PushSubscription",
        "RTCIceCandidate",
        "RTCSessionDescription",
        "Report",
        "ReportBody",
        "ScriptingPolicyReportBody",
        "TaskAttributionTiming",
        "TrustedHTML",
        "TrustedScript",
        "TrustedScriptURL",
        "URL",
        "VideoColorSpace"
      ],
      "shortname": "url"
    },
    "toJSON(key)": {
      "args": [
        "key"
      ],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "toLocaleDateString()": {
    "toLocaleDateString(reserved1, reserved2)": {
      "args": [
        "reserved1",
        "reserved2"
      ],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "toLocaleLowerCase()": {
    "toLocaleLowerCase(reserved1, reserved2)": {
      "args": [
        "reserved1",
        "reserved2"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "toLocaleString()": {
    "toLocaleString(reserved1, reserved2)": {
      "args": [
        "reserved1",
        "reserved2"
      ],
      "for": [
        "%TypedArray%",
        "Array",
        "BigInt",
        "Date",
        "Number",
        "Object"
      ],
      "shortname": "ecmascript"
    }
  },
  "toLocaleTimeString()": {
    "toLocaleTimeString(reserved1, reserved2)": {
      "args": [
        "reserved1",
        "reserved2"
      ],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "toLocaleUpperCase()": {
    "toLocaleUpperCase(reserved1, reserved2)": {
      "args": [
        "reserved1",
        "reserved2"
      ],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "toLowerCase()": {
    "toLowerCase()": {
      "args": [],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "toMatrix()": {
    "toMatrix()": {
      "args": [],
      "for": [
        "CSSTransformComponent",
        "CSSTransformValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "toPrecision()": {
    "toPrecision(precision)": {
      "args": [
        "precision"
      ],
      "for": [
        "Number"
      ],
      "shortname": "ecmascript"
    }
  },
  "toRdf()": {
    "toRdf()": {
      "args": [],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld-api"
    },
    "toRdf(input)": {
      "args": [
        "input"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld-api"
    },
    "toRdf(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "JsonLdProcessor"
      ],
      "shortname": "json-ld-api"
    }
  },
  "toRecords()": {
    "toRecords()": {
      "args": [],
      "for": [
        "NDEFRecord"
      ],
      "shortname": "web-nfc"
    }
  },
  "toResizableBuffer()": {
    "toResizableBuffer()": {
      "args": [],
      "for": [
        "Memory"
      ],
      "shortname": "wasm-js-api"
    }
  },
  "toReversed()": {
    "toReversed()": {
      "args": [],
      "for": [
        "%TypedArray%",
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "toSorted()": {
    "toSorted(comparator)": {
      "args": [
        "comparator"
      ],
      "for": [
        "%TypedArray%",
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "toSpliced()": {
    "toSpliced(start, skipCount, ...items)": {
      "args": [
        "start",
        "skipCount",
        "...items"
      ],
      "for": [
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "toString()": {
    "toString()": {
      "args": [],
      "for": [
        "%TypedArray%",
        "Array",
        "Boolean",
        "Date",
        "Error",
        "Function",
        "Object",
        "RegExp",
        "String",
        "Symbol"
      ],
      "shortname": "ecmascript"
    },
    "toString(radix)": {
      "args": [
        "radix"
      ],
      "for": [
        "BigInt",
        "Number"
      ],
      "shortname": "ecmascript"
    }
  },
  "toSum()": {
    "toSum()": {
      "args": [],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    },
    "toSum(...units)": {
      "args": [
        "...units"
      ],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "toTimeString()": {
    "toTimeString()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "toUTCString()": {
    "toUTCString()": {
      "args": [],
      "for": [
        "Date"
      ],
      "shortname": "ecmascript"
    }
  },
  "toUpperCase()": {
    "toUpperCase()": {
      "args": [],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "toWellFormed()": {
    "toWellFormed()": {
      "args": [],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "toggle()": {
    "toggle(token)": {
      "args": [
        "token"
      ],
      "for": [
        "DOMTokenList"
      ],
      "shortname": "dom"
    },
    "toggle(token, force)": {
      "args": [
        "token",
        "force"
      ],
      "for": [
        "DOMTokenList"
      ],
      "shortname": "dom"
    }
  },
  "toggleAttribute()": {
    "toggleAttribute(qualifiedName)": {
      "args": [
        "qualifiedName"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    },
    "toggleAttribute(qualifiedName, force)": {
      "args": [
        "qualifiedName",
        "force"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "togglePopover()": {
    "togglePopover(force)": {
      "args": [
        "force"
      ],
      "for": [
        "HTMLElement"
      ],
      "shortname": "html"
    }
  },
  "trace()": {
    "trace()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "trace(...data)": {
      "args": [
        "...data"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "trackingExceptionExists()": {
    "trackingExceptionExists()": {
      "args": [],
      "for": [
        "Navigator"
      ],
      "shortname": "tracking-dnt"
    },
    "trackingExceptionExists(properties)": {
      "args": [
        "properties"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "tracking-dnt"
    }
  },
  "transaction()": {
    "transaction(storeNames)": {
      "args": [
        "storeNames"
      ],
      "for": [
        "IDBDatabase"
      ],
      "shortname": "indexeddb"
    },
    "transaction(storeNames, mode)": {
      "args": [
        "storeNames",
        "mode"
      ],
      "for": [
        "IDBDatabase"
      ],
      "shortname": "indexeddb"
    },
    "transaction(storeNames, mode, options)": {
      "args": [
        "storeNames",
        "mode",
        "options"
      ],
      "for": [
        "IDBDatabase"
      ],
      "shortname": "indexeddb"
    }
  },
  "transfer()": {
    "transfer(newLength)": {
      "args": [
        "newLength"
      ],
      "for": [
        "ArrayBuffer"
      ],
      "shortname": "ecmascript"
    }
  },
  "transferControlToOffscreen()": {
    "transferControlToOffscreen()": {
      "args": [],
      "for": [
        "HTMLCanvasElement"
      ],
      "shortname": "html"
    }
  },
  "transferFromImageBitmap()": {
    "transferFromImageBitmap(bitmap)": {
      "args": [
        "bitmap"
      ],
      "for": [
        "ImageBitmapRenderingContext"
      ],
      "shortname": "html"
    }
  },
  "transferIn()": {
    "transferIn(endpointNumber, length)": {
      "args": [
        "endpointNumber",
        "length"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    }
  },
  "transferOut()": {
    "transferOut(endpointNumber, data)": {
      "args": [
        "endpointNumber",
        "data"
      ],
      "for": [
        "USBDevice"
      ],
      "shortname": "webusb"
    }
  },
  "transferToFixedLength()": {
    "transferToFixedLength(newLength)": {
      "args": [
        "newLength"
      ],
      "for": [
        "ArrayBuffer"
      ],
      "shortname": "ecmascript"
    }
  },
  "transferToImageBitmap()": {
    "transferToImageBitmap()": {
      "args": [],
      "for": [
        "OffscreenCanvas"
      ],
      "shortname": "html"
    }
  },
  "transform()": {
    "transform(a, b, c, d, e, f)": {
      "args": [
        "a",
        "b",
        "c",
        "d",
        "e",
        "f"
      ],
      "for": [
        "CanvasTransform"
      ],
      "shortname": "html"
    }
  },
  "transformPoint()": {
    "transformPoint()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "transformPoint(point)": {
      "args": [
        "point"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    }
  },
  "transformToDocument()": {
    "transformToDocument(source)": {
      "args": [
        "source"
      ],
      "for": [
        "XSLTProcessor"
      ],
      "shortname": "dom"
    }
  },
  "transformToFragment()": {
    "transformToFragment(source, output)": {
      "args": [
        "source",
        "output"
      ],
      "for": [
        "XSLTProcessor"
      ],
      "shortname": "dom"
    }
  },
  "translate()": {
    "translate()": {
      "args": [],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "translate(tx)": {
      "args": [
        "tx"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "translate(tx, ty)": {
      "args": [
        "tx",
        "ty"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "translate(tx, ty, tz)": {
      "args": [
        "tx",
        "ty",
        "tz"
      ],
      "for": [
        "DOMMatrixReadOnly"
      ],
      "shortname": "geometry"
    },
    "translate(x, y)": {
      "args": [
        "x",
        "y"
      ],
      "for": [
        "CanvasTransform"
      ],
      "shortname": "html"
    }
  },
  "translateSelf()": {
    "translateSelf()": {
      "args": [],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "translateSelf(tx)": {
      "args": [
        "tx"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "translateSelf(tx, ty)": {
      "args": [
        "tx",
        "ty"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    },
    "translateSelf(tx, ty, tz)": {
      "args": [
        "tx",
        "ty",
        "tz"
      ],
      "for": [
        "DOMMatrix"
      ],
      "shortname": "geometry"
    }
  },
  "transmit()": {
    "transmit()": {
      "args": [],
      "for": [
        "SmartCardConnection"
      ],
      "shortname": "web-smart-card"
    },
    "transmit(sendBuffer)": {
      "args": [
        "sendBuffer"
      ],
      "for": [
        "SmartCardConnection"
      ],
      "shortname": "web-smart-card"
    },
    "transmit(sendBuffer, options)": {
      "args": [
        "sendBuffer",
        "options"
      ],
      "for": [
        "SmartCardConnection"
      ],
      "shortname": "web-smart-card"
    }
  },
  "transpose()": {
    "transpose(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "transpose(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "traverseTo()": {
    "traverseTo(key, options)": {
      "args": [
        "key",
        "options"
      ],
      "for": [
        "Navigation"
      ],
      "shortname": "html"
    }
  },
  "triangular()": {
    "triangular(input)": {
      "args": [
        "input"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "triangular(input, options)": {
      "args": [
        "input",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "trim()": {
    "trim()": {
      "args": [],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "trimEnd()": {
    "trimEnd()": {
      "args": [],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "trimLeft()": {
    "trimLeft()": {
      "args": [],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "trimRight()": {
    "trimRight()": {
      "args": [],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "trimStart()": {
    "trimStart()": {
      "args": [],
      "for": [
        "String"
      ],
      "shortname": "ecmascript"
    }
  },
  "trunc()": {
    "trunc(x)": {
      "args": [
        "x"
      ],
      "for": [
        "Math"
      ],
      "shortname": "ecmascript"
    }
  },
  "truncate()": {
    "truncate(newSize)": {
      "args": [
        "newSize"
      ],
      "for": [
        "FileSystemSyncAccessHandle"
      ],
      "shortname": "fs"
    },
    "truncate(size)": {
      "args": [
        "size"
      ],
      "for": [
        "FileSystemWritableFileStream"
      ],
      "shortname": "fs"
    }
  },
  "turn()": {
    "turn(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "type()": {
    "type()": {
      "args": [],
      "for": [
        "CSSNumericValue"
      ],
      "shortname": "css-typed-om"
    }
  },
  "unconfigure()": {
    "unconfigure()": {
      "args": [],
      "for": [
        "GPUCanvasContext"
      ],
      "shortname": "webgpu"
    }
  },
  "unescape()": {
    "unescape(string)": {
      "args": [
        "string"
      ],
      "for": [
        "globalThis"
      ],
      "shortname": "ecmascript"
    }
  },
  "union()": {
    "union(other)": {
      "args": [
        "other"
      ],
      "for": [
        "Set"
      ],
      "shortname": "ecmascript"
    }
  },
  "unlock()": {
    "unlock()": {
      "args": [],
      "for": [
        "Keyboard",
        "ScreenOrientation"
      ],
      "shortname": "keyboard-lock"
    }
  },
  "unmap()": {
    "unmap()": {
      "args": [],
      "for": [
        "GPUBuffer"
      ],
      "shortname": "webgpu"
    }
  },
  "unobserve()": {
    "unobserve()": {
      "args": [],
      "for": [
        "PressureObserver"
      ],
      "shortname": "compute-pressure"
    },
    "unobserve(source)": {
      "args": [
        "source"
      ],
      "for": [
        "PressureObserver"
      ],
      "shortname": "compute-pressure"
    },
    "unobserve(target)": {
      "args": [
        "target"
      ],
      "for": [
        "IntersectionObserver",
        "ResizeObserver"
      ],
      "shortname": "intersection-observer"
    }
  },
  "unregister()": {
    "unregister()": {
      "args": [],
      "for": [
        "ServiceWorkerRegistration"
      ],
      "shortname": "service-workers"
    },
    "unregister(tag)": {
      "args": [
        "tag"
      ],
      "for": [
        "PeriodicSyncManager"
      ],
      "shortname": "periodic-background-sync"
    },
    "unregister(unregisterToken)": {
      "args": [
        "unregisterToken"
      ],
      "for": [
        "FinalizationRegistry"
      ],
      "shortname": "ecmascript"
    }
  },
  "unregisterProtocolHandler()": {
    "unregisterProtocolHandler(scheme, url)": {
      "args": [
        "scheme",
        "url"
      ],
      "for": [
        "NavigatorContentUtils"
      ],
      "shortname": "html"
    }
  },
  "unshift()": {
    "unshift(...items)": {
      "args": [
        "...items"
      ],
      "for": [
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "unsubscribe()": {
    "unsubscribe()": {
      "args": [],
      "for": [
        "PushSubscription"
      ],
      "shortname": "push-api"
    },
    "unsubscribe(subscriptions)": {
      "args": [
        "subscriptions"
      ],
      "for": [
        "CookieStoreManager"
      ],
      "shortname": "cookie-store"
    }
  },
  "unwrapKey()": {
    "unwrapKey()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "unwrapKey(format, wrappedKey, unwrappingKey, unwrapAlgorithm, unwrappedKeyAlgorithm, extractable, keyUsages)": {
      "args": [
        "format",
        "wrappedKey",
        "unwrappingKey",
        "unwrapAlgorithm",
        "unwrappedKeyAlgorithm",
        "extractable",
        "keyUsages"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "update()": {
    "update()": {
      "args": [],
      "for": [
        "MediaKeySession",
        "ServiceWorkerRegistration"
      ],
      "shortname": "encrypted-media"
    },
    "update(response)": {
      "args": [
        "response"
      ],
      "for": [
        "MediaKeySession"
      ],
      "shortname": "encrypted-media"
    },
    "update(value)": {
      "args": [
        "value"
      ],
      "for": [
        "IDBCursor"
      ],
      "shortname": "indexeddb"
    }
  },
  "updateAdInterestGroups()": {
    "updateAdInterestGroups()": {
      "args": [],
      "for": [
        "Navigator"
      ],
      "shortname": "turtledove"
    }
  },
  "updateCharacterBounds()": {
    "updateCharacterBounds()": {
      "args": [],
      "for": [
        "EditContext"
      ],
      "shortname": "edit-context"
    },
    "updateCharacterBounds(rangeStart, characterBounds)": {
      "args": [
        "rangeStart",
        "characterBounds"
      ],
      "for": [
        "EditContext"
      ],
      "shortname": "edit-context"
    }
  },
  "updateControlBound()": {
    "updateControlBound()": {
      "args": [],
      "for": [
        "EditContext"
      ],
      "shortname": "edit-context"
    },
    "updateControlBound(controlBound)": {
      "args": [
        "controlBound"
      ],
      "for": [
        "EditContext"
      ],
      "shortname": "edit-context"
    }
  },
  "updateControlBounds()": {
    "updateControlBounds()": {
      "args": [],
      "for": [
        "EditContext"
      ],
      "shortname": "edit-context"
    },
    "updateControlBounds(controlBounds)": {
      "args": [
        "controlBounds"
      ],
      "for": [
        "EditContext"
      ],
      "shortname": "edit-context"
    }
  },
  "updateCurrentEntry()": {
    "updateCurrentEntry(options)": {
      "args": [
        "options"
      ],
      "for": [
        "Navigation"
      ],
      "shortname": "html"
    }
  },
  "updateInkTrailStartPoint()": {
    "updateInkTrailStartPoint(event, style)": {
      "args": [
        "event",
        "style"
      ],
      "for": [
        "InkPresenter"
      ],
      "shortname": "ink-enhancement"
    }
  },
  "updatePlaybackRate()": {
    "updatePlaybackRate(playbackRate)": {
      "args": [
        "playbackRate"
      ],
      "for": [
        "Animation"
      ],
      "shortname": "web-animations"
    }
  },
  "updateRenderState()": {
    "updateRenderState()": {
      "args": [],
      "for": [
        "XRSession"
      ],
      "shortname": "webxr"
    },
    "updateRenderState(newState)": {
      "args": [
        "newState"
      ],
      "for": [
        "XRSession"
      ],
      "shortname": "webxr"
    },
    "updateRenderState(state)": {
      "args": [
        "state"
      ],
      "for": [
        "XRSession"
      ],
      "shortname": "webxr"
    }
  },
  "updateSelection()": {
    "updateSelection()": {
      "args": [],
      "for": [
        "EditContext"
      ],
      "shortname": "edit-context"
    },
    "updateSelection(start, end)": {
      "args": [
        "start",
        "end"
      ],
      "for": [
        "EditContext"
      ],
      "shortname": "edit-context"
    }
  },
  "updateSelectionBound()": {
    "updateSelectionBound()": {
      "args": [],
      "for": [
        "EditContext"
      ],
      "shortname": "edit-context"
    },
    "updateSelectionBound(selectionBound)": {
      "args": [
        "selectionBound"
      ],
      "for": [
        "EditContext"
      ],
      "shortname": "edit-context"
    }
  },
  "updateSelectionBounds()": {
    "updateSelectionBounds()": {
      "args": [],
      "for": [
        "EditContext"
      ],
      "shortname": "edit-context"
    },
    "updateSelectionBounds(selectionBounds)": {
      "args": [
        "selectionBounds"
      ],
      "for": [
        "EditContext"
      ],
      "shortname": "edit-context"
    }
  },
  "updateTargetFrameRate()": {
    "updateTargetFrameRate(rate)": {
      "args": [
        "rate"
      ],
      "for": [
        "XRSession"
      ],
      "shortname": "webxr"
    }
  },
  "updateText()": {
    "updateText()": {
      "args": [],
      "for": [
        "EditContext"
      ],
      "shortname": "edit-context"
    },
    "updateText(rangeStart, rangeEnd, text)": {
      "args": [
        "rangeStart",
        "rangeEnd",
        "text"
      ],
      "for": [
        "EditContext"
      ],
      "shortname": "edit-context"
    }
  },
  "updateTiming()": {
    "updateTiming()": {
      "args": [],
      "for": [
        "AnimationEffect"
      ],
      "shortname": "web-animations"
    },
    "updateTiming(timing)": {
      "args": [
        "timing"
      ],
      "for": [
        "AnimationEffect"
      ],
      "shortname": "web-animations"
    }
  },
  "updateUI()": {
    "updateUI()": {
      "args": [],
      "for": [
        "BackgroundFetchUpdateUIEvent"
      ],
      "shortname": "background-fetch"
    },
    "updateUI(options)": {
      "args": [
        "options"
      ],
      "for": [
        "BackgroundFetchUpdateUIEvent"
      ],
      "shortname": "background-fetch"
    }
  },
  "updateWith()": {
    "updateWith()": {
      "args": [],
      "for": [
        "PaymentRequestUpdateEvent"
      ],
      "shortname": "payment-request"
    },
    "updateWith(detailsPromise)": {
      "args": [
        "detailsPromise"
      ],
      "for": [
        "PaymentRequestUpdateEvent"
      ],
      "shortname": "payment-request"
    }
  },
  "upgrade()": {
    "upgrade(root)": {
      "args": [
        "root"
      ],
      "for": [
        "CustomElementRegistry"
      ],
      "shortname": "html"
    }
  },
  "upperBound()": {
    "upperBound(upper)": {
      "args": [
        "upper"
      ],
      "for": [
        "IDBKeyRange"
      ],
      "shortname": "indexeddb"
    },
    "upperBound(upper, open)": {
      "args": [
        "upper",
        "open"
      ],
      "for": [
        "IDBKeyRange"
      ],
      "shortname": "indexeddb"
    }
  },
  "validate()": {
    "validate(bytes)": {
      "args": [
        "bytes"
      ],
      "for": [
        "WebAssembly"
      ],
      "shortname": "wasm-js-api"
    }
  },
  "valueOf()": {
    "valueOf()": {
      "args": [],
      "for": [
        "BigInt",
        "Boolean",
        "Date",
        "Global",
        "Number",
        "Object",
        "String",
        "Symbol"
      ],
      "shortname": "ecmascript"
    }
  },
  "values()": {
    "values()": {
      "args": [],
      "for": [
        "%TypedArray%",
        "Array",
        "Map",
        "Set"
      ],
      "shortname": "ecmascript"
    },
    "values(O)": {
      "args": [
        "O"
      ],
      "for": [
        "Object"
      ],
      "shortname": "ecmascript"
    }
  },
  "vb()": {
    "vb(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "verify()": {
    "verify()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "verify(algorithm, key, signature, data)": {
      "args": [
        "algorithm",
        "key",
        "signature",
        "data"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "vh()": {
    "vh(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "vi()": {
    "vi(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "vibrate()": {
    "vibrate()": {
      "args": [],
      "for": [
        "Navigator"
      ],
      "shortname": "vibration"
    },
    "vibrate(pattern)": {
      "args": [
        "pattern"
      ],
      "for": [
        "Navigator"
      ],
      "shortname": "vibration"
    }
  },
  "vmax()": {
    "vmax(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "vmin()": {
    "vmin(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "vw()": {
    "vw(value)": {
      "args": [
        "value"
      ],
      "for": [
        "CSS"
      ],
      "shortname": "css-typed-om"
    }
  },
  "wait()": {
    "wait(typedArray, index, value, timeout)": {
      "args": [
        "typedArray",
        "index",
        "value",
        "timeout"
      ],
      "for": [
        "Atomics"
      ],
      "shortname": "ecmascript"
    }
  },
  "waitAsync()": {
    "waitAsync(typedArray, index, value, timeout)": {
      "args": [
        "typedArray",
        "index",
        "value",
        "timeout"
      ],
      "for": [
        "Atomics"
      ],
      "shortname": "ecmascript"
    }
  },
  "waitUntil()": {
    "waitUntil(f)": {
      "args": [
        "f"
      ],
      "for": [
        "ExtendableEvent"
      ],
      "shortname": "service-workers"
    }
  },
  "warn()": {
    "warn()": {
      "args": [],
      "for": [
        "console"
      ],
      "shortname": "console"
    },
    "warn(...data)": {
      "args": [
        "...data"
      ],
      "for": [
        "console"
      ],
      "shortname": "console"
    }
  },
  "watchAdvertisements()": {
    "watchAdvertisements()": {
      "args": [],
      "for": [
        "BluetoothDevice"
      ],
      "shortname": "web-bluetooth"
    },
    "watchAdvertisements(options)": {
      "args": [
        "options"
      ],
      "for": [
        "BluetoothDevice"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "watchAvailability()": {
    "watchAvailability()": {
      "args": [],
      "for": [
        "RemotePlayback"
      ],
      "shortname": "remote-playback"
    },
    "watchAvailability(callback)": {
      "args": [
        "callback"
      ],
      "for": [
        "RemotePlayback"
      ],
      "shortname": "remote-playback"
    }
  },
  "watchPosition()": {
    "watchPosition()": {
      "args": [],
      "for": [
        "Geolocation"
      ],
      "shortname": "geolocation"
    },
    "watchPosition(successCallback)": {
      "args": [
        "successCallback"
      ],
      "for": [
        "Geolocation"
      ],
      "shortname": "geolocation"
    },
    "watchPosition(successCallback, errorCallback)": {
      "args": [
        "successCallback",
        "errorCallback"
      ],
      "for": [
        "Geolocation"
      ],
      "shortname": "geolocation"
    },
    "watchPosition(successCallback, errorCallback, options)": {
      "args": [
        "successCallback",
        "errorCallback",
        "options"
      ],
      "for": [
        "Geolocation"
      ],
      "shortname": "geolocation"
    }
  },
  "webkitGetAsEntry()": {
    "webkitGetAsEntry()": {
      "args": [],
      "for": [
        "DataTransferItem"
      ],
      "shortname": "entries-api"
    }
  },
  "webkitMatchesSelector()": {
    "webkitMatchesSelector(selectors)": {
      "args": [
        "selectors"
      ],
      "for": [
        "Element"
      ],
      "shortname": "dom"
    }
  },
  "whenDefined()": {
    "whenDefined(name)": {
      "args": [
        "name"
      ],
      "for": [
        "CustomElementRegistry"
      ],
      "shortname": "html"
    }
  },
  "where()": {
    "where(condition, trueValue, falseValue)": {
      "args": [
        "condition",
        "trueValue",
        "falseValue"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    },
    "where(condition, trueValue, falseValue, options)": {
      "args": [
        "condition",
        "trueValue",
        "falseValue",
        "options"
      ],
      "for": [
        "MLGraphBuilder"
      ],
      "shortname": "webnn"
    }
  },
  "willRequestConditionalCreation()": {
    "willRequestConditionalCreation()": {
      "args": [],
      "for": [
        "Credential"
      ],
      "shortname": "credential-management"
    }
  },
  "with()": {
    "with(index, value)": {
      "args": [
        "index",
        "value"
      ],
      "for": [
        "%TypedArray%",
        "Array"
      ],
      "shortname": "ecmascript"
    }
  },
  "withResolvers()": {
    "withResolvers()": {
      "args": [],
      "for": [
        "Promise"
      ],
      "shortname": "ecmascript"
    }
  },
  "wrapKey()": {
    "wrapKey()": {
      "args": [],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    },
    "wrapKey(format, key, wrappingKey, wrapAlgorithm)": {
      "args": [
        "format",
        "key",
        "wrappingKey",
        "wrapAlgorithm"
      ],
      "for": [
        "SubtleCrypto"
      ],
      "shortname": "webcryptoapi"
    }
  },
  "write()": {
    "write()": {
      "args": [],
      "for": [
        "NDEFReader",
        "WritableStreamDefaultWriter"
      ],
      "shortname": "streams"
    },
    "write(buffer)": {
      "args": [
        "buffer"
      ],
      "for": [
        "FileSystemSyncAccessHandle"
      ],
      "shortname": "fs"
    },
    "write(buffer, FileSystemReadWriteOptions: options)": {
      "args": [
        "buffer",
        "FileSystemReadWriteOptions: options"
      ],
      "for": [
        "FileSystemSyncAccessHandle"
      ],
      "shortname": "fs"
    },
    "write(buffer, options)": {
      "args": [
        "buffer",
        "options"
      ],
      "for": [
        "FileSystemSyncAccessHandle"
      ],
      "shortname": "fs"
    },
    "write(chunk)": {
      "args": [
        "chunk"
      ],
      "for": [
        "WritableStreamDefaultWriter"
      ],
      "shortname": "streams"
    },
    "write(data)": {
      "args": [
        "data"
      ],
      "for": [
        "Clipboard",
        "FileSystemWritableFileStream"
      ],
      "shortname": "fs"
    },
    "write(message)": {
      "args": [
        "message"
      ],
      "for": [
        "NDEFReader"
      ],
      "shortname": "web-nfc"
    },
    "write(message, options)": {
      "args": [
        "message",
        "options"
      ],
      "for": [
        "NDEFReader"
      ],
      "shortname": "web-nfc"
    }
  },
  "writeBuffer()": {
    "writeBuffer(buffer, bufferOffset, data)": {
      "args": [
        "buffer",
        "bufferOffset",
        "data"
      ],
      "for": [
        "GPUQueue"
      ],
      "shortname": "webgpu"
    },
    "writeBuffer(buffer, bufferOffset, data, dataOffset)": {
      "args": [
        "buffer",
        "bufferOffset",
        "data",
        "dataOffset"
      ],
      "for": [
        "GPUQueue"
      ],
      "shortname": "webgpu"
    },
    "writeBuffer(buffer, bufferOffset, data, dataOffset, size)": {
      "args": [
        "buffer",
        "bufferOffset",
        "data",
        "dataOffset",
        "size"
      ],
      "for": [
        "GPUQueue"
      ],
      "shortname": "webgpu"
    }
  },
  "writeText()": {
    "writeText(data)": {
      "args": [
        "data"
      ],
      "for": [
        "Clipboard"
      ],
      "shortname": "clipboard-apis"
    }
  },
  "writeTexture()": {
    "writeTexture(destination, data, dataLayout, size)": {
      "args": [
        "destination",
        "data",
        "dataLayout",
        "size"
      ],
      "for": [
        "GPUQueue"
      ],
      "shortname": "webgpu"
    }
  },
  "writeValue()": {
    "writeValue(value)": {
      "args": [
        "value"
      ],
      "for": [
        "BluetoothRemoteGATTCharacteristic",
        "BluetoothRemoteGATTDescriptor"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "writeValueWithResponse()": {
    "writeValueWithResponse(value)": {
      "args": [
        "value"
      ],
      "for": [
        "BluetoothRemoteGATTCharacteristic"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "writeValueWithoutResponse()": {
    "writeValueWithoutResponse(value)": {
      "args": [
        "value"
      ],
      "for": [
        "BluetoothRemoteGATTCharacteristic"
      ],
      "shortname": "web-bluetooth"
    }
  },
  "xor()": {
    "xor(typedArray, index, value)": {
      "args": [
        "typedArray",
        "index",
        "value"
      ],
      "for": [
        "Atomics"
      ],
      "shortname": "ecmascript"
    }
  },
  "yield()": {
    "yield()": {
      "args": [],
      "for": [
        "Scheduler"
      ],
      "shortname": "scheduling-apis"
    }
  }
}