{
    "dom-compositionevent-compositionevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CompositionEvent.json",
            "name": "CompositionEvent",
            "slug": "API/CompositionEvent/CompositionEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent/CompositionEvent",
            "summary": "The CompositionEvent() constructor creates a new CompositionEvent object.",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CompositionEvent: CompositionEvent() constructor"
        }
    ],
    "dom-compositionevent-data": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CompositionEvent.json",
            "name": "data",
            "slug": "API/CompositionEvent/data",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent/data",
            "summary": "The data read-only property of the CompositionEvent interface returns the characters generated by the input method that raised the event; its exact nature varies depending on the type of event that generated the CompositionEvent object.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CompositionEvent: data property"
        }
    ],
    "interface-compositionevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CompositionEvent.json",
            "name": "CompositionEvent",
            "slug": "API/CompositionEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent",
            "summary": "The DOM CompositionEvent represents events that occur due to the user indirectly entering text.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CompositionEvent"
        }
    ],
    "event-type-auxclick": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/Element.json",
            "name": "auxclick_event",
            "slug": "API/Element/auxclick_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event",
            "summary": "The auxclick event is fired at an Element when a non-primary pointing device button (any mouse button other than the primary—usually leftmost—button) has been pressed and released both within the same element.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53",
                    "notes": "Starting in Firefox 68, the <code>auxclick</code> event is used to trigger the <em>new tab on middle-click</em> action; previously, this had been done with the <code>click</code> event. Apps can prevent middle-click from opening new tabs (or middle-click to paste, if that feature is enabled) by intercepting <code>auxclick</code> on links, and <code>auxclick</code> event handlers can now open popups without triggering the popup blocker."
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "auxclick",
                "title": "Auxclick"
            },
            "title": "Element: auxclick event"
        }
    ],
    "event-type-blur": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "blur_event",
            "slug": "API/Element/blur_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event",
            "summary": "The blur event fires when an element has lost focus. The event does not bubble, but the related focusout event that follows does bubble.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "24"
                    },
                    {
                        "version_added": "6",
                        "version_removed": "24",
                        "notes": "The interface for this event is <a href='https://developer.mozilla.org/docs/Web/API/Event'><code>Event</code></a>, not <a href='https://developer.mozilla.org/docs/Web/API/FocusEvent'><code>FocusEvent</code></a>."
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: blur event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "blur_event",
            "slug": "API/Window/blur_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/blur_event",
            "summary": "The blur event fires when an element has lost focus.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6",
                    "notes": [
                        "Apart from firing the event on <code>window</code> as other browsers do, Firefox also fires the event on the <code>document</code> object. See <a href='https://bugzil.la/1228802'>bug 1228802</a>.",
                        "Before Firefox 24, the interface for this event is a plain <a href='https://developer.mozilla.org/docs/Web/API/Event'><code>Event</code></a>, not <a href='https://developer.mozilla.org/docs/Web/API/FocusEvent'><code>FocusEvent</code></a>."
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: blur event"
        }
    ],
    "event-type-click": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "click_event",
            "slug": "API/Element/click_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event",
            "summary": "An element receives a click event when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6",
                    "notes": "Beginning in Firefox 68, Firefox no longer incorrectly sends a <code>click</code> event for buttons other than the primary mouse button; previously, there were circumstances in which this would occur. One example: middle-clicking a link would send a <code>click</code> to the document's <code>&lt;html&gt;</code> element."
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: click event"
        }
    ],
    "event-type-compositionend": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "compositionend_event",
            "slug": "API/Element/compositionend_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionend_event",
            "summary": "The compositionend event is fired when a text composition system such as an input method editor completes or cancels the current composition session.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: compositionend event"
        }
    ],
    "event-type-compositionstart": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "compositionstart_event",
            "slug": "API/Element/compositionstart_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionstart_event",
            "summary": "The compositionstart event is fired when a text composition system such as an input method editor starts a new composition session.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: compositionstart event"
        }
    ],
    "event-type-compositionupdate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "compositionupdate_event",
            "slug": "API/Element/compositionupdate_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/compositionupdate_event",
            "summary": "The compositionupdate event is fired when a new character is received in the context of a text composition session controlled by a text composition system such as an input method editor.",
            "support": {
                "chrome": {
                    "version_added": "18"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: compositionupdate event"
        }
    ],
    "event-type-contextmenu": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "contextmenu_event",
            "slug": "API/Element/contextmenu_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event",
            "summary": "The contextmenu event fires when the user attempts to open a context menu. This event is typically triggered by clicking the right mouse button, or by pressing the context menu key.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": false,
                    "notes": "See <a href='https://webkit.org/b/213953'>bug 213953</a>."
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: contextmenu event"
        }
    ],
    "event-type-dblclick": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "dblclick_event",
            "slug": "API/Element/dblclick_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event",
            "summary": "The dblclick event fires when a pointing device button (such as a mouse's primary button) is double-clicked; that is, when it's rapidly clicked twice on a single element within a very short span of time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6",
                    "notes": "Starting in Firefox 68, <code>dblclick</code> events are only sent for the primary mouse button, per the specification."
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: dblclick event"
        }
    ],
    "event-type-focus": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "focus_event",
            "slug": "API/Element/focus_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event",
            "summary": "The focus event fires when an element has received focus. The event does not bubble, but the related focusin event that follows does bubble.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "24"
                    },
                    {
                        "version_added": "6",
                        "version_removed": "24",
                        "notes": "The interface for this event is <a href='https://developer.mozilla.org/docs/Web/API/Event'><code>Event</code></a>, not <a href='https://developer.mozilla.org/docs/Web/API/FocusEvent'><code>FocusEvent</code></a>."
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: focus event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "focus_event",
            "slug": "API/Window/focus_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/focus_event",
            "summary": "The focus event fires when an element has received focus.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6",
                    "notes": [
                        "Apart from firing the event on <code>window</code> as other browsers do, Firefox also fires the event on the <code>document</code> object. See <a href='https://bugzil.la/1228802'>bug 1228802</a>.",
                        "Before Firefox 24, the interface for this event is a plain <a href='https://developer.mozilla.org/docs/Web/API/Event'><code>Event</code></a>, not <a href='https://developer.mozilla.org/docs/Web/API/FocusEvent'><code>FocusEvent</code></a>."
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: focus event"
        }
    ],
    "event-type-focusin": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "focusin_event",
            "slug": "API/Element/focusin_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/focusin_event",
            "summary": "The focusin event fires when an element has received focus, after the focus event. The two events differ in that focusin bubbles, while focus does not.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: focusin event"
        }
    ],
    "event-type-focusout": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "focusout_event",
            "slug": "API/Element/focusout_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/focusout_event",
            "summary": "The focusout event fires when an element has lost focus, after the blur event. The two events differ in that focusout bubbles, while blur does not.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: focusout event"
        }
    ],
    "event-type-keydown": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "keydown_event",
            "slug": "API/Element/keydown_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event",
            "summary": "The keydown event is fired when a key is pressed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: keydown event"
        }
    ],
    "event-type-keyup": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "keyup_event",
            "slug": "API/Element/keyup_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event",
            "summary": "The keyup event is fired when a key is released.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: keyup event"
        }
    ],
    "event-type-mousedown": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "mousedown_event",
            "slug": "API/Element/mousedown_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event",
            "summary": "The mousedown event is fired at an Element when a pointing device button is pressed while the pointer is inside the element.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: mousedown event"
        }
    ],
    "event-type-mouseenter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "mouseenter_event",
            "slug": "API/Element/mouseenter_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event",
            "summary": "The mouseenter event is fired at an Element when a pointing device (usually a mouse) is initially moved so that its hotspot is within the element at which the event was fired.",
            "support": {
                "chrome": {
                    "version_added": "30"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "10"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: mouseenter event"
        }
    ],
    "event-type-mouseleave": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "mouseleave_event",
            "slug": "API/Element/mouseleave_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event",
            "summary": "The mouseleave event is fired at an Element when the cursor of a pointing device (usually a mouse) is moved out of it.",
            "support": {
                "chrome": {
                    "version_added": "30"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "10"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: mouseleave event"
        }
    ],
    "event-type-mousemove": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "mousemove_event",
            "slug": "API/Element/mousemove_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event",
            "summary": "The mousemove event is fired at an element when a pointing device (usually a mouse) is moved while the cursor's hotspot is inside it.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: mousemove event"
        }
    ],
    "event-type-mouseout": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "mouseout_event",
            "slug": "API/Element/mouseout_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event",
            "summary": "The mouseout event is fired at an Element when a pointing device (usually a mouse) is used to move the cursor so that it is no longer contained within the element or one of its children.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: mouseout event"
        }
    ],
    "event-type-mouseover": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "mouseover_event",
            "slug": "API/Element/mouseover_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event",
            "summary": "The mouseover event is fired at an Element when a pointing device (such as a mouse or trackpad) is used to move the cursor onto the element or one of its child elements.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: mouseover event"
        }
    ],
    "event-type-mouseup": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "mouseup_event",
            "slug": "API/Element/mouseup_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event",
            "summary": "The mouseup event is fired at an Element when a button on a pointing device (such as a mouse or trackpad) is released while the pointer is located inside it.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: mouseup event"
        }
    ],
    "event-type-wheel": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "wheel_event",
            "slug": "API/Element/wheel_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event",
            "summary": "The wheel event fires when the user rotates a wheel button on a pointing device (typically a mouse).",
            "support": {
                "chrome": {
                    "version_added": "31"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "17"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9",
                    "notes": "The <code>onwheel</code> event handler property is not supported. To listen to this event, use <code>element.addEventListener('wheel', function() {});</code>. See <a href='https://connect.microsoft.com/IE/feedback/details/782835/missing-onwheel-attribute-for-the-wheel-event-although-its-supported-via-addeventlistener'>IE bug 782835</a>."
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: wheel event"
        }
    ],
    "dom-focusevent-focusevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/FocusEvent.json",
            "name": "FocusEvent",
            "slug": "API/FocusEvent/FocusEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/FocusEvent",
            "summary": "The FocusEvent() constructor returns a newly created FocusEvent object with an optional EventTarget. When the event has both a source and a destination, the relatedTarget value must be set to the other target.",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "24"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "FocusEvent: FocusEvent() constructor"
        }
    ],
    "dom-focusevent-relatedtarget": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/FocusEvent.json",
            "name": "relatedTarget",
            "slug": "API/FocusEvent/relatedTarget",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent/relatedTarget",
            "summary": "The FocusEvent.relatedTarget read-only property is the secondary target, depending on the type of event:",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "24"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "FocusEvent: relatedTarget property"
        }
    ],
    "interface-focusevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/FocusEvent.json",
            "name": "FocusEvent",
            "slug": "API/FocusEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/FocusEvent",
            "summary": "The FocusEvent interface represents focus-related events, including focus, blur, focusin, and focusout.",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "24"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "FocusEvent"
        }
    ],
    "event-type-beforeinput": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "beforeinput_event",
            "slug": "API/HTMLElement/beforeinput_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/beforeinput_event",
            "summary": "The DOM beforeinput event fires when the value of an <input>, or <textarea> element is about to be modified. The event also applies to elements with contenteditable enabled, and to any element when designMode is turned on.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "87"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: beforeinput event"
        }
    ],
    "event-type-error": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "error_event",
            "slug": "API/HTMLElement/error_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/error_event",
            "summary": "The error event is fired on an element when a resource failed to load, or can't be used. For example, if a script has an execution error or an image can't be found or is invalid.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: error event"
        }
    ],
    "event-type-input": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "input_event",
            "slug": "API/HTMLElement/input_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event",
            "summary": "The input event fires when the value of an <input>, <select>, or <textarea> element has been changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9",
                    "partial_implementation": true,
                    "notes": "Only supports <code>input</code> of type <code>text</code> and <code>password</code>."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: input event"
        }
    ],
    "dom-inputevent-inputevent": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "partial": [
                "webkit"
            ],
            "filename": "api/InputEvent.json",
            "name": "InputEvent",
            "slug": "API/InputEvent/InputEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/InputEvent",
            "summary": "The InputEvent() constructor creates a new InputEvent object.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1",
                    "partial_implementation": true,
                    "notes": "The <code>inputEventInit</code> parameter is not supported. See <a href='https://webkit.org/b/170416'>bug 170416</a>."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "InputEvent: InputEvent() constructor"
        }
    ],
    "dom-inputevent-inputtype": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/InputEvent.json",
            "name": "inputType",
            "slug": "API/InputEvent/inputType",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/inputType",
            "summary": "The inputType read-only property of the InputEvent interface returns the type of change made to editable content. Possible changes include for example inserting, deleting, and formatting text.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "66"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "InputEvent: inputType property"
        }
    ],
    "dom-inputevent-iscomposing": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/InputEvent.json",
            "name": "isComposing",
            "slug": "API/InputEvent/isComposing",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/isComposing",
            "summary": "The InputEvent.isComposing read-only property returns a boolean value indicating if the event is fired after compositionstart and before compositionend.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "InputEvent: isComposing property"
        }
    ],
    "interface-inputevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/InputEvent.json",
            "name": "InputEvent",
            "slug": "API/InputEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/InputEvent",
            "summary": "The InputEvent interface represents an event notifying the user of editable content changes.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "InputEvent"
        }
    ],
    "dom-keyboardevent-keyboardevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/KeyboardEvent.json",
            "name": "KeyboardEvent",
            "slug": "API/KeyboardEvent/KeyboardEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/KeyboardEvent",
            "summary": "The KeyboardEvent() constructor creates a new KeyboardEvent object.",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "KeyboardEvent: KeyboardEvent() constructor"
        }
    ],
    "dom-keyboardevent-altkey": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/KeyboardEvent.json",
            "name": "altKey",
            "slug": "API/KeyboardEvent/altKey",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/altKey",
            "summary": "The KeyboardEvent.altKey read-only property is a boolean value that indicates if the alt key (Option or ⌥ on macOS) was pressed (true) or not (false) when the event occurred.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "KeyboardEvent: altKey property"
        }
    ],
    "dom-keyboardevent-code": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/KeyboardEvent.json",
            "name": "code",
            "slug": "API/KeyboardEvent/code",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code",
            "summary": "The KeyboardEvent.code property represents a physical key on the keyboard (as opposed to the character generated by pressing the key). In other words, this property returns a value that isn't altered by keyboard layout or the state of the modifier keys.",
            "support": {
                "chrome": {
                    "version_added": "48"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "keyboardevent-code",
                "title": "KeyboardEvent.code"
            },
            "title": "KeyboardEvent: code property"
        }
    ],
    "dom-keyboardevent-ctrlkey": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/KeyboardEvent.json",
            "name": "ctrlKey",
            "slug": "API/KeyboardEvent/ctrlKey",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/ctrlKey",
            "summary": "The KeyboardEvent.ctrlKey read-only property returns a boolean value that indicates if the control key was pressed (true) or not (false) when the event occurred.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "KeyboardEvent: ctrlKey property"
        }
    ],
    "dom-keyboardevent-getmodifierstate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/KeyboardEvent.json",
            "name": "getModifierState",
            "slug": "API/KeyboardEvent/getModifierState",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState",
            "summary": "The KeyboardEvent.getModifierState() method returns the current state of the specified modifier key: true if the modifier is active (that is the modifier key is pressed or locked), otherwise, false.",
            "support": {
                "chrome": {
                    "version_added": "30"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "keyboardevent-getmodifierstate",
                "title": "KeyboardEvent.getModifierState()"
            },
            "title": "KeyboardEvent: getModifierState() method"
        }
    ],
    "dom-keyboardevent-iscomposing": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/KeyboardEvent.json",
            "name": "isComposing",
            "slug": "API/KeyboardEvent/isComposing",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/isComposing",
            "summary": "The KeyboardEvent.isComposing read-only property returns a boolean value indicating if the event is fired within a composition session, i.e. after compositionstart and before compositionend.",
            "support": {
                "chrome": {
                    "version_added": "56"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "KeyboardEvent: isComposing property"
        }
    ],
    "dom-keyboardevent-key": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/KeyboardEvent.json",
            "name": "key",
            "slug": "API/KeyboardEvent/key",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key",
            "summary": "The KeyboardEvent interface's key read-only property returns the value of the key pressed by the user, taking into consideration the state of modifier keys such as Shift as well as the keyboard locale and layout.",
            "support": {
                "chrome": {
                    "version_added": "51"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "23"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9",
                    "notes": "IE's implementation does not completely match the current spec because it is based on an older version of the spec."
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "keyboardevent-key",
                "title": "KeyboardEvent.key"
            },
            "title": "KeyboardEvent: key property"
        }
    ],
    "dom-keyboardevent-location": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/KeyboardEvent.json",
            "name": "location",
            "slug": "API/KeyboardEvent/location",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/location",
            "summary": "The KeyboardEvent.location read-only property returns an unsigned long representing the location of the key on the keyboard or other input device.",
            "support": {
                "chrome": {
                    "version_added": "30"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "keyboardevent-location",
                "title": "KeyboardEvent.location"
            },
            "title": "KeyboardEvent: location property"
        }
    ],
    "dom-keyboardevent-metakey": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/KeyboardEvent.json",
            "name": "metaKey",
            "slug": "API/KeyboardEvent/metaKey",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/metaKey",
            "summary": "The KeyboardEvent.metaKey read-only property returning a boolean value that indicates if the Meta key was pressed (true) or not (false) when the event occurred. Some operating systems may intercept the key so it is never detected.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5",
                    "notes": "Since Firefox 48, the Windows key is no longer treated as a <code>meta</code> key."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "KeyboardEvent: metaKey property"
        }
    ],
    "dom-keyboardevent-repeat": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/KeyboardEvent.json",
            "name": "repeat",
            "slug": "API/KeyboardEvent/repeat",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat",
            "summary": "The repeat read-only property of the KeyboardEvent interface returns a boolean value that is true if the given key is being held down such that it is automatically repeating.",
            "support": {
                "chrome": {
                    "version_added": "32"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "28"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "KeyboardEvent: repeat property"
        }
    ],
    "dom-keyboardevent-shiftkey": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/KeyboardEvent.json",
            "name": "shiftKey",
            "slug": "API/KeyboardEvent/shiftKey",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/shiftKey",
            "summary": "The KeyboardEvent.shiftKey read-only property is a boolean value that indicates if the shift key was pressed (true) or not (false) when the event occurred.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "KeyboardEvent: shiftKey property"
        }
    ],
    "interface-keyboardevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/KeyboardEvent.json",
            "name": "KeyboardEvent",
            "slug": "API/KeyboardEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent",
            "summary": "KeyboardEvent objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard. The event type (keydown, keypress, or keyup) identifies what kind of keyboard activity occurred.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "KeyboardEvent"
        }
    ],
    "dom-mouseevent-mouseevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MouseEvent.json",
            "name": "MouseEvent",
            "slug": "API/MouseEvent/MouseEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/MouseEvent",
            "summary": "The MouseEvent() constructor creates a new MouseEvent object.",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "11"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MouseEvent: MouseEvent() constructor"
        }
    ],
    "dom-mouseevent-altkey": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MouseEvent.json",
            "name": "altKey",
            "slug": "API/MouseEvent/altKey",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/altKey",
            "summary": "The MouseEvent.altKey read-only property is a boolean value that indicates whether the alt key was pressed or not when a given mouse event occurs.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MouseEvent: altKey property"
        }
    ],
    "dom-mouseevent-button": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MouseEvent.json",
            "name": "button",
            "slug": "API/MouseEvent/button",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button",
            "summary": "The MouseEvent.button read-only property indicates which button was pressed on the mouse to trigger the event.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MouseEvent: button property"
        }
    ],
    "dom-mouseevent-buttons": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MouseEvent.json",
            "name": "buttons",
            "slug": "API/MouseEvent/buttons",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons",
            "summary": "The MouseEvent.buttons read-only property indicates which buttons are pressed on the mouse (or other input device) when a mouse event is triggered.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15",
                    "notes": "Restrictions apply depending on OS."
                },
                "firefox_android": {
                    "version_added": "15"
                },
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MouseEvent: buttons property"
        }
    ],
    "dom-mouseevent-clientx": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MouseEvent.json",
            "name": "clientX",
            "slug": "API/MouseEvent/clientX",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientX",
            "summary": "The clientX read-only property of the MouseEvent interface provides the horizontal coordinate within the application's viewport at which the event occurred (as opposed to the coordinate within the page).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MouseEvent: clientX property"
        }
    ],
    "dom-mouseevent-clienty": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MouseEvent.json",
            "name": "clientY",
            "slug": "API/MouseEvent/clientY",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/clientY",
            "summary": "The clientY read-only property of the MouseEvent interface provides the vertical coordinate within the application's viewport at which the event occurred (as opposed to the coordinate within the page).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MouseEvent: clientY property"
        }
    ],
    "dom-mouseevent-ctrlkey": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MouseEvent.json",
            "name": "ctrlKey",
            "slug": "API/MouseEvent/ctrlKey",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/ctrlKey",
            "summary": "The MouseEvent.ctrlKey read-only property is a boolean value that indicates whether the ctrl key was pressed or not when a given mouse event occurs.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MouseEvent: ctrlKey property"
        }
    ],
    "dom-mouseevent-getmodifierstate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MouseEvent.json",
            "name": "getModifierState",
            "slug": "API/MouseEvent/getModifierState",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/getModifierState",
            "summary": "The MouseEvent.getModifierState() method returns the current state of the specified modifier key: true if the modifier is active (i.e., the modifier key is pressed or locked), otherwise, false.",
            "support": {
                "chrome": {
                    "version_added": "47"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "12.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MouseEvent: getModifierState() method"
        }
    ],
    "dom-mouseevent-metakey": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MouseEvent.json",
            "name": "metaKey",
            "slug": "API/MouseEvent/metaKey",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/metaKey",
            "summary": "The MouseEvent.metaKey read-only property is a boolean value that indicates whether the meta key was pressed or not when a given mouse event occurs.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MouseEvent: metaKey property"
        }
    ],
    "dom-mouseevent-relatedtarget": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MouseEvent.json",
            "name": "relatedTarget",
            "slug": "API/MouseEvent/relatedTarget",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/relatedTarget",
            "summary": "The MouseEvent.relatedTarget read-only property is the secondary target for the mouse event, if there is one.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MouseEvent: relatedTarget property"
        }
    ],
    "dom-mouseevent-screenx": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MouseEvent.json",
            "name": "screenX",
            "slug": "API/MouseEvent/screenX",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenX",
            "summary": "The screenX read-only property of the MouseEvent interface provides the horizontal coordinate (offset) of the mouse pointer in global (screen) coordinates.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MouseEvent: screenX property"
        }
    ],
    "dom-mouseevent-screeny": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MouseEvent.json",
            "name": "screenY",
            "slug": "API/MouseEvent/screenY",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/screenY",
            "summary": "The screenY read-only property of the MouseEvent interface provides the vertical coordinate (offset) of the mouse pointer in global (screen) coordinates.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MouseEvent: screenY property"
        }
    ],
    "dom-mouseevent-shiftkey": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MouseEvent.json",
            "name": "shiftKey",
            "slug": "API/MouseEvent/shiftKey",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/shiftKey",
            "summary": "The MouseEvent.shiftKey read-only property is a boolean value that indicates whether the shift key was pressed or not when a given mouse event occurs.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MouseEvent: shiftKey property"
        }
    ],
    "interface-mouseevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MouseEvent.json",
            "name": "MouseEvent",
            "slug": "API/MouseEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent",
            "summary": "The MouseEvent interface represents events that occur due to the user interacting with a pointing device (such as a mouse). Common events using this interface include click, dblclick, mouseup, mousedown.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MouseEvent"
        }
    ],
    "dom-uievent-uievent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/UIEvent.json",
            "name": "UIEvent",
            "slug": "API/UIEvent/UIEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/UIEvent",
            "summary": "The UIEvent() constructor creates a new UIEvent object.",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "11"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "UIEvent: UIEvent() constructor"
        }
    ],
    "dom-uievent-detail": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/UIEvent.json",
            "name": "detail",
            "slug": "API/UIEvent/detail",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/detail",
            "summary": "The UIEvent.detail read-only property, when non-zero, provides the current (or next, depending on the event) click count.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9",
                    "partial_implementation": true,
                    "notes": "Always <code>0</code> on <code>click</code> and <code>dblclick</code> events. On <code>mousedown</code> and <code>mouseup</code> events, the count is not unique to the element, but is rather the global click count for the current document -- even across refreshes."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "UIEvent: detail property"
        }
    ],
    "dom-uievent-view": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/UIEvent.json",
            "name": "view",
            "slug": "API/UIEvent/view",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/view",
            "summary": "The UIEvent.view read-only property returns the WindowProxy object from which the event was generated. In browsers, this is the Window object the event happened in.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "UIEvent: view property"
        }
    ],
    "idl-uievent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/UIEvent.json",
            "name": "UIEvent",
            "slug": "API/UIEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/UIEvent",
            "summary": "The UIEvent interface represents simple user interface events.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "UIEvent"
        }
    ],
    "dom-wheelevent-wheelevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WheelEvent.json",
            "name": "WheelEvent",
            "slug": "API/WheelEvent/WheelEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/WheelEvent",
            "summary": "The WheelEvent() constructor returns a new WheelEvent object.",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "17"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WheelEvent: WheelEvent() constructor"
        }
    ],
    "dom-wheelevent-deltamode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WheelEvent.json",
            "name": "deltaMode",
            "slug": "API/WheelEvent/deltaMode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaMode",
            "summary": "The WheelEvent.deltaMode read-only property returns an unsigned long representing the unit of the delta values scroll amount. Permitted values are:",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "17"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WheelEvent: deltaMode property"
        }
    ],
    "dom-wheelevent-deltax": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WheelEvent.json",
            "name": "deltaX",
            "slug": "API/WheelEvent/deltaX",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaX",
            "summary": "The WheelEvent.deltaX read-only property is a double representing the horizontal scroll amount in the WheelEvent.deltaMode unit.",
            "support": {
                "chrome": {
                    "version_added": "31"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "17"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9",
                    "notes": "IE9 supports an old draft of the spec where this value was a <code>long</code> instead of a <code>double</code>."
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WheelEvent: deltaX property"
        }
    ],
    "dom-wheelevent-deltay": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WheelEvent.json",
            "name": "deltaY",
            "slug": "API/WheelEvent/deltaY",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaY",
            "summary": "The WheelEvent.deltaY read-only property is a double representing the vertical scroll amount in the WheelEvent.deltaMode unit.",
            "support": {
                "chrome": {
                    "version_added": "31"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "17"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9",
                    "notes": "IE9 supports an old draft of the spec where this value was a <code>long</code> instead of a <code>double</code>."
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WheelEvent: deltaY property"
        }
    ],
    "dom-wheelevent-deltaz": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WheelEvent.json",
            "name": "deltaZ",
            "slug": "API/WheelEvent/deltaZ",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent/deltaZ",
            "summary": "The WheelEvent.deltaZ read-only property is a double representing the scroll amount along the z-axis, in the WheelEvent.deltaMode unit.",
            "support": {
                "chrome": {
                    "version_added": "31"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "17"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9",
                    "notes": "IE9 supports an old draft of the spec where this value was a <code>long</code> instead of a <code>double</code>."
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WheelEvent: deltaZ property"
        }
    ],
    "interface-wheelevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WheelEvent.json",
            "name": "WheelEvent",
            "slug": "API/WheelEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent",
            "summary": "The WheelEvent interface represents events that occur due to the user moving a mouse wheel or similar input device.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "17"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WheelEvent"
        }
    ],
    "event-type-load": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "load_event",
            "slug": "API/Window/load_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event",
            "summary": "The load event is fired when the whole page has loaded, including all dependent resources such as stylesheets, scripts, iframes, and images. This is in contrast to DOMContentLoaded, which is fired as soon as the page DOM has been loaded, without waiting for resources to finish loading.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: load event"
        }
    ]
}
