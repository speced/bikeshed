{
    "ref-for-dom-abortcontroller-abortcontroller①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbortController.json",
            "name": "AbortController",
            "slug": "API/AbortController/AbortController",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AbortController/AbortController",
            "summary": "The AbortController() constructor creates a new AbortController object instance.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": [
                    {
                        "version_added": "12.1"
                    },
                    {
                        "version_added": "11.1",
                        "partial_implementation": true,
                        "notes": "Even though <code>window.AbortController</code> is defined, it doesn't really abort <code>fetch</code> requests. See <a href='https://webkit.org/b/174980'>bug 174980</a>."
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AbortController: AbortController() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbortController.json",
            "name": "abort",
            "slug": "API/AbortController/abort",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort",
            "summary": "The abort() method of the AbortController interface aborts a DOM request before it has completed. This is able to abort fetch requests, the consumption of any response bodies, or streams.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": [
                    {
                        "version_added": "12.1"
                    },
                    {
                        "version_added": "11.1",
                        "partial_implementation": true,
                        "notes": "Even though <code>window.AbortController</code> is defined, it doesn't really abort <code>fetch</code> requests. See <a href='https://webkit.org/b/174980'>bug 174980</a>."
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AbortController: abort() method"
        }
    ],
    "ref-for-dom-abortcontroller-signal②": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbortController.json",
            "name": "signal",
            "slug": "API/AbortController/signal",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal",
            "summary": "The signal read-only property of the AbortController interface returns an AbortSignal object instance, which can be used to communicate with/abort a DOM request as desired.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": [
                    {
                        "version_added": "12.1"
                    },
                    {
                        "version_added": "11.1",
                        "partial_implementation": true,
                        "notes": "Even though <code>window.AbortController</code> is defined, it doesn't really abort <code>fetch</code> requests. See <a href='https://webkit.org/b/174980'>bug 174980</a>."
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AbortController: signal property"
        }
    ],
    "interface-abortcontroller": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbortController.json",
            "name": "AbortController",
            "slug": "API/AbortController",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AbortController",
            "summary": "The AbortController interface represents a controller object that allows you to abort one or more Web requests as and when desired.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": [
                    {
                        "version_added": "12.1"
                    },
                    {
                        "version_added": "11.1",
                        "partial_implementation": true,
                        "notes": "Even though <code>window.AbortController</code> is defined, it doesn't really abort <code>fetch</code> requests. See <a href='https://webkit.org/b/174980'>bug 174980</a>."
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AbortController"
        }
    ],
    "eventdef-abortsignal-abort": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbortSignal.json",
            "name": "abort_event",
            "slug": "API/AbortSignal/abort_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/abort_event",
            "summary": "The abort event of the AbortSignal is fired when the associated request is aborted, i.e. using AbortController.abort().",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AbortSignal: abort event"
        }
    ],
    "abortsignal-onabort": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbortSignal.json",
            "name": "abort_event",
            "slug": "API/AbortSignal/abort_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/abort_event",
            "summary": "The abort event of the AbortSignal is fired when the associated request is aborted, i.e. using AbortController.abort().",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AbortSignal: abort event"
        }
    ],
    "ref-for-dom-abortsignal-abort①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbortSignal.json",
            "name": "abort_static",
            "slug": "API/AbortSignal/abort_static",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/abort_static",
            "summary": "The AbortSignal.abort() static method returns an AbortSignal that is already set as aborted (and which does not trigger an abort event).",
            "support": {
                "chrome": {
                    "version_added": "93"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.9"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "88"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "93"
                }
            },
            "title": "AbortSignal: abort() static method"
        }
    ],
    "ref-for-dom-abortsignal-aborted①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbortSignal.json",
            "name": "aborted",
            "slug": "API/AbortSignal/aborted",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/aborted",
            "summary": "The aborted read-only property returns a value that indicates whether the DOM requests the signal is communicating with are aborted (true) or not (false).",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AbortSignal: aborted property"
        }
    ],
    "ref-for-dom-abortsignal-reason①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbortSignal.json",
            "name": "reason",
            "slug": "API/AbortSignal/reason",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/reason",
            "summary": "The reason read-only property returns a JavaScript value that indicates the abort reason.",
            "support": {
                "chrome": {
                    "version_added": "98"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.16"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "97"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "17.2.0"
                    },
                    {
                        "version_added": "16.14.0",
                        "version_removed": "17.0.0"
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "98"
                }
            },
            "title": "AbortSignal: reason property"
        }
    ],
    "ref-for-dom-abortsignal-throwifaborted①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbortSignal.json",
            "name": "throwIfAborted",
            "slug": "API/AbortSignal/throwIfAborted",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/throwIfAborted",
            "summary": "The throwIfAborted() method throws the signal's abort reason if the signal has been aborted; otherwise it does nothing.",
            "support": {
                "chrome": {
                    "version_added": "100"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.17"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "97"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "17.3.0"
                    },
                    {
                        "version_added": "16.17.0",
                        "version_removed": "17.0.0"
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "100"
                }
            },
            "title": "AbortSignal: throwIfAborted() method"
        }
    ],
    "ref-for-dom-abortsignal-timeout①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbortSignal.json",
            "name": "timeout_static",
            "slug": "API/AbortSignal/timeout_static",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/timeout_static",
            "summary": "The AbortSignal.timeout() static method returns an AbortSignal that will automatically abort after a specified time.",
            "support": {
                "chrome": {
                    "version_added": "103"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.20"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "100"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "17.3.0"
                    },
                    {
                        "version_added": "16.14.0",
                        "version_removed": "17.0.0"
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "103"
                }
            },
            "title": "AbortSignal: timeout() static method"
        }
    ],
    "interface-AbortSignal": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbortSignal.json",
            "name": "AbortSignal",
            "slug": "API/AbortSignal",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal",
            "summary": "The AbortSignal interface represents a signal object that allows you to communicate with a DOM request (such as a fetch request) and abort it if required via an AbortController object.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AbortSignal"
        }
    ],
    "ref-for-dom-range-collapsed①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbstractRange.json",
            "name": "collapsed",
            "slug": "API/AbstractRange/collapsed",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange/collapsed",
            "summary": "The read-only collapsed property of the AbstractRange interface returns true if the range's start position and end position are the same.",
            "support": {
                "chrome": {
                    "version_added": "90"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "90"
                }
            },
            "title": "AbstractRange: collapsed property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "collapsed",
            "slug": "API/Range/collapsed",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/collapsed",
            "summary": "The Range.collapsed read-only property returns a boolean flag indicating whether the start and end points of the Range are at the same position. It returns true if the start and end boundary points of the Range are the same point in the DOM, false if not.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: collapsed property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/StaticRange.json",
            "name": "collapsed",
            "slug": "API/StaticRange/collapsed",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/StaticRange/collapsed",
            "summary": "The collapsed read-only property of the StaticRange interface returns true if the range's start position and end position are the same.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "StaticRange: collapsed property"
        }
    ],
    "ref-for-dom-range-endcontainer①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbstractRange.json",
            "name": "endContainer",
            "slug": "API/AbstractRange/endContainer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange/endContainer",
            "summary": "The read-only endContainer property of the AbstractRange interface returns the Node in which the end of the range is located.",
            "support": {
                "chrome": {
                    "version_added": "90"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "90"
                }
            },
            "title": "AbstractRange: endContainer property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "endContainer",
            "slug": "API/Range/endContainer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/endContainer",
            "summary": "The Range.endContainer read-only property returns the Node within which the Range ends. To change the end position of a node, use the Range.setEnd() method or a similar one.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: endContainer property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/StaticRange.json",
            "name": "endContainer",
            "slug": "API/StaticRange/endContainer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/StaticRange/endContainer",
            "summary": "The endContainer property of the StaticRange interface returns the end Node for the range.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "StaticRange: endContainer property"
        }
    ],
    "ref-for-dom-range-endoffset①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbstractRange.json",
            "name": "endOffset",
            "slug": "API/AbstractRange/endOffset",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange/endOffset",
            "summary": "The endOffset property of the AbstractRange interface returns the offset into the end node of the range's end position.",
            "support": {
                "chrome": {
                    "version_added": "90"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "90"
                }
            },
            "title": "AbstractRange: endOffset property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "endOffset",
            "slug": "API/Range/endOffset",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/endOffset",
            "summary": "The Range.endOffset read-only property returns a number representing where in the Range.endContainer the Range ends.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: endOffset property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/StaticRange.json",
            "name": "endOffset",
            "slug": "API/StaticRange/endOffset",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/StaticRange/endOffset",
            "summary": "The endOffset property of the StaticRange interface returns the offset into the end node of the range's end position.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "StaticRange: endOffset property"
        }
    ],
    "ref-for-dom-range-startcontainer①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbstractRange.json",
            "name": "startContainer",
            "slug": "API/AbstractRange/startContainer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange/startContainer",
            "summary": "The read-only startContainer property of the AbstractRange interface returns the start Node for the range.",
            "support": {
                "chrome": {
                    "version_added": "90"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "90"
                }
            },
            "title": "AbstractRange: startContainer property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "startContainer",
            "slug": "API/Range/startContainer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/startContainer",
            "summary": "The Range.startContainer read-only property returns the Node within which the Range starts. To change the start position of a node, use one of the Range.setStart() methods.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: startContainer property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/StaticRange.json",
            "name": "startContainer",
            "slug": "API/StaticRange/startContainer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/StaticRange/startContainer",
            "summary": "The read-only startContainer property of the StaticRange interface returns the start Node for the range.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "StaticRange: startContainer property"
        }
    ],
    "ref-for-dom-range-startoffset①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbstractRange.json",
            "name": "startOffset",
            "slug": "API/AbstractRange/startOffset",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange/startOffset",
            "summary": "The read-only startOffset property of the AbstractRange interface returns the offset into the start node of the range's start position.",
            "support": {
                "chrome": {
                    "version_added": "90"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "90"
                }
            },
            "title": "AbstractRange: startOffset property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "startOffset",
            "slug": "API/Range/startOffset",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/startOffset",
            "summary": "The Range.startOffset read-only property returns a number representing where in the startContainer the Range starts.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: startOffset property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/StaticRange.json",
            "name": "startOffset",
            "slug": "API/StaticRange/startOffset",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/StaticRange/startOffset",
            "summary": "The read-only startOffset property of the StaticRange interface returns the offset into the start node of the range's start position.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "StaticRange: startOffset property"
        }
    ],
    "interface-abstractrange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AbstractRange.json",
            "name": "AbstractRange",
            "slug": "API/AbstractRange",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AbstractRange",
            "summary": "The AbstractRange abstract interface is the base class upon which all DOM range types are defined. A range is an object that indicates the start and end points of a section of content within the document.",
            "support": {
                "chrome": {
                    "version_added": "90"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "90"
                }
            },
            "title": "AbstractRange"
        }
    ],
    "dom-attr-localname": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Attr.json",
            "name": "localName",
            "slug": "API/Attr/localName",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Attr/localName",
            "summary": "The read-only localName property of the Attr interface returns the local part of the qualified name of an attribute, that is the name of the attribute, stripped from any namespace in front of it. For example, if the qualified name is xml:lang, the returned local name is lang, if the element supports that namespace.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Attr: localName property"
        }
    ],
    "dom-attr-name": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Attr.json",
            "name": "name",
            "slug": "API/Attr/name",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Attr/name",
            "summary": "The read-only name property of the Attr interface returns the qualified name of an attribute, that is the name of the attribute, with the namespace prefix, if any, in front of it. For example, if the local name is lang and the namespace prefix is xml, the returned qualified name is xml:lang.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Attr: name property"
        }
    ],
    "dom-attr-namespaceuri": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Attr.json",
            "name": "namespaceURI",
            "slug": "API/Attr/namespaceURI",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Attr/namespaceURI",
            "summary": "The read-only namespaceURI property of the Attr interface returns the namespace URI of the attribute, or null if the element is not in a namespace.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Attr: namespaceURI property"
        }
    ],
    "dom-attr-ownerelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Attr.json",
            "name": "ownerElement",
            "slug": "API/Attr/ownerElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Attr/ownerElement",
            "summary": "The read-only ownerElement property of the Attr interface returns the Element the attribute belongs to.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Attr: ownerElement property"
        }
    ],
    "dom-attr-prefix": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Attr.json",
            "name": "prefix",
            "slug": "API/Attr/prefix",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Attr/prefix",
            "summary": "The read-only prefix property of the Attr returns the namespace prefix of the attribute, or null if no prefix is specified.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Attr: prefix property"
        }
    ],
    "dom-attr-value": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Attr.json",
            "name": "value",
            "slug": "API/Attr/value",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Attr/value",
            "summary": "The value property of the Attr interface contains the value of the attribute.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Attr: value property"
        }
    ],
    "interface-attr": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Attr.json",
            "name": "Attr",
            "slug": "API/Attr",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Attr",
            "summary": "The Attr interface represents one of an element's attributes as an object. In most situations, you will directly retrieve the attribute value as a string (e.g., Element.getAttribute()), but certain functions (e.g., Element.getAttributeNode()) or means of iterating return Attr instances.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Attr"
        }
    ],
    "interface-cdatasection": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CDATASection.json",
            "name": "CDATASection",
            "slug": "API/CDATASection",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CDATASection",
            "summary": "The CDATASection interface represents a CDATA section that can be used within XML to include extended portions of unescaped text. When inside a CDATA section, the symbols < and & don't need escaping as they normally do.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CDATASection"
        }
    ],
    "ref-for-dom-childnode-after①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CharacterData.json",
            "name": "after",
            "slug": "API/CharacterData/after",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CharacterData/after",
            "summary": "The after() method of the CharacterData interface inserts a set of Node objects or strings in the children list of the object's parent, just after the object itself.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "39"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CharacterData: after() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentType.json",
            "name": "after",
            "slug": "API/DocumentType/after",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentType/after",
            "summary": "The DocumentType.after() method inserts a set of Node objects or strings in the children list of the DocumentType's parent, just after the DocumentType. Strings are inserted as equivalent Text nodes.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "39"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DocumentType: after() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "after",
            "slug": "API/Element/after",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/after",
            "summary": "The Element.after() method inserts a set of Node or string objects in the children list of the Element's parent, just after the Element. String objects are inserted as equivalent Text nodes.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "39"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: after() method"
        }
    ],
    "dom-characterdata-appenddata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CharacterData.json",
            "name": "appendData",
            "slug": "API/CharacterData/appendData",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CharacterData/appendData",
            "summary": "The appendData() method of the CharacterData interface adds the provided data to the end of the node's current data.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CharacterData: appendData() method"
        }
    ],
    "ref-for-dom-childnode-before①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CharacterData.json",
            "name": "before",
            "slug": "API/CharacterData/before",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CharacterData/before",
            "summary": "The before() method of the CharacterData interface inserts a set of Node objects and strings in the children list of the CharacterData's parent, just before the CharacterData node.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "39"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CharacterData: before() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentType.json",
            "name": "before",
            "slug": "API/DocumentType/before",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentType/before",
            "summary": "The DocumentType.before() method inserts a set of Node objects or strings in the children list of the DocumentType's parent, just before the DocumentType. Strings are inserted as equivalent Text nodes.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "39"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DocumentType: before() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "before",
            "slug": "API/Element/before",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/before",
            "summary": "The Element.before() method inserts a set of Node or string objects in the children list of this Element's parent, just before this Element. String objects are inserted as equivalent Text nodes.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "39"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: before() method"
        }
    ],
    "dom-characterdata-data": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CharacterData.json",
            "name": "data",
            "slug": "API/CharacterData/data",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CharacterData/data",
            "summary": "The data property of the CharacterData interface represent the value of the current object's data.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CharacterData: data property"
        }
    ],
    "dom-characterdata-deletedata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CharacterData.json",
            "name": "deleteData",
            "slug": "API/CharacterData/deleteData",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CharacterData/deleteData",
            "summary": "The deleteData() method of the CharacterData interface removes all or part of the data from this CharacterData node.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CharacterData: deleteData() method"
        }
    ],
    "dom-characterdata-insertdata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CharacterData.json",
            "name": "insertData",
            "slug": "API/CharacterData/insertData",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CharacterData/insertData",
            "summary": "The insertData() method of the CharacterData interface inserts the provided data into this CharacterData node's current data, at the provided offset from the start of the existing data. The provided data is spliced into the existing data.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CharacterData: insertData() method"
        }
    ],
    "dom-characterdata-length": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CharacterData.json",
            "name": "length",
            "slug": "API/CharacterData/length",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CharacterData/length",
            "summary": "The read-only CharacterData.length property returns the number of characters in the contained data, as a positive integer.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CharacterData: length property"
        }
    ],
    "ref-for-dom-nondocumenttypechildnode-nextelementsibling②": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CharacterData.json",
            "name": "nextElementSibling",
            "slug": "API/CharacterData/nextElementSibling",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CharacterData/nextElementSibling",
            "summary": "The read-only nextElementSibling property of the CharacterData interface returns the first Element node following the specified one in its parent's children list, or null if the specified element is the last one in the list.",
            "support": {
                "chrome": {
                    "version_added": "29"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CharacterData: nextElementSibling property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "nextElementSibling",
            "slug": "API/Element/nextElementSibling",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/nextElementSibling",
            "summary": "The Element.nextElementSibling read-only property returns the element immediately following the specified one in its parent's children list, or null if the specified element is the last one in the list.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: nextElementSibling property"
        }
    ],
    "ref-for-dom-nondocumenttypechildnode-previouselementsibling②": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CharacterData.json",
            "name": "previousElementSibling",
            "slug": "API/CharacterData/previousElementSibling",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CharacterData/previousElementSibling",
            "summary": "The read-only previousElementSibling of the CharacterData interface returns the first Element before the current node in its parent's children list, or null if there is none.",
            "support": {
                "chrome": {
                    "version_added": "29"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CharacterData: previousElementSibling property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "previousElementSibling",
            "slug": "API/Element/previousElementSibling",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/previousElementSibling",
            "summary": "The Element.previousElementSibling read-only property returns the Element immediately prior to the specified one in its parent's children list, or null if the specified element is the first one in the list.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: previousElementSibling property"
        }
    ],
    "ref-for-dom-childnode-remove①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CharacterData.json",
            "name": "remove",
            "slug": "API/CharacterData/remove",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CharacterData/remove",
            "summary": "The remove() method of the CharacterData removes the text contained in the node.",
            "support": {
                "chrome": {
                    "version_added": "24"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "23"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CharacterData: remove() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentType.json",
            "name": "remove",
            "slug": "API/DocumentType/remove",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentType/remove",
            "summary": "The DocumentType.remove() method removes a document's doctype.",
            "support": {
                "chrome": {
                    "version_added": "24"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "23"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DocumentType: remove() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "remove",
            "slug": "API/Element/remove",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/remove",
            "summary": "The Element.remove() method removes the element from the DOM.",
            "support": {
                "chrome": {
                    "version_added": "24"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "23"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: remove() method"
        }
    ],
    "dom-characterdata-replacedata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CharacterData.json",
            "name": "replaceData",
            "slug": "API/CharacterData/replaceData",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CharacterData/replaceData",
            "summary": "The replaceData() method of the CharacterData interface removes a certain number of characters of the existing text in a given CharacterData node and replaces those characters with the text provided.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CharacterData: replaceData() method"
        }
    ],
    "ref-for-dom-childnode-replacewith①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CharacterData.json",
            "name": "replaceWith",
            "slug": "API/CharacterData/replaceWith",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CharacterData/replaceWith",
            "summary": "The replaceWith() method of the CharacterData interface replaces this node in the children list of its parent with a set of Node objects or string.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "39"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CharacterData: replaceWith() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentType.json",
            "name": "replaceWith",
            "slug": "API/DocumentType/replaceWith",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentType/replaceWith",
            "summary": "The DocumentType.replaceWith() method replaces the document type with a set of given nodes.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "39"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DocumentType: replaceWith() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "replaceWith",
            "slug": "API/Element/replaceWith",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith",
            "summary": "The Element.replaceWith() method replaces this Element in the children list of its parent with a set of Node or string objects. String objects are inserted as equivalent Text nodes.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "39"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: replaceWith() method"
        }
    ],
    "dom-characterdata-substringdata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CharacterData.json",
            "name": "substringData",
            "slug": "API/CharacterData/substringData",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CharacterData/substringData",
            "summary": "The substringData() method of the CharacterData interface returns a portion of the existing data, starting at the specified index and extending for a given number of characters afterwards.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CharacterData: substringData() method"
        }
    ],
    "interface-characterdata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CharacterData.json",
            "name": "CharacterData",
            "slug": "API/CharacterData",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CharacterData",
            "summary": "The CharacterData abstract interface represents a Node object that contains characters. This is an abstract interface, meaning there aren't any objects of type CharacterData: it is implemented by other interfaces like Text, Comment, CDATASection, or ProcessingInstruction, which aren't abstract.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CharacterData"
        }
    ],
    "ref-for-dom-comment-comment①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Comment.json",
            "name": "Comment",
            "slug": "API/Comment/Comment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Comment/Comment",
            "summary": "The Comment() constructor returns a newly created Comment object with the optional string given in parameter as its textual content.",
            "support": {
                "chrome": {
                    "version_added": "29"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "24"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Comment: Comment() constructor"
        }
    ],
    "interface-comment": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Comment.json",
            "name": "Comment",
            "slug": "API/Comment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Comment",
            "summary": "The Comment interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Comment"
        }
    ],
    "ref-for-dom-customevent-customevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CustomEvent.json",
            "name": "CustomEvent",
            "slug": "API/CustomEvent/CustomEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent",
            "summary": "The CustomEvent() constructor creates a new CustomEvent object.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "11"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CustomEvent: CustomEvent() constructor"
        }
    ],
    "ref-for-dom-customevent-detail②": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CustomEvent.json",
            "name": "detail",
            "slug": "API/CustomEvent/detail",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail",
            "summary": "The read-only detail property of the CustomEvent interface returns any data passed when initializing the event.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CustomEvent: detail property"
        }
    ],
    "interface-customevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CustomEvent.json",
            "name": "CustomEvent",
            "slug": "API/CustomEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent",
            "summary": "The CustomEvent interface represents events initialized by an application for any purpose.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "19.0.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "customevent",
                "title": "CustomEvent"
            },
            "title": "CustomEvent"
        }
    ],
    "ref-for-dom-domimplementation-createdocument②": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMImplementation.json",
            "name": "createDocument",
            "slug": "API/DOMImplementation/createDocument",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument",
            "summary": "The DOMImplementation.createDocument() method creates and returns an XMLDocument.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMImplementation: createDocument() method"
        }
    ],
    "ref-for-dom-domimplementation-createdocumenttype①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMImplementation.json",
            "name": "createDocumentType",
            "slug": "API/DOMImplementation/createDocumentType",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType",
            "summary": "The DOMImplementation.createDocumentType() method returns a DocumentType object which can either be used with DOMImplementation.createDocument upon document creation or can be put into the document via methods like Node.insertBefore() or Node.replaceChild().",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMImplementation: createDocumentType() method"
        }
    ],
    "ref-for-dom-domimplementation-createhtmldocument①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMImplementation.json",
            "name": "createHTMLDocument",
            "slug": "API/DOMImplementation/createHTMLDocument",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createHTMLDocument",
            "summary": "The DOMImplementation.createHTMLDocument() method creates a new HTML Document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9",
                    "notes": "The <code>title</code> parameter is required, but can be empty string."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMImplementation: createHTMLDocument() method"
        }
    ],
    "interface-domimplementation": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMImplementation.json",
            "name": "DOMImplementation",
            "slug": "API/DOMImplementation",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation",
            "summary": "The DOMImplementation interface represents an object providing methods which are not dependent on any particular document. Such an object is returned by the Document.implementation property.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMImplementation"
        }
    ],
    "ref-for-dom-domtokenlist-add①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMTokenList.json",
            "name": "add",
            "slug": "API/DOMTokenList/add",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/add",
            "summary": "The add() method of the DOMTokenList interface adds the given tokens to the list, omitting any that are already present.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMTokenList: add() method"
        }
    ],
    "ref-for-dom-domtokenlist-contains①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMTokenList.json",
            "name": "contains",
            "slug": "API/DOMTokenList/contains",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/contains",
            "summary": "The contains() method of the DOMTokenList interface returns a boolean value — true if the underlying list contains the given token, otherwise false.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMTokenList: contains() method"
        }
    ],
    "ref-for-dom-domtokenlist-item①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMTokenList.json",
            "name": "item",
            "slug": "API/DOMTokenList/item",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/item",
            "summary": "The item() method of the DOMTokenList interface returns an item in the list, determined by its position in the list, its index.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMTokenList: item() method"
        }
    ],
    "ref-for-dom-domtokenlist-length①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMTokenList.json",
            "name": "length",
            "slug": "API/DOMTokenList/length",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/length",
            "summary": "The read-only length property of the DOMTokenList interface is an integer representing the number of objects stored in the object.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMTokenList: length property"
        }
    ],
    "ref-for-dom-domtokenlist-remove①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMTokenList.json",
            "name": "remove",
            "slug": "API/DOMTokenList/remove",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/remove",
            "summary": "The remove() method of the DOMTokenList interface removes the specified tokens from the list.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMTokenList: remove() method"
        }
    ],
    "ref-for-dom-domtokenlist-replace①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMTokenList.json",
            "name": "replace",
            "slug": "API/DOMTokenList/replace",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/replace",
            "summary": "The replace() method of the DOMTokenList interface replaces an existing token with a new token. If the first token doesn't exist, replace() returns false immediately, without adding the new token to the token list.",
            "support": {
                "chrome": {
                    "version_added": "61"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMTokenList: replace() method"
        }
    ],
    "ref-for-dom-domtokenlist-supports①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMTokenList.json",
            "name": "supports",
            "slug": "API/DOMTokenList/supports",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/supports",
            "summary": "The supports() method of the DOMTokenList interface returns true if a given token is in the associated attribute's supported tokens. This method is intended to support feature detection.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMTokenList: supports() method"
        }
    ],
    "ref-for-dom-domtokenlist-toggle①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMTokenList.json",
            "name": "toggle",
            "slug": "API/DOMTokenList/toggle",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/toggle",
            "summary": "The toggle() method of the DOMTokenList interface removes an existing token from the list and returns false. If the token doesn't exist it's added and the function returns true.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMTokenList: toggle() method"
        }
    ],
    "ref-for-dom-domtokenlist-value②": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMTokenList.json",
            "name": "value",
            "slug": "API/DOMTokenList/value",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList/value",
            "summary": "The value property of the DOMTokenList interface is a stringifier that returns the value of the list serialized as a string, or clears and sets the list to the given value.",
            "support": {
                "chrome": {
                    "version_added": "50",
                    "notes": "Before Chrome 50, this property was part of the deprecated child <code>DOMSettableTokenList</code> interface."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "47"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before Chrome 50, this property was part of the deprecated child <code>DOMSettableTokenList</code> interface."
                }
            },
            "title": "DOMTokenList: value property"
        }
    ],
    "interface-domtokenlist": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMTokenList.json",
            "name": "DOMTokenList",
            "slug": "API/DOMTokenList",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMTokenList",
            "summary": "The DOMTokenList interface represents a set of space-separated tokens. Such a set is returned by Element.classList or HTMLLinkElement.relList, and many others.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMTokenList"
        }
    ],
    "ref-for-dom-document-document①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "Document",
            "slug": "API/Document/Document",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/Document",
            "summary": "The Document constructor creates a new Document object that is a web page loaded in the browser and serving as an entry point into the page's content.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "20"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: Document() constructor"
        }
    ],
    "ref-for-dom-document-url①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "URL",
            "slug": "API/Document/URL",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/URL",
            "summary": "The URL read-only property of the Document interface returns the document location as a string.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: URL property"
        }
    ],
    "ref-for-dom-document-adoptnode①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "adoptNode",
            "slug": "API/Document/adoptNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/adoptNode",
            "summary": "Document.adoptNode() transfers a node from another document into the method's document. The adopted node and its subtree are removed from their original document (if any), and their ownerDocument is changed to the current document. The node can then be inserted into the current document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: adoptNode() method"
        }
    ],
    "ref-for-dom-parentnode-append①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "append",
            "slug": "API/Document/append",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/append",
            "summary": "The Document.append() method inserts a set of Node objects or string objects after the last child of the document. String objects are inserted as equivalent Text nodes.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: append() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentFragment.json",
            "name": "append",
            "slug": "API/DocumentFragment/append",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/append",
            "summary": "The DocumentFragment.append() method inserts a set of Node objects or string objects after the last child of the document fragment. String objects are inserted as equivalent Text nodes.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DocumentFragment: append() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "append",
            "slug": "API/Element/append",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/append",
            "summary": "The Element.append() method inserts a set of Node objects or string objects after the last child of the Element. String objects are inserted as equivalent Text nodes.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: append() method"
        }
    ],
    "ref-for-dom-document-characterset①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "characterSet",
            "slug": "API/Document/characterSet",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/characterSet",
            "summary": "The Document.characterSet read-only property returns the character encoding of the document that it's currently rendered with.",
            "support": {
                "chrome": [
                    {
                        "version_added": "1"
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": "1",
                        "notes": "<code>charset</code> alias was made read-only in Chrome 45."
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": "1"
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": "44"
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": "1.5"
                    }
                ],
                "firefox_android": "mirror",
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": "9"
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": "4"
                    }
                ],
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "12.1"
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": "15",
                        "notes": "<code>charset</code> alias was made read-only in Opera 45."
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": "15"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "12.1"
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": "14",
                        "notes": "<code>charset</code> alias was made read-only in Opera 45."
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": "14"
                    }
                ],
                "safari": [
                    {
                        "version_added": "3"
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": "3"
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": "3"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "1"
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": "1"
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": "1"
                    }
                ],
                "samsunginternet_android": "mirror",
                "webview_android": [
                    {
                        "version_added": "1"
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": "1",
                        "notes": "<code>charset</code> alias was made read-only in WebView 45."
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": "1"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "alternative_name": "charset",
                        "version_added": "79",
                        "notes": "<code>charset</code> alias was made read-only in Chrome 45."
                    },
                    {
                        "alternative_name": "inputEncoding",
                        "version_added": "79"
                    }
                ]
            },
            "title": "Document: characterSet property"
        }
    ],
    "dom-parentnode-childelementcount": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "childElementCount",
            "slug": "API/Document/childElementCount",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/childElementCount",
            "summary": "The Document.childElementCount read-only property returns the number of child elements of the document.",
            "support": {
                "chrome": {
                    "version_added": "29"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: childElementCount property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentFragment.json",
            "name": "childElementCount",
            "slug": "API/DocumentFragment/childElementCount",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/childElementCount",
            "summary": "The DocumentFragment.childElementCount read-only property returns the number of child elements of a DocumentFragment.",
            "support": {
                "chrome": {
                    "version_added": "29"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DocumentFragment: childElementCount property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "childElementCount",
            "slug": "API/Element/childElementCount",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/childElementCount",
            "summary": "The Element.childElementCount read-only property returns the number of child elements of this element.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: childElementCount property"
        }
    ],
    "ref-for-dom-parentnode-children①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "children",
            "slug": "API/Document/children",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/children",
            "summary": "The read-only children property returns a live HTMLCollection which contains all of the child elements of the document upon which it was called.",
            "support": {
                "chrome": {
                    "version_added": "29"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: children property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentFragment.json",
            "name": "children",
            "slug": "API/DocumentFragment/children",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/children",
            "summary": "The read-only children property returns a live HTMLCollection which contains all of the child elements of the document fragment upon which it was called.",
            "support": {
                "chrome": {
                    "version_added": "29"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DocumentFragment: children property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "children",
            "slug": "API/Element/children",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/children",
            "summary": "The read-only children property returns a live HTMLCollection which contains all of the child elements of the element upon which it was called.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "version_added": "6",
                        "version_removed": "9",
                        "notes": "Also includes non-standard <code>HTMLCommentElement</code> nodes."
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: children property"
        }
    ],
    "ref-for-dom-document-compatmode①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "compatMode",
            "slug": "API/Document/compatMode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/compatMode",
            "summary": "The Document.compatMode read-only property indicates whether the document is rendered in Quirks mode or Standards mode.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: compatMode property"
        }
    ],
    "ref-for-dom-document-contenttype①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "contentType",
            "slug": "API/Document/contentType",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/contentType",
            "summary": "The Document.contentType read-only property returns the MIME type that the document is being rendered as. This may come from HTTP headers or other sources of MIME information, and might be affected by automatic type conversions performed by either the browser or extensions.",
            "support": {
                "chrome": {
                    "version_added": "36"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "23"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "15"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "24"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "14"
                    }
                ],
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: contentType property"
        }
    ],
    "dom-document-createattribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createAttribute",
            "slug": "API/Document/createAttribute",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createAttribute",
            "summary": "The Document.createAttribute() method creates a new attribute node, and returns it. The object created is a node implementing the Attr interface. The DOM does not enforce what sort of attributes can be added to a particular element in this manner.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "44"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "44",
                        "notes": "The parameter was not converted to its lowercase variant."
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: createAttribute() method"
        }
    ],
    "dom-document-createattributens": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createAttributeNS",
            "slug": "API/Document/createAttributeNS",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createAttributeNS",
            "summary": "The Document.createAttributeNS() method creates a new attribute node with the specified namespace URI and qualified name, and returns it. The object created is a node implementing the Attr interface. The DOM does not enforce what sort of attributes can be added to a particular element in this manner.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: createAttributeNS() method"
        }
    ],
    "ref-for-dom-document-createcomment①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createCDATASection",
            "slug": "API/Document/createCDATASection",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createCDATASection",
            "summary": "createCDATASection() creates a new CDATA section node, and returns it.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: createCDATASection() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createComment",
            "slug": "API/Document/createComment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createComment",
            "summary": "createComment() creates a new comment node, and returns it.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: createComment() method"
        }
    ],
    "ref-for-dom-document-createdocumentfragment①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createDocumentFragment",
            "slug": "API/Document/createDocumentFragment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createDocumentFragment",
            "summary": "Creates a new empty DocumentFragment into which DOM nodes can be added to build an offscreen DOM tree.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: createDocumentFragment() method"
        }
    ],
    "ref-for-dom-document-createelement①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createElement",
            "slug": "API/Document/createElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement",
            "summary": "In an HTML document, the document.createElement() method creates the HTML element specified by tagName, or an HTMLUnknownElement if tagName isn't recognized.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Doesn't conform to the DOM spec for XUL and XHTML documents: <code>localName</code> and <code>namespaceURI</code> are not set to null on the created element."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "6"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: createElement() method"
        }
    ],
    "ref-for-dom-document-createelementns①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createElementNS",
            "slug": "API/Document/createElementNS",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS",
            "summary": "Creates an element with the specified namespace URI and qualified name.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Doesn't conform to the DOM spec for XUL and XHTML documents: <code>localName</code> and <code>namespaceURI</code> are not set to null on the created element."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: createElementNS() method"
        }
    ],
    "dom-document-createevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createEvent",
            "slug": "API/Document/createEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createEvent",
            "summary": "Creates an event of the type specified. The returned object should be first initialized and can then be passed to EventTarget.dispatchEvent.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "From version 67, creating touch events using this method is no longer supported."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: createEvent() method"
        }
    ],
    "dom-xpathevaluatorbase-createexpression": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createExpression",
            "slug": "API/Document/createExpression",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createExpression",
            "summary": "This method compiles an XPathExpression which can then be used for (repeated) evaluations.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: createExpression() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XPathEvaluator.json",
            "name": "createExpression",
            "slug": "API/XPathEvaluator/createExpression",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XPathEvaluator/createExpression",
            "summary": "This method compiles an XPathExpression which can then be used for (repeated) evaluations of the XPath expression.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XPathEvaluator: createExpression() method"
        }
    ],
    "dom-document-createnodeiterator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createNodeIterator",
            "slug": "API/Document/createNodeIterator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createNodeIterator",
            "summary": "The Document.createNodeIterator() method returns a new NodeIterator object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: createNodeIterator() method"
        }
    ],
    "dom-xpathevaluatorbase-creatensresolver": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createNSResolver",
            "slug": "API/Document/createNSResolver",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createNSResolver",
            "summary": "Creates an XPathNSResolver which resolves namespaces with respect to the definitions in scope for a specified node.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: createNSResolver() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XPathEvaluator.json",
            "name": "createNSResolver",
            "slug": "API/XPathEvaluator/createNSResolver",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XPathEvaluator/createNSResolver",
            "summary": "This method adapts any DOM node to resolve namespaces so that an XPath expression can be easily evaluated relative to the context of the node where it appeared within the document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XPathEvaluator: createNSResolver() method"
        }
    ],
    "ref-for-dom-document-createprocessinginstruction①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createProcessingInstruction",
            "slug": "API/Document/createProcessingInstruction",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createProcessingInstruction",
            "summary": "createProcessingInstruction() generates a new processing instruction node and returns it.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: createProcessingInstruction() method"
        }
    ],
    "dom-document-createrange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createRange",
            "slug": "API/Document/createRange",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createRange",
            "summary": "The Document.createRange() method returns a new Range object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: createRange() method"
        }
    ],
    "ref-for-dom-document-createtextnode①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createTextNode",
            "slug": "API/Document/createTextNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createTextNode",
            "summary": "Creates a new Text node. This method can be used to escape HTML characters.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: createTextNode() method"
        }
    ],
    "dom-document-createtreewalker": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "createTreeWalker",
            "slug": "API/Document/createTreeWalker",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/createTreeWalker",
            "summary": "The Document.createTreeWalker() creator method returns a newly created TreeWalker object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: createTreeWalker() method"
        }
    ],
    "ref-for-dom-document-doctype①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "doctype",
            "slug": "API/Document/doctype",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/doctype",
            "summary": "Returns the Document Type Declaration (DTD) associated with current document. The returned object implements the DocumentType interface. Use DOMImplementation.createDocumentType() to create a DocumentType.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: doctype property"
        }
    ],
    "ref-for-dom-document-documentelement①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "documentElement",
            "slug": "API/Document/documentElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement",
            "summary": "Document.documentElement returns the Element that is the root element of the document (for example, the <html> element for HTML documents).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: documentElement property"
        }
    ],
    "ref-for-dom-document-documenturi①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "documentURI",
            "slug": "API/Document/documentURI",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/documentURI",
            "summary": "The documentURI read-only property of the Document interface returns the document location as a string.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: documentURI property"
        }
    ],
    "dom-xpathevaluatorbase-evaluate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "evaluate",
            "slug": "API/Document/evaluate",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/evaluate",
            "summary": "The evaluate() method of the Document interface selects elements based on the XPath expression given in parameters.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: evaluate() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XPathEvaluator.json",
            "name": "evaluate",
            "slug": "API/XPathEvaluator/evaluate",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XPathEvaluator/evaluate",
            "summary": "The evaluate() method of the XPathEvaluator interface executes an XPath expression on the given node or document and returns an XPathResult.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XPathEvaluator: evaluate() method"
        }
    ],
    "ref-for-dom-parentnode-firstelementchild①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "firstElementChild",
            "slug": "API/Document/firstElementChild",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/firstElementChild",
            "summary": "The Document.firstElementChild read-only property returns the document's first child Element, or null if there are no child elements.",
            "support": {
                "chrome": {
                    "version_added": "29"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: firstElementChild property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentFragment.json",
            "name": "firstElementChild",
            "slug": "API/DocumentFragment/firstElementChild",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/firstElementChild",
            "summary": "The DocumentFragment.firstElementChild read-only property returns the document fragment's first child Element, or null if there are no child elements.",
            "support": {
                "chrome": {
                    "version_added": "29"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DocumentFragment: firstElementChild property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "firstElementChild",
            "slug": "API/Element/firstElementChild",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/firstElementChild",
            "summary": "The Element.firstElementChild read-only property returns an element's first child Element, or null if there are no child elements.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: firstElementChild property"
        }
    ],
    "ref-for-dom-nonelementparentnode-getelementbyid②": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "getElementById",
            "slug": "API/Document/getElementById",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById",
            "summary": "The getElementById() method of the Document interface returns an Element object representing the element whose id property matches the specified string. Since element IDs are required to be unique if specified, they're a useful way to get access to a specific element quickly.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: getElementById() method"
        }
    ],
    "ref-for-dom-document-getelementsbyclassname①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "getElementsByClassName",
            "slug": "API/Document/getElementsByClassName",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName",
            "summary": "The getElementsByClassName method of Document interface returns an array-like object of all child elements which have all of the given class name(s).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: getElementsByClassName() method"
        }
    ],
    "ref-for-dom-document-getelementsbytagname①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "getElementsByTagName",
            "slug": "API/Document/getElementsByTagName",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagName",
            "summary": "The getElementsByTagName method of Document interface returns an HTMLCollection of elements with the given tag name.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5.1"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: getElementsByTagName() method"
        }
    ],
    "ref-for-dom-document-getelementsbytagnamens①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "getElementsByTagNameNS",
            "slug": "API/Document/getElementsByTagNameNS",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByTagNameNS",
            "summary": "Returns a list of elements with the given tag name belonging to the given namespace. The complete document is searched, including the root node.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: getElementsByTagNameNS() method"
        }
    ],
    "ref-for-dom-document-implementation①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "implementation",
            "slug": "API/Document/implementation",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/implementation",
            "summary": "The Document.implementation property returns a DOMImplementation object associated with the current document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: implementation property"
        }
    ],
    "ref-for-dom-document-importnode①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "importNode",
            "slug": "API/Document/importNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/importNode",
            "summary": "The Document object's importNode() method creates a copy of a Node or DocumentFragment from another document, to be inserted into the current document later.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: importNode() method"
        }
    ],
    "ref-for-dom-parentnode-lastelementchild①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "lastElementChild",
            "slug": "API/Document/lastElementChild",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/lastElementChild",
            "summary": "The Document.lastElementChild read-only property returns the document's last child Element, or null if there are no child elements.",
            "support": {
                "chrome": {
                    "version_added": "29"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: lastElementChild property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentFragment.json",
            "name": "lastElementChild",
            "slug": "API/DocumentFragment/lastElementChild",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/lastElementChild",
            "summary": "The DocumentFragment.lastElementChild read-only property returns the document fragment's last child Element, or null if there are no child elements.",
            "support": {
                "chrome": {
                    "version_added": "29"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DocumentFragment: lastElementChild property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "lastElementChild",
            "slug": "API/Element/lastElementChild",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/lastElementChild",
            "summary": "The Element.lastElementChild read-only property returns an element's last child Element, or null if there are no child elements.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: lastElementChild property"
        }
    ],
    "ref-for-dom-parentnode-prepend①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "prepend",
            "slug": "API/Document/prepend",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend",
            "summary": "The Document.prepend() method inserts a set of Node objects or string objects before the first child of the document. String objects are inserted as equivalent Text nodes.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: prepend() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentFragment.json",
            "name": "prepend",
            "slug": "API/DocumentFragment/prepend",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/prepend",
            "summary": "The DocumentFragment.prepend() method inserts a set of Node objects or string objects before the first child of the document fragment. String objects are inserted as equivalent Text nodes.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DocumentFragment: prepend() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "prepend",
            "slug": "API/Element/prepend",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend",
            "summary": "The Element.prepend() method inserts a set of Node objects or string objects before the first child of the Element. String objects are inserted as equivalent Text nodes.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: prepend() method"
        }
    ],
    "ref-for-dom-parentnode-queryselector①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "querySelector",
            "slug": "API/Document/querySelector",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector",
            "summary": "The Document method querySelector() returns the first Element within the document that matches the specified selector, or group of selectors. If no matches are found, null is returned.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "version_added": "8",
                        "partial_implementation": true,
                        "notes": "<code>querySelectorAll()</code> is supported, but only for CSS 2.1 selectors."
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: querySelector() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentFragment.json",
            "name": "querySelector",
            "slug": "API/DocumentFragment/querySelector",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/querySelector",
            "summary": "The DocumentFragment.querySelector() method returns the first element, or null if no matches are found, within the DocumentFragment (using depth-first pre-order traversal of the document's nodes) that matches the specified group of selectors.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "version_added": "8",
                        "partial_implementation": true,
                        "notes": "<code>querySelectorAll()</code> is supported, but only for CSS 2.1 selectors."
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DocumentFragment: querySelector() method"
        }
    ],
    "ref-for-dom-parentnode-queryselectorall①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "querySelectorAll",
            "slug": "API/Document/querySelectorAll",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll",
            "summary": "The Document method querySelectorAll() returns a static (not live) NodeList representing a list of the document's elements that match the specified group of selectors.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "version_added": "8",
                        "partial_implementation": true,
                        "notes": "<code>querySelectorAll()</code> is supported, but only for CSS 2.1 selectors."
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: querySelectorAll() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentFragment.json",
            "name": "querySelectorAll",
            "slug": "API/DocumentFragment/querySelectorAll",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/querySelectorAll",
            "summary": "The DocumentFragment.querySelectorAll() method returns a NodeList of elements within the DocumentFragment (using depth-first pre-order traversal of the document's nodes) that matches the specified group of selectors.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "version_added": "8",
                        "partial_implementation": true,
                        "notes": "<code>querySelectorAll()</code> is supported, but only for CSS 2.1 selectors."
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DocumentFragment: querySelectorAll() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "querySelector",
            "slug": "API/Element/querySelector",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector",
            "summary": "The querySelector() method of the Element interface returns the first element that is a descendant of the element on which it is invoked that matches the specified group of selectors.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "version_added": "8",
                        "partial_implementation": true,
                        "notes": "<code>querySelector()</code> is supported, but only for CSS 2.1 selectors."
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: querySelector() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "querySelectorAll",
            "slug": "API/Element/querySelectorAll",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll",
            "summary": "The Element method querySelectorAll() returns a static (not live) NodeList representing a list of elements matching the specified group of selectors which are descendants of the element on which the method was called.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "version_added": "8",
                        "partial_implementation": true,
                        "notes": "<code>querySelectorAll()</code> is supported, but only for CSS 2.1 selectors."
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: querySelectorAll() method"
        }
    ],
    "ref-for-dom-parentnode-replacechildren①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "replaceChildren",
            "slug": "API/Document/replaceChildren",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/replaceChildren",
            "summary": "The Document.replaceChildren() method replaces the existing children of a Document with a specified new set of children.",
            "support": {
                "chrome": {
                    "version_added": "86"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "78"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "86"
                }
            },
            "title": "Document: replaceChildren() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentFragment.json",
            "name": "replaceChildren",
            "slug": "API/DocumentFragment/replaceChildren",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/replaceChildren",
            "summary": "The DocumentFragment.replaceChildren() method replaces the existing children of a DocumentFragment with a specified new set of children. These can be string or Node objects.",
            "support": {
                "chrome": {
                    "version_added": "86"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "78"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "86"
                }
            },
            "title": "DocumentFragment: replaceChildren() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "replaceChildren",
            "slug": "API/Element/replaceChildren",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceChildren",
            "summary": "The Element.replaceChildren() method replaces the existing children of a Node with a specified new set of children. These can be string or Node objects.",
            "support": {
                "chrome": {
                    "version_added": "86"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "78"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "86"
                }
            },
            "title": "Element: replaceChildren() method"
        }
    ],
    "interface-document": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "Document",
            "slug": "API/Document",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document",
            "summary": "The Document interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document"
        }
    ],
    "ref-for-dom-documentfragment-documentfragment①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentFragment.json",
            "name": "DocumentFragment",
            "slug": "API/DocumentFragment/DocumentFragment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/DocumentFragment",
            "summary": "The DocumentFragment() constructor returns a new, empty DocumentFragment object.",
            "support": {
                "chrome": {
                    "version_added": "29"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "24"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DocumentFragment: DocumentFragment() constructor"
        }
    ],
    "dom-nonelementparentnode-getelementbyid": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentFragment.json",
            "name": "getElementById",
            "slug": "API/DocumentFragment/getElementById",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/getElementById",
            "summary": "The getElementById() method of the DocumentFragment returns an Element object representing the element whose id property matches the specified string. Since element IDs are required to be unique if specified, they're a useful way to get access to a specific element quickly.",
            "support": {
                "chrome": {
                    "version_added": "36"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "28"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DocumentFragment: getElementById() method"
        }
    ],
    "interface-documentfragment": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentFragment.json",
            "name": "DocumentFragment",
            "slug": "API/DocumentFragment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
            "summary": "The DocumentFragment interface represents a minimal document object that has no parent.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DocumentFragment"
        }
    ],
    "dom-documenttype-name": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentType.json",
            "name": "name",
            "slug": "API/DocumentType/name",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentType/name",
            "summary": "The read-only name property of the DocumentType returns the type of the document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DocumentType: name property"
        }
    ],
    "dom-documenttype-publicid": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentType.json",
            "name": "publicId",
            "slug": "API/DocumentType/publicId",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentType/publicId",
            "summary": "The read-only publicId property of the DocumentType returns a formal identifier of the document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DocumentType: publicId property"
        }
    ],
    "dom-documenttype-systemid": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentType.json",
            "name": "systemId",
            "slug": "API/DocumentType/systemId",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentType/systemId",
            "summary": "The read-only systemId property of the DocumentType returns the URL of the associated DTD.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DocumentType: systemId property"
        }
    ],
    "interface-documenttype": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DocumentType.json",
            "name": "DocumentType",
            "slug": "API/DocumentType",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentType",
            "summary": "The DocumentType interface represents a Node containing a doctype.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DocumentType"
        }
    ],
    "dom-slotable-assignedslot": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "assignedSlot",
            "slug": "API/Element/assignedSlot",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/assignedSlot",
            "summary": "The assignedSlot read-only property of the Element interface returns an HTMLSlotElement representing the <slot> element the node is inserted in.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: assignedSlot property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Text.json",
            "name": "assignedSlot",
            "slug": "API/Text/assignedSlot",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Text/assignedSlot",
            "summary": "The read-only assignedSlot property of the Text interface returns the HTMLSlotElement object associated with the element.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Text: assignedSlot property"
        }
    ],
    "ref-for-dom-element-attachshadow①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "attachShadow",
            "slug": "API/Element/attachShadow",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow",
            "summary": "The Element.attachShadow() method attaches a shadow DOM tree to the specified element and returns a reference to its ShadowRoot.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: attachShadow() method"
        }
    ],
    "dom-element-attributes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "attributes",
            "slug": "API/Element/attributes",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes",
            "summary": "The Element.attributes property returns a live collection of all attribute nodes registered to the specified node. It is a NamedNodeMap, not an Array, so it has no Array methods and the Attr nodes' indexes may differ among browsers. To be more specific, attributes is a key/value pair of strings that represents any information regarding that attribute.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: attributes property"
        }
    ],
    "ref-for-dom-element-classlist①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "classList",
            "slug": "API/Element/classList",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/classList",
            "summary": "The Element.classList is a read-only property that returns a live DOMTokenList collection of the class attributes of the element. This can then be used to manipulate the class list.",
            "support": {
                "chrome": [
                    {
                        "version_added": "22"
                    },
                    {
                        "version_added": "8",
                        "version_removed": "22",
                        "notes": "Not supported for SVG elements.",
                        "partial_implementation": true
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10",
                    "notes": "Not supported for SVG elements.",
                    "partial_implementation": true
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "version_added": "6",
                        "version_removed": "7",
                        "notes": "Not supported for SVG elements.",
                        "partial_implementation": true
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": [
                    {
                        "version_added": "4.4"
                    },
                    {
                        "version_added": "3",
                        "version_removed": "4.4",
                        "notes": "Not supported for SVG elements.",
                        "partial_implementation": true
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "22",
                        "notes": "Not supported for SVG elements.",
                        "partial_implementation": true
                    }
                ]
            },
            "title": "Element: classList property"
        }
    ],
    "ref-for-dom-element-classname①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "className",
            "slug": "API/Element/className",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/className",
            "summary": "The className property of the Element interface gets and sets the value of the class attribute of the specified element.",
            "support": {
                "chrome": [
                    {
                        "version_added": "22"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "22",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLElement'><code>HTMLElement</code></a>, not all <code>Element</code> objects, such as <a href='https://developer.mozilla.org/docs/Web/API/SVGElement'><code>SVGElement</code></a>."
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "22",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLElement'><code>HTMLElement</code></a>, not all <code>Element</code> objects, such as <a href='https://developer.mozilla.org/docs/Web/API/SVGElement'><code>SVGElement</code></a>."
                    }
                ]
            },
            "title": "Element: className property"
        }
    ],
    "ref-for-dom-element-closest①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "closest",
            "slug": "API/Element/closest",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/closest",
            "summary": "The closest() method of the Element interface traverses the element and its parents (heading toward the document root) until it finds a node that matches the specified CSS selector.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "35"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "9"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: closest() method"
        }
    ],
    "ref-for-dom-element-getattribute①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "getAttribute",
            "slug": "API/Element/getAttribute",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute",
            "summary": "The getAttribute() method of the Element interface returns the value of a specified attribute on the element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: getAttribute() method"
        }
    ],
    "ref-for-dom-element-getattributenames①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "getAttributeNames",
            "slug": "API/Element/getAttributeNames",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames",
            "summary": "The getAttributeNames() method of the Element interface returns the attribute names of the element as an Array of strings. If the element has no attributes it returns an empty array.",
            "support": {
                "chrome": {
                    "version_added": "61"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "45"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: getAttributeNames() method"
        }
    ],
    "dom-element-getattributenode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "getAttributeNode",
            "slug": "API/Element/getAttributeNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNode",
            "summary": "Returns the specified attribute of the specified element, as an Attr node.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: getAttributeNode() method"
        }
    ],
    "dom-element-getattributenodens": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "getAttributeNodeNS",
            "slug": "API/Element/getAttributeNodeNS",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNodeNS",
            "summary": "Returns the Attr node for the attribute with the given namespace and name.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: getAttributeNodeNS() method"
        }
    ],
    "ref-for-dom-element-getattributens①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "getAttributeNS",
            "slug": "API/Element/getAttributeNS",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNS",
            "summary": "The getAttributeNS() method of the Element interface returns the string value of the attribute with the specified namespace and name. If the named attribute does not exist, the value returned will either be null or \"\" (the empty string); see Notes for details.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Starting in Firefox 13, <code>null</code> is always returned instead of the empty string, as per the DOM4 specification. Previously, there were cases in which an empty string could be returned."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: getAttributeNS() method"
        }
    ],
    "ref-for-dom-element-getelementsbyclassname": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "getElementsByClassName",
            "slug": "API/Element/getElementsByClassName",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName",
            "summary": "The Element method getElementsByClassName() returns a live HTMLCollection which contains every descendant element which has the specified class name or names.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "3",
                    "notes": "Before Firefox 19, this method was returning a <code>NodeList</code>; it was then changed to reflect the change in the spec."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9",
                    "partial_implementation": true,
                    "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLElement'><code>HTMLElement</code></a>, not all <code>Element</code> objects, such as <a href='https://developer.mozilla.org/docs/Web/API/SVGElement'><code>SVGElement</code></a>."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: getElementsByClassName() method"
        }
    ],
    "dom-element-getelementsbytagname": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "getElementsByTagName",
            "slug": "API/Element/getElementsByTagName",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName",
            "summary": "The Element.getElementsByTagName() method returns a live HTMLCollection of elements with the given tag name.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 19, this method was returning a <code>NodeList</code>; it was then changed to reflect the change in the spec."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8",
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change."
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1",
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change."
                }
            },
            "title": "Element: getElementsByTagName() method"
        }
    ],
    "dom-element-getelementsbytagnamens": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "getElementsByTagNameNS",
            "slug": "API/Element/getElementsByTagNameNS",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagNameNS",
            "summary": "The Element.getElementsByTagNameNS() method returns a live HTMLCollection of elements with the given tag name belonging to the given namespace. It is similar to Document.getElementsByTagNameNS, except that its search is restricted to descendants of the specified element.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": [
                        "The behavior of <code>element.getElementsByTagNameNS</code> changed between Firefox 3.5 and Firefox 3.6. In Firefox 3.5 and before, this function would automatically case-fold any queries so that a search for \"foo\" would match \"Foo\" or \"foo\". In Firefox 3.6 and later this function is now case-sensitive so that a query for \"foo\" will only match \"foo\" and not \"Foo\". For more background on this, please see the <a href='https://bugzil.la/542185#c5'>comment from Henri Sivonen about the change</a>. You can also look at the <a href='https://developer.mozilla.org/docs/Case_Sensitivity_in_class_and_id_Names'>relevant part of the standard, which states which parts of the API are case-sensitive and which parts aren't</a>.",
                        "Before Firefox 19, this method was returning a <code>NodeList</code>; it was then changed to reflects the spec change."
                    ]
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "Before Firefox 19, this method was returning a <code>NodeList</code>; it was then changed to reflects the spec change."
                },
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1",
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change."
                },
                "opera_android": {
                    "version_added": "12.1",
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change."
                },
                "safari": {
                    "version_added": "1",
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Initially, this method was returning a <code>NodeList</code>; it was then changed to reflect the spec change."
                }
            },
            "title": "Element: getElementsByTagNameNS() method"
        }
    ],
    "ref-for-dom-element-hasattribute①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "hasAttribute",
            "slug": "API/Element/hasAttribute",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttribute",
            "summary": "The Element.hasAttribute() method returns a Boolean value indicating whether the specified element has the specified attribute or not.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: hasAttribute() method"
        }
    ],
    "ref-for-dom-element-hasattributens①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "hasAttributeNS",
            "slug": "API/Element/hasAttributeNS",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributeNS",
            "summary": "hasAttributeNS returns a boolean value indicating whether the current element has the specified attribute.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: hasAttributeNS() method"
        }
    ],
    "ref-for-dom-element-hasattributes①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "hasAttributes",
            "slug": "API/Element/hasAttributes",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributes",
            "summary": "The hasAttributes() method of the Element interface returns a boolean value indicating whether the current element has any attributes or not.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 35, it was implemented on the <code>Node</code> interface."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: hasAttributes() method"
        }
    ],
    "ref-for-dom-element-id①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "id",
            "slug": "API/Element/id",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/id",
            "summary": "The id property of the Element interface represents the element's identifier, reflecting the id global attribute.",
            "support": {
                "chrome": [
                    {
                        "version_added": "23"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "23",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLElement'><code>HTMLElement</code></a>, not all <code>Element</code> objects, such as <a href='https://developer.mozilla.org/docs/Web/API/SVGElement'><code>SVGElement</code></a>."
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "23",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLElement'><code>HTMLElement</code></a>, not all <code>Element</code> objects, such as <a href='https://developer.mozilla.org/docs/Web/API/SVGElement'><code>SVGElement</code></a>."
                    }
                ]
            },
            "title": "Element: id property"
        }
    ],
    "dom-element-insertadjacentelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "insertAdjacentElement",
            "slug": "API/Element/insertAdjacentElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentElement",
            "summary": "The insertAdjacentElement() method of the Element interface inserts a given element node at a given position relative to the element it is invoked upon.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5",
                    "partial_implementation": true,
                    "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLElement'><code>HTMLElement</code></a>, not all <code>Element</code> objects, such as <a href='https://developer.mozilla.org/docs/Web/API/SVGElement'><code>SVGElement</code></a>."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "insert-adjacent",
                "title": "Element.insertAdjacentElement() & Element.insertAdjacentText()"
            },
            "title": "Element: insertAdjacentElement() method"
        }
    ],
    "dom-element-insertadjacenttext": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "insertAdjacentText",
            "slug": "API/Element/insertAdjacentText",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentText",
            "summary": "The insertAdjacentText() method of the Element interface, given a relative position and a string, inserts a new text node at the given position relative to the element it is called from.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5",
                    "partial_implementation": true,
                    "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLElement'><code>HTMLElement</code></a>, not all <code>Element</code> objects, such as <a href='https://developer.mozilla.org/docs/Web/API/SVGElement'><code>SVGElement</code></a>."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "2.2"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: insertAdjacentText() method"
        }
    ],
    "ref-for-dom-element-localname①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "localName",
            "slug": "API/Element/localName",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/localName",
            "summary": "The Element.localName read-only property returns the local part of the qualified name of an element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: localName property"
        }
    ],
    "ref-for-dom-element-matches①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "matches",
            "slug": "API/Element/matches",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/matches",
            "summary": "The matches() method of the Element interface tests whether the element would be selected by the specified CSS selector.",
            "support": {
                "chrome": [
                    {
                        "version_added": "33"
                    },
                    {
                        "version_added": "4",
                        "alternative_name": "webkitMatchesSelector"
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "15"
                },
                "firefox": [
                    {
                        "version_added": "34"
                    },
                    {
                        "version_added": "44",
                        "alternative_name": "webkitMatchesSelector"
                    },
                    {
                        "version_added": "3.6",
                        "alternative_name": "mozMatchesSelector",
                        "notes": [
                            "Before Firefox 4, invalid selector strings caused false to be returned instead of throwing an exception.",
                            "See <a href='https://bugzil.la/1119718'>bug 1119718</a> for removal."
                        ]
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "34"
                    },
                    {
                        "version_added": "44",
                        "alternative_name": "webkitMatchesSelector"
                    },
                    {
                        "version_added": "4",
                        "alternative_name": "mozMatchesSelector",
                        "notes": "See <a href='https://bugzil.la/1119718'>bug 1119718</a> for removal."
                    }
                ],
                "ie": {
                    "version_added": "9",
                    "alternative_name": "msMatchesSelector"
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "21"
                    },
                    {
                        "version_added": "15",
                        "alternative_name": "webkitMatchesSelector"
                    },
                    {
                        "version_added": "11.5",
                        "version_removed": "15",
                        "alternative_name": "oMatchesSelector"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "21"
                    },
                    {
                        "version_added": "14",
                        "alternative_name": "webkitMatchesSelector"
                    },
                    {
                        "version_added": "11.5",
                        "version_removed": "14",
                        "alternative_name": "oMatchesSelector"
                    }
                ],
                "safari": [
                    {
                        "version_added": "8"
                    },
                    {
                        "version_added": "5",
                        "alternative_name": "webkitMatchesSelector"
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": [
                    {
                        "version_added": "4.4"
                    },
                    {
                        "version_added": "37",
                        "alternative_name": "webkitMatchesSelector"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": "79",
                        "alternative_name": "webkitMatchesSelector"
                    }
                ]
            },
            "title": "Element: matches() method"
        }
    ],
    "ref-for-dom-element-namespaceuri①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "namespaceURI",
            "slug": "API/Element/namespaceURI",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/namespaceURI",
            "summary": "The Element.namespaceURI read-only property returns the namespace URI of the element, or null if the element is not in a namespace.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: namespaceURI property"
        }
    ],
    "ref-for-dom-element-prefix①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "prefix",
            "slug": "API/Element/prefix",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/prefix",
            "summary": "The Element.prefix read-only property returns the namespace prefix of the specified element, or null if no prefix is specified.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: prefix property"
        }
    ],
    "ref-for-dom-element-removeattribute①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "removeAttribute",
            "slug": "API/Element/removeAttribute",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute",
            "summary": "The Element method removeAttribute() removes the attribute with the specified name from the element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: removeAttribute() method"
        }
    ],
    "dom-element-removeattributenode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "removeAttributeNode",
            "slug": "API/Element/removeAttributeNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNode",
            "summary": "The removeAttributeNode() method of the Element interface removes the specified attribute from the element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: removeAttributeNode() method"
        }
    ],
    "ref-for-dom-element-removeattributens①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "removeAttributeNS",
            "slug": "API/Element/removeAttributeNS",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNS",
            "summary": "The removeAttributeNS() method of the Element interface removes the specified attribute from an element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: removeAttributeNS() method"
        }
    ],
    "ref-for-dom-element-setattribute①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "setAttribute",
            "slug": "API/Element/setAttribute",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute",
            "summary": "Sets the value of an attribute on the specified element. If the attribute already exists, the value is updated; otherwise a new attribute is added with the specified name and value.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5",
                    "notes": "In Internet Explorer 7 and earlier, <code>setAttribute</code> doesn't set styles and removes events when you try to set them."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: setAttribute() method"
        }
    ],
    "dom-element-setattributenode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "setAttributeNode",
            "slug": "API/Element/setAttributeNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNode",
            "summary": "The setAttributeNode() method adds a new Attr node to the specified element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: setAttributeNode() method"
        }
    ],
    "dom-element-setattributenodens": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "setAttributeNodeNS",
            "slug": "API/Element/setAttributeNodeNS",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNodeNS",
            "summary": "setAttributeNodeNS adds a new namespaced attribute node to an element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9",
                    "notes": "Returns a <code>ClientRectList</code> with <a href='https://docs.microsoft.com/en-us/previous-versions/hh826029(v=vs.85)'><code>ClientRect</code></a> objects (which do not contain <code>x</code> and <code>y</code> properties) instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMRect'><code>DOMRect</code></a> objects."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: setAttributeNodeNS() method"
        }
    ],
    "ref-for-dom-element-setattributens①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "setAttributeNS",
            "slug": "API/Element/setAttributeNS",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNS",
            "summary": "setAttributeNS adds a new attribute or changes the value of an attribute with the given namespace and name.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: setAttributeNS() method"
        }
    ],
    "ref-for-dom-element-shadowroot①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "shadowRoot",
            "slug": "API/Element/shadowRoot",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/shadowRoot",
            "summary": "The Element.shadowRoot read-only property represents the shadow root hosted by the element.",
            "support": {
                "chrome": {
                    "version_added": "35"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: shadowRoot property"
        }
    ],
    "ref-for-dom-element-slot①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "slot",
            "slug": "API/Element/slot",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/slot",
            "summary": "The slot property of the Element interface returns the name of the shadow DOM slot the element is inserted in.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: slot property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "slot",
            "slug": "HTML/Global_attributes/slot",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot",
            "summary": "The slot global attribute assigns a slot in a shadow DOM shadow tree to an element: An element with a slot attribute is assigned to the slot created by the <slot> element whose name attribute's value matches that slot attribute's value.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": null
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "slot"
        }
    ],
    "ref-for-dom-element-tagname①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "tagName",
            "slug": "API/Element/tagName",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/tagName",
            "summary": "The tagName read-only property of the Element interface returns the tag name of the element on which it's called.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: tagName property"
        }
    ],
    "ref-for-dom-element-toggleattribute①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "toggleAttribute",
            "slug": "API/Element/toggleAttribute",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute",
            "summary": "The toggleAttribute() method of the Element interface toggles a Boolean attribute (removing it if it is present and adding it if it is not present) on the given element.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "12"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: toggleAttribute() method"
        }
    ],
    "interface-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "Element",
            "slug": "API/Element",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
            "summary": "Element is the most general base class from which all element objects (i.e. objects that represent elements) in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element"
        }
    ],
    "ref-for-dom-event-event": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "Event",
            "slug": "API/Event/Event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Event/Event",
            "summary": "The Event() constructor creates a new Event object. An event created in this way is called a synthetic event, as opposed to an event fired by the browser, and can be dispatched by a script.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "11"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "15.0.0"
                    },
                    {
                        "version_added": "14.5.0",
                        "version_removed": "15.0.0",
                        "partial_implementation": true,
                        "notes": "Only available from the <code>events</code> module"
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event: Event() constructor"
        }
    ],
    "ref-for-dom-event-bubbles③": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "bubbles",
            "slug": "API/Event/bubbles",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Event/bubbles",
            "summary": "The bubbles read-only property of the Event interface indicates whether the event bubbles up through the DOM tree or not.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "14.5.0",
                    "notes": "This is not used in Node.js and is provided purely for completeness."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event: bubbles property"
        }
    ],
    "ref-for-dom-event-cancelable②": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "cancelable",
            "slug": "API/Event/cancelable",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable",
            "summary": "The cancelable read-only property of the Event interface indicates whether the event can be canceled, and therefore prevented as if the event never happened.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "14.5.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event: cancelable property"
        }
    ],
    "ref-for-dom-event-composed①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "composed",
            "slug": "API/Event/composed",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Event/composed",
            "summary": "The read-only composed property of the Event interface returns a boolean value which indicates whether or not the event will propagate across the shadow DOM boundary into the standard DOM.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "52",
                    "notes": "Before Firefox 95, this property was incorrectly set to <code>false</code> on <code>&lt;select&gt;</code> and <code>&lt;input type='checkbox'&gt;</code> elements."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "14.5.0",
                    "notes": "This is not used in Node.js and is provided purely for completeness."
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event: composed property"
        }
    ],
    "ref-for-dom-event-composedpath①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "composedPath",
            "slug": "API/Event/composedPath",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath",
            "summary": "The composedPath() method of the Event interface returns the event's path which is an array of the objects on which listeners will be invoked. This does not include nodes in shadow trees if the shadow root was created with its ShadowRoot.mode closed.",
            "support": {
                "chrome": [
                    {
                        "version_added": "53"
                    },
                    {
                        "version_added": "50",
                        "version_removed": "53",
                        "alternative_name": "deepPath"
                    }
                ],
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "59"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "14.5.0",
                    "notes": "Returns an array with either the event itself or no contents."
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "53",
                        "alternative_name": "deepPath"
                    }
                ]
            },
            "title": "Event: composedPath() method"
        }
    ],
    "ref-for-dom-event-currenttarget②": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "currentTarget",
            "slug": "API/Event/currentTarget",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget",
            "summary": "The currentTarget read-only property of the Event interface identifies the current target for the event, as the event traverses the DOM. It always refers to the element to which the event handler has been attached, as opposed to Event.target, which identifies the element on which the event occurred and which may be its descendant.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "version_added": "6",
                        "version_removed": "9",
                        "partial_implementation": true,
                        "notes": "On Internet Explorer 6 through 8, the event model is different. Event listeners are attached with the non-standard <a href='https://developer.mozilla.org/docs/Web/API/EventTarget/attachEvent'><code>EventTarget.attachEvent</code></a> method. In this model, there is no equivalent to <code>event.currentTarget</code> and <code>this</code> is the global object. One solution to emulate the <code>event.currentTarget</code> feature is to wrap your handler in a function calling the handler using <code>Function.prototype.call</code> with the element as a first argument. This way, <code>this</code> will be the expected value."
                    }
                ],
                "nodejs": {
                    "version_added": "14.5.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event: currentTarget property"
        }
    ],
    "ref-for-dom-event-defaultprevented①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "defaultPrevented",
            "slug": "API/Event/defaultPrevented",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Event/defaultPrevented",
            "summary": "The defaultPrevented read-only property of the Event interface returns a boolean value indicating whether or not the call to Event.preventDefault() canceled the event.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "14.5.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event: defaultPrevented property"
        }
    ],
    "ref-for-dom-event-eventphase③": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "eventPhase",
            "slug": "API/Event/eventPhase",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase",
            "summary": "The eventPhase read-only property of the Event interface indicates which phase of the event flow is currently being evaluated.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "14.5.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event: eventPhase property"
        }
    ],
    "ref-for-dom-event-istrusted①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "isTrusted",
            "slug": "API/Event/isTrusted",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted",
            "summary": "The isTrusted read-only property of the Event interface is a boolean value that is true when the event was generated by a user action, and false when the event was created or modified by a script or dispatched via EventTarget.dispatchEvent().",
            "support": {
                "chrome": {
                    "version_added": "46",
                    "notes": "Starting with Chrome 53 and Opera 40, untrusted events do not invoke the default action."
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9",
                    "notes": "In Internet Explorer, all events are trusted except those that are created with the <code>createEvent()</code> method."
                },
                "nodejs": {
                    "version_added": "14.5.0",
                    "notes": "This is not used in Node.js and is provided purely for completeness."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "33",
                    "notes": "Starting with Chrome 53 and Opera 40, untrusted events do not invoke the default action."
                },
                "opera_android": {
                    "version_added": "33",
                    "notes": "Starting with Chrome 53 and Opera 40, untrusted events do not invoke the default action."
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "46",
                    "notes": "Starting with version 53, untrusted events do not invoke the default action."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Starting with Chrome 53 and Opera 40, untrusted events do not invoke the default action."
                }
            },
            "title": "Event: isTrusted property"
        }
    ],
    "ref-for-dom-event-preventdefault③": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "preventDefault",
            "slug": "API/Event/preventDefault",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault",
            "summary": "The preventDefault() method of the Event interface tells the user agent that if the event does not get explicitly handled, its default action should not be taken as it normally would be.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "14.5.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event: preventDefault() method"
        }
    ],
    "ref-for-dom-event-stopimmediatepropagation①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "stopImmediatePropagation",
            "slug": "API/Event/stopImmediatePropagation",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation",
            "summary": "The stopImmediatePropagation() method of the Event interface prevents other listeners of the same event from being called.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "10"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "14.5.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event: stopImmediatePropagation() method"
        }
    ],
    "ref-for-dom-event-stoppropagation①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "stopPropagation",
            "slug": "API/Event/stopPropagation",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation",
            "summary": "The stopPropagation() method of the Event interface prevents further propagation of the current event in the capturing and bubbling phases. It does not, however, prevent any default behaviors from occurring; for instance, clicks on links are still processed. If you want to stop those behaviors, see the preventDefault() method. It also does not prevent propagation to other event-handlers of the current element. If you want to stop those, see stopImmediatePropagation().",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "14.5.0",
                    "notes": "This is not used in Node.js and is provided purely for completeness."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event: stopPropagation() method"
        }
    ],
    "ref-for-dom-event-target③": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "target",
            "slug": "API/Event/target",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Event/target",
            "summary": "The read-only target property of the Event interface is a reference to the object onto which the event was dispatched. It is different from Event.currentTarget when the event handler is called during the bubbling or capturing phase of the event.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "14.5.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event: target property"
        }
    ],
    "ref-for-dom-event-timestamp①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "timeStamp",
            "slug": "API/Event/timeStamp",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp",
            "summary": "The timeStamp read-only property of the Event interface returns the time (in milliseconds) at which the event was created.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Starting with Chrome 49, Firefox 54 and Opera 36, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>."
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0",
                    "notes": "In Deno this represents the time since UNIX epoch, not since startup. This is considered a bug, see <a href='https://github.com/denoland/deno/issues/10835'>#10835</a>."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5",
                    "notes": "Starting with Chrome 49, Firefox 54 and Opera 36, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9",
                    "notes": "Starting with Chrome 49, Firefox 54 and Opera 36, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>."
                },
                "nodejs": {
                    "version_added": "14.5.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1",
                    "notes": "Starting with Chrome 49, Firefox 54 and Opera 36, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>."
                },
                "opera_android": {
                    "version_added": "12.1",
                    "notes": "Starting with Chrome 49, Firefox 54 and Opera 36, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>."
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "1",
                    "notes": "Starting with version 49, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Starting with Chrome 49, Firefox 54 and Opera 36, this property returns <a href='https://developer.mozilla.org/docs/Web/API/DOMHighResTimeStamp'><code>DOMHighResTimeStamp</code></a> instead of <a href='https://developer.mozilla.org/docs/Web/API/DOMTimeStamp'><code>DOMTimeStamp</code></a>."
                }
            },
            "title": "Event: timeStamp property"
        }
    ],
    "ref-for-dom-event-type④": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "type",
            "slug": "API/Event/type",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Event/type",
            "summary": "The type read-only property of the Event interface returns a string containing the event's type. It is set when the event is constructed and is the name commonly used to refer to the specific event, such as click, load, or error.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "14.5.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event: type property"
        }
    ],
    "interface-event": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Event.json",
            "name": "Event",
            "slug": "API/Event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
            "summary": "The Event interface represents an event which takes place in the DOM.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "nodejs": {
                    "version_added": "14.5.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Event"
        }
    ],
    "ref-for-dom-eventtarget-eventtarget①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventTarget.json",
            "name": "EventTarget",
            "slug": "API/EventTarget/EventTarget",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/EventTarget",
            "summary": "The EventTarget() constructor creates a new EventTarget object instance.",
            "support": {
                "chrome": {
                    "version_added": "64"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "59"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "15.0.0"
                    },
                    {
                        "version_added": "14.5.0",
                        "version_removed": "15.0.0",
                        "partial_implementation": true,
                        "notes": "Only available from the <code>events</code> module"
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventTarget: EventTarget() constructor"
        }
    ],
    "ref-for-dom-eventtarget-addeventlistener③": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventTarget.json",
            "name": "addEventListener",
            "slug": "API/EventTarget/addEventListener",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener",
            "summary": "The addEventListener() method of the EventTarget interface sets up a function that will be called whenever the specified event is delivered to the target.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Before Chrome 49, the <code>type</code> and <code>listener</code> parameters were optional."
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "alternative_name": "attachEvent",
                        "version_added": "6",
                        "version_removed": "11",
                        "notes": "Older versions of IE supported an equivalent, proprietary <code>EventTarget.attachEvent()</code> method."
                    }
                ],
                "nodejs": {
                    "version_added": "14.5.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "1",
                    "notes": "Before Chrome 49, the <code>type</code> and <code>listener</code> parameters were optional."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before Chrome 49, the <code>type</code> and <code>listener</code> parameters were optional."
                }
            },
            "title": "EventTarget: addEventListener() method"
        }
    ],
    "ref-for-dom-eventtarget-dispatchevent③": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventTarget.json",
            "name": "dispatchEvent",
            "slug": "API/EventTarget/dispatchEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent",
            "summary": "The dispatchEvent() method of the EventTarget sends an Event to the object, (synchronously) invoking the affected EventListeners in the appropriate order. The normal event processing rules (including the capturing and optional bubbling phase) also apply to events dispatched manually with dispatchEvent().",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": "mirror",
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "alternative_name": "fireEvent",
                        "version_added": "6",
                        "version_removed": "11",
                        "notes": "Older versions of IE supported an equivalent, proprietary <code>EventTarget.fireEvent()</code> method."
                    }
                ],
                "nodejs": {
                    "version_added": "14.5.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventTarget: dispatchEvent() method"
        }
    ],
    "ref-for-dom-eventtarget-removeeventlistener②": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventTarget.json",
            "name": "removeEventListener",
            "slug": "API/EventTarget/removeEventListener",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener",
            "summary": "The removeEventListener() method of the EventTarget interface removes an event listener previously registered with EventTarget.addEventListener() from the target. The event listener to be removed is identified using a combination of the event type, the event listener function itself, and various optional options that may affect the matching process; see Matching event listeners for removal.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "alternative_name": "detachEvent",
                        "version_added": "6",
                        "version_removed": "11",
                        "notes": "Older versions of IE supported an equivalent, proprietary <code>EventTarget.detachEvent()</code> method."
                    }
                ],
                "nodejs": {
                    "version_added": "14.5.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventTarget: removeEventListener() method"
        }
    ],
    "interface-eventtarget": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventTarget.json",
            "name": "EventTarget",
            "slug": "API/EventTarget",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/EventTarget",
            "summary": "The EventTarget interface is implemented by objects that can receive events and may have listeners for them. In other words, any target of events implements the three methods associated with this interface.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "nodejs": {
                    "version_added": "14.5.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1",
                    "notes": "<code>window.EventTarget</code> did not exist on versions of Safari before 10.1."
                },
                "safari_ios": {
                    "version_added": "1",
                    "notes": "<code>window.EventTarget</code> did not exist on versions of Safari iOS before 10.3."
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventTarget"
        }
    ],
    "ref-for-dom-htmlcollection-item①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLCollection.json",
            "name": "item",
            "slug": "API/HTMLCollection/item",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection/item",
            "summary": "The HTMLCollection method item() returns the node located at the specified offset into the collection.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLCollection: item() method"
        }
    ],
    "ref-for-dom-htmlcollection-length①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLCollection.json",
            "name": "length",
            "slug": "API/HTMLCollection/length",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection/length",
            "summary": "The HTMLCollection.length property returns the number of items in a HTMLCollection.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLCollection: length property"
        }
    ],
    "dom-htmlcollection-nameditem-key": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLCollection.json",
            "name": "namedItem",
            "slug": "API/HTMLCollection/namedItem",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection/namedItem",
            "summary": "The namedItem() method of the HTMLCollection interface returns the first Element in the collection whose id or name attribute match the specified name, or null if no element matches.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLCollection: namedItem() method"
        }
    ],
    "interface-htmlcollection": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLCollection.json",
            "name": "HTMLCollection",
            "slug": "API/HTMLCollection",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection",
            "summary": "The HTMLCollection interface represents a generic collection (array-like object similar to arguments) of elements (in document order) and offers methods and properties for selecting from the list.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLCollection"
        }
    ],
    "eventdef-htmlslotelement-slotchange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSlotElement.json",
            "name": "slotchange_event",
            "slug": "API/HTMLSlotElement/slotchange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/slotchange_event",
            "summary": "The slotchange event is fired on an HTMLSlotElement instance (<slot> element) when the node(s) contained in that slot change.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSlotElement: slotchange event"
        }
    ],
    "ref-for-dom-mutationobserver-mutationobserver①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationObserver.json",
            "name": "MutationObserver",
            "slug": "API/MutationObserver/MutationObserver",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/MutationObserver",
            "summary": "The DOM MutationObserver() constructor — part of the MutationObserver interface — creates and returns a new observer which invokes a specified callback when DOM events occur.",
            "support": {
                "chrome": [
                    {
                        "version_added": "26"
                    },
                    {
                        "version_added": "18",
                        "prefix": "WebKit"
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "version_added": "6",
                        "prefix": "WebKit"
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": [
                    {
                        "version_added": "4.4"
                    },
                    {
                        "version_added": "37",
                        "prefix": "WebKit"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": "79",
                        "prefix": "WebKit"
                    }
                ]
            },
            "title": "MutationObserver: MutationObserver() constructor"
        }
    ],
    "ref-for-dom-mutationobserver-disconnect①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationObserver.json",
            "name": "disconnect",
            "slug": "API/MutationObserver/disconnect",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/disconnect",
            "summary": "The MutationObserver method disconnect() tells the observer to stop watching for mutations.",
            "support": {
                "chrome": {
                    "version_added": "18"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MutationObserver: disconnect() method"
        }
    ],
    "ref-for-dom-mutationobserver-observe②": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationObserver.json",
            "name": "observe",
            "slug": "API/MutationObserver/observe",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/observe",
            "summary": "The MutationObserver method observe() configures the MutationObserver callback to begin receiving notifications of changes to the DOM that match the given options.",
            "support": {
                "chrome": {
                    "version_added": "18",
                    "notes": "Before Chrome 33, <code>attributes: true</code> is required when using <code>attributeFilter</code> or <code>attributeOldValue</code>. If <code>attributes: true</code> is not present, then Chrome throws a syntax error."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14",
                    "notes": "Before Firefox 36, <code>attributes: true</code> is required when using <code>attributeFilter</code> or <code>attributeOldValue</code>. If <code>attributes: true</code> is not present, then Firefox throws a syntax error."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11",
                    "notes": "Internet Explorer requires <code>attributes: true</code> when using <code>attributeFilter</code> or <code>attributeOldValue</code>. If <code>attributes: true</code> is not present, then Internet Explorer throws a syntax error."
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6",
                    "notes": "Before Safari 10.1, <code>attributes: true</code> is required when using <code>attributeFilter</code> or <code>attributeOldValue</code>. If <code>attributes: true</code> is not present, then Safari throws a syntax error."
                },
                "safari_ios": {
                    "version_added": "6",
                    "notes": "Before Safari iOS 10.3, <code>attributes: true</code> is required when using <code>attributeFilter</code> or <code>attributeOldValue</code>. If <code>attributes: true</code> is not present, then Safari throws a syntax error."
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4",
                    "notes": "Before WebView 4.4.3, <code>attributes: true</code> is required when using <code>attributeFilter</code> or <code>attributeOldValue</code>. If <code>attributes: true</code> is not present, then WebView throws a syntax error."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before Chrome 33, <code>attributes: true</code> is required when using <code>attributeFilter</code> or <code>attributeOldValue</code>. If <code>attributes: true</code> is not present, then Chrome throws a syntax error."
                }
            },
            "title": "MutationObserver: observe() method"
        }
    ],
    "ref-for-dom-mutationobserver-takerecords①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationObserver.json",
            "name": "takeRecords",
            "slug": "API/MutationObserver/takeRecords",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver/takeRecords",
            "summary": "The MutationObserver method takeRecords() returns a list of all matching DOM changes that have been detected but not yet processed by the observer's callback function, leaving the mutation queue empty.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MutationObserver: takeRecords() method"
        }
    ],
    "interface-mutationobserver": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationObserver.json",
            "name": "MutationObserver",
            "slug": "API/MutationObserver",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver",
            "summary": "The MutationObserver interface provides the ability to watch for changes being made to the DOM tree. It is designed as a replacement for the older Mutation Events feature, which was part of the DOM3 Events specification.",
            "support": {
                "chrome": [
                    {
                        "version_added": "26"
                    },
                    {
                        "version_added": "18",
                        "prefix": "WebKit"
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "version_added": "6",
                        "prefix": "WebKit"
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": [
                    {
                        "version_added": "4.4"
                    },
                    {
                        "version_added": "37",
                        "prefix": "WebKit"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": "79",
                        "prefix": "WebKit"
                    }
                ]
            },
            "title": "MutationObserver"
        }
    ],
    "ref-for-dom-mutationrecord-addednodes②": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationRecord.json",
            "name": "addedNodes",
            "slug": "API/MutationRecord/addedNodes",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord/addedNodes",
            "summary": "The MutationRecord read-only property addedNodes is a NodeList of nodes added to a target node by a mutation observed with a MutationObserver.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MutationRecord: addedNodes property"
        }
    ],
    "ref-for-dom-mutationrecord-attributename②": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationRecord.json",
            "name": "attributeName",
            "slug": "API/MutationRecord/attributeName",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord/attributeName",
            "summary": "The MutationRecord read-only property attributeName contains the name of a changed attribute belonging to a node that is observed by a MutationObserver.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MutationRecord: attributeName property"
        }
    ],
    "ref-for-dom-mutationrecord-attributenamespace②": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationRecord.json",
            "name": "attributeNamespace",
            "slug": "API/MutationRecord/attributeNamespace",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord/attributeNamespace",
            "summary": "The MutationRecord read-only property attributeNamespace is the namespace of the mutated attribute in the MutationRecord observed by a MutationObserver.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MutationRecord: attributeNamespace property"
        }
    ],
    "ref-for-dom-mutationrecord-nextsibling②": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationRecord.json",
            "name": "nextSibling",
            "slug": "API/MutationRecord/nextSibling",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord/nextSibling",
            "summary": "The MutationRecord read-only property nextSibling is the next sibling of an added or removed child node of the target of a MutationObserver.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MutationRecord: nextSibling property"
        }
    ],
    "ref-for-dom-mutationrecord-oldvalue②": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationRecord.json",
            "name": "oldValue",
            "slug": "API/MutationRecord/oldValue",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord/oldValue",
            "summary": "The MutationRecord read-only property oldValue contains the character data or attribute value of an observed node before it was changed.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MutationRecord: oldValue property"
        }
    ],
    "ref-for-dom-mutationrecord-previoussibling②": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationRecord.json",
            "name": "previousSibling",
            "slug": "API/MutationRecord/previousSibling",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord/previousSibling",
            "summary": "The MutationRecord read-only property previousSibling is the previous sibling of an added or removed child node of the target of a MutationObserver.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MutationRecord: previousSibling property"
        }
    ],
    "ref-for-dom-mutationrecord-removednodes②": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationRecord.json",
            "name": "removedNodes",
            "slug": "API/MutationRecord/removedNodes",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord/removedNodes",
            "summary": "The MutationRecord read-only property removedNodes is a NodeList of nodes removed from a target node by a mutation observed with a MutationObserver.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MutationRecord: removedNodes property"
        }
    ],
    "ref-for-dom-mutationrecord-target②": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationRecord.json",
            "name": "target",
            "slug": "API/MutationRecord/target",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord/target",
            "summary": "The MutationRecord read-only property target is the target (i.e. the mutated/changed node) of a mutation observed with a MutationObserver.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MutationRecord: target property"
        }
    ],
    "ref-for-dom-mutationrecord-type②": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationRecord.json",
            "name": "type",
            "slug": "API/MutationRecord/type",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord/type",
            "summary": "The MutationRecord read-only property type is the type of the MutationRecord observed by a MutationObserver.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MutationRecord: type property"
        }
    ],
    "interface-mutationrecord": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MutationRecord.json",
            "name": "MutationRecord",
            "slug": "API/MutationRecord",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MutationRecord",
            "summary": "The MutationRecord is a read-only interface that represents an individual DOM mutation observed by a MutationObserver. It is the object inside the array passed to the callback of a MutationObserver.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "14"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MutationRecord"
        }
    ],
    "dom-namednodemap-getnameditem": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NamedNodeMap.json",
            "name": "getNamedItem",
            "slug": "API/NamedNodeMap/getNamedItem",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap/getNamedItem",
            "summary": "The getNamedItem() method of the NamedNodeMap interface returns the Attr corresponding to the given name, or null if there is no corresponding attribute.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NamedNodeMap: getNamedItem() method"
        }
    ],
    "dom-namednodemap-getnameditemns": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NamedNodeMap.json",
            "name": "getNamedItemNS",
            "slug": "API/NamedNodeMap/getNamedItemNS",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap/getNamedItemNS",
            "summary": "The getNamedItemNS() method of the NamedNodeMap interface returns the Attr corresponding to the given local name in the given namespace, or null if there is no corresponding attribute.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NamedNodeMap: getNamedItemNS() method"
        }
    ],
    "dom-namednodemap-item": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NamedNodeMap.json",
            "name": "item",
            "slug": "API/NamedNodeMap/item",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap/item",
            "summary": "The item() method of the NamedNodeMap interface returns the item in the map matching the index.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NamedNodeMap: item() method"
        }
    ],
    "dom-namednodemap-length": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NamedNodeMap.json",
            "name": "length",
            "slug": "API/NamedNodeMap/length",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap/length",
            "summary": "The read-only length property of the NamedNodeMap interface is the number of objects stored in the map.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NamedNodeMap: length property"
        }
    ],
    "dom-namednodemap-removenameditem": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NamedNodeMap.json",
            "name": "removeNamedItem",
            "slug": "API/NamedNodeMap/removeNamedItem",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap/removeNamedItem",
            "summary": "The removeNamedItem() method of the NamedNodeMap interface removes the Attr corresponding to the given name from the map.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NamedNodeMap: removeNamedItem() method"
        }
    ],
    "dom-namednodemap-removenameditemns": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NamedNodeMap.json",
            "name": "removeNamedItemNS",
            "slug": "API/NamedNodeMap/removeNamedItemNS",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap/removeNamedItemNS",
            "summary": "The removedNamedItemNS() method of the NamedNodeMap interface removes the Attr corresponding to the given namespace and local name from the map.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NamedNodeMap: removeNamedItemNS() method"
        }
    ],
    "dom-namednodemap-setnameditem": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NamedNodeMap.json",
            "name": "setNamedItem",
            "slug": "API/NamedNodeMap/setNamedItem",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap/setNamedItem",
            "summary": "The setNamedItem() method of the NamedNodeMap interface puts the Attr identified by its name in the map. If there is already an Attr with the same name in the map, it is replaced.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NamedNodeMap: setNamedItem() method"
        }
    ],
    "dom-namednodemap-setnameditemns": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NamedNodeMap.json",
            "name": "setNamedItemNS",
            "slug": "API/NamedNodeMap/setNamedItemNS",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap/setNamedItemNS",
            "summary": "The setNamedItemNS() method of the NamedNodeMap interface puts the Attr identified by its name in the map. If there was already an Attr with the same name in the map, it is replaced.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NamedNodeMap: setNamedItemNS() method"
        }
    ],
    "interface-namednodemap": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NamedNodeMap.json",
            "name": "NamedNodeMap",
            "slug": "API/NamedNodeMap",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap",
            "summary": "The NamedNodeMap interface represents a collection of Attr objects. Objects inside a NamedNodeMap are not in any particular order, unlike NodeList, although they may be accessed by an index as in an array.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "34"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "22"
                    },
                    {
                        "version_added": "22",
                        "version_removed": "34",
                        "alternative_name": "MozNamedAttrMap"
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NamedNodeMap"
        }
    ],
    "dom-node-appendchild": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "appendChild",
            "slug": "API/Node/appendChild",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild",
            "summary": "The appendChild() method of the Node interface adds a node to the end of the list of children of a specified parent node.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: appendChild() method"
        }
    ],
    "ref-for-dom-node-baseuri①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "baseURI",
            "slug": "API/Node/baseURI",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/baseURI",
            "summary": "The read-only baseURI property of the Node interface returns the absolute base URL of the document containing the node.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: baseURI property"
        }
    ],
    "ref-for-dom-node-childnodes①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "childNodes",
            "slug": "API/Node/childNodes",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes",
            "summary": "The read-only childNodes property of the Node interface returns a live NodeList of child nodes of the given element where the first child node is assigned index 0. Child nodes include elements, text and comments.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: childNodes property"
        }
    ],
    "ref-for-dom-node-clonenode①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "cloneNode",
            "slug": "API/Node/cloneNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode",
            "summary": "The cloneNode() method of the Node interface returns a duplicate of the node on which this method was called. Its parameter controls if the subtree contained in a node is also cloned or not.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: cloneNode() method"
        }
    ],
    "ref-for-dom-node-comparedocumentposition①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "compareDocumentPosition",
            "slug": "API/Node/compareDocumentPosition",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition",
            "summary": "The compareDocumentPosition() method of the Node interface reports the position of its argument node relative to the node on which it is called.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9",
                    "notes": "Only supports <code>contains</code> for elements"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: compareDocumentPosition() method"
        }
    ],
    "ref-for-dom-node-contains①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "contains",
            "slug": "API/Node/contains",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/contains",
            "summary": "The contains() method of the Node interface returns a boolean value indicating whether a node is a descendant of a given node, that is the node itself, one of its direct children (childNodes), one of the children's direct children, and so on.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9",
                    "partial_implementation": true,
                    "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLElement'><code>HTMLElement</code></a>, not all <code>Node</code> objects."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: contains() method"
        }
    ],
    "ref-for-dom-node-firstchild①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "firstChild",
            "slug": "API/Node/firstChild",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/firstChild",
            "summary": "The read-only firstChild property of the Node interface returns the node's first child in the tree, or null if the node has no children.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: firstChild property"
        }
    ],
    "ref-for-dom-node-getrootnode①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "getRootNode",
            "slug": "API/Node/getRootNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode",
            "summary": "The getRootNode() method of the Node interface returns the context object's root, which optionally includes the shadow root if it is available.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: getRootNode() method"
        }
    ],
    "ref-for-dom-node-haschildnodes①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "hasChildNodes",
            "slug": "API/Node/hasChildNodes",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/hasChildNodes",
            "summary": "The hasChildNodes() method of the Node interface returns a boolean value indicating whether the given Node has child nodes or not.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: hasChildNodes() method"
        }
    ],
    "dom-node-insertbefore": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "insertBefore",
            "slug": "API/Node/insertBefore",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore",
            "summary": "The insertBefore() method of the Node interface inserts a node before a reference node as a child of a specified parent node.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: insertBefore() method"
        }
    ],
    "ref-for-dom-node-isconnected①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "isConnected",
            "slug": "API/Node/isConnected",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected",
            "summary": "The read-only isConnected property of the Node interface returns a boolean indicating whether the node is connected (directly or indirectly) to a Document object.",
            "support": {
                "chrome": {
                    "version_added": "51"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "6.0"
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: isConnected property"
        }
    ],
    "dom-node-isdefaultnamespace": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "isDefaultNamespace",
            "slug": "API/Node/isDefaultNamespace",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/isDefaultNamespace",
            "summary": "The isDefaultNamespace() method of the Node interface accepts a namespace URI as an argument. It returns a boolean value that is true if the namespace is the default namespace on the given node and false if not.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: isDefaultNamespace() method"
        }
    ],
    "ref-for-dom-node-isequalnode①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "isEqualNode",
            "slug": "API/Node/isEqualNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/isEqualNode",
            "summary": "The isEqualNode() method of the Node interface tests whether two nodes are equal. Two nodes are equal when they have the same type, defining characteristics (for elements, this would be their ID, number of children, and so forth), its attributes match, and so on. The specific set of data points that must match varies depending on the types of the nodes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: isEqualNode() method"
        }
    ],
    "dom-node-issamenode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "isSameNode",
            "slug": "API/Node/isSameNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/isSameNode",
            "summary": "The isSameNode() method of the Node interface is a legacy alias the for the === strict equality operator. That is, it tests whether two nodes are the same (in other words, whether they reference the same object).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "48"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "10"
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: isSameNode() method"
        }
    ],
    "ref-for-dom-node-lastchild①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "lastChild",
            "slug": "API/Node/lastChild",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/lastChild",
            "summary": "The read-only lastChild property of the Node interface returns the last child of the node, or null if there are no child nodes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: lastChild property"
        }
    ],
    "dom-node-lookupnamespaceuri": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "lookupNamespaceURI",
            "slug": "API/Node/lookupNamespaceURI",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupNamespaceURI",
            "summary": "The lookupNamespaceURI() method of the Node interface takes a prefix as parameter and returns the namespace URI associated with it on the given node if found (and null if not).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: lookupNamespaceURI() method"
        }
    ],
    "dom-node-lookupprefix": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "lookupPrefix",
            "slug": "API/Node/lookupPrefix",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupPrefix",
            "summary": "The lookupPrefix() method of the Node interface returns a string containing the prefix for a given namespace URI, if present, and null if not. When multiple prefixes are possible, the first prefix is returned.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: lookupPrefix() method"
        }
    ],
    "ref-for-dom-node-nextsibling①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "nextSibling",
            "slug": "API/Node/nextSibling",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling",
            "summary": "The read-only nextSibling property of the Node interface returns the node immediately following the specified one in their parent's childNodes, or returns null if the specified node is the last child in the parent element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: nextSibling property"
        }
    ],
    "ref-for-dom-node-nodename①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "nodeName",
            "slug": "API/Node/nodeName",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeName",
            "summary": "The read-only nodeName property of Node returns the name of the current node as a string.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: nodeName property"
        }
    ],
    "ref-for-dom-node-nodetype①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "nodeType",
            "slug": "API/Node/nodeType",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType",
            "summary": "The read-only nodeType property of a Node interface is an integer that identifies what the node is. It distinguishes different kind of nodes from each other, such as elements, text and comments.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: nodeType property"
        }
    ],
    "dom-node-nodevalue": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "nodeValue",
            "slug": "API/Node/nodeValue",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue",
            "summary": "The nodeValue property of the Node interface returns or sets the value of the current node.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: nodeValue property"
        }
    ],
    "ref-for-dom-node-normalize①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "normalize",
            "slug": "API/Node/normalize",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/normalize",
            "summary": "The normalize() method of the Node interface puts the specified node and all of its sub-tree into a normalized form. In a normalized sub-tree, no text nodes in the sub-tree are empty and there are no adjacent text nodes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: normalize() method"
        }
    ],
    "ref-for-dom-node-ownerdocument①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "ownerDocument",
            "slug": "API/Node/ownerDocument",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument",
            "summary": "The read-only ownerDocument property of the Node interface returns the top-level document object of the node.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "9"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "9",
                        "notes": "The <code>ownerDocument</code> of doctype nodes (that is, nodes for which <code>Node.nodeType</code> is <code>Node.DOCUMENT_TYPE_NODE</code> or 10) is <code>null</code>."
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: ownerDocument property"
        }
    ],
    "ref-for-dom-node-parentelement①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "parentElement",
            "slug": "API/Node/parentElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/parentElement",
            "summary": "The read-only parentElement property of Node interface returns the DOM node's parent Element, or null if the node either has no parent, or its parent isn't a DOM Element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8",
                    "notes": "Only supported on <code>Element</code>."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7",
                    "notes": "Before Opera 15, this feature was only supported on <code>Element</code>."
                },
                "opera_android": {
                    "version_added": "10.1",
                    "notes": "Before Opera Android 14, this feature was only supported on <code>Element</code>."
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: parentElement property"
        }
    ],
    "ref-for-dom-node-parentnode①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "parentNode",
            "slug": "API/Node/parentNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/parentNode",
            "summary": "The read-only parentNode property of the Node interface returns the parent of the specified node in the DOM tree.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: parentNode property"
        }
    ],
    "ref-for-dom-node-previoussibling①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "previousSibling",
            "slug": "API/Node/previousSibling",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/previousSibling",
            "summary": "The read-only previousSibling property of the Node interface returns the node immediately preceding the specified one in its parent's childNodes list, or null if the specified node is the first in that list.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: previousSibling property"
        }
    ],
    "dom-node-removechild": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "removeChild",
            "slug": "API/Node/removeChild",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild",
            "summary": "The removeChild() method of the Node interface removes a child node from the DOM and returns the removed node.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: removeChild() method"
        }
    ],
    "dom-node-replacechild": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "replaceChild",
            "slug": "API/Node/replaceChild",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/replaceChild",
            "summary": "The replaceChild() method of the Node interface replaces a child node within the given (parent) node.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Node: replaceChild() method"
        }
    ],
    "dom-node-textcontent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "textContent",
            "slug": "API/Node/textContent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent",
            "summary": "The textContent property of the Node interface represents the text content of the node and its descendants.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "textcontent",
                "title": "Node.textContent"
            },
            "title": "Node: textContent property"
        }
    ],
    "interface-node": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Node.json",
            "name": "Node",
            "slug": "API/Node",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
            "summary": "The DOM Node interface is an abstract base class upon which many other DOM API objects are based, thus letting those object types to be used similarly and often interchangeably. As an abstract class, there is no such thing as a plain Node object. All objects that implement Node functionality are based on one of its subclasses. Most notable are Document, Element, and DocumentFragment.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "WebKit and old versions of Blink incorrectly do not make <code>Node</code> inherit from <code>EventTarget</code>."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7",
                    "notes": "WebKit and old versions of Blink incorrectly do not make <code>Node</code> inherit from <code>EventTarget</code>."
                },
                "opera_android": {
                    "version_added": "10.1",
                    "notes": "WebKit and old versions of Blink incorrectly do not make <code>Node</code> inherit from <code>EventTarget</code>."
                },
                "safari": {
                    "version_added": "1",
                    "notes": "WebKit and old versions of Blink incorrectly do not make <code>Node</code> inherit from <code>EventTarget</code>."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "WebKit and old versions of Blink incorrectly do not make <code>Node</code> inherit from <code>EventTarget</code>."
                }
            },
            "title": "Node"
        }
    ],
    "dom-nodeiterator-filter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeIterator.json",
            "name": "filter",
            "slug": "API/NodeIterator/filter",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/filter",
            "summary": "The NodeIterator.filter read-only property returns a NodeFilter object, that is an object which implements an acceptNode(node) method, used to screen nodes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeIterator: filter property"
        }
    ],
    "dom-nodeiterator-nextnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeIterator.json",
            "name": "nextNode",
            "slug": "API/NodeIterator/nextNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/nextNode",
            "summary": "The NodeIterator.nextNode() method returns the next node in the set represented by the NodeIterator and advances the position of the iterator within the set. The first call to nextNode() returns the first node in the set.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeIterator: nextNode() method"
        }
    ],
    "dom-nodeiterator-pointerbeforereferencenode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeIterator.json",
            "name": "pointerBeforeReferenceNode",
            "slug": "API/NodeIterator/pointerBeforeReferenceNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/pointerBeforeReferenceNode",
            "summary": "The NodeIterator.pointerBeforeReferenceNode read-only property returns a boolean flag that indicates whether the NodeFilter is anchored before (if this value is true) or after (if this value is false) the anchor node indicated by the NodeIterator.referenceNode property.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeIterator: pointerBeforeReferenceNode property"
        }
    ],
    "dom-nodeiterator-previousnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeIterator.json",
            "name": "previousNode",
            "slug": "API/NodeIterator/previousNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/previousNode",
            "summary": "The NodeIterator.previousNode() method returns the previous node in the set represented by the NodeIterator and moves the position of the iterator backwards within the set.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeIterator: previousNode() method"
        }
    ],
    "dom-nodeiterator-referencenode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeIterator.json",
            "name": "referenceNode",
            "slug": "API/NodeIterator/referenceNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/referenceNode",
            "summary": "The NodeIterator.referenceNode read-only property returns the Node to which the iterator is anchored; as new nodes are inserted, the iterator remains anchored to the reference node as specified by this property.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeIterator: referenceNode property"
        }
    ],
    "dom-nodeiterator-root": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeIterator.json",
            "name": "root",
            "slug": "API/NodeIterator/root",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/root",
            "summary": "The NodeIterator.root read-only property represents the Node that is the root of what the NodeIterator traverses.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeIterator: root property"
        }
    ],
    "dom-nodeiterator-whattoshow": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeIterator.json",
            "name": "whatToShow",
            "slug": "API/NodeIterator/whatToShow",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/whatToShow",
            "summary": "The NodeIterator.whatToShow read-only property represents an unsigned integer representing a bitmask signifying what types of nodes should be returned by the NodeIterator.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeIterator: whatToShow property"
        }
    ],
    "interface-nodeiterator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeIterator.json",
            "name": "NodeIterator",
            "slug": "API/NodeIterator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator",
            "summary": "The NodeIterator interface represents an iterator to traverse nodes of a DOM subtree in document order.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeIterator"
        }
    ],
    "interface-nodelist": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeList.json",
            "name": "forEach",
            "slug": "API/NodeList/forEach",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach",
            "summary": "The forEach() method of the NodeList interface calls the callback given in parameter once for each value pair in the list, in insertion order.",
            "support": {
                "chrome": {
                    "version_added": "51"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeList: forEach() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeList.json",
            "name": "@@iterator",
            "slug": "JavaScript/Reference/Global_Objects/Array/@@iterator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator",
            "summary": "The [@@iterator]() method of Array instances implements the iterable protocol and allows arrays to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns an array iterator object that yields the value of each index in the array.",
            "support": {
                "chrome": {
                    "version_added": "51"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "36"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype[@@iterator]()"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeList.json",
            "name": "NodeList",
            "slug": "API/NodeList",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
            "summary": "NodeList objects are collections of nodes, usually returned by properties such as Node.childNodes and methods such as document.querySelectorAll().",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeList"
        }
    ],
    "ref-for-dom-nodelist-item①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeList.json",
            "name": "item",
            "slug": "API/NodeList/item",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList/item",
            "summary": "Returns a node from a NodeList by index. This method doesn't throw exceptions as long as you provide arguments. A value of null is returned if the index is out of range, and a TypeError is thrown if no argument is provided.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeList: item() method"
        }
    ],
    "ref-for-dom-nodelist-length①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/NodeList.json",
            "name": "length",
            "slug": "API/NodeList/length",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList/length",
            "summary": "The NodeList.length property returns the number of items in a NodeList.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NodeList: length property"
        }
    ],
    "dom-processinginstruction-target": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ProcessingInstruction.json",
            "name": "target",
            "slug": "API/ProcessingInstruction/target",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction/target",
            "summary": "The read-only target property of the ProcessingInstruction interface represent the application to which the ProcessingInstruction is targeted.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ProcessingInstruction: target property"
        }
    ],
    "interface-processinginstruction": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ProcessingInstruction.json",
            "name": "ProcessingInstruction",
            "slug": "API/ProcessingInstruction",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ProcessingInstruction",
            "summary": "The ProcessingInstruction interface represents a processing instruction; that is, a Node which embeds an instruction targeting a specific application but that can be ignored by any other applications which don't recognize the instruction.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ProcessingInstruction"
        }
    ],
    "ref-for-dom-range-range②": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "Range",
            "slug": "API/Range/Range",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/Range",
            "summary": "The Range() constructor returns a newly created Range object whose start and end is the global Document object.",
            "support": {
                "chrome": {
                    "version_added": "29"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "24"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: Range() constructor"
        }
    ],
    "dom-range-clonecontents": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "cloneContents",
            "slug": "API/Range/cloneContents",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/cloneContents",
            "summary": "The Range.cloneContents() returns a DocumentFragment copying the objects of type Node included in the Range.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: cloneContents() method"
        }
    ],
    "dom-range-clonerange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "cloneRange",
            "slug": "API/Range/cloneRange",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/cloneRange",
            "summary": "The Range.cloneRange() method returns a Range object with boundary points identical to the cloned Range.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: cloneRange() method"
        }
    ],
    "dom-range-collapse": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "collapse",
            "slug": "API/Range/collapse",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/collapse",
            "summary": "The Range.collapse() method collapses the Range to one of its boundary points.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: collapse() method"
        }
    ],
    "ref-for-dom-range-commonancestorcontainer②": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "commonAncestorContainer",
            "slug": "API/Range/commonAncestorContainer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/commonAncestorContainer",
            "summary": "The Range.commonAncestorContainer read-only property returns the deepest — or furthest down the document tree — Node that contains both boundary points of the Range. This means that if Range.startContainer and Range.endContainer both refer to the same node, this node is the common ancestor container.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: commonAncestorContainer property"
        }
    ],
    "dom-range-compareboundarypoints": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "compareBoundaryPoints",
            "slug": "API/Range/compareBoundaryPoints",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/compareBoundaryPoints",
            "summary": "The Range.compareBoundaryPoints() method compares the boundary points of the Range with those of another range.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: compareBoundaryPoints() method"
        }
    ],
    "ref-for-dom-range-comparepoint①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "comparePoint",
            "slug": "API/Range/comparePoint",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/comparePoint",
            "summary": "The Range.comparePoint() method returns -1, 0, or 1 depending on whether the referenceNode is before, the same as, or after the Range.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: comparePoint() method"
        }
    ],
    "dom-range-deletecontents": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "deleteContents",
            "slug": "API/Range/deleteContents",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/deleteContents",
            "summary": "The Range.deleteContents() method removes the contents of the Range from the Document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: deleteContents() method"
        }
    ],
    "dom-range-detach": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "detach",
            "slug": "API/Range/detach",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/detach",
            "summary": "The Range.detach() method does nothing. It used to disable the Range object and enable the browser to release associated resources. The method has been kept for compatibility.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Starting in Chrome 37, this method is a no-op and has no effect."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "version_removed": "15",
                    "notes": "Starting in Firefox 15.0, this method is a no-op and has no effect."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9",
                    "notes": "Starting in Opera 24, this method is a no-op and has no effect."
                },
                "opera_android": {
                    "version_added": "10.1",
                    "notes": "Starting in Opera 24, this method is a no-op and has no effect."
                },
                "safari": {
                    "version_added": "1",
                    "notes": "Since August 2015 this method is a no-op in <a href='https://webkit.org/b/148454'>WebKit-based browsers</a>."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Starting in Chrome 37, this method is a no-op and has no effect."
                }
            },
            "title": "Range: detach() method"
        }
    ],
    "dom-range-extractcontents": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "extractContents",
            "slug": "API/Range/extractContents",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/extractContents",
            "summary": "The Range.extractContents() method moves contents of the Range from the document tree into a DocumentFragment.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: extractContents() method"
        }
    ],
    "dom-range-insertnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "insertNode",
            "slug": "API/Range/insertNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/insertNode",
            "summary": "The Range.insertNode() method inserts a node at the start of the Range.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: insertNode() method"
        }
    ],
    "ref-for-dom-range-intersectsnode①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "intersectsNode",
            "slug": "API/Range/intersectsNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/intersectsNode",
            "summary": "The Range.intersectsNode() method returns a boolean indicating whether the given Node intersects the Range.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "17"
                },
                "firefox_android": {
                    "version_added": "19"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: intersectsNode() method"
        }
    ],
    "dom-range-ispointinrange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "isPointInRange",
            "slug": "API/Range/isPointInRange",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/isPointInRange",
            "summary": "The Range.isPointInRange() method returns a boolean indicating whether the given point is in the Range. It returns true if the point (cursor position) at offset within ReferenceNode is within this range.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: isPointInRange() method"
        }
    ],
    "dom-range-selectnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "selectNode",
            "slug": "API/Range/selectNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/selectNode",
            "summary": "The Range.selectNode() method sets the Range to contain the Node and its contents. The parent Node of the start and end of the Range will be the same as the parent of the referenceNode.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: selectNode() method"
        }
    ],
    "dom-range-selectnodecontents": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "selectNodeContents",
            "slug": "API/Range/selectNodeContents",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/selectNodeContents",
            "summary": "The Range.selectNodeContents() method sets the Range to contain the contents of a Node.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: selectNodeContents() method"
        }
    ],
    "dom-range-setend": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "setEnd",
            "slug": "API/Range/setEnd",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/setEnd",
            "summary": "The Range.setEnd() method sets the end position of a Range to be located at the given offset into the specified node x.Setting the end point above (higher in the document) than the start point will result in a collapsed range with the start and end points both set to the specified end position.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: setEnd() method"
        }
    ],
    "dom-range-setendafter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "setEndAfter",
            "slug": "API/Range/setEndAfter",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/setEndAfter",
            "summary": "The Range.setEndAfter() method sets the end position of a Range relative to another Node. The parent Node of end of the Range will be the same as that for the referenceNode.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: setEndAfter() method"
        }
    ],
    "dom-range-setendbefore": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "setEndBefore",
            "slug": "API/Range/setEndBefore",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/setEndBefore",
            "summary": "The Range.setEndBefore() method sets the end position of a Range relative to another Node. The parent Node of end of the Range will be the same as that for the referenceNode.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: setEndBefore() method"
        }
    ],
    "dom-range-setstart": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "setStart",
            "slug": "API/Range/setStart",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/setStart",
            "summary": "The Range.setStart() method sets the start position of a Range.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: setStart() method"
        }
    ],
    "dom-range-setstartafter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "setStartAfter",
            "slug": "API/Range/setStartAfter",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/setStartAfter",
            "summary": "The Range.setStartAfter() method sets the start position of a Range relative to a Node. The parent Node of the start of the Range will be the same as that for the referenceNode.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: setStartAfter() method"
        }
    ],
    "dom-range-setstartbefore": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "setStartBefore",
            "slug": "API/Range/setStartBefore",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/setStartBefore",
            "summary": "The Range.setStartBefore() method sets the start position of a Range relative to another Node. The parent Node of the start of the Range will be the same as that for the referenceNode.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: setStartBefore() method"
        }
    ],
    "dom-range-surroundcontents": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "surroundContents",
            "slug": "API/Range/surroundContents",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/surroundContents",
            "summary": "The Range.surroundContents() method moves content of the Range into a new node, placing the new node at the start of the specified range.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: surroundContents() method"
        }
    ],
    "dom-range-stringifier": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "toString",
            "slug": "API/Range/toString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range/toString",
            "summary": "The Range.toString() method is a stringifier returning the text of the Range.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range: toString() method"
        }
    ],
    "interface-range": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Range.json",
            "name": "Range",
            "slug": "API/Range",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Range",
            "summary": "The Range interface represents a fragment of a document that can contain nodes and parts of text nodes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Starting with Firefox 13, the <code>Range</code> object throws a <code>DOMException</code> as defined in DOM 4, instead of a <code>RangeException</code> defined in prior specifications."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Range"
        }
    ],
    "shadowroot-delegates-focus": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ShadowRoot.json",
            "name": "delegatesFocus",
            "slug": "API/ShadowRoot/delegatesFocus",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/delegatesFocus",
            "summary": "The delegatesFocus read-only property of the ShadowRoot interface returns true if the shadow root delegates focus, and false otherwise.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "94"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ShadowRoot: delegatesFocus property"
        }
    ],
    "dom-shadowroot-host": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ShadowRoot.json",
            "name": "host",
            "slug": "API/ShadowRoot/host",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/host",
            "summary": "The host read-only property of the ShadowRoot returns a reference to the DOM element the ShadowRoot is attached to.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ShadowRoot: host property"
        }
    ],
    "dom-shadowroot-mode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ShadowRoot.json",
            "name": "mode",
            "slug": "API/ShadowRoot/mode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/mode",
            "summary": "The mode read-only property of the ShadowRoot specifies its mode — either open or closed. This defines whether or not the shadow root's internal features are accessible from JavaScript.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ShadowRoot: mode property"
        }
    ],
    "dom-shadowroot-slotassignment": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ShadowRoot.json",
            "name": "slotAssignment",
            "slug": "API/ShadowRoot/slotAssignment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/slotAssignment",
            "summary": "The read-only slotAssignment property of the ShadowRoot interface returns the slot assignment mode for the shadow DOM tree. Nodes are either automatically assigned (named) or manually assigned (manual). The value of this property defined using the slotAssignment option when calling Element.attachShadow().",
            "support": {
                "chrome": {
                    "version_added": "86"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "92"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "86"
                }
            },
            "title": "ShadowRoot: slotAssignment property"
        }
    ],
    "interface-shadowroot": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ShadowRoot.json",
            "name": "ShadowRoot",
            "slug": "API/ShadowRoot",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot",
            "summary": "The ShadowRoot interface of the Shadow DOM API is the root node of a DOM subtree that is rendered separately from a document's main DOM tree.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ShadowRoot"
        }
    ],
    "ref-for-dom-staticrange-staticrange①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/StaticRange.json",
            "name": "StaticRange",
            "slug": "API/StaticRange/StaticRange",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/StaticRange/StaticRange",
            "summary": "The StaticRange() constructor creates a new StaticRange object representing a span of content within the DOM.",
            "support": {
                "chrome": {
                    "version_added": "90"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "71"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "13.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "90"
                }
            },
            "title": "StaticRange: StaticRange() constructor"
        }
    ],
    "interface-staticrange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/StaticRange.json",
            "name": "StaticRange",
            "slug": "API/StaticRange",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/StaticRange",
            "summary": "The DOM StaticRange interface extends AbstractRange to provide a method to specify a range of content in the DOM whose contents don't update to reflect changes which occur within the DOM tree.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "69",
                    "notes": "In Firefox, <code>StaticRange</code> can currently only be used by browser-internal code or code with enhanced permissions; it is not yet exposed to the web."
                },
                "firefox_android": {
                    "version_added": "79"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "StaticRange"
        }
    ],
    "ref-for-dom-text-text①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Text.json",
            "name": "Text",
            "slug": "API/Text/Text",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Text/Text",
            "summary": "The Text() constructor returns a new Text object with the optional string given in parameter as its textual content.",
            "support": {
                "chrome": {
                    "version_added": "29"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "24"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Text: Text() constructor"
        }
    ],
    "ref-for-dom-text-splittext①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Text.json",
            "name": "splitText",
            "slug": "API/Text/splitText",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Text/splitText",
            "summary": "The splitText() method of the Text interface breaks the Text node into two nodes at the specified offset, keeping both nodes in the tree as siblings.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Before Chrome 30, the <code>offset</code> parameter was optional."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1",
                    "notes": "Before Opera 17, the <code>offset</code> parameter was optional."
                },
                "opera_android": {
                    "version_added": "12.1",
                    "notes": "Before Opera 17, the <code>offset</code> parameter was optional."
                },
                "safari": {
                    "version_added": "1",
                    "notes": "The <code>offset</code> parameter is optional."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "1",
                    "notes": "Before version 4.4, the <code>offset</code> parameter was optional."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before Chrome 30, the <code>offset</code> parameter was optional."
                }
            },
            "title": "Text: splitText() method"
        }
    ],
    "ref-for-dom-text-wholetext①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Text.json",
            "name": "wholeText",
            "slug": "API/Text/wholeText",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Text/wholeText",
            "summary": "The read-only wholeText property of the Text interface returns the full text of all Text nodes logically adjacent to the node. The text is concatenated in document order. This allows specifying any text node and obtaining all adjacent text as a single string.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Text: wholeText property"
        }
    ],
    "interface-text": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Text.json",
            "name": "Text",
            "slug": "API/Text",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Text",
            "summary": "The Text interface represents a text node in a DOM tree.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Text"
        }
    ],
    "ref-for-dom-treewalker-currentnode①": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "currentNode",
            "slug": "API/TreeWalker/currentNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/currentNode",
            "summary": "The TreeWalker.currentNode property represents the Node which the TreeWalker is currently pointing at.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker: currentNode property"
        }
    ],
    "dom-treewalker-filter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "filter",
            "slug": "API/TreeWalker/filter",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/filter",
            "summary": "The TreeWalker.filter read-only property returns a NodeFilter that is the filtering object associated with the TreeWalker.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker: filter property"
        }
    ],
    "dom-treewalker-firstchild": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "firstChild",
            "slug": "API/TreeWalker/firstChild",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/firstChild",
            "summary": "The TreeWalker.firstChild() method moves the current Node to the first visible child of the current node, and returns the found child. If no such child exists, it returns null and the current node is not changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker: firstChild() method"
        }
    ],
    "dom-treewalker-lastchild": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "lastChild",
            "slug": "API/TreeWalker/lastChild",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/lastChild",
            "summary": "The TreeWalker.lastChild() method moves the current Node to the last visible child of the current node, and returns the found child. If no such child exists, it returns null and the current node is not changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker: lastChild() method"
        }
    ],
    "dom-treewalker-nextnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "nextNode",
            "slug": "API/TreeWalker/nextNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/nextNode",
            "summary": "The TreeWalker.nextNode() method moves the current Node to the next visible node in the document order, and returns the found node. If no such node exists, it returns null and the current node is not changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker: nextNode() method"
        }
    ],
    "dom-treewalker-nextsibling": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "nextSibling",
            "slug": "API/TreeWalker/nextSibling",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/nextSibling",
            "summary": "The TreeWalker.nextSibling() method moves the current Node to its next sibling, if any, and returns the found sibling. If there is no such node, it returns null and the current node is not changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker: nextSibling() method"
        }
    ],
    "dom-treewalker-parentnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "parentNode",
            "slug": "API/TreeWalker/parentNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/parentNode",
            "summary": "The TreeWalker.parentNode() method moves the current Node to the first visible ancestor node in the document order, and returns the found node. If no such node exists, or if it is above the TreeWalker's root node, it returns null and the current node is not changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker: parentNode() method"
        }
    ],
    "dom-treewalker-previousnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "previousNode",
            "slug": "API/TreeWalker/previousNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/previousNode",
            "summary": "The TreeWalker.previousNode() method moves the current Node to the previous visible node in the document order, and returns the found node. If no such node exists, or if it is before that the root node defined at the object construction, it returns null and the current node is not changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker: previousNode() method"
        }
    ],
    "dom-treewalker-previoussibling": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "previousSibling",
            "slug": "API/TreeWalker/previousSibling",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/previousSibling",
            "summary": "The TreeWalker.previousSibling() method moves the current Node to its previous sibling, if any, and returns the found sibling. If there is no such node, it returns null and the current node is not changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker: previousSibling() method"
        }
    ],
    "dom-treewalker-root": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "root",
            "slug": "API/TreeWalker/root",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/root",
            "summary": "The TreeWalker.root read-only property returns the node that is the root of what the TreeWalker traverses.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker: root property"
        }
    ],
    "dom-treewalker-whattoshow": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "whatToShow",
            "slug": "API/TreeWalker/whatToShow",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/whatToShow",
            "summary": "The TreeWalker.whatToShow read-only property returns a bitmask that indicates the types of nodes to show. Non-matching nodes are skipped, but their children may be included, if relevant. The possible values are:",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker: whatToShow property"
        }
    ],
    "interface-treewalker": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TreeWalker.json",
            "name": "TreeWalker",
            "slug": "API/TreeWalker",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker",
            "summary": "The TreeWalker object represents the nodes of a document subtree and a position within them.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TreeWalker"
        }
    ],
    "xmldocument": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLDocument.json",
            "name": "XMLDocument",
            "slug": "API/XMLDocument",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLDocument",
            "summary": "The XMLDocument interface represents an XML document. It inherits from the generic Document and does not add any specific methods or properties to it: nevertheless, several algorithms behave differently with the two types of documents.",
            "support": {
                "chrome": [
                    {
                        "version_added": "34"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "34",
                        "partial_implementation": true,
                        "notes": "Implemented as an alias for <code>Document</code>."
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "21"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "21",
                        "partial_implementation": true,
                        "notes": "Implemented as an alias for <code>Document</code>."
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "21"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "21",
                        "partial_implementation": true,
                        "notes": "Implemented as an alias for <code>Document</code>."
                    }
                ],
                "safari": [
                    {
                        "version_added": "10"
                    },
                    {
                        "version_added": "3",
                        "version_removed": "10",
                        "partial_implementation": true,
                        "notes": "Implemented as an alias for <code>Document</code>."
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "10"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "10",
                        "partial_implementation": true,
                        "notes": "Implemented as an alias for <code>Document</code>."
                    }
                ],
                "samsunginternet_android": "mirror",
                "webview_android": [
                    {
                        "version_added": "37"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "37",
                        "partial_implementation": true,
                        "notes": "Implemented as an alias for <code>Document</code>."
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "34",
                        "partial_implementation": true,
                        "notes": "Implemented as an alias for <code>Document</code>."
                    }
                ]
            },
            "title": "XMLDocument"
        }
    ],
    "dom-xpathevaluator-xpathevaluator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XPathEvaluator.json",
            "name": "XPathEvaluator",
            "slug": "API/XPathEvaluator/XPathEvaluator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XPathEvaluator/XPathEvaluator",
            "summary": "The XPathEvaluator() constructor creates a new XPathEvaluator.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XPathEvaluator: XPathEvaluator() constructor"
        }
    ],
    "interface-xpathevaluator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XPathEvaluator.json",
            "name": "XPathEvaluator",
            "slug": "API/XPathEvaluator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XPathEvaluator",
            "summary": "The XPathEvaluator interface allows to compile and evaluate XPath expressions.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "document-evaluate-xpath",
                "title": "document.evaluate & XPath"
            },
            "title": "XPathEvaluator"
        }
    ],
    "dom-xpathexpression-evaluate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XPathExpression.json",
            "name": "evaluate",
            "slug": "API/XPathExpression/evaluate",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression/evaluate",
            "summary": "The evaluate() method of the XPathExpression interface executes an XPath expression on the given node or document and returns an XPathResult.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XPathExpression: evaluate() method"
        }
    ],
    "interface-xpathexpression": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XPathExpression.json",
            "name": "XPathExpression",
            "slug": "API/XPathExpression",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XPathExpression",
            "summary": "This interface is a compiled XPath expression that can be evaluated on a document or specific node to return information from its DOM tree.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XPathExpression"
        }
    ],
    "dom-xpathresult-booleanvalue": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XPathResult.json",
            "name": "booleanValue",
            "slug": "API/XPathResult/booleanValue",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/booleanValue",
            "summary": "The read-only booleanValue property of the XPathResult interface returns the boolean value of a result with XPathResult.resultType being BOOLEAN_TYPE.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XPathResult: booleanValue property"
        }
    ],
    "dom-xpathresult-invaliditeratorstate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XPathResult.json",
            "name": "invalidIteratorState",
            "slug": "API/XPathResult/invalidIteratorState",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/invalidIteratorState",
            "summary": "The read-only invalidIteratorState property of the XPathResult interface signifies that the iterator has become invalid. It is true if XPathResult.resultType is UNORDERED_NODE_ITERATOR_TYPE or ORDERED_NODE_ITERATOR_TYPE and the document has been modified since this result was returned.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XPathResult: invalidIteratorState property"
        }
    ],
    "dom-xpathresult-iteratenext": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XPathResult.json",
            "name": "iterateNext",
            "slug": "API/XPathResult/iterateNext",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/iterateNext",
            "summary": "The iterateNext() method of the XPathResult interface iterates over a node set result and returns the next node from it or null if there are no more nodes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XPathResult: iterateNext() method"
        }
    ],
    "dom-xpathresult-numbervalue": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XPathResult.json",
            "name": "numberValue",
            "slug": "API/XPathResult/numberValue",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/numberValue",
            "summary": "The read-only numberValue property of the XPathResult interface returns the numeric value of a result with XPathResult.resultType being NUMBER_TYPE.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XPathResult: numberValue property"
        }
    ],
    "dom-xpathresult-resulttype": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XPathResult.json",
            "name": "resultType",
            "slug": "API/XPathResult/resultType",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/resultType",
            "summary": "The read-only resultType property of the XPathResult interface represents the type of the result, as defined by the type constants.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XPathResult: resultType property"
        }
    ],
    "dom-xpathresult-singlenodevalue": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XPathResult.json",
            "name": "singleNodeValue",
            "slug": "API/XPathResult/singleNodeValue",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/singleNodeValue",
            "summary": "The read-only singleNodeValue property of the XPathResult interface returns a Node value or null in case no node was matched of a result with XPathResult.resultType being ANY_UNORDERED_NODE_TYPE or FIRST_ORDERED_NODE_TYPE.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XPathResult: singleNodeValue property"
        }
    ],
    "dom-xpathresult-snapshotitem-index-index": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XPathResult.json",
            "name": "snapshotItem",
            "slug": "API/XPathResult/snapshotItem",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/snapshotItem",
            "summary": "The snapshotItem() method of the XPathResult interface returns an item of the snapshot collection or null in case the index is not within the range of nodes. Unlike the iterator result, the snapshot does not become invalid, but may not correspond to the current document if it is mutated.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XPathResult: snapshotItem() method"
        }
    ],
    "dom-xpathresult-snapshotlength": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XPathResult.json",
            "name": "snapshotLength",
            "slug": "API/XPathResult/snapshotLength",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/snapshotLength",
            "summary": "The read-only snapshotLength property of the XPathResult interface represents the number of nodes in the result snapshot.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XPathResult: snapshotLength property"
        }
    ],
    "dom-xpathresult-stringvalue": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XPathResult.json",
            "name": "stringValue",
            "slug": "API/XPathResult/stringValue",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XPathResult/stringValue",
            "summary": "The read-only stringValue property of the XPathResult interface returns the string value of a result with XPathResult.resultType being STRING_TYPE.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XPathResult: stringValue property"
        }
    ],
    "interface-xpathresult": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XPathResult.json",
            "name": "XPathResult",
            "slug": "API/XPathResult",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XPathResult",
            "summary": "The XPathResult interface represents the results generated by evaluating an XPath expression within the context of a given node.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XPathResult"
        }
    ],
    "dom-xsltprocessor-xsltprocessor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XSLTProcessor.json",
            "name": "XSLTProcessor",
            "slug": "API/XSLTProcessor/XSLTProcessor",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor/XSLTProcessor",
            "summary": "The XSLTProcessor() constructor creates a new XSLTProcessor object instance.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XSLTProcessor: XSLTProcessor() constructor"
        }
    ],
    "dom-xsltprocessor-clearparameters": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XSLTProcessor.json",
            "name": "clearParameters",
            "slug": "API/XSLTProcessor/clearParameters",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor/clearParameters",
            "summary": "The clearParameters() method of the XSLTProcessor interface removes all parameters (<xsl:param>) and their values from the stylesheet imported in the processor. The XSLTProcessor will then use the default values specified in the XSLT stylesheet.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XSLTProcessor: clearParameters() method"
        }
    ],
    "dom-xsltprocessor-getparameter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XSLTProcessor.json",
            "name": "getParameter",
            "slug": "API/XSLTProcessor/getParameter",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor/getParameter",
            "summary": "The getParameter() method of the XSLTProcessor interface returns the value of a parameter (<xsl:param>) from the stylesheet imported in the processor.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Chrome only supports string values."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1",
                    "notes": "Opera only supports string values."
                },
                "opera_android": {
                    "version_added": "12.1",
                    "notes": "Opera only supports string values."
                },
                "safari": {
                    "version_added": "3.1",
                    "notes": "Safari only supports string values."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3",
                    "notes": "WebView only supports string values."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Chrome only supports string values."
                }
            },
            "title": "XSLTProcessor: getParameter() method"
        }
    ],
    "dom-xsltprocessor-importstylesheet": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XSLTProcessor.json",
            "name": "importStylesheet",
            "slug": "API/XSLTProcessor/importStylesheet",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor/importStylesheet",
            "summary": "The importStylesheet() method of the XSLTProcessor interface imports an XSLT stylesheet for the processor.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XSLTProcessor: importStylesheet() method"
        }
    ],
    "dom-xsltprocessor-removeparameter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XSLTProcessor.json",
            "name": "removeParameter",
            "slug": "API/XSLTProcessor/removeParameter",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor/removeParameter",
            "summary": "The removeParameter() method of the XSLTProcessor interface removes the parameter (<xsl:param>) and its value from the stylesheet imported in the processor.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XSLTProcessor: removeParameter() method"
        }
    ],
    "dom-xsltprocessor-reset": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XSLTProcessor.json",
            "name": "reset",
            "slug": "API/XSLTProcessor/reset",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor/reset",
            "summary": "The reset() method of the XSLTProcessor interface removes all parameters (<xsl:param>) and the XSLT stylesheet from the processor. The XSLTProcessor will then be in its original state when it was created.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XSLTProcessor: reset() method"
        }
    ],
    "dom-xsltprocessor-setparameter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XSLTProcessor.json",
            "name": "setParameter",
            "slug": "API/XSLTProcessor/setParameter",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor/setParameter",
            "summary": "The setParameter() method of the XSLTProcessor interface sets the value of a parameter (<xsl:param>) in the stylesheet imported in the processor.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Chrome only supports string values."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1",
                    "notes": "Opera only supports string values."
                },
                "opera_android": {
                    "version_added": "12.1",
                    "notes": "Opera only supports string values."
                },
                "safari": {
                    "version_added": "3.1",
                    "notes": "Safari only supports string values."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3",
                    "notes": "WebView only supports string values."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Chrome only supports string values."
                }
            },
            "title": "XSLTProcessor: setParameter() method"
        }
    ],
    "dom-xsltprocessor-transformtodocument": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XSLTProcessor.json",
            "name": "transformToDocument",
            "slug": "API/XSLTProcessor/transformToDocument",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor/transformToDocument",
            "summary": "The transformToDocument() method of the XSLTProcessor interface transforms the provided Node source to a Document using the XSLT stylesheet associated with XSLTProcessor.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Chrome returns <code>null</code> if an error occurs."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Firefox throws an exception if an error occurs."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1",
                    "notes": [
                        "Opera 12.1 and earlier throws an exception if an error occurs.",
                        "Opera 15 and later returns <code>null</code> if an error occurs."
                    ]
                },
                "opera_android": {
                    "version_added": "12.1",
                    "notes": [
                        "Opera Android 12.1 and earlier throws an exception if an error occurs.",
                        "Opera Android 14 and later returns <code>null</code> if an error occurs."
                    ]
                },
                "safari": {
                    "version_added": "3.1",
                    "notes": "Safari returns <code>null</code> if an error occurs."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3",
                    "notes": "WebView returns <code>null</code> if an error occurs."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Chrome returns <code>null</code> if an error occurs."
                }
            },
            "title": "XSLTProcessor: transformToDocument() method"
        }
    ],
    "dom-xsltprocessor-transformtofragment": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XSLTProcessor.json",
            "name": "transformToFragment",
            "slug": "API/XSLTProcessor/transformToFragment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor/transformToFragment",
            "summary": "The transformToFragment() method of the XSLTProcessor interface transforms a provided Node source to a DocumentFragment using the XSLT stylesheet associated with the XSLTProcessor.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Chrome returns <code>null</code> if an error occurs."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Firefox throws an exception if an error occurs."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1",
                    "notes": [
                        "Opera 12.1 and earlier throws an exception if an error occurs.",
                        "Opera 15 and later returns <code>null</code> if an error occurs."
                    ]
                },
                "opera_android": {
                    "version_added": "12.1",
                    "notes": [
                        "Opera Android 12.1 and earlier throws an exception if an error occurs.",
                        "Opera Android 14 and later returns <code>null</code> if an error occurs."
                    ]
                },
                "safari": {
                    "version_added": "3.1",
                    "notes": "Safari returns <code>null</code> if an error occurs."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3",
                    "notes": "WebView returns <code>null</code> if an error occurs."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Chrome returns <code>null</code> if an error occurs."
                }
            },
            "title": "XSLTProcessor: transformToFragment() method"
        }
    ],
    "interface-xsltprocessor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XSLTProcessor.json",
            "name": "XSLTProcessor",
            "slug": "API/XSLTProcessor",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XSLTProcessor",
            "summary": "An XSLTProcessor applies an XSLT stylesheet transformation to an XML document to produce a new XML document as output. It has methods to load the XSLT stylesheet, to manipulate <xsl:param> parameter values, and to apply the transformation to documents.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XSLTProcessor"
        }
    ],
    "shadow-tree-slots": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/slot.json",
            "name": "slot",
            "slug": "HTML/Element/slot",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot",
            "summary": "The <slot> HTML element—part of the Web Components technology suite—is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<slot>: The Web Component Slot element"
        }
    ]
}
