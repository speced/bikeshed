{
    "dom-idledeadline-didtimeout": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/IdleDeadline.json",
            "name": "didTimeout",
            "slug": "API/IdleDeadline/didTimeout",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/IdleDeadline/didTimeout",
            "summary": "The read-only didTimeout property on the IdleDeadline interface is a Boolean value which indicates whether or not the idle callback is being invoked because the timeout interval specified when Window.requestIdleCallback() was called has expired.",
            "support": {
                "chrome": {
                    "version_added": "47"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "55"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "IdleDeadline.didTimeout"
        }
    ],
    "dom-idledeadline-timeremaining": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/IdleDeadline.json",
            "name": "timeRemaining",
            "slug": "API/IdleDeadline/timeRemaining",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/IdleDeadline/timeRemaining",
            "summary": "The timeRemaining() method on the IdleDeadline interface returns the estimated number of milliseconds remaining in the current idle period. The callback can call this method at any time to determine how much time it can continue to work before it must return. For example, if the callback finishes a task and has another one to begin, it can call timeRemaining() to see if there's enough time to complete the next task. If there isn't, the callback can just return immediately, or look for other work to do with the remaining time.",
            "support": {
                "chrome": {
                    "version_added": "47"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "55"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "IdleDeadline.timeRemaining()"
        }
    ],
    "the-idledeadline-interface": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/IdleDeadline.json",
            "name": "IdleDeadline",
            "slug": "API/IdleDeadline",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/IdleDeadline",
            "summary": "The IdleDeadline interface is used as the data type of the input parameter to idle callbacks established by calling Window.requestIdleCallback(). It offers a method, timeRemaining(), which lets you determine how much longer the user agent estimates it will remain idle and a property, didTimeout, which lets you determine if your callback is executing because its timeout duration expired.",
            "support": {
                "chrome": {
                    "version_added": "47"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "55"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "IdleDeadline"
        }
    ],
    "the-cancelidlecallback-method": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/Window.json",
            "name": "cancelIdleCallback",
            "slug": "API/Window/cancelIdleCallback",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelIdleCallback",
            "summary": "The window.cancelIdleCallback() method cancels a callback previously scheduled with window.requestIdleCallback().",
            "support": {
                "chrome": {
                    "version_added": "47"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "55"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "window.cancelIdleCallback()"
        }
    ],
    "the-requestidlecallback-method": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/Window.json",
            "name": "requestIdleCallback",
            "slug": "API/Window/requestIdleCallback",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback",
            "summary": "The window.requestIdleCallback() method queues a function to be called during a browser's idle periods. This enables developers to perform background and low priority work on the main event loop, without impacting latency-critical events such as animation and input response. Functions are generally called in first-in-first-out order; however, callbacks which have a timeout specified may be called out-of-order if necessary in order to run them before the timeout elapses.",
            "support": {
                "chrome": {
                    "version_added": "47"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "55"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "window.requestIdleCallback()"
        }
    ]
}
