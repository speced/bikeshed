{
    "sec-aggregate-error-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/AggregateError.json",
            "name": "AggregateError",
            "slug": "JavaScript/Reference/Global_Objects/AggregateError/AggregateError",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError/AggregateError",
            "summary": "The AggregateError() constructor creates AggregateError objects.",
            "support": {
                "chrome": {
                    "version_added": "85"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.2"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "79"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "85"
                }
            },
            "title": "AggregateError() constructor"
        }
    ],
    "sec-aggregate-error": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/AggregateError.json",
            "name": "errors",
            "slug": "JavaScript/Reference/Global_Objects/AggregateError/errors",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError/errors",
            "summary": "The errors data property of an AggregateError instance contains an array representing the errors that were aggregated.",
            "support": {
                "chrome": {
                    "version_added": "85"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.2"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "79"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "85"
                }
            },
            "title": "AggregateError: errors"
        }
    ],
    "sec-aggregate-error-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/AggregateError.json",
            "name": "AggregateError",
            "slug": "JavaScript/Reference/Global_Objects/AggregateError",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError",
            "summary": "The AggregateError object represents an error when several errors need to be wrapped in a single error. It is thrown when multiple errors need to be reported by an operation, for example by Promise.any(), when all promises passed to it reject.",
            "support": {
                "chrome": {
                    "version_added": "85"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.2"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "79"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "85"
                }
            },
            "title": "AggregateError"
        }
    ],
    "sec-array-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "Array",
            "slug": "JavaScript/Reference/Global_Objects/Array/Array",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Array",
            "summary": "The Array() constructor creates Array objects.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array() constructor"
        }
    ],
    "sec-array.prototype.at": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "at",
            "slug": "JavaScript/Reference/Global_Objects/Array/at",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/at",
            "summary": "The at() method takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the array.",
            "support": {
                "chrome": {
                    "version_added": "92"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.12"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "90"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "16.6.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "92"
                }
            },
            "title": "Array.prototype.at()"
        }
    ],
    "sec-array.prototype.concat": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "concat",
            "slug": "JavaScript/Reference/Global_Objects/Array/concat",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/concat",
            "summary": "The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.concat()"
        }
    ],
    "sec-array.prototype.copywithin": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "copyWithin",
            "slug": "JavaScript/Reference/Global_Objects/Array/copyWithin",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin",
            "summary": "The copyWithin() method shallow copies part of an array to another location in the same array and returns it without modifying its length.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "32"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.copyWithin()"
        }
    ],
    "sec-array.prototype.entries": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "entries",
            "slug": "JavaScript/Reference/Global_Objects/Array/entries",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries",
            "summary": "The entries() method returns a new array iterator object that contains the key/value pairs for each index in the array.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "28"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.entries()"
        }
    ],
    "sec-array.prototype.every": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "every",
            "slug": "JavaScript/Reference/Global_Objects/Array/every",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every",
            "summary": "The every() method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.every()"
        }
    ],
    "sec-array.prototype.fill": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "fill",
            "slug": "JavaScript/Reference/Global_Objects/Array/fill",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill",
            "summary": "The fill() method changes all elements in an array to a static value, from a start index (default 0) to an end index (default array.length). It returns the modified array.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "4.0.0"
                    },
                    {
                        "version_added": "0.12.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.fill()"
        }
    ],
    "sec-array.prototype.filter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "filter",
            "slug": "JavaScript/Reference/Global_Objects/Array/filter",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter",
            "summary": "The filter() method creates a shallow copy of a portion of a given array, filtered down to just the elements from the given array that pass the test implemented by the provided function.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.filter()"
        }
    ],
    "sec-array.prototype.find": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "find",
            "slug": "JavaScript/Reference/Global_Objects/Array/find",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find",
            "summary": "The find() method returns the first element in the provided array that satisfies the provided testing function. If no values satisfy the testing function, undefined is returned.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "4.0.0"
                    },
                    {
                        "version_added": "0.12.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "array-find",
                "title": "Array.prototype.find"
            },
            "title": "Array.prototype.find()"
        }
    ],
    "sec-array.prototype.findindex": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "findIndex",
            "slug": "JavaScript/Reference/Global_Objects/Array/findIndex",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex",
            "summary": "The findIndex() method returns the index of the first element in an array that satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "4.0.0"
                    },
                    {
                        "version_added": "0.12.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "array-find-index",
                "title": "Array.prototype.findIndex"
            },
            "title": "Array.prototype.findIndex()"
        }
    ],
    "sec-array.prototype.findlast": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "findLast",
            "slug": "JavaScript/Reference/Global_Objects/Array/findLast",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast",
            "summary": "The findLast() method iterates the array in reverse order and returns the value of the first element that satisfies the provided testing function. If no elements satisfy the testing function, undefined is returned.",
            "support": {
                "chrome": {
                    "version_added": "97"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.16"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "104"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "18.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "97"
                }
            },
            "title": "Array.prototype.findLast()"
        }
    ],
    "sec-array.prototype.findlastindex": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "findLastIndex",
            "slug": "JavaScript/Reference/Global_Objects/Array/findLastIndex",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex",
            "summary": "The findLastIndex() method iterates the array in reverse order and returns the index of the first element that satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned.",
            "support": {
                "chrome": {
                    "version_added": "97"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.16"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "104"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "18.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "97"
                }
            },
            "title": "Array.prototype.findLastIndex()"
        }
    ],
    "sec-array.prototype.flat": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "flat",
            "slug": "JavaScript/Reference/Global_Objects/Array/flat",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat",
            "summary": "The flat() method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "62"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "11.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "12"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "array-flat",
                "title": "flat & flatMap array methods"
            },
            "title": "Array.prototype.flat()"
        }
    ],
    "sec-array.prototype.flatmap": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "flatMap",
            "slug": "JavaScript/Reference/Global_Objects/Array/flatMap",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap",
            "summary": "The flatMap() method returns a new array formed by applying a given callback function to each element of the array, and then flattening the result by one level. It is identical to a map() followed by a flat() of depth 1 (arr.map(...args).flat()), but slightly more efficient than calling those two methods separately.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "62"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "11.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "12"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.flatMap()"
        }
    ],
    "sec-array.prototype.foreach": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "forEach",
            "slug": "JavaScript/Reference/Global_Objects/Array/forEach",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach",
            "summary": "The forEach() method executes a provided function once for each array element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.forEach()"
        }
    ],
    "sec-array.from": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "from",
            "slug": "JavaScript/Reference/Global_Objects/Array/from",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from",
            "summary": "The Array.from() static method creates a new, shallow-copied Array instance from an iterable or array-like object.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "32"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.from()"
        }
    ],
    "sec-array.prototype.includes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "includes",
            "slug": "JavaScript/Reference/Global_Objects/Array/includes",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes",
            "summary": "The includes() method determines whether an array includes a certain value among its entries, returning true or false as appropriate.",
            "support": {
                "chrome": {
                    "version_added": "47"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "43"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "6.0.0"
                    },
                    {
                        "version_added": "5.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "array-includes",
                "title": "Array.prototype.includes"
            },
            "title": "Array.prototype.includes()"
        }
    ],
    "sec-array.prototype.indexof": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "indexOf",
            "slug": "JavaScript/Reference/Global_Objects/Array/indexOf",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf",
            "summary": "The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.indexOf()"
        }
    ],
    "sec-array.isarray": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "isArray",
            "slug": "JavaScript/Reference/Global_Objects/Array/isArray",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray",
            "summary": "The Array.isArray() static method determines whether the passed value is an Array.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.isArray()"
        }
    ],
    "sec-array.prototype.join": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "join",
            "slug": "JavaScript/Reference/Global_Objects/Array/join",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join",
            "summary": "The join() method creates and returns a new string by concatenating all of the elements in an array (or an array-like object), separated by commas or a specified separator string. If the array has only one item, then that item will be returned without using the separator.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.join()"
        }
    ],
    "sec-array.prototype.keys": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "keys",
            "slug": "JavaScript/Reference/Global_Objects/Array/keys",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys",
            "summary": "The keys() method returns a new array iterator object that contains the keys for each index in the array.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "28"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.keys()"
        }
    ],
    "sec-array.prototype.lastindexof": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "lastIndexOf",
            "slug": "JavaScript/Reference/Global_Objects/Array/lastIndexOf",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf",
            "summary": "The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.lastIndexOf()"
        }
    ],
    "sec-properties-of-array-instances-length": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "length",
            "slug": "JavaScript/Reference/Global_Objects/Array/length",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/length",
            "summary": "The length data property of an Array instance represents the number of elements in that array. The value is an unsigned, 32-bit integer that is always numerically greater than the highest index in the array.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array: length"
        }
    ],
    "sec-array.prototype.map": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "map",
            "slug": "JavaScript/Reference/Global_Objects/Array/map",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map",
            "summary": "The map() method creates a new array populated with the results of calling a provided function on every element in the calling array.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.map()"
        }
    ],
    "sec-array.of": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "of",
            "slug": "JavaScript/Reference/Global_Objects/Array/of",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of",
            "summary": "The Array.of() static method creates a new Array instance from a variable number of arguments, regardless of number or type of the arguments.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": {
                    "version_added": "39"
                },
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "26"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.of()"
        }
    ],
    "sec-array.prototype.pop": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "pop",
            "slug": "JavaScript/Reference/Global_Objects/Array/pop",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/pop",
            "summary": "The pop() method removes the last element from an array and returns that element. This method changes the length of the array.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.pop()"
        }
    ],
    "sec-array.prototype.push": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "push",
            "slug": "JavaScript/Reference/Global_Objects/Array/push",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push",
            "summary": "The push() method adds the specified elements to the end of an array and returns the new length of the array.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.push()"
        }
    ],
    "sec-array.prototype.reduce": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "reduce",
            "slug": "JavaScript/Reference/Global_Objects/Array/reduce",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce",
            "summary": "The reduce() method executes a user-supplied \"reducer\" callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.reduce()"
        }
    ],
    "sec-array.prototype.reduceright": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "reduceRight",
            "slug": "JavaScript/Reference/Global_Objects/Array/reduceRight",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight",
            "summary": "The reduceRight() method applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.reduceRight()"
        }
    ],
    "sec-array.prototype.reverse": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "reverse",
            "slug": "JavaScript/Reference/Global_Objects/Array/reverse",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse",
            "summary": "The reverse() method reverses an array in place and returns the reference to the same array, the first array element now becoming the last, and the last array element becoming the first. In other words, elements order in the array will be turned towards the direction opposite to that previously stated.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.reverse()"
        }
    ],
    "sec-array.prototype.shift": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "shift",
            "slug": "JavaScript/Reference/Global_Objects/Array/shift",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift",
            "summary": "The shift() method removes the first element from an array and returns that removed element. This method changes the length of the array.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.shift()"
        }
    ],
    "sec-array.prototype.slice": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "slice",
            "slug": "JavaScript/Reference/Global_Objects/Array/slice",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice",
            "summary": "The slice() method returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included) where start and end represent the index of items in that array. The original array will not be modified.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.slice()"
        }
    ],
    "sec-array.prototype.some": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "some",
            "slug": "JavaScript/Reference/Global_Objects/Array/some",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some",
            "summary": "The some() method tests whether at least one element in the array passes the test implemented by the provided function. It returns true if, in the array, it finds an element for which the provided function returns true; otherwise it returns false. It doesn't modify the array.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.some()"
        }
    ],
    "sec-array.prototype.sort": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "sort",
            "slug": "JavaScript/Reference/Global_Objects/Array/sort",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort",
            "summary": "The sort() method sorts the elements of an array in place and returns the reference to the same array, now sorted. The default sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.sort()"
        }
    ],
    "sec-array.prototype.splice": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "splice",
            "slug": "JavaScript/Reference/Global_Objects/Array/splice",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice",
            "summary": "The splice() method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5",
                    "notes": "From Internet Explorer 5.5 through 8, all elements of the array will not be deleted if <code>deleteCount</code> is omitted. This behavior was fixed in Internet Explorer 9."
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.splice()"
        }
    ],
    "sec-array.prototype.tolocalestring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "toLocaleString",
            "slug": "JavaScript/Reference/Global_Objects/Array/toLocaleString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString",
            "summary": "The toLocaleString() method returns a string representing the elements of the array. The elements are converted to Strings using their toLocaleString methods and these Strings are separated by a locale-specific String (such as a comma \",\").",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.toLocaleString()"
        }
    ],
    "sec-array.prototype.toreversed": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "toReversed",
            "slug": "JavaScript/Reference/Global_Objects/Array/toReversed",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toReversed",
            "summary": "The toReversed() method of Array instances is the copying counterpart of the reverse() method. It returns a new array with the elements in reversed order.",
            "support": {
                "chrome": {
                    "version_added": "110"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.31"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "115"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "20.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "110"
                }
            },
            "title": "Array.prototype.toReversed()"
        }
    ],
    "sec-array.prototype.tosorted": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "toSorted",
            "slug": "JavaScript/Reference/Global_Objects/Array/toSorted",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSorted",
            "summary": "The toSorted() method of Array instances is the copying version of the sort() method. It returns a new array with the elements sorted in ascending order.",
            "support": {
                "chrome": {
                    "version_added": "110"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.31"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "115"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "20.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "110"
                }
            },
            "title": "Array.prototype.toSorted()"
        }
    ],
    "sec-array.prototype.tospliced": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "toSpliced",
            "slug": "JavaScript/Reference/Global_Objects/Array/toSpliced",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toSpliced",
            "summary": "The toSpliced() method of Array instances is the copying version of the splice() method. It returns a new array with some elements removed and/or replaced at a given index.",
            "support": {
                "chrome": {
                    "version_added": "110"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.31"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "115"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "20.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "110"
                }
            },
            "title": "Array.prototype.toSpliced()"
        }
    ],
    "sec-array.prototype.tostring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "toString",
            "slug": "JavaScript/Reference/Global_Objects/Array/toString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString",
            "summary": "The toString() method returns a string representing the specified array and its elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.toString()"
        }
    ],
    "sec-array.prototype.unshift": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "unshift",
            "slug": "JavaScript/Reference/Global_Objects/Array/unshift",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift",
            "summary": "The unshift() method adds the specified elements to the beginning of an array and returns the new length of the array.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.unshift()"
        }
    ],
    "sec-array.prototype.values": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "values",
            "slug": "JavaScript/Reference/Global_Objects/Array/values",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values",
            "summary": "The values() method returns a new array iterator object that iterates the value of each item in the array.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "60"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "10.9.0"
                    },
                    {
                        "version_added": "6.5.0",
                        "notes": "The <code>--harmony-array-prototype-values</code> flag is required; the <code>--harmony</code> flag is not sufficient in this case.",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony-array-prototype-values"
                            }
                        ]
                    },
                    {
                        "version_added": "0.12.0",
                        "version_removed": "4.0.0"
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype.values()"
        }
    ],
    "sec-array.prototype.with": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "with",
            "slug": "JavaScript/Reference/Global_Objects/Array/with",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/with",
            "summary": "The with() method of Array instances is the copying version of using the bracket notation to change the value of a given index. It returns a new array with the element at the given index replaced with the given value.",
            "support": {
                "chrome": {
                    "version_added": "110"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.31"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "115"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "20.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "110"
                }
            },
            "title": "Array.prototype.with()"
        }
    ],
    "sec-array.prototype-@@iterator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "@@iterator",
            "slug": "JavaScript/Reference/Global_Objects/Array/@@iterator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@iterator",
            "summary": "The [@@iterator]() method of Array instances implements the iterable protocol and allows arrays to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns an array iterator object that yields the value of each index in the array.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "36"
                    },
                    {
                        "alternative_name": "@@iterator",
                        "version_added": "27",
                        "version_removed": "36",
                        "notes": "A placeholder property named <code>@@iterator</code> is used."
                    },
                    {
                        "alternative_name": "iterator",
                        "version_added": "17",
                        "version_removed": "27",
                        "notes": "A placeholder property named <code>iterator</code> is used."
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype[@@iterator]()"
        }
    ],
    "sec-get-array-@@species": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "@@species",
            "slug": "JavaScript/Reference/Global_Objects/Array/@@species",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@species",
            "summary": "The Array[@@species] static accessor property returns the constructor used to construct return values from array methods.",
            "support": {
                "chrome": {
                    "version_added": "51"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "6.5.0"
                    },
                    {
                        "version_added": "6.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array[@@species]"
        }
    ],
    "sec-array.prototype-@@unscopables": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "@@unscopables",
            "slug": "JavaScript/Reference/Global_Objects/Array/@@unscopables",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/@@unscopables",
            "summary": "The @@unscopables data property of Array.prototype is shared by all Array instances. It contains property names that were not included in the ECMAScript standard prior to the ES2015 version and that are ignored for with statement-binding purposes.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array.prototype[@@unscopables]"
        }
    ],
    "sec-array-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Array.json",
            "name": "Array",
            "slug": "JavaScript/Reference/Global_Objects/Array",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
            "summary": "The Array object, as with arrays in other programming languages, enables storing a collection of multiple items under a single variable name, and has members for performing common array operations.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Array"
        }
    ],
    "sec-arraybuffer-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/ArrayBuffer.json",
            "name": "ArrayBuffer",
            "slug": "JavaScript/Reference/Global_Objects/ArrayBuffer/ArrayBuffer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/ArrayBuffer",
            "summary": "The ArrayBuffer() constructor creates ArrayBuffer objects.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ArrayBuffer() constructor"
        }
    ],
    "sec-get-arraybuffer.prototype.bytelength": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/ArrayBuffer.json",
            "name": "byteLength",
            "slug": "JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/byteLength",
            "summary": "The byteLength accessor property of ArrayBuffer instances returns the length (in bytes) of this array buffer.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ArrayBuffer.prototype.byteLength"
        }
    ],
    "sec-arraybuffer.isview": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/ArrayBuffer.json",
            "name": "isView",
            "slug": "JavaScript/Reference/Global_Objects/ArrayBuffer/isView",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/isView",
            "summary": "The ArrayBuffer.isView() static method determines whether the passed value is one of the ArrayBuffer views, such as typed array objects or a DataView.",
            "support": {
                "chrome": {
                    "version_added": "32"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ArrayBuffer.isView()"
        }
    ],
    "sec-arraybuffer.prototype.slice": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/ArrayBuffer.json",
            "name": "slice",
            "slug": "JavaScript/Reference/Global_Objects/ArrayBuffer/slice",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/slice",
            "summary": "The slice() method returns a new ArrayBuffer whose contents are a copy of this ArrayBuffer's bytes from begin, inclusive, up to end, exclusive.",
            "support": {
                "chrome": {
                    "version_added": "17"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "12",
                    "notes": "The non-standard <code>ArrayBuffer.slice()</code> method has been removed in Firefox 53 (but the standardized version <code>ArrayBuffer.prototype.slice()</code> is kept."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ArrayBuffer.prototype.slice()"
        }
    ],
    "sec-get-arraybuffer-@@species": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/ArrayBuffer.json",
            "name": "@@species",
            "slug": "JavaScript/Reference/Global_Objects/ArrayBuffer/@@species",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/@@species",
            "summary": "The ArrayBuffer[@@species] static accessor property returns the constructor used to construct return values from array buffer methods.",
            "support": {
                "chrome": {
                    "version_added": "51"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "6.5.0"
                    },
                    {
                        "version_added": "6.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ArrayBuffer[@@species]"
        }
    ],
    "sec-arraybuffer-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/ArrayBuffer.json",
            "name": "ArrayBuffer",
            "slug": "JavaScript/Reference/Global_Objects/ArrayBuffer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
            "summary": "The ArrayBuffer object is used to represent a generic raw binary data buffer.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ArrayBuffer"
        }
    ],
    "sec-async-function-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/AsyncFunction.json",
            "name": "AsyncFunction",
            "slug": "JavaScript/Reference/Global_Objects/AsyncFunction/AsyncFunction",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction/AsyncFunction",
            "summary": "The AsyncFunction() constructor creates AsyncFunction objects.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "7.6.0"
                    },
                    {
                        "version_added": "7.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AsyncFunction() constructor"
        }
    ],
    "sec-async-function-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/AsyncFunction.json",
            "name": "AsyncFunction",
            "slug": "JavaScript/Reference/Global_Objects/AsyncFunction",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction",
            "summary": "The AsyncFunction object provides methods for async functions. In JavaScript, every async function is actually an AsyncFunction object.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "7.6.0"
                    },
                    {
                        "version_added": "7.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AsyncFunction"
        }
    ],
    "sec-asyncgenerator-prototype-next": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/AsyncGenerator.json",
            "name": "next",
            "slug": "JavaScript/Reference/Global_Objects/AsyncGenerator/next",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/next",
            "summary": "The next() method returns the next value in the sequence.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "55"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "10.0.0"
                    },
                    {
                        "version_added": "8.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "12"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AsyncGenerator.prototype.next()"
        }
    ],
    "sec-asyncgenerator-prototype-return": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/AsyncGenerator.json",
            "name": "return",
            "slug": "JavaScript/Reference/Global_Objects/AsyncGenerator/return",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/return",
            "summary": "The return() method of AsyncGenerator instances acts as if a return statement is inserted in the generator's body at the current suspended position, which finishes the generator and allows the generator to perform any cleanup tasks when combined with a try...finally block.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "55"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "10.0.0"
                    },
                    {
                        "version_added": "8.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "12"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AsyncGenerator.prototype.return()"
        }
    ],
    "sec-asyncgenerator-prototype-throw": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/AsyncGenerator.json",
            "name": "throw",
            "slug": "JavaScript/Reference/Global_Objects/AsyncGenerator/throw",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator/throw",
            "summary": "The throw() method of AsyncGenerator instances acts as if a throw statement is inserted in the generator's body at the current suspended position, which informs the generator of an error condition and allows it to handle the error, or perform cleanup and close itself.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "55"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "10.0.0"
                    },
                    {
                        "version_added": "8.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "12"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AsyncGenerator.prototype.throw()"
        }
    ],
    "sec-asyncgenerator-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/AsyncGenerator.json",
            "name": "AsyncGenerator",
            "slug": "JavaScript/Reference/Global_Objects/AsyncGenerator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator",
            "summary": "The AsyncGenerator object is returned by an async generator function and it conforms to both the async iterable protocol and the async iterator protocol.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "55"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "10.0.0"
                    },
                    {
                        "version_added": "8.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "12"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AsyncGenerator"
        }
    ],
    "sec-asyncgeneratorfunction-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/AsyncGeneratorFunction.json",
            "name": "AsyncGeneratorFunction",
            "slug": "JavaScript/Reference/Global_Objects/AsyncGeneratorFunction/AsyncGeneratorFunction",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction/AsyncGeneratorFunction",
            "summary": "The AsyncGeneratorFunction() constructor creates AsyncGeneratorFunction objects.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "55"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "10.0.0"
                    },
                    {
                        "version_added": "8.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "12"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AsyncGeneratorFunction() constructor"
        }
    ],
    "sec-asyncgeneratorfunction-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/AsyncGeneratorFunction.json",
            "name": "AsyncGeneratorFunction",
            "slug": "JavaScript/Reference/Global_Objects/AsyncGeneratorFunction",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGeneratorFunction",
            "summary": "The AsyncGeneratorFunction object provides methods for async generator functions. In JavaScript, every async generator function is actually an AsyncGeneratorFunction object.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "55"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "10.0.0"
                    },
                    {
                        "version_added": "8.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "12"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AsyncGeneratorFunction"
        }
    ],
    "sec-asynciteratorprototype-asynciterator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/AsyncIterator.json",
            "name": "@@asyncIterator",
            "slug": "JavaScript/Reference/Global_Objects/AsyncIterator/@@asyncIterator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator/@@asyncIterator",
            "summary": "The [@@asyncIterator]() method of AsyncIterator instances implements the async iterable protocol and allows built-in async iterators to be consumed by most syntaxes expecting async iterables, such as for await...of loops. It returns the value of this, which is the async iterator object itself.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "10.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AsyncIterator.prototype[@@asyncIterator]()"
        }
    ],
    "sec-asynciteratorprototype": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/AsyncIterator.json",
            "name": "AsyncIterator",
            "slug": "JavaScript/Reference/Global_Objects/AsyncIterator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncIterator",
            "summary": "An AsyncIterator object is an object that conforms to the async iterator protocol by providing a next() method that returns a promise fulfilling to an iterator result object. The AsyncIterator.prototype object is a hidden global object that all built-in async iterators inherit from. It provides an @@asyncIterator method that returns the async iterator object itself, making the async iterator also async iterable.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "10.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AsyncIterator"
        }
    ],
    "sec-atomics.add": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Atomics.json",
            "name": "add",
            "slug": "JavaScript/Reference/Global_Objects/Atomics/add",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/add",
            "summary": "The Atomics.add() static method adds a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": {
                    "version_added": "89"
                },
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "78"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.10.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Atomics.add()"
        }
    ],
    "sec-atomics.and": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Atomics.json",
            "name": "and",
            "slug": "JavaScript/Reference/Global_Objects/Atomics/and",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/and",
            "summary": "The Atomics.and() static method computes a bitwise AND with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": {
                    "version_added": "89"
                },
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "78"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.10.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Atomics.and()"
        }
    ],
    "sec-atomics.compareexchange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Atomics.json",
            "name": "compareExchange",
            "slug": "JavaScript/Reference/Global_Objects/Atomics/compareExchange",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/compareExchange",
            "summary": "The Atomics.compareExchange() static method exchanges a given replacement value at a given position in the array, if a given expected value equals the old value. It returns the old value at that position whether it was equal to the expected value or not. This atomic operation guarantees that no other write happens until the modified value is written back.",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": {
                    "version_added": "89"
                },
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "78"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.10.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Atomics.compareExchange()"
        }
    ],
    "sec-atomics.exchange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Atomics.json",
            "name": "exchange",
            "slug": "JavaScript/Reference/Global_Objects/Atomics/exchange",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/exchange",
            "summary": "The Atomics.exchange() static method stores a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens between the read of the old value and the write of the new value.",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": {
                    "version_added": "89"
                },
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "78"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.10.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Atomics.exchange()"
        }
    ],
    "sec-atomics.islockfree": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Atomics.json",
            "name": "isLockFree",
            "slug": "JavaScript/Reference/Global_Objects/Atomics/isLockFree",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/isLockFree",
            "summary": "The Atomics.isLockFree() static method is used to determine whether the Atomics methods use locks or atomic hardware operations when applied to typed arrays with the given element byte size. It returns false if the given size is not one of the BYTES_PER_ELEMENT property of integer TypedArray types.",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": {
                    "version_added": "89"
                },
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "78"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.10.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Atomics.isLockFree()"
        }
    ],
    "sec-atomics.load": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Atomics.json",
            "name": "load",
            "slug": "JavaScript/Reference/Global_Objects/Atomics/load",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/load",
            "summary": "The Atomics.load() static method returns a value at a given position in the array.",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": {
                    "version_added": "89"
                },
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "78"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.10.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Atomics.load()"
        }
    ],
    "sec-atomics.notify": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Atomics.json",
            "name": "notify",
            "slug": "JavaScript/Reference/Global_Objects/Atomics/notify",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/notify",
            "summary": "The Atomics.notify() static method notifies up some agents that are sleeping in the wait queue.",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": {
                    "version_added": "89"
                },
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "78"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.10.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Atomics.notify()"
        }
    ],
    "sec-atomics.or": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Atomics.json",
            "name": "or",
            "slug": "JavaScript/Reference/Global_Objects/Atomics/or",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/or",
            "summary": "The Atomics.or() static method computes a bitwise OR with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": {
                    "version_added": "89"
                },
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "78"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.10.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Atomics.or()"
        }
    ],
    "sec-atomics.store": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Atomics.json",
            "name": "store",
            "slug": "JavaScript/Reference/Global_Objects/Atomics/store",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/store",
            "summary": "The Atomics.store() static method stores a given value at the given position in the array and returns that value.",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": {
                    "version_added": "89"
                },
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "78"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.10.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Atomics.store()"
        }
    ],
    "sec-atomics.sub": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Atomics.json",
            "name": "sub",
            "slug": "JavaScript/Reference/Global_Objects/Atomics/sub",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/sub",
            "summary": "The Atomics.sub() static method subtracts a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": {
                    "version_added": "89"
                },
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "78"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.10.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Atomics.sub()"
        }
    ],
    "sec-atomics.wait": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Atomics.json",
            "name": "wait",
            "slug": "JavaScript/Reference/Global_Objects/Atomics/wait",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/wait",
            "summary": "The Atomics.wait() static method verifies that a shared memory location still contains a given value and if so sleeps, awaiting a wake-up notification or times out. It returns a string which is either \"ok\", \"not-equal\", or \"timed-out\".",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": {
                    "version_added": "89"
                },
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "78"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.10.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Atomics.wait()"
        }
    ],
    "sec-atomics.waitasync": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "javascript/builtins/Atomics.json",
            "name": "waitAsync",
            "slug": "JavaScript/Reference/Global_Objects/Atomics/waitAsync",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/waitAsync",
            "summary": "The Atomics.waitAsync() static method waits asynchronously on a shared memory location and returns a Promise.",
            "support": {
                "chrome": {
                    "version_added": "87"
                },
                "chrome_android": {
                    "version_added": "89"
                },
                "deno": {
                    "version_added": "1.4"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "16.0.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "75"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "87"
                }
            },
            "title": "Atomics.waitAsync()"
        }
    ],
    "sec-atomics.xor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Atomics.json",
            "name": "xor",
            "slug": "JavaScript/Reference/Global_Objects/Atomics/xor",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics/xor",
            "summary": "The Atomics.xor() static method computes a bitwise XOR with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": {
                    "version_added": "89"
                },
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "78"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.10.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Atomics.xor()"
        }
    ],
    "sec-atomics-object": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Atomics.json",
            "name": "Atomics",
            "slug": "JavaScript/Reference/Global_Objects/Atomics",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Atomics",
            "summary": "The Atomics namespace object contains static methods for carrying out atomic operations. They are used with SharedArrayBuffer and ArrayBuffer objects.",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": {
                    "version_added": "89"
                },
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "78"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.10.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.2",
                    "notes": "Before Safari 16.4, <code>Atomics</code> is gated behind COOP/COEP. For more detail, read <a href='https://web.dev/coop-coep/'>Making your website \"cross-origin isolated\" using COOP and COEP</a>."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Atomics"
        }
    ],
    "sec-bigint-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/BigInt.json",
            "name": "BigInt",
            "slug": "JavaScript/Reference/Global_Objects/BigInt/BigInt",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/BigInt",
            "summary": "The BigInt() function returns primitive values of type BigInt.",
            "support": {
                "chrome": {
                    "version_added": "67"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "68"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "10.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BigInt() constructor"
        }
    ],
    "sec-bigint.asintn": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/BigInt.json",
            "name": "asIntN",
            "slug": "JavaScript/Reference/Global_Objects/BigInt/asIntN",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asIntN",
            "summary": "The BigInt.asIntN() static method truncates a BigInt value to the given number of least significant bits and returns that value as a signed integer.",
            "support": {
                "chrome": {
                    "version_added": "67"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "68"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "10.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BigInt.asIntN()"
        }
    ],
    "sec-bigint.asuintn": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/BigInt.json",
            "name": "asUintN",
            "slug": "JavaScript/Reference/Global_Objects/BigInt/asUintN",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asUintN",
            "summary": "The BigInt.asUintN() static method truncates a BigInt value to the given number of least significant bits and returns that value as an unsigned integer.",
            "support": {
                "chrome": {
                    "version_added": "67"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "68"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "10.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BigInt.asUintN()"
        }
    ],
    "sec-bigint.prototype.tostring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/BigInt.json",
            "name": "toString",
            "slug": "JavaScript/Reference/Global_Objects/BigInt/toString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/toString",
            "summary": "The toString() method returns a string representing the specified BigInt value. The trailing \"n\" is not part of the string.",
            "support": {
                "chrome": {
                    "version_added": "67"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "68"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "10.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BigInt.prototype.toString()"
        }
    ],
    "sec-bigint.prototype.valueof": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/BigInt.json",
            "name": "valueOf",
            "slug": "JavaScript/Reference/Global_Objects/BigInt/valueOf",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/valueOf",
            "summary": "The valueOf() method returns the wrapped primitive value of a BigInt object.",
            "support": {
                "chrome": {
                    "version_added": "67"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "68"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "10.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BigInt.prototype.valueOf()"
        }
    ],
    "sec-bigint-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/BigInt.json",
            "name": "BigInt",
            "slug": "JavaScript/Reference/Global_Objects/BigInt",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt",
            "summary": "BigInt values represent numeric values which are too large to be represented by the number primitive.",
            "support": {
                "chrome": {
                    "version_added": "67"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "68"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "10.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "bigint",
                "title": "BigInt"
            },
            "title": "BigInt"
        }
    ],
    "sec-typedarray-constructors": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/BigInt64Array.json",
            "name": "BigInt64Array",
            "slug": "JavaScript/Reference/Global_Objects/BigInt64Array/BigInt64Array",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array/BigInt64Array",
            "summary": "The BigInt64Array() constructor creates BigInt64Array objects. The contents are initialized to 0n.",
            "support": {
                "chrome": {
                    "version_added": "67"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "68"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "10.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BigInt64Array() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/BigUint64Array.json",
            "name": "BigUint64Array",
            "slug": "JavaScript/Reference/Global_Objects/BigUint64Array/BigUint64Array",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array/BigUint64Array",
            "summary": "The BigUint64Array() constructor creates BigUint64Array objects. The contents are initialized to 0n.",
            "support": {
                "chrome": {
                    "version_added": "67"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "68"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "10.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BigUint64Array() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Float32Array.json",
            "name": "Float32Array",
            "slug": "JavaScript/Reference/Global_Objects/Float32Array/Float32Array",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array/Float32Array",
            "summary": "The Float32Array() constructor creates Float32Array objects. The contents are initialized to 0.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Float32Array() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Float64Array.json",
            "name": "Float64Array",
            "slug": "JavaScript/Reference/Global_Objects/Float64Array/Float64Array",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array/Float64Array",
            "summary": "The Float64Array() constructor creates Float64Array objects. The contents are initialized to 0.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Float64Array() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Int16Array.json",
            "name": "Int16Array",
            "slug": "JavaScript/Reference/Global_Objects/Int16Array/Int16Array",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array/Int16Array",
            "summary": "The Int16Array() constructor creates Int16Array objects. The contents are initialized to 0.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Int16Array() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Int32Array.json",
            "name": "Int32Array",
            "slug": "JavaScript/Reference/Global_Objects/Int32Array/Int32Array",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array/Int32Array",
            "summary": "The Int32Array() constructor creates Int32Array objects. The contents are initialized to 0.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Int32Array() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Int8Array.json",
            "name": "Int8Array",
            "slug": "JavaScript/Reference/Global_Objects/Int8Array/Int8Array",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array/Int8Array",
            "summary": "The Int8Array() constructor creates Int8Array objects. The contents are initialized to 0.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Int8Array() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Uint16Array.json",
            "name": "Uint16Array",
            "slug": "JavaScript/Reference/Global_Objects/Uint16Array/Uint16Array",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array/Uint16Array",
            "summary": "The Uint16Array() constructor creates Uint16Array objects. The contents are initialized to 0.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Uint16Array() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Uint32Array.json",
            "name": "Uint32Array",
            "slug": "JavaScript/Reference/Global_Objects/Uint32Array/Uint32Array",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array/Uint32Array",
            "summary": "The Uint32Array() constructor creates Uint32Array objects. The contents are initialized to 0.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Uint32Array() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Uint8Array.json",
            "name": "Uint8Array",
            "slug": "JavaScript/Reference/Global_Objects/Uint8Array/Uint8Array",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array/Uint8Array",
            "summary": "The Uint8Array() constructor creates Uint8Array objects. The contents are initialized to 0.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Uint8Array() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Uint8ClampedArray.json",
            "name": "Uint8ClampedArray",
            "slug": "JavaScript/Reference/Global_Objects/Uint8ClampedArray/Uint8ClampedArray",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray/Uint8ClampedArray",
            "summary": "The Uint8ClampedArray() constructor creates Uint8ClampedArray objects. The contents are initialized to 0.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Uint8ClampedArray() constructor"
        }
    ],
    "sec-typedarray-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/BigInt64Array.json",
            "name": "BigInt64Array",
            "slug": "JavaScript/Reference/Global_Objects/BigInt64Array",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array",
            "summary": "The BigInt64Array typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object's methods, or by using standard array index syntax (that is, using bracket notation).",
            "support": {
                "chrome": {
                    "version_added": "67"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "68"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "10.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "typedarrays",
                "title": "Typed Arrays"
            },
            "title": "BigInt64Array"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/BigUint64Array.json",
            "name": "BigUint64Array",
            "slug": "JavaScript/Reference/Global_Objects/BigUint64Array",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array",
            "summary": "The BigUint64Array typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0n. Once established, you can reference elements in the array using the object's methods, or by using standard array index syntax (that is, using bracket notation).",
            "support": {
                "chrome": {
                    "version_added": "67"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "68"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "10.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "typedarrays",
                "title": "Typed Arrays"
            },
            "title": "BigUint64Array"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "TypedArray",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray",
            "summary": "A TypedArray object describes an array-like view of an underlying binary data buffer. There is no global property named TypedArray, nor is there a directly visible TypedArray constructor. Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "typedarrays",
                "title": "Typed Arrays"
            },
            "title": "TypedArray"
        }
    ],
    "sec-boolean-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Boolean.json",
            "name": "Boolean",
            "slug": "JavaScript/Reference/Global_Objects/Boolean/Boolean",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/Boolean",
            "summary": "The Boolean() constructor creates Boolean objects. When called as a function, it returns primitive values of type Boolean.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Boolean() constructor"
        }
    ],
    "sec-boolean.prototype.tostring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Boolean.json",
            "name": "toString",
            "slug": "JavaScript/Reference/Global_Objects/Boolean/toString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/toString",
            "summary": "The toString() method returns a string representing the specified boolean value.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Boolean.prototype.toString()"
        }
    ],
    "sec-boolean.prototype.valueof": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Boolean.json",
            "name": "valueOf",
            "slug": "JavaScript/Reference/Global_Objects/Boolean/valueOf",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean/valueOf",
            "summary": "The valueOf() method returns the primitive value of a Boolean object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Boolean.prototype.valueOf()"
        }
    ],
    "sec-boolean-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Boolean.json",
            "name": "Boolean",
            "slug": "JavaScript/Reference/Global_Objects/Boolean",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
            "summary": "The Boolean object represents a truth value: true or false.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Boolean"
        }
    ],
    "sec-dataview-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "DataView",
            "slug": "JavaScript/Reference/Global_Objects/DataView/DataView",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/DataView",
            "summary": "The DataView() constructor creates DataView objects.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView() constructor"
        }
    ],
    "sec-get-dataview.prototype.buffer": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "buffer",
            "slug": "JavaScript/Reference/Global_Objects/DataView/buffer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/buffer",
            "summary": "The buffer accessor property of DataView instances returns the ArrayBuffer or SharedArrayBuffer referenced by this view at construction time.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView.prototype.buffer"
        }
    ],
    "sec-get-dataview.prototype.bytelength": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "byteLength",
            "slug": "JavaScript/Reference/Global_Objects/DataView/byteLength",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteLength",
            "summary": "The byteLength accessor property of DataView instances returns the length (in bytes) of this view.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView.prototype.byteLength"
        }
    ],
    "sec-get-dataview.prototype.byteoffset": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "byteOffset",
            "slug": "JavaScript/Reference/Global_Objects/DataView/byteOffset",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/byteOffset",
            "summary": "The byteOffset accessor property of DataView instances returns the offset (in bytes) of this view from the start of its ArrayBuffer or SharedArrayBuffer.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView.prototype.byteOffset"
        }
    ],
    "sec-dataview.prototype.getbigint64": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "getBigInt64",
            "slug": "JavaScript/Reference/Global_Objects/DataView/getBigInt64",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getBigInt64",
            "summary": "The getBigInt64() method of DataView instances reads 8 bytes starting at the specified byte offset of this DataView and interprets them as a 64-bit signed integer.",
            "support": {
                "chrome": {
                    "version_added": "67"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "68"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "10.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView.prototype.getBigInt64()"
        }
    ],
    "sec-dataview.prototype.getbiguint64": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "getBigUint64",
            "slug": "JavaScript/Reference/Global_Objects/DataView/getBigUint64",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getBigUint64",
            "summary": "The getBigUint64() method of DataView instances reads 8 bytes starting at the specified byte offset of this DataView and interprets them as a 64-bit unsigned integer.",
            "support": {
                "chrome": {
                    "version_added": "67"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "68"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "10.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView.prototype.getBigUint64()"
        }
    ],
    "sec-dataview.prototype.getfloat32": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "getFloat32",
            "slug": "JavaScript/Reference/Global_Objects/DataView/getFloat32",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat32",
            "summary": "The getFloat32() method of DataView instances reads 4 bytes starting at the specified byte offset of this DataView and interprets them as a 32-bit float.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView.prototype.getFloat32()"
        }
    ],
    "sec-dataview.prototype.getfloat64": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "getFloat64",
            "slug": "JavaScript/Reference/Global_Objects/DataView/getFloat64",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getFloat64",
            "summary": "The getFloat64() method of DataView instances reads 8 bytes starting at the specified byte offset of this DataView and interprets them as a 64-bit float.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView.prototype.getFloat64()"
        }
    ],
    "sec-dataview.prototype.getint16": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "getInt16",
            "slug": "JavaScript/Reference/Global_Objects/DataView/getInt16",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt16",
            "summary": "The getInt16() method of DataView instances reads 2 bytes starting at the specified byte offset of this DataView and interprets them as a 16-bit signed integer.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView.prototype.getInt16()"
        }
    ],
    "sec-dataview.prototype.getint32": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "getInt32",
            "slug": "JavaScript/Reference/Global_Objects/DataView/getInt32",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt32",
            "summary": "The getInt32() method of DataView instances reads 4 bytes starting at the specified byte offset of this DataView and interprets them as a 32-bit signed integer.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView.prototype.getInt32()"
        }
    ],
    "sec-dataview.prototype.getint8": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "getInt8",
            "slug": "JavaScript/Reference/Global_Objects/DataView/getInt8",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt8",
            "summary": "The getInt8() method of DataView instances reads 1 byte at the specified byte offset of this DataView and interprets it as an 8-bit signed integer.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView.prototype.getInt8()"
        }
    ],
    "sec-dataview.prototype.getuint16": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "getUint16",
            "slug": "JavaScript/Reference/Global_Objects/DataView/getUint16",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint16",
            "summary": "The getUint16() method of DataView instances reads 2 bytes starting at the specified byte offset of this DataView and interprets them as a 16-bit unsigned integer.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView.prototype.getUint16()"
        }
    ],
    "sec-dataview.prototype.getuint32": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "getUint32",
            "slug": "JavaScript/Reference/Global_Objects/DataView/getUint32",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint32",
            "summary": "The getUint32() method of DataView instances reads 4 bytes starting at the specified byte offset of this DataView and interprets them as a 32-bit unsigned integer.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView.prototype.getUint32()"
        }
    ],
    "sec-dataview.prototype.getuint8": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "getUint8",
            "slug": "JavaScript/Reference/Global_Objects/DataView/getUint8",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getUint8",
            "summary": "The getUint8() method of DataView instances reads 1 byte at the specified byte offset of this DataView and interprets it as an 8-bit unsigned integer.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView.prototype.getUint8()"
        }
    ],
    "sec-dataview.prototype.setbigint64": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "setBigInt64",
            "slug": "JavaScript/Reference/Global_Objects/DataView/setBigInt64",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigInt64",
            "summary": "The setBigInt64() method of DataView instances takes a BigInt and stores it as a 64-bit signed integer in the 8 bytes starting at the specified byte offset of this DataView.",
            "support": {
                "chrome": {
                    "version_added": "67"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "68"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "10.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView.prototype.setBigInt64()"
        }
    ],
    "sec-dataview.prototype.setbiguint64": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "setBigUint64",
            "slug": "JavaScript/Reference/Global_Objects/DataView/setBigUint64",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setBigUint64",
            "summary": "The setBigUint64() method of DataView instances takes a BigInt and stores it as a 64-bit unsigned integer in the 8 bytes starting at the specified byte offset of this DataView.",
            "support": {
                "chrome": {
                    "version_added": "67"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "68"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "10.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView.prototype.setBigUint64()"
        }
    ],
    "sec-dataview.prototype.setfloat32": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "setFloat32",
            "slug": "JavaScript/Reference/Global_Objects/DataView/setFloat32",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat32",
            "summary": "The setFloat32() method of DataView instances takes a number and stores it as a 32-bit float in the 4 bytes starting at the specified byte offset of this DataView.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView.prototype.setFloat32()"
        }
    ],
    "sec-dataview.prototype.setfloat64": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "setFloat64",
            "slug": "JavaScript/Reference/Global_Objects/DataView/setFloat64",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setFloat64",
            "summary": "The setFloat64() method of DataView instances takes a number and stores it as a 64-bit float in the 8 bytes starting at the specified byte offset of this DataView.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView.prototype.setFloat64()"
        }
    ],
    "sec-dataview.prototype.setint16": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "setInt16",
            "slug": "JavaScript/Reference/Global_Objects/DataView/setInt16",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt16",
            "summary": "The setInt16() method of DataView instances takes a number and stores it as a 16-bit signed integer in the 2 bytes at the specified byte offset of this DataView.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView.prototype.setInt16()"
        }
    ],
    "sec-dataview.prototype.setint32": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "setInt32",
            "slug": "JavaScript/Reference/Global_Objects/DataView/setInt32",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt32",
            "summary": "The setInt32() method of DataView instances takes a number and stores it as a 32-bit signed integer in the 4 bytes at the specified byte offset of this DataView.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView.prototype.setInt32()"
        }
    ],
    "sec-dataview.prototype.setint8": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "setInt8",
            "slug": "JavaScript/Reference/Global_Objects/DataView/setInt8",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setInt8",
            "summary": "The setInt8() method of DataView instances takes a number and stores it as an 8-bit signed integer in the byte at the specified byte offset of this DataView.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView.prototype.setInt8()"
        }
    ],
    "sec-dataview.prototype.setuint16": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "setUint16",
            "slug": "JavaScript/Reference/Global_Objects/DataView/setUint16",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint16",
            "summary": "The setUint16() method of DataView instances takes a number and stores it as a 16-bit unsigned integer in the 2 bytes at the specified byte offset of this DataView.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView.prototype.setUint16()"
        }
    ],
    "sec-dataview.prototype.setuint32": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "setUint32",
            "slug": "JavaScript/Reference/Global_Objects/DataView/setUint32",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint32",
            "summary": "The setUint32() method of DataView instances takes a number and stores it as a 32-bit unsigned integer in the 4 bytes at the specified byte offset of this DataView.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView.prototype.setUint32()"
        }
    ],
    "sec-dataview.prototype.setuint8": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "setUint8",
            "slug": "JavaScript/Reference/Global_Objects/DataView/setUint8",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/setUint8",
            "summary": "The setUint8() method of DataView instances takes a number and stores it as an 8-bit unsigned integer in the byte at the specified byte offset of this DataView.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView.prototype.setUint8()"
        }
    ],
    "sec-dataview-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/DataView.json",
            "name": "DataView",
            "slug": "JavaScript/Reference/Global_Objects/DataView",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
            "summary": "The DataView view provides a low-level interface for reading and writing multiple number types in a binary ArrayBuffer, without having to care about the platform's endianness.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataView"
        }
    ],
    "sec-date-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "Date",
            "slug": "JavaScript/Reference/Global_Objects/Date/Date",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date",
            "summary": "The Date() constructor creates Date objects. When called as a function, it returns a string representing the current time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date() constructor"
        }
    ],
    "sec-date.utc": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "UTC",
            "slug": "JavaScript/Reference/Global_Objects/Date/UTC",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC",
            "summary": "The Date.UTC() static method accepts parameters representing the date and time components similar to the Date constructor, but treats them as UTC. It returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.UTC()"
        }
    ],
    "sec-date.prototype.getdate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "getDate",
            "slug": "JavaScript/Reference/Global_Objects/Date/getDate",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate",
            "summary": "The getDate() method of Date instances returns the day of the month for this date according to local time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.getDate()"
        }
    ],
    "sec-date.prototype.getday": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "getDay",
            "slug": "JavaScript/Reference/Global_Objects/Date/getDay",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay",
            "summary": "The getDay() method of Date instances returns the day of the week for this date according to local time, where 0 represents Sunday. For the day of the month, see Date.prototype.getDate().",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.getDay()"
        }
    ],
    "sec-date.prototype.getfullyear": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "getFullYear",
            "slug": "JavaScript/Reference/Global_Objects/Date/getFullYear",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear",
            "summary": "The getFullYear() method of Date instances returns the year for this date according to local time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.getFullYear()"
        }
    ],
    "sec-date.prototype.gethours": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "getHours",
            "slug": "JavaScript/Reference/Global_Objects/Date/getHours",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours",
            "summary": "The getHours() method of Date instances returns the hours for this date according to local time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.getHours()"
        }
    ],
    "sec-date.prototype.getmilliseconds": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "getMilliseconds",
            "slug": "JavaScript/Reference/Global_Objects/Date/getMilliseconds",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds",
            "summary": "The getMilliseconds() method of Date instances returns the milliseconds for this date according to local time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.getMilliseconds()"
        }
    ],
    "sec-date.prototype.getminutes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "getMinutes",
            "slug": "JavaScript/Reference/Global_Objects/Date/getMinutes",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes",
            "summary": "The getMinutes() method of Date instances returns the minutes for this date according to local time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.getMinutes()"
        }
    ],
    "sec-date.prototype.getmonth": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "getMonth",
            "slug": "JavaScript/Reference/Global_Objects/Date/getMonth",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth",
            "summary": "The getMonth() method of Date instances returns the month for this date according to local time, as a zero-based value (where zero indicates the first month of the year).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.getMonth()"
        }
    ],
    "sec-date.prototype.getseconds": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "getSeconds",
            "slug": "JavaScript/Reference/Global_Objects/Date/getSeconds",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds",
            "summary": "The getSeconds() method of Date instances returns the seconds for this date according to local time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.getSeconds()"
        }
    ],
    "sec-date.prototype.gettime": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "getTime",
            "slug": "JavaScript/Reference/Global_Objects/Date/getTime",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime",
            "summary": "The getTime() method of Date instances returns the number of milliseconds for this date since the epoch, which is defined as the midnight at the beginning of January 1, 1970, UTC.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.getTime()"
        }
    ],
    "sec-date.prototype.gettimezoneoffset": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "getTimezoneOffset",
            "slug": "JavaScript/Reference/Global_Objects/Date/getTimezoneOffset",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset",
            "summary": "The getTimezoneOffset() method of Date instances returns the difference, in minutes, between this date as evaluated in the UTC time zone, and the same date as evaluated in the local time zone.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.getTimezoneOffset()"
        }
    ],
    "sec-date.prototype.getutcdate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "getUTCDate",
            "slug": "JavaScript/Reference/Global_Objects/Date/getUTCDate",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDate",
            "summary": "The getUTCDate() method of Date instances returns the day of the month for this date according to universal time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.getUTCDate()"
        }
    ],
    "sec-date.prototype.getutcday": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "getUTCDay",
            "slug": "JavaScript/Reference/Global_Objects/Date/getUTCDay",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCDay",
            "summary": "The getUTCDay() method of Date instances returns the day of the week for this date according to universal time, where 0 represents Sunday.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.getUTCDay()"
        }
    ],
    "sec-date.prototype.getutcfullyear": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "getUTCFullYear",
            "slug": "JavaScript/Reference/Global_Objects/Date/getUTCFullYear",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCFullYear",
            "summary": "The getUTCFullYear() method of Date instances returns the year for this date according to universal time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.getUTCFullYear()"
        }
    ],
    "sec-date.prototype.getutchours": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "getUTCHours",
            "slug": "JavaScript/Reference/Global_Objects/Date/getUTCHours",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCHours",
            "summary": "The getUTCHours() method of Date instances returns the hours for this date according to universal time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.getUTCHours()"
        }
    ],
    "sec-date.prototype.getutcmilliseconds": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "getUTCMilliseconds",
            "slug": "JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMilliseconds",
            "summary": "The getUTCMilliseconds() method of Date instances returns the milliseconds for this date according to universal time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.getUTCMilliseconds()"
        }
    ],
    "sec-date.prototype.getutcminutes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "getUTCMinutes",
            "slug": "JavaScript/Reference/Global_Objects/Date/getUTCMinutes",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMinutes",
            "summary": "The getUTCMinutes() method of Date instances returns the minutes for this date according to universal time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.getUTCMinutes()"
        }
    ],
    "sec-date.prototype.getutcmonth": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "getUTCMonth",
            "slug": "JavaScript/Reference/Global_Objects/Date/getUTCMonth",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCMonth",
            "summary": "The getUTCMonth() method of Date instances returns the month for this date according to universal time, as a zero-based value (where zero indicates the first month of the year).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.getUTCMonth()"
        }
    ],
    "sec-date.prototype.getutcseconds": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "getUTCSeconds",
            "slug": "JavaScript/Reference/Global_Objects/Date/getUTCSeconds",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getUTCSeconds",
            "summary": "The getUTCSeconds() method of Date instances returns the seconds in the specified date according to universal time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.getUTCSeconds()"
        }
    ],
    "sec-date.now": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "now",
            "slug": "JavaScript/Reference/Global_Objects/Date/now",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now",
            "summary": "The Date.now() static method returns the number of milliseconds elapsed since the epoch, which is defined as the midnight at the beginning of January 1, 1970, UTC.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.now()"
        }
    ],
    "sec-date.parse": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "parse",
            "slug": "JavaScript/Reference/Global_Objects/Date/parse",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse",
            "summary": "The Date.parse() static method parses a string representation of a date, and returns the date's timestamp.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.parse()"
        }
    ],
    "sec-date.prototype.setdate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "setDate",
            "slug": "JavaScript/Reference/Global_Objects/Date/setDate",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate",
            "summary": "The setDate() method of Date instances changes the day of the month for this date according to local time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.setDate()"
        }
    ],
    "sec-date.prototype.setfullyear": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "setFullYear",
            "slug": "JavaScript/Reference/Global_Objects/Date/setFullYear",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear",
            "summary": "The setFullYear() method of Date instances changes the year, month, and/or day of month for this date according to local time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.setFullYear()"
        }
    ],
    "sec-date.prototype.sethours": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "setHours",
            "slug": "JavaScript/Reference/Global_Objects/Date/setHours",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours",
            "summary": "The setHours() method of Date instances changes the hours, minutes, seconds, and/or milliseconds for this date according to local time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.setHours()"
        }
    ],
    "sec-date.prototype.setmilliseconds": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "setMilliseconds",
            "slug": "JavaScript/Reference/Global_Objects/Date/setMilliseconds",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds",
            "summary": "The setMilliseconds() method of Date instances changes the milliseconds for this date according to local time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.setMilliseconds()"
        }
    ],
    "sec-date.prototype.setminutes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "setMinutes",
            "slug": "JavaScript/Reference/Global_Objects/Date/setMinutes",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes",
            "summary": "The setMinutes() method of Date instances changes the minutes for this date according to local time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.setMinutes()"
        }
    ],
    "sec-date.prototype.setmonth": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "setMonth",
            "slug": "JavaScript/Reference/Global_Objects/Date/setMonth",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth",
            "summary": "The setMonth() method of Date instances changes the month and/or day of the month for this date according to local time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.setMonth()"
        }
    ],
    "sec-date.prototype.setseconds": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "setSeconds",
            "slug": "JavaScript/Reference/Global_Objects/Date/setSeconds",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds",
            "summary": "The setSeconds() method of Date instances changes the seconds and/or milliseconds for this date according to local time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.setSeconds()"
        }
    ],
    "sec-date.prototype.settime": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "setTime",
            "slug": "JavaScript/Reference/Global_Objects/Date/setTime",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime",
            "summary": "The setTime() method of Date instances changes the timestamp for this date, which is the number of milliseconds since the epoch, defined as the midnight at the beginning of January 1, 1970, UTC.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.setTime()"
        }
    ],
    "sec-date.prototype.setutcdate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "setUTCDate",
            "slug": "JavaScript/Reference/Global_Objects/Date/setUTCDate",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCDate",
            "summary": "The setUTCDate() method of Date instances changes the day of the month for this date according to universal time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.setUTCDate()"
        }
    ],
    "sec-date.prototype.setutcfullyear": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "setUTCFullYear",
            "slug": "JavaScript/Reference/Global_Objects/Date/setUTCFullYear",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCFullYear",
            "summary": "The setUTCFullYear() method of Date instances changes the year for this date according to universal time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.setUTCFullYear()"
        }
    ],
    "sec-date.prototype.setutchours": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "setUTCHours",
            "slug": "JavaScript/Reference/Global_Objects/Date/setUTCHours",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCHours",
            "summary": "The setUTCHours() method of Date instances changes the hours, minutes, seconds, and/or milliseconds for this date according to universal time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.setUTCHours()"
        }
    ],
    "sec-date.prototype.setutcmilliseconds": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "setUTCMilliseconds",
            "slug": "JavaScript/Reference/Global_Objects/Date/setUTCMilliseconds",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMilliseconds",
            "summary": "The setUTCMilliseconds() method of Date instances changes the milliseconds for this date according to universal time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.setUTCMilliseconds()"
        }
    ],
    "sec-date.prototype.setutcminutes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "setUTCMinutes",
            "slug": "JavaScript/Reference/Global_Objects/Date/setUTCMinutes",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMinutes",
            "summary": "The setUTCMinutes() method of Date instances changes the minutes for this date according to universal time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.setUTCMinutes()"
        }
    ],
    "sec-date.prototype.setutcmonth": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "setUTCMonth",
            "slug": "JavaScript/Reference/Global_Objects/Date/setUTCMonth",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCMonth",
            "summary": "The setUTCMonth() method of Date instances changes the month and/or day of the month for this date according to universal time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.setUTCMonth()"
        }
    ],
    "sec-date.prototype.setutcseconds": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "setUTCSeconds",
            "slug": "JavaScript/Reference/Global_Objects/Date/setUTCSeconds",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setUTCSeconds",
            "summary": "The setUTCSeconds() method of Date instances changes the seconds and/or milliseconds for this date according to universal time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.setUTCSeconds()"
        }
    ],
    "sec-date.prototype.todatestring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "toDateString",
            "slug": "JavaScript/Reference/Global_Objects/Date/toDateString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString",
            "summary": "The toDateString() method of Date instances returns a string representing the date portion of this date interpreted in the local timezone.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.toDateString()"
        }
    ],
    "sec-date.prototype.toisostring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "toISOString",
            "slug": "JavaScript/Reference/Global_Objects/Date/toISOString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString",
            "summary": "The toISOString() method of Date instances returns a string representing this date in the date time string format, a simplified format based on ISO 8601, which is always 24 or 27 characters long (YYYY-MM-DDTHH:mm:ss.sssZ or ±YYYYYY-MM-DDTHH:mm:ss.sssZ, respectively). The timezone is always UTC, as denoted by the suffix Z.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.toISOString()"
        }
    ],
    "sec-date.prototype.tojson": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "toJSON",
            "slug": "JavaScript/Reference/Global_Objects/Date/toJSON",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON",
            "summary": "The toJSON() method of Date instances returns a string representing this date in the same ISO format as toISOString().",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.toJSON()"
        }
    ],
    "sec-date.prototype.tolocaledatestring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "toLocaleDateString",
            "slug": "JavaScript/Reference/Global_Objects/Date/toLocaleDateString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString",
            "summary": "The toLocaleDateString() method returns a string with a language-sensitive representation of the date portion of the specified date in the user agent's timezone. In implementations with Intl.DateTimeFormat API support, this method simply calls Intl.DateTimeFormat.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.toLocaleDateString()"
        }
    ],
    "sec-date.prototype.tolocalestring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "toLocaleString",
            "slug": "JavaScript/Reference/Global_Objects/Date/toLocaleString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString",
            "summary": "The toLocaleString() method returns a string with a language-sensitive representation of this date. In implementations with Intl.DateTimeFormat API support, this method simply calls Intl.DateTimeFormat.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.toLocaleString()"
        }
    ],
    "sec-date.prototype.tolocaletimestring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "toLocaleTimeString",
            "slug": "JavaScript/Reference/Global_Objects/Date/toLocaleTimeString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString",
            "summary": "The toLocaleTimeString() method returns a string with a language-sensitive representation of the time portion of the date. In implementations with Intl.DateTimeFormat API support, this method simply calls Intl.DateTimeFormat.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.toLocaleTimeString()"
        }
    ],
    "sec-date.prototype.tostring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "toString",
            "slug": "JavaScript/Reference/Global_Objects/Date/toString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toString",
            "summary": "The toString() method of Date instances returns a string representing this date interpreted in the local timezone.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.toString()"
        }
    ],
    "sec-date.prototype.totimestring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "toTimeString",
            "slug": "JavaScript/Reference/Global_Objects/Date/toTimeString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString",
            "summary": "The toTimeString() method of Date instances returns a string representing the time portion of this date interpreted in the local timezone.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.toTimeString()"
        }
    ],
    "sec-date.prototype.toutcstring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "toUTCString",
            "slug": "JavaScript/Reference/Global_Objects/Date/toUTCString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString",
            "summary": "The toUTCString() method of Date instances returns a string representing this date in the RFC 7231 format, with negative years allowed. The timezone is always UTC. toGMTString() is an alias of this method.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.toUTCString()"
        }
    ],
    "sec-date.prototype.valueof": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "valueOf",
            "slug": "JavaScript/Reference/Global_Objects/Date/valueOf",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/valueOf",
            "summary": "The valueOf() method of Date instances returns the number of milliseconds for this date since the epoch, which is defined as the midnight at the beginning of January 1, 1970, UTC.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype.valueOf()"
        }
    ],
    "sec-date.prototype-@@toprimitive": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "@@toPrimitive",
            "slug": "JavaScript/Reference/Global_Objects/Date/@@toPrimitive",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive",
            "summary": "The [@@toPrimitive]() method of Date instances returns a primitive value representing this date. It may either be a string or a number, depending on the hint given.",
            "support": {
                "chrome": {
                    "version_added": "47"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "44"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date.prototype[@@toPrimitive]()"
        }
    ],
    "sec-date-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Date.json",
            "name": "Date",
            "slug": "JavaScript/Reference/Global_Objects/Date",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
            "summary": "JavaScript Date objects represent a single moment in time in a platform-independent format. Date objects encapsulate an integral number that represents milliseconds since the midnight at the beginning of January 1, 1970, UTC (the epoch).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3",
                    "notes": "The <a href='https://en.wikipedia.org/wiki/ISO_8601'>ISO8601 Date Format</a> is not supported in Internet Explorer 8 or earlier."
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Date"
        }
    ],
    "sec-error-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Error.json",
            "name": "Error",
            "slug": "JavaScript/Reference/Global_Objects/Error/Error",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/Error",
            "summary": "The Error() constructor creates Error objects.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Error() constructor"
        }
    ],
    "sec-error.prototype.message": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Error.json",
            "name": "message",
            "slug": "JavaScript/Reference/Global_Objects/Error/message",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/message",
            "summary": "The message data property of an Error instance is a human-readable description of the error.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Error: message"
        }
    ],
    "sec-error.prototype.name": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Error.json",
            "name": "name",
            "slug": "JavaScript/Reference/Global_Objects/Error/name",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/name",
            "summary": "The name data property of Error.prototype is shared by all Error instances. It represents the name for the type of error. For Error.prototype.name, the initial value is \"Error\". Subclasses like TypeError and SyntaxError provide their own name properties.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Error.prototype.name"
        }
    ],
    "sec-error.prototype.tostring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Error.json",
            "name": "toString",
            "slug": "JavaScript/Reference/Global_Objects/Error/toString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/toString",
            "summary": "The toString() method returns a string representing the specified Error object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Error.prototype.toString()"
        }
    ],
    "sec-error-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Error.json",
            "name": "Error",
            "slug": "JavaScript/Reference/Global_Objects/Error",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
            "summary": "Error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Error"
        }
    ],
    "sec-nativeerror-constructors": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/EvalError.json",
            "name": "EvalError",
            "slug": "JavaScript/Reference/Global_Objects/EvalError/EvalError",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError/EvalError",
            "summary": "The EvalError() constructor creates EvalError objects.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EvalError() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RangeError.json",
            "name": "RangeError",
            "slug": "JavaScript/Reference/Global_Objects/RangeError/RangeError",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError/RangeError",
            "summary": "The RangeError() constructor creates RangeError objects.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RangeError() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/ReferenceError.json",
            "name": "ReferenceError",
            "slug": "JavaScript/Reference/Global_Objects/ReferenceError/ReferenceError",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError/ReferenceError",
            "summary": "The ReferenceError() constructor creates ReferenceError objects.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ReferenceError() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/SyntaxError.json",
            "name": "SyntaxError",
            "slug": "JavaScript/Reference/Global_Objects/SyntaxError/SyntaxError",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError/SyntaxError",
            "summary": "The SyntaxError() constructor creates SyntaxError objects.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SyntaxError() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypeError.json",
            "name": "TypeError",
            "slug": "JavaScript/Reference/Global_Objects/TypeError/TypeError",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError/TypeError",
            "summary": "The TypeError() constructor creates TypeError objects.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypeError() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/URIError.json",
            "name": "URIError",
            "slug": "JavaScript/Reference/Global_Objects/URIError/URIError",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError/URIError",
            "summary": "The URIError() constructor creates URIError objects.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "URIError() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/WebAssembly/CompileError.json",
            "name": "CompileError",
            "slug": "https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/CompileError/CompileError",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/CompileError/CompileError",
            "summary": "The WebAssembly.CompileError() constructor creates a new WebAssembly CompileError object, which indicates an error during WebAssembly decoding or validation.",
            "support": {
                "chrome": {
                    "version_added": "57"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WebAssembly.CompileError() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/WebAssembly/LinkError.json",
            "name": "LinkError",
            "slug": "https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/LinkError/LinkError",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/LinkError/LinkError",
            "summary": "The WebAssembly.LinkError() constructor creates a new WebAssembly LinkError object, which indicates an error during module instantiation (besides traps from the start function).",
            "support": {
                "chrome": {
                    "version_added": "57"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WebAssembly.LinkError() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/WebAssembly/RuntimeError.json",
            "name": "RuntimeError",
            "slug": "https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/RuntimeError/RuntimeError",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/RuntimeError/RuntimeError",
            "summary": "The WebAssembly.RuntimeError() constructor creates a new WebAssembly RuntimeError object — the type that is thrown whenever WebAssembly specifies a trap.",
            "support": {
                "chrome": {
                    "version_added": "57"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WebAssembly.RuntimeError() constructor"
        }
    ],
    "sec-native-error-types-used-in-this-standard-evalerror": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/EvalError.json",
            "name": "EvalError",
            "slug": "JavaScript/Reference/Global_Objects/EvalError",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
            "summary": "The EvalError object indicates an error regarding the global eval() function. This exception is not thrown by JavaScript anymore, however the EvalError object remains for compatibility.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EvalError"
        }
    ],
    "sec-finalization-registry-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/FinalizationRegistry.json",
            "name": "FinalizationRegistry",
            "slug": "JavaScript/Reference/Global_Objects/FinalizationRegistry/FinalizationRegistry",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry/FinalizationRegistry",
            "summary": "The FinalizationRegistry() constructor creates FinalizationRegistry objects.",
            "support": {
                "chrome": {
                    "version_added": "84"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "79"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "14.6.0"
                    },
                    {
                        "version_added": "13.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony-weak-refs"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "84"
                }
            },
            "title": "FinalizationRegistry() constructor"
        }
    ],
    "sec-finalization-registry.prototype.register": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/FinalizationRegistry.json",
            "name": "register",
            "slug": "JavaScript/Reference/Global_Objects/FinalizationRegistry/register",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry/register",
            "summary": "The register() method registers an value with a FinalizationRegistry instance so that if the value is garbage-collected, the registry's callback may get called.",
            "support": {
                "chrome": {
                    "version_added": "84"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "79"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "14.6.0"
                    },
                    {
                        "version_added": "13.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony-weak-refs"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "84"
                }
            },
            "title": "FinalizationRegistry.prototype.register()"
        }
    ],
    "sec-finalization-registry.prototype.unregister": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/FinalizationRegistry.json",
            "name": "unregister",
            "slug": "JavaScript/Reference/Global_Objects/FinalizationRegistry/unregister",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry/unregister",
            "summary": "The unregister() method unregisters a target value from a FinalizationRegistry instance.",
            "support": {
                "chrome": {
                    "version_added": "84"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "79"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "14.6.0"
                    },
                    {
                        "version_added": "13.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony-weak-refs"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "84"
                }
            },
            "title": "FinalizationRegistry.prototype.unregister()"
        }
    ],
    "sec-finalization-registry-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/FinalizationRegistry.json",
            "name": "FinalizationRegistry",
            "slug": "JavaScript/Reference/Global_Objects/FinalizationRegistry",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry",
            "summary": "A FinalizationRegistry object lets you request a callback when a value is garbage-collected.",
            "support": {
                "chrome": {
                    "version_added": "84"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "79"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "14.6.0"
                    },
                    {
                        "version_added": "13.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony-weak-refs"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "84"
                }
            },
            "title": "FinalizationRegistry"
        }
    ],
    "table-49": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Float32Array.json",
            "name": "Float32Array",
            "slug": "JavaScript/Reference/Global_Objects/Float32Array",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
            "summary": "The Float32Array typed array represents an array of 32-bit floating point numbers (corresponding to the C float data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Float32Array"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Float64Array.json",
            "name": "Float64Array",
            "slug": "JavaScript/Reference/Global_Objects/Float64Array",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
            "summary": "The Float64Array typed array represents an array of 64-bit floating point numbers (corresponding to the C double data type) in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Float64Array"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Int16Array.json",
            "name": "Int16Array",
            "slug": "JavaScript/Reference/Global_Objects/Int16Array",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
            "summary": "The Int16Array typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Int16Array"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Int32Array.json",
            "name": "Int32Array",
            "slug": "JavaScript/Reference/Global_Objects/Int32Array",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
            "summary": "The Int32Array typed array represents an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Int32Array"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Int8Array.json",
            "name": "Int8Array",
            "slug": "JavaScript/Reference/Global_Objects/Int8Array",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
            "summary": "The Int8Array typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Int8Array"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Uint16Array.json",
            "name": "Uint16Array",
            "slug": "JavaScript/Reference/Global_Objects/Uint16Array",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
            "summary": "The Uint16Array typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Uint16Array"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Uint32Array.json",
            "name": "Uint32Array",
            "slug": "JavaScript/Reference/Global_Objects/Uint32Array",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
            "summary": "The Uint32Array typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use DataView instead. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Uint32Array"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Uint8Array.json",
            "name": "Uint8Array",
            "slug": "JavaScript/Reference/Global_Objects/Uint8Array",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
            "summary": "The Uint8Array typed array represents an array of 8-bit unsigned integers. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Uint8Array"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Uint8ClampedArray.json",
            "name": "Uint8ClampedArray",
            "slug": "JavaScript/Reference/Global_Objects/Uint8ClampedArray",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
            "summary": "The Uint8ClampedArray typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to 0. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Uint8ClampedArray"
        }
    ],
    "sec-function-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Function.json",
            "name": "Function",
            "slug": "JavaScript/Reference/Global_Objects/Function/Function",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function",
            "summary": "The Function() constructor creates Function objects. Calling the constructor directly can create functions dynamically, but suffers from security and similar (but far less significant) performance issues as eval(). However, unlike eval (which may have access to the local scope), the Function constructor creates functions which execute in the global scope only.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Function() constructor"
        }
    ],
    "sec-function.prototype.apply": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Function.json",
            "name": "apply",
            "slug": "JavaScript/Reference/Global_Objects/Function/apply",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply",
            "summary": "The apply() method calls the specified function with a given this value, and arguments provided as an array (or an array-like object).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Function.prototype.apply()"
        }
    ],
    "sec-function.prototype.bind": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Function.json",
            "name": "bind",
            "slug": "JavaScript/Reference/Global_Objects/Function/bind",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind",
            "summary": "The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "6"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Function.prototype.bind()"
        }
    ],
    "sec-function.prototype.call": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Function.json",
            "name": "call",
            "slug": "JavaScript/Reference/Global_Objects/Function/call",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call",
            "summary": "The call() method calls the function with a given this value and arguments provided individually.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0",
                    "notes": "When calling this method, <code>thisArg</code> does not default to the global object."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Function.prototype.call()"
        }
    ],
    "sec-function-instances-length": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Function.json",
            "name": "length",
            "slug": "JavaScript/Reference/Global_Objects/Function/length",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/length",
            "summary": "The length data property of a Function instance indicates the number of parameters expected by the function.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Function: length"
        }
    ],
    "sec-function-instances-name": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Function.json",
            "name": "name",
            "slug": "JavaScript/Reference/Global_Objects/Function/name",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name",
            "summary": "The name data property of a Function instance indicates the function's name as specified when it was created, or it may be either anonymous or '' (an empty string) for functions created anonymously.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Function: name"
        }
    ],
    "sec-function.prototype.tostring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Function.json",
            "name": "toString",
            "slug": "JavaScript/Reference/Global_Objects/Function/toString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString",
            "summary": "The toString() method returns a string representing the source code of the specified Function.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Function.prototype.toString()"
        }
    ],
    "sec-function.prototype-@@hasinstance": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Function.json",
            "name": "@@hasInstance",
            "slug": "JavaScript/Reference/Global_Objects/Function/@@hasInstance",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/@@hasInstance",
            "summary": "The [@@hasInstance]() method of Function instances specifies the default procedure for determining if a constructor function recognizes an object as one of the constructor's instances. It is called by the instanceof operator.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "6.5.0"
                    },
                    {
                        "version_added": "6.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Function.prototype[@@hasInstance]()"
        }
    ],
    "sec-function-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Function.json",
            "name": "Function",
            "slug": "JavaScript/Reference/Global_Objects/Function",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
            "summary": "The Function object provides methods for functions. In JavaScript, every function is actually a Function object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Function"
        }
    ],
    "sec-generator.prototype.next": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Generator.json",
            "name": "next",
            "slug": "JavaScript/Reference/Global_Objects/Generator/next",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/next",
            "summary": "The next() method returns an object with two properties done and value. You can also provide a parameter to the next method to send a value to the generator.",
            "support": {
                "chrome": {
                    "version_added": "39"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "26"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "4.0.0"
                    },
                    {
                        "version_added": "0.12.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Generator.prototype.next()"
        }
    ],
    "sec-generator.prototype.return": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Generator.json",
            "name": "return",
            "slug": "JavaScript/Reference/Global_Objects/Generator/return",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/return",
            "summary": "The return() method of Generator instances acts as if a return statement is inserted in the generator's body at the current suspended position, which finishes the generator and allows the generator to perform any cleanup tasks when combined with a try...finally block.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Generator.prototype.return()"
        }
    ],
    "sec-generator.prototype.throw": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Generator.json",
            "name": "throw",
            "slug": "JavaScript/Reference/Global_Objects/Generator/throw",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator/throw",
            "summary": "The throw() method of Generator instances acts as if a throw statement is inserted in the generator's body at the current suspended position, which informs the generator of an error condition and allows it to handle the error, or perform cleanup and close itself.",
            "support": {
                "chrome": {
                    "version_added": "39"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "26"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "4.0.0"
                    },
                    {
                        "version_added": "0.12.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Generator.prototype.throw()"
        }
    ],
    "sec-generator-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Generator.json",
            "name": "Generator",
            "slug": "JavaScript/Reference/Global_Objects/Generator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
            "summary": "The Generator object is returned by a generator function and it conforms to both the iterable protocol and the iterator protocol.",
            "support": {
                "chrome": {
                    "version_added": "39"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "26"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "4.0.0"
                    },
                    {
                        "version_added": "0.12.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Generator"
        }
    ],
    "sec-generatorfunction-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/GeneratorFunction.json",
            "name": "GeneratorFunction",
            "slug": "JavaScript/Reference/Global_Objects/GeneratorFunction/GeneratorFunction",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction/GeneratorFunction",
            "summary": "The GeneratorFunction() constructor creates GeneratorFunction objects.",
            "support": {
                "chrome": {
                    "version_added": "39"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "26"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "4.0.0"
                    },
                    {
                        "version_added": "0.12.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "GeneratorFunction() constructor"
        }
    ],
    "sec-generatorfunction-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/GeneratorFunction.json",
            "name": "GeneratorFunction",
            "slug": "JavaScript/Reference/Global_Objects/GeneratorFunction",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
            "summary": "The GeneratorFunction object provides methods for generator functions. In JavaScript, every generator function is actually a GeneratorFunction object.",
            "support": {
                "chrome": {
                    "version_added": "39"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "26"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "4.0.0"
                    },
                    {
                        "version_added": "0.12.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "GeneratorFunction"
        }
    ],
    "sec-%iteratorprototype%-@@iterator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Iterator.json",
            "name": "@@iterator",
            "slug": "JavaScript/Reference/Global_Objects/Iterator/@@iterator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator/@@iterator",
            "summary": "The [@@iterator]() method of Iterator instances implements the iterable protocol and allows built-in iterators to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns the value of this, which is the iterator object itself.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "36"
                    },
                    {
                        "alternative_name": "@@iterator",
                        "version_added": "27",
                        "version_removed": "36",
                        "notes": "A placeholder property named <code>@@iterator</code> is used."
                    },
                    {
                        "alternative_name": "iterator",
                        "version_added": "17",
                        "version_removed": "27",
                        "notes": "A placeholder property named <code>iterator</code> is used."
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Iterator.prototype[@@iterator]()"
        }
    ],
    "sec-%iteratorprototype%-object": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Iterator.json",
            "name": "Iterator",
            "slug": "JavaScript/Reference/Global_Objects/Iterator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Iterator",
            "summary": "An Iterator object is an object that conforms to the iterator protocol by providing a next() method that returns an iterator result object. The Iterator.prototype object is a hidden global object that all built-in iterators inherit from. It provides a @@iterator method that returns the iterator object itself, making the iterator also iterable.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "17"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Iterator"
        }
    ],
    "sec-json.parse": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/JSON.json",
            "name": "parse",
            "slug": "JavaScript/Reference/Global_Objects/JSON/parse",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse",
            "summary": "The JSON.parse() static method parses a JSON string, constructing the JavaScript value or object described by the string. An optional reviver function can be provided to perform a transformation on the resulting object before it is returned.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "JSON.parse()"
        }
    ],
    "sec-json.stringify": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/JSON.json",
            "name": "stringify",
            "slug": "JavaScript/Reference/Global_Objects/JSON/stringify",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify",
            "summary": "The JSON.stringify() static method converts a JavaScript value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "JSON.stringify()"
        }
    ],
    "sec-json-object": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/JSON.json",
            "name": "JSON",
            "slug": "JavaScript/Reference/Global_Objects/JSON",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
            "summary": "The JSON namespace object contains static methods for parsing values from and converting values to JavaScript Object Notation (JSON).",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "json",
                "title": "JSON parsing"
            },
            "title": "JSON"
        }
    ],
    "sec-map-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Map.json",
            "name": "Map",
            "slug": "JavaScript/Reference/Global_Objects/Map/Map",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/Map",
            "summary": "The Map() constructor creates Map objects.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "13"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": [
                    {
                        "version_added": "0.12.0"
                    },
                    {
                        "version_added": "0.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Map() constructor"
        }
    ],
    "sec-map.prototype.clear": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Map.json",
            "name": "clear",
            "slug": "JavaScript/Reference/Global_Objects/Map/clear",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear",
            "summary": "The clear() method removes all elements from a Map object.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "19"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Map.prototype.clear()"
        }
    ],
    "sec-map.prototype.delete": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Map.json",
            "name": "delete",
            "slug": "JavaScript/Reference/Global_Objects/Map/delete",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete",
            "summary": "The delete() method removes the specified element from a Map object by key.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "13"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": [
                    {
                        "version_added": "0.12.0"
                    },
                    {
                        "version_added": "0.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Map.prototype.delete()"
        }
    ],
    "sec-map.prototype.entries": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Map.json",
            "name": "entries",
            "slug": "JavaScript/Reference/Global_Objects/Map/entries",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries",
            "summary": "The entries() method returns a new map iterator object that contains the [key, value] pairs for each element in the Map object in insertion order.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "20"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Map.prototype.entries()"
        }
    ],
    "sec-map.prototype.foreach": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Map.json",
            "name": "forEach",
            "slug": "JavaScript/Reference/Global_Objects/Map/forEach",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach",
            "summary": "The forEach() method executes a provided function once per each key/value pair in the Map object, in insertion order.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Map.prototype.forEach()"
        }
    ],
    "sec-map.prototype.get": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Map.json",
            "name": "get",
            "slug": "JavaScript/Reference/Global_Objects/Map/get",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get",
            "summary": "The get() method returns a specified element from a Map object. If the value that is associated to the provided key is an object, then you will get a reference to that object and any change made to that object will effectively modify it inside the Map object.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "13"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": [
                    {
                        "version_added": "0.12.0"
                    },
                    {
                        "version_added": "0.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Map.prototype.get()"
        }
    ],
    "sec-map.prototype.has": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Map.json",
            "name": "has",
            "slug": "JavaScript/Reference/Global_Objects/Map/has",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has",
            "summary": "The has() method returns a boolean indicating whether an element with the specified key exists or not.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "13"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": [
                    {
                        "version_added": "0.12.0"
                    },
                    {
                        "version_added": "0.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Map.prototype.has()"
        }
    ],
    "sec-map.prototype.keys": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Map.json",
            "name": "keys",
            "slug": "JavaScript/Reference/Global_Objects/Map/keys",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys",
            "summary": "The keys() method returns a new map iterator object that contains the keys for each element in the Map object in insertion order.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "20"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Map.prototype.keys()"
        }
    ],
    "sec-map.prototype.set": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Map.json",
            "name": "set",
            "slug": "JavaScript/Reference/Global_Objects/Map/set",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set",
            "summary": "The set() method adds or updates an entry in a Map object with a specified key and a value.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "13"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11",
                    "partial_implementation": true,
                    "notes": "Returns 'undefined' instead of the 'Map' object."
                },
                "nodejs": [
                    {
                        "version_added": "0.12.0"
                    },
                    {
                        "version_added": "0.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Map.prototype.set()"
        }
    ],
    "sec-get-map.prototype.size": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Map.json",
            "name": "size",
            "slug": "JavaScript/Reference/Global_Objects/Map/size",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/size",
            "summary": "The size accessor property of Map instances returns the number of elements in this map.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "19",
                    "notes": "From Firefox 13 to Firefox 18, the <code>size</code> property was implemented as a <code>Map.prototype.size()</code> method, this has been changed to a property in later versions conform to the ECMAScript 2015 specification."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Map.prototype.size"
        }
    ],
    "sec-map.prototype.values": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Map.json",
            "name": "values",
            "slug": "JavaScript/Reference/Global_Objects/Map/values",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/values",
            "summary": "The values() method returns a new map iterator object that contains the values for each element in the Map object in insertion order.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "20"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Map.prototype.values()"
        }
    ],
    "sec-map.prototype-@@iterator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Map.json",
            "name": "@@iterator",
            "slug": "JavaScript/Reference/Global_Objects/Map/@@iterator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@iterator",
            "summary": "The [@@iterator]() method of Map instances implements the iterable protocol and allows maps to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns a map iterator object that yields the key-value pairs of the map in insertion order.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "36"
                    },
                    {
                        "alternative_name": "@@iterator",
                        "version_added": "27",
                        "version_removed": "36",
                        "notes": "A placeholder property named <code>@@iterator</code> is used."
                    },
                    {
                        "alternative_name": "iterator",
                        "version_added": "17",
                        "version_removed": "27",
                        "notes": "A placeholder property named <code>iterator</code> is used."
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Map.prototype[@@iterator]()"
        }
    ],
    "sec-get-map-@@species": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Map.json",
            "name": "@@species",
            "slug": "JavaScript/Reference/Global_Objects/Map/@@species",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@species",
            "summary": "The Map[@@species] static accessor property is an unused accessor property specifying how to copy Map objects.",
            "support": {
                "chrome": {
                    "version_added": "51"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "6.5.0"
                    },
                    {
                        "version_added": "6.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Map[@@species]"
        }
    ],
    "sec-map.prototype-@@tostringtag": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Map.json",
            "name": "@@toStringTag",
            "slug": "JavaScript/Reference/Global_Objects/Map/@@toStringTag",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/@@toStringTag",
            "summary": "The Map object holds key-value pairs and remembers the original insertion order of the keys. Any value (both objects and primitive values) may be used as either a key or a value.",
            "support": {
                "chrome": {
                    "version_added": "44"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "51"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Map"
        }
    ],
    "sec-map-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Map.json",
            "name": "Map",
            "slug": "JavaScript/Reference/Global_Objects/Map",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
            "summary": "The Map object holds key-value pairs and remembers the original insertion order of the keys. Any value (both objects and primitive values) may be used as either a key or a value.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "13"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": [
                    {
                        "version_added": "0.12.0"
                    },
                    {
                        "version_added": "0.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Map"
        }
    ],
    "sec-math.e": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "E",
            "slug": "JavaScript/Reference/Global_Objects/Math/E",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/E",
            "summary": "The Math.E static data property represents Euler's number, the base of natural logarithms, e, which is approximately 2.718.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.E"
        }
    ],
    "sec-math.ln10": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "LN10",
            "slug": "JavaScript/Reference/Global_Objects/Math/LN10",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN10",
            "summary": "The Math.LN10 static data property represents the natural logarithm of 10, approximately 2.302.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.LN10"
        }
    ],
    "sec-math.ln2": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "LN2",
            "slug": "JavaScript/Reference/Global_Objects/Math/LN2",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LN2",
            "summary": "The Math.LN2 static data property represents the natural logarithm of 2, approximately 0.693:",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.LN2"
        }
    ],
    "sec-math.log10e": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "LOG10E",
            "slug": "JavaScript/Reference/Global_Objects/Math/LOG10E",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG10E",
            "summary": "The Math.LOG10E static data property represents the base 10 logarithm of e, approximately 0.434.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.LOG10E"
        }
    ],
    "sec-math.log2e": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "LOG2E",
            "slug": "JavaScript/Reference/Global_Objects/Math/LOG2E",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/LOG2E",
            "summary": "The Math.LOG2E static data property represents the base 2 logarithm of e, approximately 1.442.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.LOG2E"
        }
    ],
    "sec-math.pi": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "PI",
            "slug": "JavaScript/Reference/Global_Objects/Math/PI",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/PI",
            "summary": "The Math.PI static data property represents the ratio of the circumference of a circle to its diameter, approximately 3.14159.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.PI"
        }
    ],
    "sec-math.sqrt1_2": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "SQRT1_2",
            "slug": "JavaScript/Reference/Global_Objects/Math/SQRT1_2",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2",
            "summary": "The Math.SQRT1_2 static data property represents the square root of 1/2, which is approximately 0.707.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.SQRT1_2"
        }
    ],
    "sec-math.sqrt2": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "SQRT2",
            "slug": "JavaScript/Reference/Global_Objects/Math/SQRT2",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT2",
            "summary": "The Math.SQRT2 static data property represents the square root of 2, approximately 1.414.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.SQRT2"
        }
    ],
    "sec-math.abs": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "abs",
            "slug": "JavaScript/Reference/Global_Objects/Math/abs",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/abs",
            "summary": "The Math.abs() static method returns the absolute value of a number.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.abs()"
        }
    ],
    "sec-math.acos": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "acos",
            "slug": "JavaScript/Reference/Global_Objects/Math/acos",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acos",
            "summary": "The Math.acos() static method returns the inverse cosine (in radians) of a number. That is,",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.acos()"
        }
    ],
    "sec-math.acosh": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "acosh",
            "slug": "JavaScript/Reference/Global_Objects/Math/acosh",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/acosh",
            "summary": "The Math.acosh() static method returns the inverse hyperbolic cosine of a number. That is,",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.acosh()"
        }
    ],
    "sec-math.asin": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "asin",
            "slug": "JavaScript/Reference/Global_Objects/Math/asin",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asin",
            "summary": "The Math.asin() static method returns the inverse sine (in radians) of a number. That is,",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.asin()"
        }
    ],
    "sec-math.asinh": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "asinh",
            "slug": "JavaScript/Reference/Global_Objects/Math/asinh",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh",
            "summary": "The Math.asinh() static method returns the inverse hyperbolic sine of a number. That is,",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.asinh()"
        }
    ],
    "sec-math.atan": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "atan",
            "slug": "JavaScript/Reference/Global_Objects/Math/atan",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan",
            "summary": "The Math.atan() static method returns the inverse tangent (in radians) of a number, that is",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.atan()"
        }
    ],
    "sec-math.atan2": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "atan2",
            "slug": "JavaScript/Reference/Global_Objects/Math/atan2",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2",
            "summary": "The Math.atan2() static method returns the angle in the plane (in radians) between the positive x-axis and the ray from (0, 0) to the point (x, y), for Math.atan2(y, x).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.atan2()"
        }
    ],
    "sec-math.atanh": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "atanh",
            "slug": "JavaScript/Reference/Global_Objects/Math/atanh",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh",
            "summary": "The Math.atanh() static method returns the inverse hyperbolic tangent of a number. That is,",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.atanh()"
        }
    ],
    "sec-math.cbrt": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "cbrt",
            "slug": "JavaScript/Reference/Global_Objects/Math/cbrt",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt",
            "summary": "The Math.cbrt() static method returns the cube root of a number. That is",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.cbrt()"
        }
    ],
    "sec-math.ceil": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "ceil",
            "slug": "JavaScript/Reference/Global_Objects/Math/ceil",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil",
            "summary": "The Math.ceil() static method always rounds up and returns the smallest integer greater than or equal to a given number.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.ceil()"
        }
    ],
    "sec-math.clz32": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "clz32",
            "slug": "JavaScript/Reference/Global_Objects/Math/clz32",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32",
            "summary": "The Math.clz32() static method returns the number of leading zero bits in the 32-bit binary representation of a number.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.clz32()"
        }
    ],
    "sec-math.cos": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "cos",
            "slug": "JavaScript/Reference/Global_Objects/Math/cos",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cos",
            "summary": "The Math.cos() static method returns the cosine of a number in radians.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.cos()"
        }
    ],
    "sec-math.cosh": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "cosh",
            "slug": "JavaScript/Reference/Global_Objects/Math/cosh",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh",
            "summary": "The Math.cosh() static method returns the hyperbolic cosine of a number. That is,",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.cosh()"
        }
    ],
    "sec-math.exp": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "exp",
            "slug": "JavaScript/Reference/Global_Objects/Math/exp",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/exp",
            "summary": "The Math.exp() static method returns e raised to the power of a number. That is",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.exp()"
        }
    ],
    "sec-math.expm1": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "expm1",
            "slug": "JavaScript/Reference/Global_Objects/Math/expm1",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1",
            "summary": "The Math.expm1() static method returns e raised to the power of a number, subtracted by 1. That is",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.expm1()"
        }
    ],
    "sec-math.floor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "floor",
            "slug": "JavaScript/Reference/Global_Objects/Math/floor",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/floor",
            "summary": "The Math.floor() static method always rounds down and returns the largest integer less than or equal to a given number.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.floor()"
        }
    ],
    "sec-math.fround": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "fround",
            "slug": "JavaScript/Reference/Global_Objects/Math/fround",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround",
            "summary": "The Math.fround() static method returns the nearest 32-bit single precision float representation of a number.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "26"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.fround()"
        }
    ],
    "sec-math.hypot": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "hypot",
            "slug": "JavaScript/Reference/Global_Objects/Math/hypot",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot",
            "summary": "The Math.hypot() static method returns the square root of the sum of squares of its arguments. That is,",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "27"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.hypot()"
        }
    ],
    "sec-math.imul": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "imul",
            "slug": "JavaScript/Reference/Global_Objects/Math/imul",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul",
            "summary": "The Math.imul() static method returns the result of the C-like 32-bit multiplication of the two parameters.",
            "support": {
                "chrome": {
                    "version_added": "28"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "20"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "16"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.imul()"
        }
    ],
    "sec-math.log": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "log",
            "slug": "JavaScript/Reference/Global_Objects/Math/log",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log",
            "summary": "The Math.log() static method returns the natural logarithm (base e) of a number. That is",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.log()"
        }
    ],
    "sec-math.log10": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "log10",
            "slug": "JavaScript/Reference/Global_Objects/Math/log10",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log10",
            "summary": "The Math.log10() static method returns the base 10 logarithm of a number. That is",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.log10()"
        }
    ],
    "sec-math.log1p": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "log1p",
            "slug": "JavaScript/Reference/Global_Objects/Math/log1p",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p",
            "summary": "The Math.log1p() static method returns the natural logarithm (base e) of 1 + x, where x is the argument. That is:",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.log1p()"
        }
    ],
    "sec-math.log2": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "log2",
            "slug": "JavaScript/Reference/Global_Objects/Math/log2",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/log2",
            "summary": "The Math.log2() static method returns the base 2 logarithm of a number. That is",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.log2()"
        }
    ],
    "sec-math.max": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "max",
            "slug": "JavaScript/Reference/Global_Objects/Math/max",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/max",
            "summary": "The Math.max() static method returns the largest of the numbers given as input parameters, or -Infinity if there are no parameters.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.max()"
        }
    ],
    "sec-math.min": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "min",
            "slug": "JavaScript/Reference/Global_Objects/Math/min",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/min",
            "summary": "The Math.min() static method returns the smallest of the numbers given as input parameters, or Infinity if there are no parameters.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.min()"
        }
    ],
    "sec-math.pow": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "pow",
            "slug": "JavaScript/Reference/Global_Objects/Math/pow",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/pow",
            "summary": "The Math.pow() static method returns the value of a base raised to a power. That is",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.pow()"
        }
    ],
    "sec-math.random": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "random",
            "slug": "JavaScript/Reference/Global_Objects/Math/random",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random",
            "summary": "The Math.random() static method returns a floating-point, pseudo-random number that's greater than or equal to 0 and less than 1, with approximately uniform distribution over that range — which you can then scale to your desired range. The implementation selects the initial seed to the random number generation algorithm; it cannot be chosen or reset by the user.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.random()"
        }
    ],
    "sec-math.round": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "round",
            "slug": "JavaScript/Reference/Global_Objects/Math/round",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round",
            "summary": "The Math.round() static method returns the value of a number rounded to the nearest integer.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.round()"
        }
    ],
    "sec-math.sign": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "sign",
            "slug": "JavaScript/Reference/Global_Objects/Math/sign",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign",
            "summary": "The Math.sign() static method returns 1 or -1, indicating the sign of the number passed as argument. If the input is 0 or -0, it will be returned as-is.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.sign()"
        }
    ],
    "sec-math.sin": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "sin",
            "slug": "JavaScript/Reference/Global_Objects/Math/sin",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sin",
            "summary": "The Math.sin() static method returns the sine of a number in radians.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.sin()"
        }
    ],
    "sec-math.sinh": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "sinh",
            "slug": "JavaScript/Reference/Global_Objects/Math/sinh",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh",
            "summary": "The Math.sinh() static method returns the hyperbolic sine of a number. That is,",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.sinh()"
        }
    ],
    "sec-math.sqrt": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "sqrt",
            "slug": "JavaScript/Reference/Global_Objects/Math/sqrt",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt",
            "summary": "The Math.sqrt() static method returns the square root of a number. That is",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.sqrt()"
        }
    ],
    "sec-math.tan": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "tan",
            "slug": "JavaScript/Reference/Global_Objects/Math/tan",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tan",
            "summary": "The Math.tan() static method returns the tangent of a number in radians.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.tan()"
        }
    ],
    "sec-math.tanh": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "tanh",
            "slug": "JavaScript/Reference/Global_Objects/Math/tanh",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh",
            "summary": "The Math.tanh() static method returns the hyperbolic tangent of a number. That is,",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.tanh()"
        }
    ],
    "sec-math.trunc": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "trunc",
            "slug": "JavaScript/Reference/Global_Objects/Math/trunc",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc",
            "summary": "The Math.trunc() static method returns the integer part of a number by removing any fractional digits.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math.trunc()"
        }
    ],
    "sec-math-object": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Math.json",
            "name": "Math",
            "slug": "JavaScript/Reference/Global_Objects/Math",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math",
            "summary": "The Math namespace object contains static properties and methods for mathematical constants and functions.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Math"
        }
    ],
    "sec-number.epsilon": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Number.json",
            "name": "EPSILON",
            "slug": "JavaScript/Reference/Global_Objects/Number/EPSILON",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON",
            "summary": "The Number.EPSILON static data property represents the difference between 1 and the smallest floating point number greater than 1.",
            "support": {
                "chrome": {
                    "version_added": "34"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Number.EPSILON"
        }
    ],
    "sec-number.max_safe_integer": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Number.json",
            "name": "MAX_SAFE_INTEGER",
            "slug": "JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER",
            "summary": "The Number.MAX_SAFE_INTEGER static data property represents the maximum safe integer in JavaScript (253 – 1).",
            "support": {
                "chrome": {
                    "version_added": "34"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Number.MAX_SAFE_INTEGER"
        }
    ],
    "sec-number.max_value": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Number.json",
            "name": "MAX_VALUE",
            "slug": "JavaScript/Reference/Global_Objects/Number/MAX_VALUE",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE",
            "summary": "The Number.MAX_VALUE static data property represents the maximum numeric value representable in JavaScript.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Number.MAX_VALUE"
        }
    ],
    "sec-number.min_safe_integer": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Number.json",
            "name": "MIN_SAFE_INTEGER",
            "slug": "JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER",
            "summary": "The Number.MIN_SAFE_INTEGER static data property represents the minimum safe integer in JavaScript, or -(253 - 1).",
            "support": {
                "chrome": {
                    "version_added": "34"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Number.MIN_SAFE_INTEGER"
        }
    ],
    "sec-number.min_value": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Number.json",
            "name": "MIN_VALUE",
            "slug": "JavaScript/Reference/Global_Objects/Number/MIN_VALUE",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE",
            "summary": "The Number.MIN_VALUE static data property represents the smallest positive numeric value representable in JavaScript.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Number.MIN_VALUE"
        }
    ],
    "sec-number.nan": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Number.json",
            "name": "NaN",
            "slug": "JavaScript/Reference/Global_Objects/Number/NaN",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN",
            "summary": "The Number.NaN static data property represents Not-A-Number, which is equivalent to NaN. For more information about the behaviors of NaN, see the description for the global property.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Number.NaN"
        }
    ],
    "sec-number.negative_infinity": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Number.json",
            "name": "NEGATIVE_INFINITY",
            "slug": "JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY",
            "summary": "The Number.NEGATIVE_INFINITY static data property represents the negative Infinity value.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Number.NEGATIVE_INFINITY"
        }
    ],
    "sec-number-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Number.json",
            "name": "Number",
            "slug": "JavaScript/Reference/Global_Objects/Number/Number",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/Number",
            "summary": "The Number() constructor creates Number objects. When called as a function, it returns primitive values of type Number.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Number() constructor"
        }
    ],
    "sec-number.positive_infinity": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Number.json",
            "name": "POSITIVE_INFINITY",
            "slug": "JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY",
            "summary": "The Number.POSITIVE_INFINITY static data property represents the positive Infinity value.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Number.POSITIVE_INFINITY"
        }
    ],
    "sec-number.isfinite": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Number.json",
            "name": "isFinite",
            "slug": "JavaScript/Reference/Global_Objects/Number/isFinite",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite",
            "summary": "The Number.isFinite() static method determines whether the passed value is a finite number — that is, it checks that a given value is a number, and the number is neither positive Infinity, negative Infinity, nor NaN.",
            "support": {
                "chrome": {
                    "version_added": "19"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "16"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Number.isFinite()"
        }
    ],
    "sec-number.isinteger": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Number.json",
            "name": "isInteger",
            "slug": "JavaScript/Reference/Global_Objects/Number/isInteger",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger",
            "summary": "The Number.isInteger() static method determines whether the passed value is an integer.",
            "support": {
                "chrome": {
                    "version_added": "34"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "16"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Number.isInteger()"
        }
    ],
    "sec-number.isnan": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Number.json",
            "name": "isNaN",
            "slug": "JavaScript/Reference/Global_Objects/Number/isNaN",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN",
            "summary": "The Number.isNaN() static method determines whether the passed value is the number value NaN, and returns false if the input is not of the Number type. It is a more robust version of the original, global isNaN() function.",
            "support": {
                "chrome": {
                    "version_added": "25"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Number.isNaN()"
        }
    ],
    "sec-number.issafeinteger": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Number.json",
            "name": "isSafeInteger",
            "slug": "JavaScript/Reference/Global_Objects/Number/isSafeInteger",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger",
            "summary": "The Number.isSafeInteger() static method determines whether the provided value is a number that is a safe integer.",
            "support": {
                "chrome": {
                    "version_added": "34"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "32"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Number.isSafeInteger()"
        }
    ],
    "sec-number.parsefloat": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Number.json",
            "name": "parseFloat",
            "slug": "JavaScript/Reference/Global_Objects/Number/parseFloat",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat",
            "summary": "The Number.parseFloat() static method parses an argument and returns a floating point number. If a number cannot be parsed from the argument, it returns NaN.",
            "support": {
                "chrome": {
                    "version_added": "34"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Number.parseFloat()"
        }
    ],
    "sec-number.parseint": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Number.json",
            "name": "parseInt",
            "slug": "JavaScript/Reference/Global_Objects/Number/parseInt",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt",
            "summary": "The Number.parseInt() static method parses a string argument and returns an integer of the specified radix or base.",
            "support": {
                "chrome": {
                    "version_added": "34"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Number.parseInt()"
        }
    ],
    "sec-number.prototype.toexponential": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Number.json",
            "name": "toExponential",
            "slug": "JavaScript/Reference/Global_Objects/Number/toExponential",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential",
            "summary": "The toExponential() method returns a string representing the Number object in exponential notation.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Number.prototype.toExponential()"
        }
    ],
    "sec-number.prototype.tofixed": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Number.json",
            "name": "toFixed",
            "slug": "JavaScript/Reference/Global_Objects/Number/toFixed",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed",
            "summary": "The toFixed() method formats a number using fixed-point notation.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Number.prototype.toFixed()"
        }
    ],
    "sec-number.prototype.tolocalestring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Number.json",
            "name": "toLocaleString",
            "slug": "JavaScript/Reference/Global_Objects/Number/toLocaleString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString",
            "summary": "The toLocaleString() method returns a string with a language-sensitive representation of this number. In implementations with Intl.NumberFormat API support, this method simply calls Intl.NumberFormat.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5",
                    "notes": "In Internet Explorer 11, numbers are rounded to 15 decimal digits. For example, <code>(1000000000000005).toLocaleString('en-US')</code> returns <code>\"1,000,000,000,000,010\"</code>."
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Number.prototype.toLocaleString()"
        }
    ],
    "sec-number.prototype.toprecision": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Number.json",
            "name": "toPrecision",
            "slug": "JavaScript/Reference/Global_Objects/Number/toPrecision",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision",
            "summary": "The toPrecision() method returns a string representing the Number object to the specified precision.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Number.prototype.toPrecision()"
        }
    ],
    "sec-number.prototype.tostring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Number.json",
            "name": "toString",
            "slug": "JavaScript/Reference/Global_Objects/Number/toString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toString",
            "summary": "The toString() method returns a string representing the specified number value.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Number.prototype.toString()"
        }
    ],
    "sec-number.prototype.valueof": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Number.json",
            "name": "valueOf",
            "slug": "JavaScript/Reference/Global_Objects/Number/valueOf",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/valueOf",
            "summary": "The valueOf() method returns the wrapped primitive value of a Number object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Number.prototype.valueOf()"
        }
    ],
    "sec-number-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Number.json",
            "name": "Number",
            "slug": "JavaScript/Reference/Global_Objects/Number",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
            "summary": "Number values represent floating-point numbers like 37 or -9.25.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "es6-number",
                "title": "ES6 Number"
            },
            "title": "Number"
        }
    ],
    "sec-object-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "Object",
            "slug": "JavaScript/Reference/Global_Objects/Object/Object",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/Object",
            "summary": "The Object() constructor turns the input into an object. Its behavior depends on the input's type.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object() constructor"
        }
    ],
    "sec-object.assign": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "assign",
            "slug": "JavaScript/Reference/Global_Objects/Object/assign",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign",
            "summary": "The Object.assign() static method copies all enumerable own properties from one or more source objects to a target object. It returns the modified target object.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "34"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.assign()"
        }
    ],
    "sec-object.prototype.constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "constructor",
            "slug": "JavaScript/Reference/Global_Objects/Object/constructor",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor",
            "summary": "The constructor data property of an Object instance returns a reference to the constructor function that created the instance object. Note that the value of this property is a reference to the function itself, not a string containing the function's name.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.prototype.constructor"
        }
    ],
    "sec-object.create": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "create",
            "slug": "JavaScript/Reference/Global_Objects/Object/create",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create",
            "summary": "The Object.create() static method creates a new object, using an existing object as the prototype of the newly created object.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.create()"
        }
    ],
    "sec-object.defineproperties": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "defineProperties",
            "slug": "JavaScript/Reference/Global_Objects/Object/defineProperties",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties",
            "summary": "The Object.defineProperties() static method defines new or modifies existing properties directly on an object, returning the object.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.defineProperties()"
        }
    ],
    "sec-object.defineproperty": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "defineProperty",
            "slug": "JavaScript/Reference/Global_Objects/Object/defineProperty",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty",
            "summary": "The Object.defineProperty() static method defines a new property directly on an object, or modifies an existing property on an object, and returns the object.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "version_added": "8",
                        "partial_implementation": true,
                        "notes": "In Internet Explorer 8, this was only supported on DOM objects and with some non-standard behaviors. This was later fixed in Internet Explorer 9."
                    }
                ],
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1",
                    "notes": "Also supported in Safari 5, but not on DOM objects."
                },
                "safari_ios": {
                    "version_added": "6",
                    "notes": "Also supported in Safari for iOS 4.2, but not on DOM objects."
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.defineProperty()"
        }
    ],
    "sec-object.entries": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "entries",
            "slug": "JavaScript/Reference/Global_Objects/Object/entries",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries",
            "summary": "The Object.entries() static method returns an array of a given object's own enumerable string-keyed property key-value pairs.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "47"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "7.0.0"
                    },
                    {
                        "version_added": "6.5.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "object-entries",
                "title": "Object.entries"
            },
            "title": "Object.entries()"
        }
    ],
    "sec-object.freeze": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "freeze",
            "slug": "JavaScript/Reference/Global_Objects/Object/freeze",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze",
            "summary": "The Object.freeze() static method freezes an object. Freezing an object prevents extensions and makes existing properties non-writable and non-configurable. A frozen object can no longer be changed: new properties cannot be added, existing properties cannot be removed, their enumerability, configurability, writability, or value cannot be changed, and the object's prototype cannot be re-assigned. freeze() returns the same object that was passed in.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.freeze()"
        }
    ],
    "sec-object.fromentries": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "fromEntries",
            "slug": "JavaScript/Reference/Global_Objects/Object/fromEntries",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/fromEntries",
            "summary": "The Object.fromEntries() static method transforms a list of key-value pairs into an object.",
            "support": {
                "chrome": {
                    "version_added": "73"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "12.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "12.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.fromEntries()"
        }
    ],
    "sec-object.getownpropertydescriptor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "getOwnPropertyDescriptor",
            "slug": "JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor",
            "summary": "The Object.getOwnPropertyDescriptor() static method returns an object describing the configuration of a specific property on a given object (that is, one directly present on an object and not in the object's prototype chain). The object returned is mutable but mutating it has no effect on the original property's configuration.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": [
                    {
                        "version_added": "9"
                    },
                    {
                        "version_added": "8",
                        "partial_implementation": true,
                        "notes": "In Internet Explorer 8, this was only supported on DOM objects and with some non-standard behaviors. This was later fixed in Internet Explorer 9."
                    }
                ],
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.getOwnPropertyDescriptor()"
        }
    ],
    "sec-object.getownpropertydescriptors": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "getOwnPropertyDescriptors",
            "slug": "JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors",
            "summary": "The Object.getOwnPropertyDescriptors() static method returns all own property descriptors of a given object.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "7.0.0"
                    },
                    {
                        "version_added": "6.5.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.getOwnPropertyDescriptors()"
        }
    ],
    "sec-object.getownpropertynames": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "getOwnPropertyNames",
            "slug": "JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames",
            "summary": "The Object.getOwnPropertyNames() static method returns an array of all properties (including non-enumerable properties except for those which use Symbol) found directly in a given object.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.getOwnPropertyNames()"
        }
    ],
    "sec-object.getownpropertysymbols": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "getOwnPropertySymbols",
            "slug": "JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols",
            "summary": "The Object.getOwnPropertySymbols() static method returns an array of all symbol properties found directly upon a given object.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "36"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.getOwnPropertySymbols()"
        }
    ],
    "sec-object.getprototypeof": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "getPrototypeOf",
            "slug": "JavaScript/Reference/Global_Objects/Object/getPrototypeOf",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf",
            "summary": "The Object.getPrototypeOf() static method returns the prototype (i.e. the value of the internal [[Prototype]] property) of the specified object.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.getPrototypeOf()"
        }
    ],
    "sec-object.hasown": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "hasOwn",
            "slug": "JavaScript/Reference/Global_Objects/Object/hasOwn",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwn",
            "summary": "The Object.hasOwn() static method returns true if the specified object has the indicated property as its own property. If the property is inherited, or does not exist, the method returns false.",
            "support": {
                "chrome": {
                    "version_added": "93"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.13"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "92"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "16.9.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "93"
                }
            },
            "title": "Object.hasOwn()"
        }
    ],
    "sec-object.prototype.hasownproperty": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "hasOwnProperty",
            "slug": "JavaScript/Reference/Global_Objects/Object/hasOwnProperty",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty",
            "summary": "The hasOwnProperty() method returns a boolean indicating whether the object has the specified property as its own property (as opposed to inheriting it).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.prototype.hasOwnProperty()"
        }
    ],
    "sec-object.is": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "is",
            "slug": "JavaScript/Reference/Global_Objects/Object/is",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is",
            "summary": "The Object.is() static method determines whether two values are the same value.",
            "support": {
                "chrome": {
                    "version_added": "19"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.is()"
        }
    ],
    "sec-object.isextensible": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "isExtensible",
            "slug": "JavaScript/Reference/Global_Objects/Object/isExtensible",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible",
            "summary": "The Object.isExtensible() static method determines if an object is extensible (whether it can have new properties added to it).",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.isExtensible()"
        }
    ],
    "sec-object.isfrozen": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "isFrozen",
            "slug": "JavaScript/Reference/Global_Objects/Object/isFrozen",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen",
            "summary": "The Object.isFrozen() static method determines if an object is frozen.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.isFrozen()"
        }
    ],
    "sec-object.prototype.isprototypeof": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "isPrototypeOf",
            "slug": "JavaScript/Reference/Global_Objects/Object/isPrototypeOf",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf",
            "summary": "The isPrototypeOf() method checks if an object exists in another object's prototype chain.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.prototype.isPrototypeOf()"
        }
    ],
    "sec-object.issealed": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "isSealed",
            "slug": "JavaScript/Reference/Global_Objects/Object/isSealed",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed",
            "summary": "The Object.isSealed() static method determines if an object is sealed.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.isSealed()"
        }
    ],
    "sec-object.keys": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "keys",
            "slug": "JavaScript/Reference/Global_Objects/Object/keys",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys",
            "summary": "The Object.keys() static method returns an array of a given object's own enumerable string-keyed property names.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.keys()"
        }
    ],
    "sec-object.preventextensions": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "preventExtensions",
            "slug": "JavaScript/Reference/Global_Objects/Object/preventExtensions",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions",
            "summary": "The Object.preventExtensions() static method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object). It also prevents the object's prototype from being re-assigned.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.preventExtensions()"
        }
    ],
    "sec-object.prototype.propertyisenumerable": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "propertyIsEnumerable",
            "slug": "JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable",
            "summary": "The propertyIsEnumerable() method returns a boolean indicating whether the specified property is the object's enumerable own property.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.prototype.propertyIsEnumerable()"
        }
    ],
    "sec-object.seal": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "seal",
            "slug": "JavaScript/Reference/Global_Objects/Object/seal",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/seal",
            "summary": "The Object.seal() static method seals an object. Sealing an object prevents extensions and makes existing properties non-configurable. A sealed object has a fixed set of properties: new properties cannot be added, existing properties cannot be removed, their enumerability and configurability cannot be changed, and its prototype cannot be re-assigned. Values of existing properties can still be changed as long as they are writable. seal() returns the same object that was passed in.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.seal()"
        }
    ],
    "sec-object.setprototypeof": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "setPrototypeOf",
            "slug": "JavaScript/Reference/Global_Objects/Object/setPrototypeOf",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf",
            "summary": "The Object.setPrototypeOf() static method sets the prototype (i.e., the internal [[Prototype]] property) of a specified object to another object or null.",
            "support": {
                "chrome": {
                    "version_added": "34"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.setPrototypeOf()"
        }
    ],
    "sec-object.prototype.tolocalestring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "toLocaleString",
            "slug": "JavaScript/Reference/Global_Objects/Object/toLocaleString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString",
            "summary": "The toLocaleString() method returns a string representing the object. This method is meant to be overridden by derived objects for locale-specific purposes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.prototype.toLocaleString()"
        }
    ],
    "sec-object.prototype.tostring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "toString",
            "slug": "JavaScript/Reference/Global_Objects/Object/toString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString",
            "summary": "The toString() method returns a string representing the object. This method is meant to be overridden by derived objects for custom type conversion logic.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.prototype.toString()"
        }
    ],
    "sec-object.prototype.valueof": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "valueOf",
            "slug": "JavaScript/Reference/Global_Objects/Object/valueOf",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf",
            "summary": "The valueOf() method of Object instances converts the this value to an object. This method is meant to be overridden by derived objects for custom type conversion logic.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object.prototype.valueOf()"
        }
    ],
    "sec-object.values": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "values",
            "slug": "JavaScript/Reference/Global_Objects/Object/values",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values",
            "summary": "The Object.values() static method returns an array of a given object's own enumerable string-keyed property values.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "47"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "7.0.0"
                    },
                    {
                        "version_added": "6.5.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "object-values",
                "title": "Object.values method"
            },
            "title": "Object.values()"
        }
    ],
    "sec-object-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Object.json",
            "name": "Object",
            "slug": "JavaScript/Reference/Global_Objects/Object",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
            "summary": "The Object type represents one of JavaScript's data types. It is used to store various keyed collections and more complex entities. Objects can be created using the Object() constructor or the object initializer / literal syntax.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object"
        }
    ],
    "sec-promise-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Promise.json",
            "name": "Promise",
            "slug": "JavaScript/Reference/Global_Objects/Promise/Promise",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise",
            "summary": "The Promise() constructor creates Promise objects. It is primarily used to wrap callback-based APIs that do not already support promises.",
            "support": {
                "chrome": {
                    "version_added": "32"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "29",
                    "notes": "Constructor requires a new operator since version 37."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0",
                    "notes": "Constructor requires a new operator since version 4."
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8",
                    "notes": "Constructor requires a new operator since version 10."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Promise() constructor"
        }
    ],
    "sec-promise.all": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Promise.json",
            "name": "all",
            "slug": "JavaScript/Reference/Global_Objects/Promise/all",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all",
            "summary": "The Promise.all() static method takes an iterable of promises as input and returns a single Promise. This returned promise fulfills when all of the input's promises fulfill (including when an empty iterable is passed), with an array of the fulfillment values. It rejects when any of the input's promises rejects, with this first rejection reason.",
            "support": {
                "chrome": {
                    "version_added": "32"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Promise.all()"
        }
    ],
    "sec-promise.allsettled": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Promise.json",
            "name": "allSettled",
            "slug": "JavaScript/Reference/Global_Objects/Promise/allSettled",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled",
            "summary": "The Promise.allSettled() static method takes an iterable of promises as input and returns a single Promise. This returned promise fulfills when all of the input's promises settle (including when an empty iterable is passed), with an array of objects that describe the outcome of each promise.",
            "support": {
                "chrome": {
                    "version_added": "76"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "71"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "12.9.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "13"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Promise.allSettled()"
        }
    ],
    "sec-promise.any": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Promise.json",
            "name": "any",
            "slug": "JavaScript/Reference/Global_Objects/Promise/any",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/any",
            "summary": "The Promise.any() static method takes an iterable of promises as input and returns a single Promise. This returned promise fulfills when any of the input's promises fulfills, with this first fulfillment value. It rejects when all of the input's promises reject (including when an empty iterable is passed), with an AggregateError containing an array of rejection reasons.",
            "support": {
                "chrome": {
                    "version_added": "85"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.2"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "79"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "85"
                }
            },
            "title": "Promise.any()"
        }
    ],
    "sec-promise.prototype.catch": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Promise.json",
            "name": "catch",
            "slug": "JavaScript/Reference/Global_Objects/Promise/catch",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch",
            "summary": "The catch() method of Promise instances schedules a function to be called when the promise is rejected. It immediately returns an equivalent Promise object, allowing you to chain calls to other promise methods. It is a shortcut for Promise.prototype.then(undefined, onRejected).",
            "support": {
                "chrome": {
                    "version_added": "32"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Promise.prototype.catch()"
        }
    ],
    "sec-promise.prototype.finally": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Promise.json",
            "name": "finally",
            "slug": "JavaScript/Reference/Global_Objects/Promise/finally",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally",
            "summary": "The finally() method of Promise instances schedules a function to be called when the promise is settled (either fulfilled or rejected). It immediately returns an equivalent Promise object, allowing you to chain calls to other promise methods.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "58"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "10.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "promise-finally",
                "title": "Promise.prototype.finally"
            },
            "title": "Promise.prototype.finally()"
        }
    ],
    "sec-promise.race": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Promise.json",
            "name": "race",
            "slug": "JavaScript/Reference/Global_Objects/Promise/race",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race",
            "summary": "The Promise.race() static method takes an iterable of promises as input and returns a single Promise. This returned promise settles with the eventual state of the first promise that settles.",
            "support": {
                "chrome": {
                    "version_added": "32"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Promise.race()"
        }
    ],
    "sec-promise.reject": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Promise.json",
            "name": "reject",
            "slug": "JavaScript/Reference/Global_Objects/Promise/reject",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject",
            "summary": "The Promise.reject() static method returns a Promise object that is rejected with a given reason.",
            "support": {
                "chrome": {
                    "version_added": "32"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Promise.reject()"
        }
    ],
    "sec-promise.resolve": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Promise.json",
            "name": "resolve",
            "slug": "JavaScript/Reference/Global_Objects/Promise/resolve",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve",
            "summary": "The Promise.resolve() static method \"resolves\" a given value to a Promise. If the value is a promise, that promise is returned; if the value is a thenable, Promise.resolve() will call the then() method with two callbacks it prepared; otherwise the returned promise will be fulfilled with the value.",
            "support": {
                "chrome": {
                    "version_added": "32"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Promise.resolve()"
        }
    ],
    "sec-promise.prototype.then": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Promise.json",
            "name": "then",
            "slug": "JavaScript/Reference/Global_Objects/Promise/then",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then",
            "summary": "The then() method of Promise instances takes up to two arguments: callback functions for the fulfilled and rejected cases of the Promise. It immediately returns an equivalent Promise object, allowing you to chain calls to other promise methods.",
            "support": {
                "chrome": {
                    "version_added": "32"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Promise.prototype.then()"
        }
    ],
    "sec-get-promise-@@species": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Promise.json",
            "name": "@@species",
            "slug": "JavaScript/Reference/Global_Objects/Promise/@@species",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/@@species",
            "summary": "The Promise[@@species] static accessor property returns the constructor used to construct return values from promise methods.",
            "support": {
                "chrome": {
                    "version_added": "51"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "6.5.0"
                    },
                    {
                        "version_added": "6.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Promise[@@species]"
        }
    ],
    "sec-promise-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Promise.json",
            "name": "Promise",
            "slug": "JavaScript/Reference/Global_Objects/Promise",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
            "summary": "The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.",
            "support": {
                "chrome": {
                    "version_added": "32"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "promises",
                "title": "Promises"
            },
            "title": "Promise"
        }
    ],
    "sec-proxy-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Proxy.json",
            "name": "Proxy",
            "slug": "JavaScript/Reference/Global_Objects/Proxy/Proxy",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy",
            "summary": "The Proxy() constructor creates Proxy objects.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "18"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Proxy() constructor"
        }
    ],
    "sec-proxy-object-internal-methods-and-internal-slots-call-thisargument-argumentslist": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Proxy.json",
            "name": "apply",
            "slug": "JavaScript/Reference/Global_Objects/Proxy/Proxy/apply",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/apply",
            "summary": "The handler.apply() method is a trap for the [[Call]] object internal method, which is used by operations such as function calls.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "18"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "handler.apply()"
        }
    ],
    "sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Proxy.json",
            "name": "construct",
            "slug": "JavaScript/Reference/Global_Objects/Proxy/Proxy/construct",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/construct",
            "summary": "The handler.construct() method is a trap for the [[Construct]] object internal method, which is used by operations such as the new operator. In order for the new operation to be valid on the resulting Proxy object, the target used to initialize the proxy must itself be a valid constructor.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "18"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "handler.construct()"
        }
    ],
    "sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Proxy.json",
            "name": "defineProperty",
            "slug": "JavaScript/Reference/Global_Objects/Proxy/Proxy/defineProperty",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/defineProperty",
            "summary": "The handler.defineProperty() method is a trap for the [[DefineOwnProperty]] object internal method, which is used by operations such as Object.defineProperty().",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "18"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "handler.defineProperty()"
        }
    ],
    "sec-proxy-object-internal-methods-and-internal-slots-delete-p": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Proxy.json",
            "name": "deleteProperty",
            "slug": "JavaScript/Reference/Global_Objects/Proxy/Proxy/deleteProperty",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/deleteProperty",
            "summary": "The handler.deleteProperty() method is a trap for the [[Delete]] object internal method, which is used by operations such as the delete operator.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "18"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "handler.deleteProperty()"
        }
    ],
    "sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Proxy.json",
            "name": "get",
            "slug": "JavaScript/Reference/Global_Objects/Proxy/Proxy/get",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/get",
            "summary": "The handler.get() method is a trap for the [[Get]] object internal method, which is used by operations such as property accessors.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "18"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "handler.get()"
        }
    ],
    "sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Proxy.json",
            "name": "getOwnPropertyDescriptor",
            "slug": "JavaScript/Reference/Global_Objects/Proxy/Proxy/getOwnPropertyDescriptor",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getOwnPropertyDescriptor",
            "summary": "The handler.getOwnPropertyDescriptor() method is a trap for the [[GetOwnProperty]] object internal method, which is used by operations such as Object.getOwnPropertyDescriptor().",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "18"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "handler.getOwnPropertyDescriptor()"
        }
    ],
    "sec-proxy-object-internal-methods-and-internal-slots-getprototypeof": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Proxy.json",
            "name": "getPrototypeOf",
            "slug": "JavaScript/Reference/Global_Objects/Proxy/Proxy/getPrototypeOf",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/getPrototypeOf",
            "summary": "The handler.getPrototypeOf() method is a trap for the [[GetPrototypeOf]] object internal method, which is used by operations such as Object.getPrototypeOf().",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "handler.getPrototypeOf()"
        }
    ],
    "sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Proxy.json",
            "name": "has",
            "slug": "JavaScript/Reference/Global_Objects/Proxy/Proxy/has",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/has",
            "summary": "The handler.has() method is a trap for the [[HasProperty]] object internal method, which is used by operations such as the in operator.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "18"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "handler.has()"
        }
    ],
    "sec-proxy-object-internal-methods-and-internal-slots-isextensible": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Proxy.json",
            "name": "isExtensible",
            "slug": "JavaScript/Reference/Global_Objects/Proxy/Proxy/isExtensible",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/isExtensible",
            "summary": "The handler.isExtensible() method is a trap for the [[IsExtensible]] object internal method, which is used by operations such as Object.isExtensible().",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "handler.isExtensible()"
        }
    ],
    "sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Proxy.json",
            "name": "ownKeys",
            "slug": "JavaScript/Reference/Global_Objects/Proxy/Proxy/ownKeys",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/ownKeys",
            "summary": "The handler.ownKeys() method is a trap for the [[OwnPropertyKeys]] object internal method, which is used by operations such as Object.keys(), Reflect.ownKeys(), etc.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "18",
                    "notes": "In Firefox 42, the implementation got updated to reflect the final ES2015 specification: The result is now checked if it is an array and if the array elements are either of type string or of type symbol. Enumerating duplicate own property names is not a failure anymore."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "handler.ownKeys()"
        }
    ],
    "sec-proxy-object-internal-methods-and-internal-slots-preventextensions": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Proxy.json",
            "name": "preventExtensions",
            "slug": "JavaScript/Reference/Global_Objects/Proxy/Proxy/preventExtensions",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/preventExtensions",
            "summary": "The handler.preventExtensions() method is a trap for the [[PreventExtensions]] object internal method, which is used by operations such as Object.preventExtensions().",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "handler.preventExtensions()"
        }
    ],
    "sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Proxy.json",
            "name": "set",
            "slug": "JavaScript/Reference/Global_Objects/Proxy/Proxy/set",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/set",
            "summary": "The handler.set() method is a trap for the [[Set]] object internal method, which is used by operations such as using property accessors to set a property's value.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "18"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "handler.set()"
        }
    ],
    "sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Proxy.json",
            "name": "setPrototypeOf",
            "slug": "JavaScript/Reference/Global_Objects/Proxy/Proxy/setPrototypeOf",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy/setPrototypeOf",
            "summary": "The handler.setPrototypeOf() method is a trap for the [[SetPrototypeOf]] object internal method, which is used by operations such as Object.setPrototypeOf().",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "handler.setPrototypeOf()"
        }
    ],
    "sec-proxy.revocable": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Proxy.json",
            "name": "revocable",
            "slug": "JavaScript/Reference/Global_Objects/Proxy/revocable",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/revocable",
            "summary": "The Proxy.revocable() static method creates a revocable Proxy object.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "34"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Proxy.revocable()"
        }
    ],
    "sec-proxy-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Proxy.json",
            "name": "Proxy",
            "slug": "JavaScript/Reference/Global_Objects/Proxy",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
            "summary": "The Proxy object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "18"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "proxy",
                "title": "Proxy object"
            },
            "title": "Proxy"
        }
    ],
    "sec-native-error-types-used-in-this-standard-rangeerror": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RangeError.json",
            "name": "RangeError",
            "slug": "JavaScript/Reference/Global_Objects/RangeError",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
            "summary": "The RangeError object indicates an error when a value is not in the set or range of allowed values.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RangeError"
        }
    ],
    "sec-native-error-types-used-in-this-standard-referenceerror": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/ReferenceError.json",
            "name": "ReferenceError",
            "slug": "JavaScript/Reference/Global_Objects/ReferenceError",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
            "summary": "The ReferenceError object represents an error when a variable that doesn't exist (or hasn't yet been initialized) in the current scope is referenced.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ReferenceError"
        }
    ],
    "sec-reflect.apply": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Reflect.json",
            "name": "apply",
            "slug": "JavaScript/Reference/Global_Objects/Reflect/apply",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply",
            "summary": "The Reflect.apply() static method calls a target function with arguments as specified.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Reflect.apply()"
        }
    ],
    "sec-reflect.construct": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Reflect.json",
            "name": "construct",
            "slug": "JavaScript/Reference/Global_Objects/Reflect/construct",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct",
            "summary": "The Reflect.construct() static method is like the new operator, but as a function. It is equivalent to calling new target(...args). It gives also the added option to specify a different new.target value.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Reflect.construct()"
        }
    ],
    "sec-reflect.defineproperty": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Reflect.json",
            "name": "defineProperty",
            "slug": "JavaScript/Reference/Global_Objects/Reflect/defineProperty",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty",
            "summary": "The Reflect.defineProperty() static method is like Object.defineProperty() but returns a Boolean.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Reflect.defineProperty()"
        }
    ],
    "sec-reflect.deleteproperty": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Reflect.json",
            "name": "deleteProperty",
            "slug": "JavaScript/Reference/Global_Objects/Reflect/deleteProperty",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty",
            "summary": "The Reflect.deleteProperty() static method is like the delete operator, but as a function. It deletes a property from an object.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Reflect.deleteProperty()"
        }
    ],
    "sec-reflect.get": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Reflect.json",
            "name": "get",
            "slug": "JavaScript/Reference/Global_Objects/Reflect/get",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get",
            "summary": "The Reflect.get() static method is like the property accessor syntax, but as a function.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Reflect.get()"
        }
    ],
    "sec-reflect.getownpropertydescriptor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Reflect.json",
            "name": "getOwnPropertyDescriptor",
            "slug": "JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getOwnPropertyDescriptor",
            "summary": "The Reflect.getOwnPropertyDescriptor() static method is like Object.getOwnPropertyDescriptor(). It returns a property descriptor of the given property if it exists on the object, undefined otherwise.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Reflect.getOwnPropertyDescriptor()"
        }
    ],
    "sec-reflect.getprototypeof": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Reflect.json",
            "name": "getPrototypeOf",
            "slug": "JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf",
            "summary": "The Reflect.getPrototypeOf() static method is like Object.getPrototypeOf(). It returns the prototype of the specified object.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Reflect.getPrototypeOf()"
        }
    ],
    "sec-reflect.has": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Reflect.json",
            "name": "has",
            "slug": "JavaScript/Reference/Global_Objects/Reflect/has",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/has",
            "summary": "The Reflect.has() static method is like the in operator, but as a function.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Reflect.has()"
        }
    ],
    "sec-reflect.isextensible": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Reflect.json",
            "name": "isExtensible",
            "slug": "JavaScript/Reference/Global_Objects/Reflect/isExtensible",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/isExtensible",
            "summary": "The Reflect.isExtensible() static method is like Object.isExtensible(). It determines if an object is extensible (whether it can have new properties added to it).",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Reflect.isExtensible()"
        }
    ],
    "sec-reflect.ownkeys": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Reflect.json",
            "name": "ownKeys",
            "slug": "JavaScript/Reference/Global_Objects/Reflect/ownKeys",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys",
            "summary": "The Reflect.ownKeys() static method returns an array of the target object's own property keys.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Reflect.ownKeys()"
        }
    ],
    "sec-reflect.preventextensions": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Reflect.json",
            "name": "preventExtensions",
            "slug": "JavaScript/Reference/Global_Objects/Reflect/preventExtensions",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/preventExtensions",
            "summary": "The Reflect.preventExtensions() static method is like Object.preventExtensions(). It prevents new properties from ever being added to an object (i.e., prevents future extensions to the object).",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Reflect.preventExtensions()"
        }
    ],
    "sec-reflect.set": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Reflect.json",
            "name": "set",
            "slug": "JavaScript/Reference/Global_Objects/Reflect/set",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set",
            "summary": "The Reflect.set() static method is like the property accessor and assignment syntax, but as a function.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Reflect.set()"
        }
    ],
    "sec-reflect.setprototypeof": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Reflect.json",
            "name": "setPrototypeOf",
            "slug": "JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf",
            "summary": "The Reflect.setPrototypeOf() static method is like Object.setPrototypeOf() but returns a Boolean. It sets the prototype (i.e., the internal [[Prototype]] property) of a specified object.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Reflect.setPrototypeOf()"
        }
    ],
    "sec-reflect-object": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Reflect.json",
            "name": "Reflect",
            "slug": "JavaScript/Reference/Global_Objects/Reflect",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
            "summary": "The Reflect namespace object contains static methods for invoking interceptable JavaScript object internal methods. The methods are the same as those of proxy handlers.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Reflect"
        }
    ],
    "sec-regexp-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RegExp.json",
            "name": "RegExp",
            "slug": "JavaScript/Reference/Global_Objects/RegExp/RegExp",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp",
            "summary": "The RegExp() constructor creates RegExp objects.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RegExp() constructor"
        }
    ],
    "sec-get-regexp.prototype.dotAll": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RegExp.json",
            "name": "dotAll",
            "slug": "JavaScript/Reference/Global_Objects/RegExp/dotAll",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/dotAll",
            "summary": "The dotAll accessor property of RegExp instances returns whether or not the s flag is used with this regular expression.",
            "support": {
                "chrome": {
                    "version_added": "62"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "78"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "8.10.0"
                    },
                    {
                        "version_added": "8.3.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RegExp.prototype.dotAll"
        }
    ],
    "sec-regexp.prototype.exec": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RegExp.json",
            "name": "exec",
            "slug": "JavaScript/Reference/Global_Objects/RegExp/exec",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec",
            "summary": "The exec() method executes a search for a match in a specified string and returns a result array, or null.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RegExp.prototype.exec()"
        }
    ],
    "sec-get-regexp.prototype.flags": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RegExp.json",
            "name": "flags",
            "slug": "JavaScript/Reference/Global_Objects/RegExp/flags",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/flags",
            "summary": "The flags accessor property of RegExp instances returns the flags of this regular expression.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "37"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "39"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RegExp.prototype.flags"
        }
    ],
    "sec-get-regexp.prototype.global": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RegExp.json",
            "name": "global",
            "slug": "JavaScript/Reference/Global_Objects/RegExp/global",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/global",
            "summary": "The global accessor property of RegExp instances returns whether or not the g flag is used with this regular expression.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RegExp.prototype.global"
        }
    ],
    "sec-get-regexp.prototype.hasIndices": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RegExp.json",
            "name": "hasIndices",
            "slug": "JavaScript/Reference/Global_Objects/RegExp/hasIndices",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/hasIndices",
            "summary": "The hasIndices accessor property of RegExp instances returns whether or not the d flag is used with this regular expression.",
            "support": {
                "chrome": {
                    "version_added": "90"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.8"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "88"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "16.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "90"
                }
            },
            "title": "RegExp.prototype.hasIndices"
        }
    ],
    "sec-get-regexp.prototype.ignorecase": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RegExp.json",
            "name": "ignoreCase",
            "slug": "JavaScript/Reference/Global_Objects/RegExp/ignoreCase",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/ignoreCase",
            "summary": "The ignoreCase accessor property of RegExp instances returns whether or not the i flag is used with this regular expression.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RegExp.prototype.ignoreCase"
        }
    ],
    "sec-properties-of-regexp-instances": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RegExp.json",
            "name": "lastIndex",
            "slug": "JavaScript/Reference/Global_Objects/RegExp/lastIndex",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex",
            "summary": "The lastIndex data property of a RegExp instance specifies the index at which to start the next match.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RegExp: lastIndex"
        }
    ],
    "sec-get-regexp.prototype.multiline": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RegExp.json",
            "name": "multiline",
            "slug": "JavaScript/Reference/Global_Objects/RegExp/multiline",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/multiline",
            "summary": "The multiline accessor property of RegExp instances returns whether or not the m flag is used with this regular expression.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RegExp.prototype.multiline"
        }
    ],
    "sec-get-regexp.prototype.source": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RegExp.json",
            "name": "source",
            "slug": "JavaScript/Reference/Global_Objects/RegExp/source",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source",
            "summary": "The source accessor property of RegExp instances returns a string containing the source text of this regular expression, without the two forward slashes on both sides or any flags.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RegExp.prototype.source"
        }
    ],
    "sec-get-regexp.prototype.sticky": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RegExp.json",
            "name": "sticky",
            "slug": "JavaScript/Reference/Global_Objects/RegExp/sticky",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/sticky",
            "summary": "The sticky accessor property of RegExp instances returns whether or not the y flag is used with this regular expression.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RegExp.prototype.sticky"
        }
    ],
    "sec-regexp.prototype.test": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RegExp.json",
            "name": "test",
            "slug": "JavaScript/Reference/Global_Objects/RegExp/test",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test",
            "summary": "The test() method executes a search for a match between a regular expression and a specified string. Returns true if there is a match; false otherwise.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RegExp.prototype.test()"
        }
    ],
    "sec-regexp.prototype.tostring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RegExp.json",
            "name": "toString",
            "slug": "JavaScript/Reference/Global_Objects/RegExp/toString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/toString",
            "summary": "The toString() method returns a string representing the regular expression.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RegExp.prototype.toString()"
        }
    ],
    "sec-get-regexp.prototype.unicode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RegExp.json",
            "name": "unicode",
            "slug": "JavaScript/Reference/Global_Objects/RegExp/unicode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode",
            "summary": "The unicode accessor property of RegExp instances returns whether or not the u flag is used with this regular expression.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "46"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0",
                    "notes": "Case folding is implemented in version 8.6.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RegExp.prototype.unicode"
        }
    ],
    "sec-get-regexp.prototype.unicodesets": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RegExp.json",
            "name": "unicodeSets",
            "slug": "JavaScript/Reference/Global_Objects/RegExp/unicodeSets",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicodeSets",
            "summary": "The unicodeSets accessor property of RegExp instances returns whether or not the v flag is used with this regular expression.",
            "support": {
                "chrome": {
                    "version_added": "112"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.32"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "116"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "20.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "17"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "112"
                }
            },
            "title": "RegExp.prototype.unicodeSets"
        }
    ],
    "sec-regexp.prototype-@@match": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RegExp.json",
            "name": "@@match",
            "slug": "JavaScript/Reference/Global_Objects/RegExp/@@match",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@match",
            "summary": "The [@@match]() method of RegExp instances specifies how String.prototype.match() should behave. In addition, its presence (or absence) can influence whether an object is regarded as a regular expression.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RegExp.prototype[@@match]()"
        }
    ],
    "sec-regexp-prototype-matchall": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RegExp.json",
            "name": "@@matchAll",
            "slug": "JavaScript/Reference/Global_Objects/RegExp/@@matchAll",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@matchAll",
            "summary": "The [@@matchAll]() method of RegExp instances specifies how String.prototype.matchAll should behave.",
            "support": {
                "chrome": {
                    "version_added": "73"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "67"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "12.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "13"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "5.0"
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RegExp.prototype[@@matchAll]()"
        }
    ],
    "sec-regexp.prototype-@@replace": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RegExp.json",
            "name": "@@replace",
            "slug": "JavaScript/Reference/Global_Objects/RegExp/@@replace",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace",
            "summary": "The [@@replace]() method of RegExp instances specifies how String.prototype.replace() and String.prototype.replaceAll() should behave when the regular expression is passed in as the pattern.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RegExp.prototype[@@replace]()"
        }
    ],
    "sec-regexp.prototype-@@search": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RegExp.json",
            "name": "@@search",
            "slug": "JavaScript/Reference/Global_Objects/RegExp/@@search",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@search",
            "summary": "The [@@search]() method of RegExp instances specifies how String.prototype.search should behave.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RegExp.prototype[@@search]()"
        }
    ],
    "sec-get-regexp-@@species": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RegExp.json",
            "name": "@@species",
            "slug": "JavaScript/Reference/Global_Objects/RegExp/@@species",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@species",
            "summary": "The RegExp[@@species] static accessor property returns the constructor used to construct copied regular expressions in certain RegExp methods.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "6.5.0"
                    },
                    {
                        "version_added": "6.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RegExp[@@species]"
        }
    ],
    "sec-regexp.prototype-@@split": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RegExp.json",
            "name": "@@split",
            "slug": "JavaScript/Reference/Global_Objects/RegExp/@@split",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/@@split",
            "summary": "The [@@split]() method of RegExp instances specifies how String.prototype.split should behave when the regular expression is passed in as the separator.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RegExp.prototype[@@split]()"
        }
    ],
    "sec-regexp-regular-expression-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/RegExp.json",
            "name": "RegExp",
            "slug": "JavaScript/Reference/Global_Objects/RegExp",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
            "summary": "The RegExp object is used for matching text with a pattern.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RegExp"
        }
    ],
    "sec-set-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Set.json",
            "name": "Set",
            "slug": "JavaScript/Reference/Global_Objects/Set/Set",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/Set",
            "summary": "The Set() constructor creates Set objects.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "13"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": [
                    {
                        "version_added": "0.12.0"
                    },
                    {
                        "version_added": "0.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Set() constructor"
        }
    ],
    "sec-set.prototype.add": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Set.json",
            "name": "add",
            "slug": "JavaScript/Reference/Global_Objects/Set/add",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/add",
            "summary": "The add() method inserts a new element with a specified value in to a Set object, if there isn't an element with the same value already in the Set.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "13"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11",
                    "partial_implementation": true,
                    "notes": "Returns 'undefined' instead of the 'Set' object."
                },
                "nodejs": [
                    {
                        "version_added": "0.12.0"
                    },
                    {
                        "version_added": "0.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Set.prototype.add()"
        }
    ],
    "sec-set.prototype.clear": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Set.json",
            "name": "clear",
            "slug": "JavaScript/Reference/Global_Objects/Set/clear",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/clear",
            "summary": "The clear() method removes all elements from a Set object.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "19"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Set.prototype.clear()"
        }
    ],
    "sec-set.prototype.delete": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Set.json",
            "name": "delete",
            "slug": "JavaScript/Reference/Global_Objects/Set/delete",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/delete",
            "summary": "The delete() method removes a specified value from a Set object, if it is in the set.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "13"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": [
                    {
                        "version_added": "0.12.0"
                    },
                    {
                        "version_added": "0.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Set.prototype.delete()"
        }
    ],
    "sec-set.prototype.entries": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Set.json",
            "name": "entries",
            "slug": "JavaScript/Reference/Global_Objects/Set/entries",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/entries",
            "summary": "The entries() method returns a new set iterator object that contains an array of [value, value] for each element in the Set object, in insertion order. For Set objects there is no key like in Map objects. However, to keep the API similar to the Map object, each entry has the same value for its key and value here, so that an array [value, value] is returned.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "24"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Set.prototype.entries()"
        }
    ],
    "sec-set.prototype.foreach": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Set.json",
            "name": "forEach",
            "slug": "JavaScript/Reference/Global_Objects/Set/forEach",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach",
            "summary": "The forEach() method executes a provided function once for each value in the Set object, in insertion order.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Set.prototype.forEach()"
        }
    ],
    "sec-set.prototype.has": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Set.json",
            "name": "has",
            "slug": "JavaScript/Reference/Global_Objects/Set/has",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/has",
            "summary": "The has() method returns a boolean indicating whether an element with the specified value exists in a Set object or not.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "13"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": [
                    {
                        "version_added": "0.12.0"
                    },
                    {
                        "version_added": "0.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Set.prototype.has()"
        }
    ],
    "sec-get-set.prototype.size": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Set.json",
            "name": "size",
            "slug": "JavaScript/Reference/Global_Objects/Set/size",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/size",
            "summary": "The size accessor property of Set instances returns the number of (unique) elements in this set.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "19",
                    "notes": "From Firefox 13 to Firefox 18, the <code>size</code> property was implemented as a <code>Set.prototype.size()</code> method, this has been changed to a property in later versions conform to the ECMAScript 2015 specification."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Set.prototype.size"
        }
    ],
    "sec-set.prototype.values": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Set.json",
            "name": "values",
            "slug": "JavaScript/Reference/Global_Objects/Set/values",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/values",
            "summary": "The values() method returns a new set iterator object that contains the values for each element in the Set object in insertion order.",
            "support": {
                "chrome": [
                    {
                        "version_added": "38"
                    },
                    {
                        "alternative_name": "keys",
                        "version_added": "38"
                    }
                ],
                "chrome_android": "mirror",
                "deno": [
                    {
                        "version_added": "1.0"
                    },
                    {
                        "alternative_name": "keys",
                        "version_added": "1.0"
                    }
                ],
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "24"
                    },
                    {
                        "alternative_name": "keys",
                        "version_added": "24"
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "0.12.0"
                    },
                    {
                        "alternative_name": "keys",
                        "version_added": "0.12.0"
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": [
                    {
                        "version_added": "8"
                    },
                    {
                        "alternative_name": "keys",
                        "version_added": "8"
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "alternative_name": "keys",
                        "version_added": "79"
                    }
                ]
            },
            "title": "Set.prototype.values()"
        }
    ],
    "sec-set.prototype-@@iterator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Set.json",
            "name": "@@iterator",
            "slug": "JavaScript/Reference/Global_Objects/Set/@@iterator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@iterator",
            "summary": "The [@@iterator]() method of Set instances implements the iterable protocol and allows sets to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns an set iterator object that yields the values of the set in insertion order.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "36"
                    },
                    {
                        "alternative_name": "@@iterator",
                        "version_added": "27",
                        "version_removed": "36",
                        "notes": "A placeholder property named <code>@@iterator</code> is used."
                    },
                    {
                        "alternative_name": "iterator",
                        "version_added": "17",
                        "version_removed": "27",
                        "notes": "A placeholder property named <code>iterator</code> is used."
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Set.prototype[@@iterator]()"
        }
    ],
    "sec-get-set-@@species": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Set.json",
            "name": "@@species",
            "slug": "JavaScript/Reference/Global_Objects/Set/@@species",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/@@species",
            "summary": "The Set[@@species] static accessor property is an unused accessor property specifying how to copy Set objects.",
            "support": {
                "chrome": {
                    "version_added": "51"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "6.5.0"
                    },
                    {
                        "version_added": "6.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Set[@@species]"
        }
    ],
    "sec-set-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Set.json",
            "name": "Set",
            "slug": "JavaScript/Reference/Global_Objects/Set",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
            "summary": "The Set object lets you store unique values of any type, whether primitive values or object references.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "13"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": [
                    {
                        "version_added": "0.12.0"
                    },
                    {
                        "version_added": "0.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Set"
        }
    ],
    "sec-sharedarraybuffer-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/SharedArrayBuffer.json",
            "name": "SharedArrayBuffer",
            "slug": "JavaScript/Reference/Global_Objects/SharedArrayBuffer/SharedArrayBuffer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/SharedArrayBuffer",
            "summary": "The SharedArrayBuffer() constructor creates SharedArrayBuffer objects.",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": {
                    "version_added": "89"
                },
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "79"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.10.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SharedArrayBuffer() constructor"
        }
    ],
    "sec-get-sharedarraybuffer.prototype.bytelength": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/SharedArrayBuffer.json",
            "name": "byteLength",
            "slug": "JavaScript/Reference/Global_Objects/SharedArrayBuffer/byteLength",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/byteLength",
            "summary": "The byteLength accessor property of SharedArrayBuffer instances returns the length (in bytes) of this SharedArrayBuffer.",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": {
                    "version_added": "89"
                },
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "79"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.10.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SharedArrayBuffer.prototype.byteLength"
        }
    ],
    "sec-sharedarraybuffer.prototype.slice": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/SharedArrayBuffer.json",
            "name": "slice",
            "slug": "JavaScript/Reference/Global_Objects/SharedArrayBuffer/slice",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/slice",
            "summary": "The slice() method of SharedArrayBuffer instances returns a new SharedArrayBuffer whose contents are a copy of this SharedArrayBuffer's bytes from begin, inclusive, up to end, exclusive. If either begin or end is negative, it refers to an index from the end of the array, as opposed to from the beginning. This method has the same algorithm as Array.prototype.slice().",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": {
                    "version_added": "89"
                },
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "79"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.10.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SharedArrayBuffer.prototype.slice()"
        }
    ],
    "sec-sharedarraybuffer-@@species": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/SharedArrayBuffer.json",
            "name": "@@species",
            "slug": "JavaScript/Reference/Global_Objects/SharedArrayBuffer/@@species",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer/@@species",
            "summary": "The SharedArrayBuffer[@@species] static accessor property returns the constructor used to construct return values from SharedArrayBuffer methods.",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": {
                    "version_added": "89"
                },
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "79"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.10.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SharedArrayBuffer[@@species]"
        }
    ],
    "sec-sharedarraybuffer-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/SharedArrayBuffer.json",
            "name": "SharedArrayBuffer",
            "slug": "JavaScript/Reference/Global_Objects/SharedArrayBuffer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer",
            "summary": "The SharedArrayBuffer object is used to represent a generic raw binary data buffer, similar to the ArrayBuffer object, but in a way that they can be used to create views on shared memory. A SharedArrayBuffer is not a Transferable Object, unlike an ArrayBuffer which is transferable.",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": {
                    "version_added": "89"
                },
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "79"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.10.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "sharedarraybuffer",
                "title": "Shared Array Buffer"
            },
            "title": "SharedArrayBuffer"
        }
    ],
    "sec-string-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "String",
            "slug": "JavaScript/Reference/Global_Objects/String/String",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/String",
            "summary": "The String() constructor creates String objects. When called as a function, it returns primitive values of type String.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String() constructor"
        }
    ],
    "sec-string.prototype.at": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "at",
            "slug": "JavaScript/Reference/Global_Objects/String/at",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/at",
            "summary": "The at() method takes an integer value and returns a new String consisting of the single UTF-16 code unit located at the specified offset. This method allows for positive and negative integers. Negative integers count back from the last string character.",
            "support": {
                "chrome": {
                    "version_added": "92"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.12"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "90"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "16.6.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "92"
                }
            },
            "title": "String.prototype.at()"
        }
    ],
    "sec-string.prototype.charat": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "charAt",
            "slug": "JavaScript/Reference/Global_Objects/String/charAt",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt",
            "summary": "The charAt() method of String values returns a new string consisting of the single UTF-16 code unit at the given index.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.charAt()"
        }
    ],
    "sec-string.prototype.charcodeat": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "charCodeAt",
            "slug": "JavaScript/Reference/Global_Objects/String/charCodeAt",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt",
            "summary": "The charCodeAt() method of String values returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.charCodeAt()"
        }
    ],
    "sec-string.prototype.codepointat": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "codePointAt",
            "slug": "JavaScript/Reference/Global_Objects/String/codePointAt",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt",
            "summary": "The codePointAt() method of String values returns a non-negative integer that is the Unicode code point value of the character starting at the given index. Note that the index is still based on UTF-16 code units, not Unicode code points.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "4.0.0"
                    },
                    {
                        "version_added": "0.12.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.codePointAt()"
        }
    ],
    "sec-string.prototype.concat": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "concat",
            "slug": "JavaScript/Reference/Global_Objects/String/concat",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat",
            "summary": "The concat() method concatenates the string arguments to the calling string and returns a new string.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.concat()"
        }
    ],
    "sec-string.prototype.endswith": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "endsWith",
            "slug": "JavaScript/Reference/Global_Objects/String/endsWith",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith",
            "summary": "The endsWith() method determines whether a string ends with the characters of a specified string, returning true or false as appropriate.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": {
                    "version_added": "36"
                },
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "17"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "4.0.0"
                    },
                    {
                        "version_added": "0.12.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.endsWith()"
        }
    ],
    "sec-string.fromcharcode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "fromCharCode",
            "slug": "JavaScript/Reference/Global_Objects/String/fromCharCode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode",
            "summary": "The String.fromCharCode() static method returns a string created from the specified sequence of UTF-16 code units.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.fromCharCode()"
        }
    ],
    "sec-string.fromcodepoint": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "fromCodePoint",
            "slug": "JavaScript/Reference/Global_Objects/String/fromCodePoint",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint",
            "summary": "The String.fromCodePoint() static method returns a string created from the specified sequence of code points.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "4.0.0"
                    },
                    {
                        "version_added": "0.12.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.fromCodePoint()"
        }
    ],
    "sec-string.prototype.includes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "includes",
            "slug": "JavaScript/Reference/Global_Objects/String/includes",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes",
            "summary": "The includes() method performs a case-sensitive search to determine whether one string may be found within another string, returning true or false as appropriate.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "40"
                    },
                    {
                        "alternative_name": "contains",
                        "version_added": "18",
                        "version_removed": "48"
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "es6-string-includes",
                "title": "String.prototype.includes"
            },
            "title": "String.prototype.includes()"
        }
    ],
    "sec-string.prototype.indexof": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "indexOf",
            "slug": "JavaScript/Reference/Global_Objects/String/indexOf",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf",
            "summary": "The indexOf() method of String values searches this string and returns the index of the first occurrence of the specified substring. It takes an optional starting position and returns the first occurrence of the specified substring at an index greater than or equal to the specified number.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.indexOf()"
        }
    ],
    "sec-string.prototype.iswellformed": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "isWellFormed",
            "slug": "JavaScript/Reference/Global_Objects/String/isWellFormed",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/isWellFormed",
            "summary": "The isWellFormed() method of String values returns a boolean indicating whether this string contains any lone surrogates.",
            "support": {
                "chrome": {
                    "version_added": "111"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.32"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "preview"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "20.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "111"
                }
            },
            "title": "String.prototype.isWellFormed()"
        }
    ],
    "sec-string.prototype.lastindexof": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "lastIndexOf",
            "slug": "JavaScript/Reference/Global_Objects/String/lastIndexOf",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf",
            "summary": "The lastIndexOf() method of String values searches this string and returns the index of the last occurrence of the specified substring. It takes an optional starting position and returns the last occurrence of the specified substring at an index less than or equal to the specified number.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.lastIndexOf()"
        }
    ],
    "sec-properties-of-string-instances-length": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "length",
            "slug": "JavaScript/Reference/Global_Objects/String/length",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length",
            "summary": "The length data property of a String value contains the length of the string in UTF-16 code units.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String: length"
        }
    ],
    "sec-string.prototype.localecompare": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "localeCompare",
            "slug": "JavaScript/Reference/Global_Objects/String/localeCompare",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare",
            "summary": "The localeCompare() method returns a number indicating whether a reference string comes before, or after, or is the same as the given string in sort order. In implementations with Intl.Collator API support, this method simply calls Intl.Collator.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.localeCompare()"
        }
    ],
    "sec-string.prototype.match": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "match",
            "slug": "JavaScript/Reference/Global_Objects/String/match",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match",
            "summary": "The match() method retrieves the result of matching a string against a regular expression.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.match()"
        }
    ],
    "sec-string.prototype.matchall": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "matchAll",
            "slug": "JavaScript/Reference/Global_Objects/String/matchAll",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll",
            "summary": "The matchAll() method returns an iterator of all results matching a string against a regular expression, including capturing groups.",
            "support": {
                "chrome": {
                    "version_added": "73"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "67"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "12.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "13"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.matchAll()"
        }
    ],
    "sec-string.prototype.normalize": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "normalize",
            "slug": "JavaScript/Reference/Global_Objects/String/normalize",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize",
            "summary": "The normalize() method returns the Unicode Normalization Form of the string.",
            "support": {
                "chrome": {
                    "version_added": "34"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.normalize()"
        }
    ],
    "sec-string.prototype.padend": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "padEnd",
            "slug": "JavaScript/Reference/Global_Objects/String/padEnd",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd",
            "summary": "The padEnd() method pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length. The padding is applied from the end of the current string.",
            "support": {
                "chrome": {
                    "version_added": "57"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "8.0.0"
                    },
                    {
                        "version_added": "7.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "pad-start-end",
                "title": "String.prototype.padStart(), String.prototype.padEnd()"
            },
            "title": "String.prototype.padEnd()"
        }
    ],
    "sec-string.prototype.padstart": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "padStart",
            "slug": "JavaScript/Reference/Global_Objects/String/padStart",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart",
            "summary": "The padStart() method pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. The padding is applied from the start of the current string.",
            "support": {
                "chrome": {
                    "version_added": "57"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "8.0.0"
                    },
                    {
                        "version_added": "7.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.padStart()"
        }
    ],
    "sec-string.raw": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "raw",
            "slug": "JavaScript/Reference/Global_Objects/String/raw",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/raw",
            "summary": "The String.raw() static method is a tag function of template literals. This is similar to the r prefix in Python, or the @ prefix in C# for string literals. It's used to get the raw string form of template literals — that is, substitutions (e.g. ${foo}) are processed, but escape sequences (e.g. \\n) are not.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "34"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.raw()"
        }
    ],
    "sec-string.prototype.repeat": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "repeat",
            "slug": "JavaScript/Reference/Global_Objects/String/repeat",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat",
            "summary": "The repeat() method constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": {
                    "version_added": "36"
                },
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "24"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "4.0.0"
                    },
                    {
                        "version_added": "0.12.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": {
                    "version_added": "28"
                },
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "41"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.repeat()"
        }
    ],
    "sec-string.prototype.replace": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "replace",
            "slug": "JavaScript/Reference/Global_Objects/String/replace",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace",
            "summary": "The replace() method returns a new string with one, some, or all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function called for each match. If pattern is a string, only the first occurrence will be replaced. The original string is left unchanged.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": [
                    {
                        "version_added": "5.5"
                    },
                    {
                        "version_added": "4",
                        "version_removed": "5.5",
                        "partial_implementation": true,
                        "notes": "A replacement function as second argument is not supported."
                    }
                ],
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.replace()"
        }
    ],
    "sec-string.prototype.replaceall": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "replaceAll",
            "slug": "JavaScript/Reference/Global_Objects/String/replaceAll",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll",
            "summary": "The replaceAll() method returns a new string with all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match. The original string is left unchanged.",
            "support": {
                "chrome": {
                    "version_added": "85"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.2"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "77"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "13.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "85"
                }
            },
            "title": "String.prototype.replaceAll()"
        }
    ],
    "sec-string.prototype.search": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "search",
            "slug": "JavaScript/Reference/Global_Objects/String/search",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search",
            "summary": "The search() method executes a search for a match between a regular expression and this String object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.search()"
        }
    ],
    "sec-string.prototype.slice": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "slice",
            "slug": "JavaScript/Reference/Global_Objects/String/slice",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice",
            "summary": "The slice() method extracts a section of a string and returns it as a new string, without modifying the original string.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.slice()"
        }
    ],
    "sec-string.prototype.split": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "split",
            "slug": "JavaScript/Reference/Global_Objects/String/split",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split",
            "summary": "The split() method takes a pattern and divides a String into an ordered list of substrings by searching for the pattern, puts these substrings into an array, and returns the array.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.split()"
        }
    ],
    "sec-string.prototype.startswith": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "startsWith",
            "slug": "JavaScript/Reference/Global_Objects/String/startsWith",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith",
            "summary": "The startsWith() method determines whether a string begins with the characters of a specified string, returning true or false as appropriate.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": {
                    "version_added": "36"
                },
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "17"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "4.0.0"
                    },
                    {
                        "version_added": "0.12.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.startsWith()"
        }
    ],
    "sec-string.prototype.substring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "substring",
            "slug": "JavaScript/Reference/Global_Objects/String/substring",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring",
            "summary": "The substring() method returns the part of the string from the start index up to and excluding the end index, or to the end of the string if no end index is supplied.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.substring()"
        }
    ],
    "sec-string.prototype.tolocalelowercase": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "toLocaleLowerCase",
            "slug": "JavaScript/Reference/Global_Objects/String/toLocaleLowerCase",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase",
            "summary": "The toLocaleLowerCase() method returns the calling string value converted to lower case, according to any locale-specific case mappings.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.toLocaleLowerCase()"
        }
    ],
    "sec-string.prototype.tolocaleuppercase": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "toLocaleUpperCase",
            "slug": "JavaScript/Reference/Global_Objects/String/toLocaleUpperCase",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase",
            "summary": "The toLocaleUpperCase() method returns the calling string value converted to upper case, according to any locale-specific case mappings.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.toLocaleUpperCase()"
        }
    ],
    "sec-string.prototype.tolowercase": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "toLowerCase",
            "slug": "JavaScript/Reference/Global_Objects/String/toLowerCase",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase",
            "summary": "The toLowerCase() method returns the calling string value converted to lower case.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.toLowerCase()"
        }
    ],
    "sec-string.prototype.tostring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "toString",
            "slug": "JavaScript/Reference/Global_Objects/String/toString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toString",
            "summary": "The toString() method returns a string representing the specified string value.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.toString()"
        }
    ],
    "sec-string.prototype.touppercase": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "toUpperCase",
            "slug": "JavaScript/Reference/Global_Objects/String/toUpperCase",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase",
            "summary": "The toUpperCase() method returns the calling string value converted to uppercase (the value will be converted to a string if it isn't one).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.toUpperCase()"
        }
    ],
    "sec-string.prototype.towellformed": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "toWellFormed",
            "slug": "JavaScript/Reference/Global_Objects/String/toWellFormed",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toWellFormed",
            "summary": "The toWellFormed() method of String values returns a string where all lone surrogates of this string are replaced with the Unicode replacement character U+FFFD.",
            "support": {
                "chrome": {
                    "version_added": "111"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.32"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "preview"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "20.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "111"
                }
            },
            "title": "String.prototype.toWellFormed()"
        }
    ],
    "sec-string.prototype.trim": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "trim",
            "slug": "JavaScript/Reference/Global_Objects/String/trim",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim",
            "summary": "The trim() method removes whitespace from both ends of a string and returns a new string, without modifying the original string.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.trim()"
        }
    ],
    "sec-string.prototype.trimend": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "trimEnd",
            "slug": "JavaScript/Reference/Global_Objects/String/trimEnd",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd",
            "summary": "The trimEnd() method removes whitespace from the end of a string and returns a new string, without modifying the original string. trimRight() is an alias of this method.",
            "support": {
                "chrome": [
                    {
                        "version_added": "66"
                    },
                    {
                        "version_added": "4",
                        "alternative_name": "trimRight"
                    }
                ],
                "chrome_android": "mirror",
                "deno": [
                    {
                        "version_added": "1.0"
                    },
                    {
                        "version_added": "1.0",
                        "alternative_name": "trimRight"
                    }
                ],
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "61"
                    },
                    {
                        "version_added": "3.5",
                        "alternative_name": "trimRight"
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "10.0.0"
                    },
                    {
                        "version_added": "0.12.0",
                        "alternative_name": "trimRight"
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "12"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": [
                    {
                        "version_added": "66"
                    },
                    {
                        "version_added": "37",
                        "alternative_name": "trimRight"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": "79",
                        "alternative_name": "trimRight"
                    }
                ]
            },
            "title": "String.prototype.trimEnd()"
        }
    ],
    "sec-string.prototype.trimstart": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "trimStart",
            "slug": "JavaScript/Reference/Global_Objects/String/trimStart",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart",
            "summary": "The trimStart() method removes whitespace from the beginning of a string and returns a new string, without modifying the original string. trimLeft() is an alias of this method.",
            "support": {
                "chrome": [
                    {
                        "version_added": "66"
                    },
                    {
                        "version_added": "4",
                        "alternative_name": "trimLeft"
                    }
                ],
                "chrome_android": "mirror",
                "deno": [
                    {
                        "version_added": "1.0"
                    },
                    {
                        "version_added": "1.0",
                        "alternative_name": "trimLeft"
                    }
                ],
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "61"
                    },
                    {
                        "version_added": "3.5",
                        "alternative_name": "trimLeft"
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "10.0.0"
                    },
                    {
                        "version_added": "0.12.0",
                        "alternative_name": "trimLeft"
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "12"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": [
                    {
                        "version_added": "66"
                    },
                    {
                        "version_added": "37",
                        "alternative_name": "trimLeft"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": "79",
                        "alternative_name": "trimLeft"
                    }
                ]
            },
            "title": "String.prototype.trimStart()"
        }
    ],
    "sec-string.prototype.valueof": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "valueOf",
            "slug": "JavaScript/Reference/Global_Objects/String/valueOf",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/valueOf",
            "summary": "The valueOf() method returns the primitive value of a String object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype.valueOf()"
        }
    ],
    "sec-string.prototype-@@iterator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "@@iterator",
            "slug": "JavaScript/Reference/Global_Objects/String/@@iterator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/@@iterator",
            "summary": "The [@@iterator]() method of String values implements the iterable protocol and allows strings to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns a string iterator object that yields the Unicode code points of the string value as individual strings.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "36"
                    },
                    {
                        "alternative_name": "@@iterator",
                        "version_added": "27",
                        "version_removed": "36",
                        "notes": "A placeholder property named <code>@@iterator</code> is used."
                    },
                    {
                        "alternative_name": "iterator",
                        "version_added": "17",
                        "version_removed": "27",
                        "notes": "A placeholder property named <code>iterator</code> is used."
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String.prototype[@@iterator]()"
        }
    ],
    "sec-string-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/String.json",
            "name": "String",
            "slug": "JavaScript/Reference/Global_Objects/String",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
            "summary": "The String object is used to represent and manipulate a sequence of characters.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "String"
        }
    ],
    "sec-symbol-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Symbol.json",
            "name": "Symbol",
            "slug": "JavaScript/Reference/Global_Objects/Symbol/Symbol",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/Symbol",
            "summary": "The Symbol() function returns primitive values of type Symbol.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "36"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Symbol() constructor"
        }
    ],
    "sec-symbol.asynciterator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Symbol.json",
            "name": "asyncIterator",
            "slug": "JavaScript/Reference/Global_Objects/Symbol/asyncIterator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator",
            "summary": "The Symbol.asyncIterator static data property represents the well-known symbol @@asyncIterator. The async iterable protocol looks up this symbol for the method that returns the async iterator for an object. In order for an object to be async iterable, it must have an @@asyncIterator key.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "10.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Symbol.asyncIterator"
        }
    ],
    "sec-symbol.prototype.description": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Symbol.json",
            "name": "description",
            "slug": "JavaScript/Reference/Global_Objects/Symbol/description",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/description",
            "summary": "The description accessor property of Symbol values returns a string containing the description of this symbol, or undefined if the symbol has no description.",
            "support": {
                "chrome": {
                    "version_added": "70"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "11.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": [
                    {
                        "version_added": "12.1"
                    },
                    {
                        "version_added": "12",
                        "partial_implementation": true,
                        "notes": "No support for an undefined description."
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Symbol.prototype.description"
        }
    ],
    "sec-symbol.for": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Symbol.json",
            "name": "for",
            "slug": "JavaScript/Reference/Global_Objects/Symbol/for",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/for",
            "summary": "The Symbol.for() static method searches for existing symbols in a runtime-wide symbol registry with the given key and returns it if found. Otherwise a new symbol gets created in the global symbol registry with this key.",
            "support": {
                "chrome": {
                    "version_added": "40"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "36"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Symbol.for()"
        }
    ],
    "sec-symbol.hasinstance": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Symbol.json",
            "name": "hasInstance",
            "slug": "JavaScript/Reference/Global_Objects/Symbol/hasInstance",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/hasInstance",
            "summary": "The Symbol.hasInstance static data property represents the well-known symbol @@hasInstance. The instanceof operator looks up this symbol on its right-hand operand for the method used to determine if the constructor object recognizes an object as its instance.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "6.5.0"
                    },
                    {
                        "version_added": "6.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Symbol.hasInstance"
        }
    ],
    "sec-symbol.isconcatspreadable": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Symbol.json",
            "name": "isConcatSpreadable",
            "slug": "JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/isConcatSpreadable",
            "summary": "The Symbol.isConcatSpreadable static data property represents the well-known symbol @@isConcatSpreadable. The Array.prototype.concat() method looks up this symbol on each object being concatenated to determine if it should be treated as an array-like object and flattened to its array elements.",
            "support": {
                "chrome": {
                    "version_added": "48"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Symbol.isConcatSpreadable"
        }
    ],
    "sec-symbol.iterator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Symbol.json",
            "name": "iterator",
            "slug": "JavaScript/Reference/Global_Objects/Symbol/iterator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator",
            "summary": "The Symbol.iterator static data property represents the well-known symbol @@iterator. The iterable protocol looks up this symbol for the method that returns the iterator for an object. In order for an object to be iterable, it must have an @@iterator key.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "36"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Symbol.iterator"
        }
    ],
    "sec-symbol.keyfor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Symbol.json",
            "name": "keyFor",
            "slug": "JavaScript/Reference/Global_Objects/Symbol/keyFor",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/keyFor",
            "summary": "The Symbol.keyFor() static method retrieves a shared symbol key from the global symbol registry for the given symbol.",
            "support": {
                "chrome": {
                    "version_added": "40"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "36"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Symbol.keyFor()"
        }
    ],
    "sec-symbol.match": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Symbol.json",
            "name": "match",
            "slug": "JavaScript/Reference/Global_Objects/Symbol/match",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/match",
            "summary": "The Symbol.match static data property represents the well-known symbol @@match. The String.prototype.match() method looks up this symbol on its first argument for the method used to match an input string against the current object. This symbol is also used to determine if an object should be treated as a regex.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "40"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Symbol.match"
        }
    ],
    "sec-symbol.matchall": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Symbol.json",
            "name": "matchAll",
            "slug": "JavaScript/Reference/Global_Objects/Symbol/matchAll",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/matchAll",
            "summary": "The Symbol.matchAll static data property represents the well-known symbol @@matchAll. The String.prototype.matchAll() method looks up this symbol on its first argument for the method that returns an iterator, that yields matches of the current object against a string.",
            "support": {
                "chrome": {
                    "version_added": "73"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "67"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "12.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "13"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Symbol.matchAll"
        }
    ],
    "sec-symbol.replace": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Symbol.json",
            "name": "replace",
            "slug": "JavaScript/Reference/Global_Objects/Symbol/replace",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/replace",
            "summary": "The Symbol.replace static data property represents the well-known symbol @@replace. The String.prototype.replace() method looks up this symbol on its first argument for the method that replaces substrings matched by the current object.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Symbol.replace"
        }
    ],
    "sec-symbol.search": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Symbol.json",
            "name": "search",
            "slug": "JavaScript/Reference/Global_Objects/Symbol/search",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/search",
            "summary": "The Symbol.search static data property represents the well-known symbol @@search. The String.prototype.search() method looks up this symbol on its first argument for the method that returns the index within a string that matches the current object.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Symbol.search"
        }
    ],
    "sec-symbol.species": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Symbol.json",
            "name": "species",
            "slug": "JavaScript/Reference/Global_Objects/Symbol/species",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/species",
            "summary": "The Symbol.species static data property represents the well-known symbol @@species. Methods that create copies of an object may look up this symbol on the object for the constructor function to use when creating the copy.",
            "support": {
                "chrome": {
                    "version_added": "51"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "6.5.0"
                    },
                    {
                        "version_added": "6.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Symbol.species"
        }
    ],
    "sec-symbol.split": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Symbol.json",
            "name": "split",
            "slug": "JavaScript/Reference/Global_Objects/Symbol/split",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/split",
            "summary": "The Symbol.split static data property represents the well-known symbol @@split. The String.prototype.split() method looks up this symbol on its first argument for the method that splits a string at the indices that match the current object.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Symbol.split"
        }
    ],
    "sec-symbol.toprimitive": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Symbol.json",
            "name": "toPrimitive",
            "slug": "JavaScript/Reference/Global_Objects/Symbol/toPrimitive",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toPrimitive",
            "summary": "The Symbol.toPrimitive static data property represents the well-known symbol @@toPrimitive. All type coercion algorithms look up this symbol on objects for the method that accepts a preferred type and returns a primitive representation of the object, before falling back to using the object's valueOf() and toString() methods.",
            "support": {
                "chrome": {
                    "version_added": "47"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "44"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Symbol.toPrimitive"
        }
    ],
    "sec-symbol.prototype.tostring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Symbol.json",
            "name": "toString",
            "slug": "JavaScript/Reference/Global_Objects/Symbol/toString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toString",
            "summary": "The toString() method returns a string representing the specified symbol value.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "36"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Symbol.prototype.toString()"
        }
    ],
    "sec-symbol.tostringtag": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Symbol.json",
            "name": "toStringTag",
            "slug": "JavaScript/Reference/Global_Objects/Symbol/toStringTag",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/toStringTag",
            "summary": "The Symbol.toStringTag static data property represents the well-known symbol @@toStringTag. Object.prototype.toString() looks up this symbol on the this value for the property containing a string that represents the type of the object.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "51"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "6.0.0"
                    },
                    {
                        "version_added": "4.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Symbol.toStringTag"
        }
    ],
    "sec-symbol.unscopables": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Symbol.json",
            "name": "unscopables",
            "slug": "JavaScript/Reference/Global_Objects/Symbol/unscopables",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/unscopables",
            "summary": "The Symbol.unscopables static data property represents the well-known symbol @@unscopables. The with statement looks up this symbol on the scope object for a property containing a collection of properties that should not become bindings within the with environment.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Symbol.unscopables"
        }
    ],
    "sec-symbol.prototype.valueof": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Symbol.json",
            "name": "valueOf",
            "slug": "JavaScript/Reference/Global_Objects/Symbol/valueOf",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/valueOf",
            "summary": "The valueOf() method returns the primitive value of a Symbol object.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "36"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Symbol.prototype.valueOf()"
        }
    ],
    "sec-symbol.prototype-@@toprimitive": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Symbol.json",
            "name": "@@toPrimitive",
            "slug": "JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/@@toPrimitive",
            "summary": "The [@@toPrimitive]() method converts a Symbol object to a primitive value.",
            "support": {
                "chrome": {
                    "version_added": "47"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "44"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Symbol.prototype[@@toPrimitive]()"
        }
    ],
    "sec-symbol-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/Symbol.json",
            "name": "Symbol",
            "slug": "JavaScript/Reference/Global_Objects/Symbol",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
            "summary": "Symbol is a built-in object whose constructor returns a symbol primitive — also called a Symbol value or just a Symbol — that's guaranteed to be unique. Symbols are often used to add unique property keys to an object that won't collide with keys any other code might add to the object, and which are hidden from any mechanisms other code will typically use to access the object. That enables a form of weak encapsulation, or a weak form of information hiding.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "36"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Symbol"
        }
    ],
    "sec-native-error-types-used-in-this-standard-syntaxerror": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/SyntaxError.json",
            "name": "SyntaxError",
            "slug": "JavaScript/Reference/Global_Objects/SyntaxError",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
            "summary": "The SyntaxError object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SyntaxError"
        }
    ],
    "sec-native-error-types-used-in-this-standard-typeerror": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypeError.json",
            "name": "TypeError",
            "slug": "JavaScript/Reference/Global_Objects/TypeError",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
            "summary": "The TypeError object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypeError"
        }
    ],
    "sec-typedarray.bytes_per_element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "BYTES_PER_ELEMENT",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT",
            "summary": "The TypedArray.BYTES_PER_ELEMENT static data property represents the size in bytes of each element in a typed array.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.BYTES_PER_ELEMENT"
        }
    ],
    "sec-%typedarray%.prototype.at": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "at",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/at",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/at",
            "summary": "The at() method takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the array.",
            "support": {
                "chrome": {
                    "version_added": "92"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "90"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "16.6.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "92"
                }
            },
            "title": "TypedArray.prototype.at()"
        }
    ],
    "sec-get-%typedarray%.prototype.buffer": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "buffer",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/buffer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/buffer",
            "summary": "The buffer accessor property of TypedArray instances returns the ArrayBuffer or SharedArrayBuffer referenced by this typed array at construction time.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.buffer"
        }
    ],
    "sec-get-%typedarray%.prototype.bytelength": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "byteLength",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/byteLength",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteLength",
            "summary": "The byteLength accessor property of TypedArray instances returns the length (in bytes) of this typed array.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.byteLength"
        }
    ],
    "sec-get-%typedarray%.prototype.byteoffset": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "byteOffset",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/byteOffset",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/byteOffset",
            "summary": "The byteOffset accessor property of TypedArray instances returns the offset (in bytes) of this typed array from the start of its ArrayBuffer or SharedArrayBuffer.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.byteOffset"
        }
    ],
    "sec-%typedarray%.prototype.copywithin": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "copyWithin",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/copyWithin",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/copyWithin",
            "summary": "The copyWithin() method copies the sequence of array elements within the array to the position starting at target. The copy is taken from the index positions of the second and third arguments start and end. The end argument is optional and defaults to the length of the array. This method has the same algorithm as Array.prototype.copyWithin. TypedArray is one of the typed array types here.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "34"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.copyWithin()"
        }
    ],
    "sec-%typedarray%.prototype.entries": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "entries",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/entries",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/entries",
            "summary": "The entries() method returns a new array iterator that contains the key/value pairs for each index in the array.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "37"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.entries()"
        }
    ],
    "sec-%typedarray%.prototype.every": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "every",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/every",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/every",
            "summary": "The every() method tests whether all elements in the typed array pass the test implemented by the provided function. This method has the same algorithm as Array.prototype.every(). TypedArray is one of the typed array types here.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "37"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.every()"
        }
    ],
    "sec-%typedarray%.prototype.fill": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "fill",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/fill",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/fill",
            "summary": "The fill() method fills all the elements of a typed array from a start index to an end index with a static value. This method has the same algorithm as Array.prototype.fill(). TypedArray is one of the typed array types here.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "37"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.fill()"
        }
    ],
    "sec-%typedarray%.prototype.filter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "filter",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/filter",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/filter",
            "summary": "The filter() method creates a new typed array with all elements that pass the test implemented by the provided function. This method has the same algorithm as Array.prototype.filter(). TypedArray is one of the typed array types here.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.filter()"
        }
    ],
    "sec-%typedarray%.prototype.find": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "find",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/find",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/find",
            "summary": "The find() method returns a value of an element in the typed array, if it satisfies the provided testing function. Otherwise undefined is returned. TypedArray is one of the typed array types here.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "37"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.find()"
        }
    ],
    "sec-%typedarray%.prototype.findindex": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "findIndex",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/findIndex",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/findIndex",
            "summary": "The findIndex() method returns an index in the typed array, if an element in the typed array satisfies the provided testing function. Otherwise -1 is returned.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "37"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.findIndex()"
        }
    ],
    "sec-%typedarray%.prototype.findlast": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "findLast",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/findLast",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/findLast",
            "summary": "The findLast() method iterates a typed array in reverse order and returns the value of the first element that satisfies the provided testing function. If no values satisfy the testing function, undefined is returned.",
            "support": {
                "chrome": {
                    "version_added": "97"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.16"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "104"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "97"
                }
            },
            "title": "TypedArray.prototype.findLast()"
        }
    ],
    "sec-%typedarray%.prototype.findlastindex": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "findLastIndex",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/findLastIndex",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/findLastIndex",
            "summary": "The findLastIndex() method iterates a typed array in reverse order and returns the index of the first element that satisfies the provided testing function. If no values satisfy the testing function, -1 is returned.",
            "support": {
                "chrome": {
                    "version_added": "97"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.16"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "104"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "97"
                }
            },
            "title": "TypedArray.prototype.findLastIndex()"
        }
    ],
    "sec-%typedarray%.prototype.foreach": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "forEach",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/forEach",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/forEach",
            "summary": "The forEach() method executes a provided function once per array element. This method has the same algorithm as Array.prototype.forEach(). TypedArray is one of the typed array types here.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.forEach()"
        }
    ],
    "sec-%typedarray%.from": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "from",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/from",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/from",
            "summary": "The TypedArray.from() static method creates a new typed array from an array-like or iterable object. This method is nearly the same as Array.from().",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.from()"
        }
    ],
    "sec-%typedarray%.prototype.includes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "includes",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/includes",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/includes",
            "summary": "The includes() method determines whether a typed array includes a certain element, returning true or false as appropriate. This method has the same algorithm as Array.prototype.includes(). TypedArray is one of the typed array types here.",
            "support": {
                "chrome": {
                    "version_added": "47"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "43"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "6.0.0"
                    },
                    {
                        "version_added": "5.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.includes()"
        }
    ],
    "sec-%typedarray%.prototype.indexof": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "indexOf",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/indexOf",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/indexOf",
            "summary": "The indexOf() method returns the first index at which a given element can be found in the typed array, or -1 if it is not present. This method has the same algorithm as Array.prototype.indexOf(). TypedArray is one of the typed array types here.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "37",
                    "notes": "Starting with Firefox 47, this method will no longer return <code>-0</code>. For example, <code>new Uint8Array([0]).indexOf(0, -0)</code> will now always return <code>+0</code>."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.indexOf()"
        }
    ],
    "sec-%typedarray%.prototype.join": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "join",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/join",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/join",
            "summary": "The join() method joins all elements of an array into a string. This method has the same algorithm as Array.prototype.join(). TypedArray is one of the typed array types here.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "37"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.join()"
        }
    ],
    "sec-%typedarray%.prototype.keys": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "keys",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/keys",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/keys",
            "summary": "The keys() method returns a new array iterator object that contains the keys for each index in the array.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "37"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.keys()"
        }
    ],
    "sec-%typedarray%.prototype.lastindexof": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "lastIndexOf",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/lastIndexOf",
            "summary": "The lastIndexOf() method returns the last index at which a given element can be found in the typed array, or -1 if it is not present. The typed array is searched backwards, starting at fromIndex. This method has the same algorithm as Array.prototype.lastIndexOf(). TypedArray is one of the typed array types here.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "37",
                    "notes": "Starting with Firefox 47, this method will no longer return <code>-0</code>. For example, <code>new Uint8Array([0]).lastIndexOf(0, -0)</code> will now always return <code>+0</code>."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.lastIndexOf()"
        }
    ],
    "sec-get-%typedarray%.prototype.length": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "length",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/length",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/length",
            "summary": "The length accessor property of TypedArray instances returns the length (in elements) of this typed array.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.length"
        }
    ],
    "sec-%typedarray%.prototype.map": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "map",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/map",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/map",
            "summary": "The map() method creates a new typed array with the results of calling a provided function on every element in this typed array. This method has the same algorithm as Array.prototype.map(). TypedArray is one of the typed array types here.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.map()"
        }
    ],
    "sec-properties-of-the-typedarray-constructors": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "name",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/name",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/name",
            "summary": "The name data property of a Function instance indicates the function's name as specified when it was created, or it may be either anonymous or '' (an empty string) for functions created anonymously.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Function: name"
        }
    ],
    "sec-%typedarray%.of": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "of",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/of",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/of",
            "summary": "The TypedArray.of() static method creates a new typed array from a variable number of arguments. This method is nearly the same as Array.of().",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.of()"
        }
    ],
    "sec-%typedarray%.prototype.reduce": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "reduce",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/reduce",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduce",
            "summary": "The reduce() method applies a function against an accumulator and each value of the typed array (from left-to-right) has to reduce it to a single value. This method has the same algorithm as Array.prototype.reduce(). TypedArray is one of the typed array types here.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "37"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.reduce()"
        }
    ],
    "sec-%typedarray%.prototype.reduceright": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "reduceRight",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/reduceRight",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reduceRight",
            "summary": "The reduceRight() method applies a function against an accumulator and each value of the typed array (from right-to-left) has to reduce it to a single value. This method has the same algorithm as Array.prototype.reduceRight(). TypedArray is one of the typed array types here.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "37"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.reduceRight()"
        }
    ],
    "sec-%typedarray%.prototype.reverse": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "reverse",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/reverse",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/reverse",
            "summary": "The reverse() method reverses a typed array in place. The first typed array element becomes the last and the last becomes the first. This method has the same algorithm as Array.prototype.reverse(). TypedArray is one of the typed array types here.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "37"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.reverse()"
        }
    ],
    "sec-%typedarray%.prototype.set": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "set",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/set",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set",
            "summary": "The set() method stores multiple values in the typed array, reading input values from a specified array.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.set()"
        }
    ],
    "sec-%typedarray%.prototype.slice": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "slice",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/slice",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/slice",
            "summary": "The slice() method returns a new typed array (with a new underlying buffer), that contains a copy of a portion of the original typed array. This method has the same algorithm as Array.prototype.slice(). TypedArray is one of the typed array types here.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.slice()"
        }
    ],
    "sec-%typedarray%.prototype.some": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "some",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/some",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/some",
            "summary": "The some() method tests whether some element in the typed array passes the test implemented by the provided function. This method has the same algorithm as Array.prototype.some(). TypedArray is one of the typed array types here.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "37"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.some()"
        }
    ],
    "sec-%typedarray%.prototype.sort": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "sort",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/sort",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/sort",
            "summary": "The sort() method sorts the elements of a typed array numerically in place and returns the typed array. This method has the same algorithm as Array.prototype.sort(), except that it sorts the values numerically instead of as strings by default. TypedArray is one of the typed array types here.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "46"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.sort()"
        }
    ],
    "sec-%typedarray%.prototype.subarray": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "subarray",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/subarray",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/subarray",
            "summary": "The subarray() method returns a new TypedArray on the same ArrayBuffer store and with the same element types as for this TypedArray object. The begin offset is inclusive and the end offset is exclusive. TypedArray is one of the typed array types.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "4.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.subarray()"
        }
    ],
    "sec-%typedarray%.prototype.tolocalestring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "toLocaleString",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/toLocaleString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toLocaleString",
            "summary": "The toLocaleString() method returns a string representing the elements of the typed array. The elements are converted to strings and are separated by a locale-specific string (such as a comma \",\"). This method has the same algorithm as Array.prototype.toLocaleString() and, as the typed array elements are numbers, the same algorithm as Number.prototype.toLocaleString() applies for each element. TypedArray is one of the typed array types here.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "51"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.toLocaleString()"
        }
    ],
    "sec-%typedarray%.prototype.toreversed": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "toReversed",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/toReversed",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toReversed",
            "summary": "The toReversed() method is the copying counterpart of the reverse() method. It returns a new array with the elements in reversed order. This method has the same algorithm as Array.prototype.reverse(). TypedArray is one of the typed array types here.",
            "support": {
                "chrome": {
                    "version_added": "110"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.31"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "115"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "20.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "110"
                }
            },
            "title": "TypedArray.prototype.toReversed()"
        }
    ],
    "sec-%typedarray%.prototype.tosorted": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "toSorted",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/toSorted",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toSorted",
            "summary": "The toSorted() method is the copying version of the sort() method. It returns a new array with the elements sorted in ascending order. This method has the same algorithm as Array.prototype.toSorted(), except that it sorts the values numerically instead of as strings by default. TypedArray is one of the typed array types here.",
            "support": {
                "chrome": {
                    "version_added": "110"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.31"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "115"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "20.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "110"
                }
            },
            "title": "TypedArray.prototype.toSorted()"
        }
    ],
    "sec-%typedarray%.prototype.tostring": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "toString",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/toString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/toString",
            "summary": "The toString() method returns a string representing the specified array and its elements. This method has the same algorithm as Array.prototype.toString(). TypedArray is one of the typed array types here.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "51"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.toString()"
        }
    ],
    "sec-%typedarray%.prototype.values": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "values",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/values",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/values",
            "summary": "The values() method returns a new array iterator object that contains the values for each index in the array.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "37"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype.values()"
        }
    ],
    "sec-%typedarray%.prototype.with": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "with",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/with",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/with",
            "summary": "The with() method is the copying version of using the bracket notation to change the value of a given index. It returns a new array with the element at the given index replaced with the given value. This method has the same algorithm as Array.prototype.with(). TypedArray is one of the typed array types here.",
            "support": {
                "chrome": {
                    "version_added": "110"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.31"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "115"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "20.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "110"
                }
            },
            "title": "TypedArray.prototype.with()"
        }
    ],
    "sec-%typedarray%.prototype-@@iterator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "@@iterator",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/@@iterator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@iterator",
            "summary": "The [@@iterator]() method of TypedArray instances implements the iterable protocol and allows typed arrays to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns an array iterator object that yields the value of each index in the typed array.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "36"
                    },
                    {
                        "alternative_name": "@@iterator",
                        "version_added": "27",
                        "version_removed": "36",
                        "notes": "A placeholder property named <code>@@iterator</code> is used."
                    },
                    {
                        "alternative_name": "iterator",
                        "version_added": "17",
                        "version_removed": "27",
                        "notes": "A placeholder property named <code>iterator</code> is used."
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray.prototype[@@iterator]()"
        }
    ],
    "sec-get-%typedarray%-@@species": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/TypedArray.json",
            "name": "@@species",
            "slug": "JavaScript/Reference/Global_Objects/TypedArray/@@species",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/@@species",
            "summary": "The TypedArray[@@species] static accessor property returns the constructor used to construct return values from typed array methods.",
            "support": {
                "chrome": {
                    "version_added": "51"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "6.5.0"
                    },
                    {
                        "version_added": "6.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TypedArray[@@species]"
        }
    ],
    "sec-native-error-types-used-in-this-standard-urierror": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/URIError.json",
            "name": "URIError",
            "slug": "JavaScript/Reference/Global_Objects/URIError",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
            "summary": "The URIError object represents an error when a global URI handling function was used in a wrong way.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "URIError"
        }
    ],
    "sec-weakmap-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/WeakMap.json",
            "name": "WeakMap",
            "slug": "JavaScript/Reference/Global_Objects/WeakMap/WeakMap",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/WeakMap",
            "summary": "The WeakMap() constructor creates WeakMap objects.",
            "support": {
                "chrome": {
                    "version_added": "36"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": [
                    {
                        "version_added": "0.12.0"
                    },
                    {
                        "version_added": "0.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WeakMap() constructor"
        }
    ],
    "sec-weakmap.prototype.delete": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/WeakMap.json",
            "name": "delete",
            "slug": "JavaScript/Reference/Global_Objects/WeakMap/delete",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/delete",
            "summary": "The delete() method removes the specified element from a WeakMap object.",
            "support": {
                "chrome": {
                    "version_added": "36"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6",
                    "notes": "Before Firefox 38, this method threw a <code>TypeError</code> when the key parameter was not an object. This has been fixed in version 38 and later to return <code>false</code> as per the ES2015 standard."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": [
                    {
                        "version_added": "0.12.0"
                    },
                    {
                        "version_added": "0.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WeakMap.prototype.delete()"
        }
    ],
    "sec-weakmap.prototype.get": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/WeakMap.json",
            "name": "get",
            "slug": "JavaScript/Reference/Global_Objects/WeakMap/get",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/get",
            "summary": "The get() method returns a specified element from a WeakMap object.",
            "support": {
                "chrome": {
                    "version_added": "36"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6",
                    "notes": "Before Firefox 38, this method threw a <code>TypeError</code> when the key parameter was not an object. However, the ES2015 specification specifies to return <code>undefined</code> instead. Furthermore, <code>WeakMap.prototype.get</code> accepted an optional second argument as a fallback value, which is not part of the standard. Both non-standard behaviors are removed in version 38 and higher."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": [
                    {
                        "version_added": "0.12.0"
                    },
                    {
                        "version_added": "0.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WeakMap.prototype.get()"
        }
    ],
    "sec-weakmap.prototype.has": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/WeakMap.json",
            "name": "has",
            "slug": "JavaScript/Reference/Global_Objects/WeakMap/has",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/has",
            "summary": "The has() method returns a boolean indicating whether an element with the specified key exists in the WeakMap object or not.",
            "support": {
                "chrome": {
                    "version_added": "36"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6",
                    "notes": "Before Firefox 38, this method threw a <code>TypeError</code> when the key parameter was not an object. This has been fixed in version 38 and later to return <code>false</code> as per the ES2015 standard."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": [
                    {
                        "version_added": "0.12.0"
                    },
                    {
                        "version_added": "0.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WeakMap.prototype.has()"
        }
    ],
    "sec-weakmap.prototype.set": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/WeakMap.json",
            "name": "set",
            "slug": "JavaScript/Reference/Global_Objects/WeakMap/set",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap/set",
            "summary": "The set() method adds a new element with a specified key and value to a WeakMap object.",
            "support": {
                "chrome": {
                    "version_added": "36"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6",
                    "notes": "Before Firefox 38, this method threw a <code>TypeError</code> when the key parameter was not an object. This has been fixed in version 38 and later to return <code>false</code> as per the ES2015 standard."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11",
                    "partial_implementation": true,
                    "notes": "Returns 'undefined' instead of the 'Map' object."
                },
                "nodejs": [
                    {
                        "version_added": "0.12.0"
                    },
                    {
                        "version_added": "0.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WeakMap.prototype.set()"
        }
    ],
    "sec-weakmap-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/WeakMap.json",
            "name": "WeakMap",
            "slug": "JavaScript/Reference/Global_Objects/WeakMap",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
            "summary": "A WeakMap is a collection of key/value pairs whose keys must be objects or non-registered symbols, with values of any arbitrary JavaScript type, and which does not create strong references to its keys. That is, an object's presence as a key in a WeakMap does not prevent the object from being garbage collected. Once an object used as a key has been collected, its corresponding values in any WeakMap become candidates for garbage collection as well — as long as they aren't strongly referred to elsewhere. The only primitive type that can be used as a WeakMap key is symbol — more specifically, non-registered symbols — because non-registered symbols are guaranteed to be unique and cannot be re-created.",
            "support": {
                "chrome": {
                    "version_added": "36"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": [
                    {
                        "version_added": "0.12.0"
                    },
                    {
                        "version_added": "0.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WeakMap"
        }
    ],
    "sec-weak-ref-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/WeakRef.json",
            "name": "WeakRef",
            "slug": "JavaScript/Reference/Global_Objects/WeakRef/WeakRef",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef/WeakRef",
            "summary": "The WeakRef() constructor creates WeakRef objects.",
            "support": {
                "chrome": {
                    "version_added": "84"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "79"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "14.6.0"
                    },
                    {
                        "version_added": "13.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony-weak-refs"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "84"
                }
            },
            "title": "WeakRef() constructor"
        }
    ],
    "sec-weak-ref.prototype.deref": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/WeakRef.json",
            "name": "deref",
            "slug": "JavaScript/Reference/Global_Objects/WeakRef/deref",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef/deref",
            "summary": "The deref() method returns the WeakRef instance's target value, or undefined if the target value has been garbage-collected.",
            "support": {
                "chrome": {
                    "version_added": "84"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "79"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "14.6.0"
                    },
                    {
                        "version_added": "13.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony-weak-refs"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "84"
                }
            },
            "title": "WeakRef.prototype.deref()"
        }
    ],
    "sec-weak-ref-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/WeakRef.json",
            "name": "WeakRef",
            "slug": "JavaScript/Reference/Global_Objects/WeakRef",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakRef",
            "summary": "A WeakRef object lets you hold a weak reference to another object, without preventing that object from getting garbage-collected.",
            "support": {
                "chrome": {
                    "version_added": "84"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "79"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "14.6.0"
                    },
                    {
                        "version_added": "13.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony-weak-refs"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "84"
                }
            },
            "title": "WeakRef"
        }
    ],
    "sec-weakset-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/WeakSet.json",
            "name": "WeakSet",
            "slug": "JavaScript/Reference/Global_Objects/WeakSet/WeakSet",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/WeakSet",
            "summary": "The WeakSet() constructor creates WeakSet objects.",
            "support": {
                "chrome": {
                    "version_added": "36"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "34"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WeakSet() constructor"
        }
    ],
    "sec-weakset.prototype.add": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/WeakSet.json",
            "name": "add",
            "slug": "JavaScript/Reference/Global_Objects/WeakSet/add",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/add",
            "summary": "The add() method appends a new object to the end of a WeakSet object.",
            "support": {
                "chrome": {
                    "version_added": "36"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "34"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WeakSet.prototype.add()"
        }
    ],
    "sec-weakset.prototype.delete": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/WeakSet.json",
            "name": "delete",
            "slug": "JavaScript/Reference/Global_Objects/WeakSet/delete",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/delete",
            "summary": "The delete() method removes the specified element from a WeakSet object.",
            "support": {
                "chrome": {
                    "version_added": "36"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "34"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WeakSet.prototype.delete()"
        }
    ],
    "sec-weakset.prototype.has": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/WeakSet.json",
            "name": "has",
            "slug": "JavaScript/Reference/Global_Objects/WeakSet/has",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet/has",
            "summary": "The has() method returns a boolean indicating whether an object exists in a WeakSet or not.",
            "support": {
                "chrome": {
                    "version_added": "36"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "34"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WeakSet.prototype.has()"
        }
    ],
    "sec-weakset-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/WeakSet.json",
            "name": "WeakSet",
            "slug": "JavaScript/Reference/Global_Objects/WeakSet",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
            "summary": "A WeakSet is a collection of garbage-collectable values, including objects and non-registered symbols. A value in the WeakSet may only occur once. It is unique in the WeakSet's collection.",
            "support": {
                "chrome": {
                    "version_added": "36"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "34"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WeakSet"
        }
    ],
    "sec-native-error-types-used-in-this-standard": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/WebAssembly/CompileError.json",
            "name": "CompileError",
            "slug": "https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/CompileError",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/CompileError",
            "summary": "The WebAssembly.CompileError object indicates an error during WebAssembly decoding or validation.",
            "support": {
                "chrome": {
                    "version_added": "57"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WebAssembly.CompileError"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/WebAssembly/LinkError.json",
            "name": "LinkError",
            "slug": "https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/LinkError",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/LinkError",
            "summary": "The WebAssembly.LinkError object indicates an error during module instantiation (besides traps from the start function).",
            "support": {
                "chrome": {
                    "version_added": "57"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WebAssembly.LinkError"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/WebAssembly/RuntimeError.json",
            "name": "RuntimeError",
            "slug": "https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/RuntimeError",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface/RuntimeError",
            "summary": "The WebAssembly.RuntimeError object is the error type that is thrown whenever WebAssembly specifies a trap.",
            "support": {
                "chrome": {
                    "version_added": "57"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WebAssembly.RuntimeError"
        }
    ],
    "sec-value-properties-of-the-global-object-infinity": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/globals.json",
            "name": "Infinity",
            "slug": "JavaScript/Reference/Global_Objects/Infinity",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
            "summary": "The Infinity global property is a numeric value representing infinity.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Infinity"
        }
    ],
    "sec-value-properties-of-the-global-object-nan": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/globals.json",
            "name": "NaN",
            "slug": "JavaScript/Reference/Global_Objects/NaN",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
            "summary": "The NaN global property is a value representing Not-A-Number.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "NaN"
        }
    ],
    "sec-decodeuri-encodeduri": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/globals.json",
            "name": "decodeURI",
            "slug": "JavaScript/Reference/Global_Objects/decodeURI",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI",
            "summary": "The decodeURI() function decodes a Uniform Resource Identifier (URI) previously created by encodeURI() or a similar routine.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "decodeURI()"
        }
    ],
    "sec-decodeuricomponent-encodeduricomponent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/globals.json",
            "name": "decodeURIComponent",
            "slug": "JavaScript/Reference/Global_Objects/decodeURIComponent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent",
            "summary": "The decodeURIComponent() function decodes a Uniform Resource Identifier (URI) component previously created by encodeURIComponent() or by a similar routine.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "decodeURIComponent()"
        }
    ],
    "sec-encodeuri-uri": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/globals.json",
            "name": "encodeURI",
            "slug": "JavaScript/Reference/Global_Objects/encodeURI",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI",
            "summary": "The encodeURI() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two surrogate characters). Compared to encodeURIComponent(), this function encodes fewer characters, preserving those that are part of the URI syntax.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "encodeURI()"
        }
    ],
    "sec-encodeuricomponent-uricomponent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/globals.json",
            "name": "encodeURIComponent",
            "slug": "JavaScript/Reference/Global_Objects/encodeURIComponent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent",
            "summary": "The encodeURIComponent() function encodes a URI by replacing each instance of certain characters by one, two, three, or four escape sequences representing the UTF-8 encoding of the character (will only be four escape sequences for characters composed of two surrogate characters). Compared to encodeURI(), this function encodes more characters, including those that are part of the URI syntax.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "encodeURIComponent()"
        }
    ],
    "sec-eval-x": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/globals.json",
            "name": "eval",
            "slug": "JavaScript/Reference/Global_Objects/eval",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval",
            "summary": "The eval() function evaluates JavaScript code represented as a string and returns its completion value. The source is parsed as a script.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "eval()"
        }
    ],
    "sec-globalthis": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/globals.json",
            "name": "globalThis",
            "slug": "JavaScript/Reference/Global_Objects/globalThis",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis",
            "summary": "The globalThis global property contains the global this value, which is usually akin to the global object.",
            "support": {
                "chrome": {
                    "version_added": "71"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "65"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "12.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "12.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "globalThis"
        }
    ],
    "sec-isfinite-number": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/globals.json",
            "name": "isFinite",
            "slug": "JavaScript/Reference/Global_Objects/isFinite",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isFinite",
            "summary": "The isFinite() function determines whether the passed value is a finite number. If needed, the parameter is first converted to a number.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "isFinite()"
        }
    ],
    "sec-isnan-number": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/globals.json",
            "name": "isNaN",
            "slug": "JavaScript/Reference/Global_Objects/isNaN",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/isNaN",
            "summary": "The isNaN() function determines whether a value is NaN when converted to a number. Because coercion inside the isNaN() function can be surprising, you may alternatively want to use Number.isNaN().",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "isNaN()"
        }
    ],
    "sec-parsefloat-string": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/globals.json",
            "name": "parseFloat",
            "slug": "JavaScript/Reference/Global_Objects/parseFloat",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseFloat",
            "summary": "The parseFloat() function parses a string argument and returns a floating point number.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "parseFloat()"
        }
    ],
    "sec-parseint-string-radix": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/globals.json",
            "name": "parseInt",
            "slug": "JavaScript/Reference/Global_Objects/parseInt",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt",
            "summary": "The parseInt() function parses a string argument and returns an integer of the specified radix (the base in mathematical numeral systems).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "parseInt()"
        }
    ],
    "sec-undefined": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/builtins/globals.json",
            "name": "undefined",
            "slug": "JavaScript/Reference/Global_Objects/undefined",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
            "summary": "The undefined global property represents the primitive value undefined. It is one of JavaScript's primitive types.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "undefined"
        }
    ],
    "sec-static-semantics-constructormethod": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/classes.json",
            "name": "constructor",
            "slug": "JavaScript/Reference/Classes/constructor",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor",
            "summary": "The constructor method is a special method of a class for creating and initializing an object instance of that class.",
            "support": {
                "chrome": [
                    {
                        "version_added": "49"
                    },
                    {
                        "version_removed": "49",
                        "version_added": "42",
                        "notes": "Strict mode is required."
                    }
                ],
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "45"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "6.0.0"
                    },
                    {
                        "version_added": "5.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    },
                    {
                        "version_added": "4.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--use_strict"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_removed": "49",
                        "version_added": false,
                        "notes": "Strict mode is required."
                    }
                ]
            },
            "title": "constructor"
        }
    ],
    "sec-class-definitions": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/classes.json",
            "name": "extends",
            "slug": "JavaScript/Reference/Classes/extends",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/extends",
            "summary": "The extends keyword is used in class declarations or class expressions to create a class that is a child of another class.",
            "support": {
                "chrome": [
                    {
                        "version_added": "49"
                    },
                    {
                        "version_removed": "49",
                        "version_added": "42",
                        "notes": "Strict mode is required."
                    }
                ],
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "45"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "6.0.0"
                    },
                    {
                        "version_added": "5.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    },
                    {
                        "version_added": "4.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--use_strict"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_removed": "49",
                        "version_added": false,
                        "notes": "Strict mode is required."
                    }
                ]
            },
            "caniuse": {
                "feature": "es6-class",
                "title": "ES6 classes"
            },
            "title": "extends"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/classes.json",
            "name": "static",
            "slug": "JavaScript/Reference/Classes/static",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/static",
            "summary": "The static keyword defines a static method or field for a class, or a static initialization block (see the link for more information about this usage). Static properties cannot be directly accessed on instances of the class. Instead, they're accessed on the class itself.",
            "support": {
                "chrome": [
                    {
                        "version_added": "49"
                    },
                    {
                        "version_removed": "49",
                        "version_added": "42",
                        "notes": "Strict mode is required."
                    }
                ],
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "45"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "6.0.0"
                    },
                    {
                        "version_added": "5.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    },
                    {
                        "version_added": "4.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--use_strict"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_removed": "49",
                        "version_added": false,
                        "notes": "Strict mode is required."
                    }
                ]
            },
            "caniuse": {
                "feature": "es6-class",
                "title": "ES6 classes"
            },
            "title": "static"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/classes.json",
            "name": "classes",
            "slug": "JavaScript/Reference/Classes",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes",
            "summary": "Classes are a template for creating objects. They encapsulate data with code to work on that data. Classes in JS are built on prototypes but also have some syntax and semantics that are unique to classes.",
            "support": {
                "chrome": [
                    {
                        "version_added": "49"
                    },
                    {
                        "version_removed": "49",
                        "version_added": "42",
                        "notes": "Strict mode is required."
                    }
                ],
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "45"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "6.0.0"
                    },
                    {
                        "version_added": "5.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    },
                    {
                        "version_added": "4.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--use_strict"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_removed": "49",
                        "version_added": false,
                        "notes": "Strict mode is required."
                    }
                ]
            },
            "caniuse": {
                "feature": "es6-class",
                "title": "ES6 classes"
            },
            "title": "Classes"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/class.json",
            "name": "class",
            "slug": "JavaScript/Reference/Operators/class",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/class",
            "summary": "The class keyword can be used to define a class inside an expression.",
            "support": {
                "chrome": {
                    "version_added": "42"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "45"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "6.0.0"
                    },
                    {
                        "version_added": "5.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "es6-class",
                "title": "ES6 classes"
            },
            "title": "class expression"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "class",
            "slug": "JavaScript/Reference/Statements/class",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/class",
            "summary": "The class declaration creates a binding of a new class to a given name.",
            "support": {
                "chrome": [
                    {
                        "version_added": "49"
                    },
                    {
                        "version_removed": "49",
                        "version_added": "42",
                        "notes": "Strict mode is required."
                    }
                ],
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "45"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_removed": "49",
                        "version_added": false,
                        "notes": "Strict mode is required."
                    }
                ]
            },
            "caniuse": {
                "feature": "es6-class",
                "title": "ES6 classes"
            },
            "title": "class"
        }
    ],
    "prod-PrivateIdentifier": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/classes.json",
            "name": "private_class_fields",
            "slug": "JavaScript/Reference/Classes/Private_class_fields",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields",
            "summary": "Class fields are public by default, but private class members can be created by using a hash # prefix. The privacy encapsulation of these class features is enforced by JavaScript itself.",
            "support": {
                "chrome": {
                    "version_added": "74"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "90"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "12.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Private class features"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/classes.json",
            "name": "private_class_methods",
            "slug": "JavaScript/Reference/Classes/Private_class_fields",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields",
            "summary": "Class fields are public by default, but private class members can be created by using a hash # prefix. The privacy encapsulation of these class features is enforced by JavaScript itself.",
            "support": {
                "chrome": {
                    "version_added": "84"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "90"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "14.6.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "84"
                }
            },
            "title": "Private class features"
        }
    ],
    "prod-00OK517S": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/classes.json",
            "name": "private_class_fields_in",
            "slug": "JavaScript/Reference/Classes/Private_class_fields",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields",
            "summary": "Class fields are public by default, but private class members can be created by using a hash # prefix. The privacy encapsulation of these class features is enforced by JavaScript itself.",
            "support": {
                "chrome": {
                    "version_added": "91"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.9"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "90"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "16.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "91"
                }
            },
            "title": "Private class features"
        }
    ],
    "prod-FieldDefinition": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/classes.json",
            "name": "public_class_fields",
            "slug": "JavaScript/Reference/Classes/Class_elements#Public_fields",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Class_elements#Public_fields",
            "summary": "Public fields are writable, enumerable, and configurable properties. As such, unlike their private counterparts, they participate in prototype inheritance.",
            "support": {
                "chrome": {
                    "version_added": "72"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "12.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": [
                    {
                        "version_added": "14.1"
                    },
                    {
                        "version_added": "14",
                        "version_removed": "14.1",
                        "partial_implementation": true,
                        "notes": "Doesn't support public static fields. See WebKit bug <a href='https://webkit.org/b/194095'>194095</a>."
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Public class fields"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/classes.json",
            "name": "static_class_fields",
            "slug": "JavaScript/Reference/Classes/Class_fields",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Class_fields",
            "summary": "Public fields are writable, enumerable, and configurable properties. As such, unlike their private counterparts, they participate in prototype inheritance.",
            "support": {
                "chrome": {
                    "version_added": "72"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "75"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "12.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Public class fields"
        }
    ],
    "prod-ClassStaticBlock": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/classes.json",
            "name": "static_initialization_blocks",
            "slug": "JavaScript/Reference/Classes/Class_static_initialization_blocks",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Class_static_initialization_blocks",
            "summary": "Static initialization blocks are declared within a class. It contains statements to be evaluated during class initialization. This permits more flexible initialization logic than static properties, such as using try...catch or setting multiple fields from a single value. Initialization is performed in the context of the current class declaration, with access to private state, which allows the class to share information of its private properties with other classes or functions declared in the same scope (analogous to \"friend\" classes in C++).",
            "support": {
                "chrome": {
                    "version_added": "94"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.14"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "93"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "16.11.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "94"
                }
            },
            "title": "Static initialization blocks"
        }
    ],
    "sec-arguments-exotic-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/functions.json",
            "name": "length",
            "slug": "JavaScript/Reference/Functions/arguments/length",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/length",
            "summary": "The arguments.length data property contains the number of arguments passed to the function.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "arguments.length"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/functions.json",
            "name": "arguments",
            "slug": "JavaScript/Reference/Functions/arguments",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments",
            "summary": "arguments is an array-like object accessible inside functions that contains the values of the arguments passed to that function.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "The arguments object"
        }
    ],
    "sec-createunmappedargumentsobject": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/functions.json",
            "name": "@@iterator",
            "slug": "JavaScript/Reference/Functions/arguments/@@iterator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/@@iterator",
            "summary": "The [@@iterator]() method of arguments objects implements the iterable protocol and allows arguments objects to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns an array iterator object that yields the value of each index in the arguments object.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "46"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "arguments[@@iterator]()"
        }
    ],
    "sec-createmappedargumentsobject": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/functions.json",
            "name": "@@iterator",
            "slug": "JavaScript/Reference/Functions/arguments/@@iterator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments/@@iterator",
            "summary": "The [@@iterator]() method of arguments objects implements the iterable protocol and allows arguments objects to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns an array iterator object that yields the value of each index in the arguments object.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "46"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "arguments[@@iterator]()"
        }
    ],
    "sec-arrow-function-definitions": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/functions.json",
            "name": "arrow_functions",
            "slug": "JavaScript/Reference/Functions/Arrow_functions",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions",
            "summary": "An arrow function expression is a compact alternative to a traditional function expression, with some semantic differences and deliberate limitations in usage:",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22",
                    "notes": [
                        "The initial implementation of arrow functions in Firefox made them automatically strict. This has been changed as of Firefox 24. The use of <code>'use strict';</code> is now required.",
                        "Before Firefox 39, a line terminator (<code>\\n</code>) was incorrectly allowed after arrow function arguments. This has been fixed to conform to the ES2015 specification and code like <code>() \\n =&gt; {}</code> will now throw a <code>SyntaxError</code> in this and later versions."
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "4.0.0"
                    },
                    {
                        "version_added": "0.12.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ],
                        "partial_implementation": true,
                        "notes": "The arrow function syntax is supported, but not the correct lexical binding of the <code>this</code> value."
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "arrow-functions",
                "title": "Arrow functions"
            },
            "title": "Arrow function expressions"
        }
    ],
    "sec-function-definitions": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/functions.json",
            "name": "default_parameters",
            "slug": "JavaScript/Reference/Functions/Default_parameters",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters",
            "summary": "Default function parameters allow named parameters to be initialized with default values if no value or undefined is passed.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "rest-parameters",
                "title": "Rest parameters"
            },
            "title": "Default parameters"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/functions.json",
            "name": "rest_parameters",
            "slug": "JavaScript/Reference/Functions/rest_parameters",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters",
            "summary": "The rest parameter syntax allows a function to accept an indefinite number of arguments as an array, providing a way to represent variadic functions in JavaScript.",
            "support": {
                "chrome": {
                    "version_added": "47"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "15"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "6.0.0"
                    },
                    {
                        "version_added": "4.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "rest-parameters",
                "title": "Rest parameters"
            },
            "title": "Rest parameters"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/functions.json",
            "name": "functions",
            "slug": "JavaScript/Reference/Functions",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions",
            "summary": "Generally speaking, a function is a \"subprogram\" that can be called by code external (or internal, in the case of recursion) to the function. Like the program itself, a function is composed of a sequence of statements called the function body. Values can be passed to a function as parameters, and the function will return a value.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "rest-parameters",
                "title": "Rest parameters"
            },
            "title": "Functions"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/function.json",
            "name": "function",
            "slug": "JavaScript/Reference/Operators/function",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function",
            "summary": "The function keyword can be used to define a function inside an expression.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "rest-parameters",
                "title": "Rest parameters"
            },
            "title": "Function expression"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "function",
            "slug": "JavaScript/Reference/Statements/function",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function",
            "summary": "The function declaration creates a binding of a new function to a given name.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "rest-parameters",
                "title": "Rest parameters"
            },
            "title": "function declaration"
        }
    ],
    "sec-method-definitions": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/functions.json",
            "name": "get",
            "slug": "JavaScript/Reference/Functions/get",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/get",
            "summary": "The get syntax binds an object property to a function that will be called when that property is looked up. It can also be used in classes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "get"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/functions.json",
            "name": "method_definitions",
            "slug": "JavaScript/Reference/Functions/Method_definitions",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Method_definitions",
            "summary": "Method definition is a shorter syntax for defining a function property in an object initializer. It can also be used in classes.",
            "support": {
                "chrome": {
                    "version_added": "39"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "34"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Method definitions"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/functions.json",
            "name": "set",
            "slug": "JavaScript/Reference/Functions/set",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/set",
            "summary": "The set syntax binds an object property to a function to be called when there is an attempt to set that property. It can also be used in classes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "set"
        }
    ],
    "sec-array-initializer": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "array_literals",
            "slug": "JavaScript/Reference/Lexical_grammar#Array_literals",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Array_literals",
            "summary": "This page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters — in order for the interpreter to understand it, the string has to be parsed to a more structured representation. The initial step of parsing is called lexical analysis, in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step — they include white space and comments. The others, including identifiers, keywords, literals, and punctuators (mostly operators), will be used for further syntax analysis. Line terminators and multiline comments are also syntactically insignificant, but they guide the process for automatic semicolons insertion to make certain invalid token sequences become valid.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Lexical grammar"
        }
    ],
    "prod-BinaryIntegerLiteral": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "binary_numeric_literals",
            "slug": "JavaScript/Reference/Lexical_grammar#Binary",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Binary",
            "summary": "This page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters — in order for the interpreter to understand it, the string has to be parsed to a more structured representation. The initial step of parsing is called lexical analysis, in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step — they include white space and comments. The others, including identifiers, keywords, literals, and punctuators (mostly operators), will be used for further syntax analysis. Line terminators and multiline comments are also syntactically insignificant, but they guide the process for automatic semicolons insertion to make certain invalid token sequences become valid.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "4.0.0"
                    },
                    {
                        "version_added": "0.12.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Lexical grammar"
        }
    ],
    "sec-boolean-literals": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "boolean_literals",
            "slug": "JavaScript/Reference/Lexical_grammar#Boolean_literal",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Boolean_literal",
            "summary": "This page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters — in order for the interpreter to understand it, the string has to be parsed to a more structured representation. The initial step of parsing is called lexical analysis, in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step — they include white space and comments. The others, including identifiers, keywords, literals, and punctuators (mostly operators), will be used for further syntax analysis. Line terminators and multiline comments are also syntactically insignificant, but they guide the process for automatic semicolons insertion to make certain invalid token sequences become valid.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Lexical grammar"
        }
    ],
    "prod-DecimalLiteral": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "decimal_numeric_literals",
            "slug": "JavaScript/Reference/Lexical_grammar#Decimal",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Decimal",
            "summary": "This page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters — in order for the interpreter to understand it, the string has to be parsed to a more structured representation. The initial step of parsing is called lexical analysis, in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step — they include white space and comments. The others, including identifiers, keywords, literals, and punctuators (mostly operators), will be used for further syntax analysis. Line terminators and multiline comments are also syntactically insignificant, but they guide the process for automatic semicolons insertion to make certain invalid token sequences become valid.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Lexical grammar"
        }
    ],
    "sec-hashbang": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "hashbang_comments",
            "slug": "JavaScript/Reference/Lexical_grammar#Hashbang_comments",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Hashbang_comments",
            "summary": "This page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters — in order for the interpreter to understand it, the string has to be parsed to a more structured representation. The initial step of parsing is called lexical analysis, in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step — they include white space and comments. The others, including identifiers, keywords, literals, and punctuators (mostly operators), will be used for further syntax analysis. Line terminators and multiline comments are also syntactically insignificant, but they guide the process for automatic semicolons insertion to make certain invalid token sequences become valid.",
            "support": {
                "chrome": {
                    "version_added": "74"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "67"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "13.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Lexical grammar"
        }
    ],
    "prod-HexEscapeSequence": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "hexadecimal_escape_sequences",
            "slug": "JavaScript/Reference/Lexical_grammar#Hexadecimal_escape_sequences",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Hexadecimal_escape_sequences",
            "summary": "This page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters — in order for the interpreter to understand it, the string has to be parsed to a more structured representation. The initial step of parsing is called lexical analysis, in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step — they include white space and comments. The others, including identifiers, keywords, literals, and punctuators (mostly operators), will be used for further syntax analysis. Line terminators and multiline comments are also syntactically insignificant, but they guide the process for automatic semicolons insertion to make certain invalid token sequences become valid.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Lexical grammar"
        }
    ],
    "prod-HexIntegerLiteral": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "hexadecimal_numeric_literals",
            "slug": "JavaScript/Reference/Lexical_grammar#Hexadecimal",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Hexadecimal",
            "summary": "This page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters — in order for the interpreter to understand it, the string has to be parsed to a more structured representation. The initial step of parsing is called lexical analysis, in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step — they include white space and comments. The others, including identifiers, keywords, literals, and punctuators (mostly operators), will be used for further syntax analysis. Line terminators and multiline comments are also syntactically insignificant, but they guide the process for automatic semicolons insertion to make certain invalid token sequences become valid.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Lexical grammar"
        }
    ],
    "sec-null-literals": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "null_literal",
            "slug": "JavaScript/Reference/Lexical_grammar#Null_literal",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Null_literal",
            "summary": "This page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters — in order for the interpreter to understand it, the string has to be parsed to a more structured representation. The initial step of parsing is called lexical analysis, in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step — they include white space and comments. The others, including identifiers, keywords, literals, and punctuators (mostly operators), will be used for further syntax analysis. Line terminators and multiline comments are also syntactically insignificant, but they guide the process for automatic semicolons insertion to make certain invalid token sequences become valid.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Lexical grammar"
        }
    ],
    "prod-NumericLiteralSeparator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "numeric_separators",
            "slug": "JavaScript/Reference/Lexical_grammar#Numeric_separators",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Numeric_separators",
            "summary": "This page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters — in order for the interpreter to understand it, the string has to be parsed to a more structured representation. The initial step of parsing is called lexical analysis, in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step — they include white space and comments. The others, including identifiers, keywords, literals, and punctuators (mostly operators), will be used for further syntax analysis. Line terminators and multiline comments are also syntactically insignificant, but they guide the process for automatic semicolons insertion to make certain invalid token sequences become valid.",
            "support": {
                "chrome": {
                    "version_added": "75"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.2"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "70"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "12.5.0"
                    },
                    {
                        "version_added": "10.4.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "13"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Lexical grammar"
        }
    ],
    "prod-OctalIntegerLiteral": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "octal_numeric_literals",
            "slug": "JavaScript/Reference/Lexical_grammar#Octal",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Octal",
            "summary": "This page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters — in order for the interpreter to understand it, the string has to be parsed to a more structured representation. The initial step of parsing is called lexical analysis, in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step — they include white space and comments. The others, including identifiers, keywords, literals, and punctuators (mostly operators), will be used for further syntax analysis. Line terminators and multiline comments are also syntactically insignificant, but they guide the process for automatic semicolons insertion to make certain invalid token sequences become valid.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "4.0.0"
                    },
                    {
                        "version_added": "0.12.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Lexical grammar"
        }
    ],
    "sec-literals-regular-expression-literals": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "regular_expression_literals",
            "slug": "JavaScript/Reference/Lexical_grammar#Regular_expression_literals",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Regular_expression_literals",
            "summary": "This page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters — in order for the interpreter to understand it, the string has to be parsed to a more structured representation. The initial step of parsing is called lexical analysis, in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step — they include white space and comments. The others, including identifiers, keywords, literals, and punctuators (mostly operators), will be used for further syntax analysis. Line terminators and multiline comments are also syntactically insignificant, but they guide the process for automatic semicolons insertion to make certain invalid token sequences become valid.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Lexical grammar"
        }
    ],
    "sec-literals-string-literals": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "string_literals",
            "slug": "JavaScript/Reference/Lexical_grammar#String_literals",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#String_literals",
            "summary": "This page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters — in order for the interpreter to understand it, the string has to be parsed to a more structured representation. The initial step of parsing is called lexical analysis, in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step — they include white space and comments. The others, including identifiers, keywords, literals, and punctuators (mostly operators), will be used for further syntax analysis. Line terminators and multiline comments are also syntactically insignificant, but they guide the process for automatic semicolons insertion to make certain invalid token sequences become valid.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Lexical grammar"
        }
    ],
    "sec-unicodeescape": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "unicode_escape_sequences",
            "slug": "JavaScript/Reference/Lexical_grammar#Unicode_escape_sequences",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Unicode_escape_sequences",
            "summary": "This page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters — in order for the interpreter to understand it, the string has to be parsed to a more structured representation. The initial step of parsing is called lexical analysis, in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step — they include white space and comments. The others, including identifiers, keywords, literals, and punctuators (mostly operators), will be used for further syntax analysis. Line terminators and multiline comments are also syntactically insignificant, but they guide the process for automatic semicolons insertion to make certain invalid token sequences become valid.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Lexical grammar"
        }
    ],
    "prod-UnicodeEscapeSequence": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "unicode_point_escapes",
            "slug": "JavaScript/Reference/Lexical_grammar#Unicode_code_point_escapes",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Unicode_code_point_escapes",
            "summary": "This page describes JavaScript's lexical grammar. JavaScript source text is just a sequence of characters — in order for the interpreter to understand it, the string has to be parsed to a more structured representation. The initial step of parsing is called lexical analysis, in which the text gets scanned from left to right and is converted into a sequence of individual, atomic input elements. Some input elements are insignificant to the interpreter, and will be stripped after this step — they include white space and comments. The others, including identifiers, keywords, literals, and punctuators (mostly operators), will be used for further syntax analysis. Line terminators and multiline comments are also syntactically insignificant, but they guide the process for automatic semicolons insertion to make certain invalid token sequences become valid.",
            "support": {
                "chrome": {
                    "version_added": "44"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "40"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Lexical grammar"
        }
    ],
    "sec-template-literals": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "template_literals",
            "slug": "JavaScript/Reference/Template_literals",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals",
            "summary": "Template literals are literals delimited with backtick (`) characters, allowing for multi-line strings, string interpolation with embedded expressions, and special constructs called tagged templates.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "34"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "template-literals",
                "title": "ES6 Template Literals (Template Strings)"
            },
            "title": "Template literals (Template strings)"
        }
    ],
    "prod-Elision": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "trailing_commas",
            "slug": "JavaScript/Reference/Trailing_commas",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas",
            "summary": "Trailing commas (sometimes called \"final commas\") can be useful when adding new elements, parameters, or properties to JavaScript code. If you want to add a new property, you can add a new line without modifying the previously last line if that line already uses a trailing comma. This makes version-control diffs cleaner and editing code might be less troublesome.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Trailing commas"
        }
    ],
    "prod-ObjectLiteral": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "trailing_commas",
            "slug": "JavaScript/Reference/Trailing_commas",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas",
            "summary": "Trailing commas (sometimes called \"final commas\") can be useful when adding new elements, parameters, or properties to JavaScript code. If you want to add a new property, you can add a new line without modifying the previously last line if that line already uses a trailing comma. This makes version-control diffs cleaner and editing code might be less troublesome.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Trailing commas"
        }
    ],
    "prod-ArrayLiteral": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "trailing_commas",
            "slug": "JavaScript/Reference/Trailing_commas",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas",
            "summary": "Trailing commas (sometimes called \"final commas\") can be useful when adding new elements, parameters, or properties to JavaScript code. If you want to add a new property, you can add a new line without modifying the previously last line if that line already uses a trailing comma. This makes version-control diffs cleaner and editing code might be less troublesome.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Trailing commas"
        }
    ],
    "prod-Arguments": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "trailing_commas",
            "slug": "JavaScript/Reference/Trailing_commas",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas",
            "summary": "Trailing commas (sometimes called \"final commas\") can be useful when adding new elements, parameters, or properties to JavaScript code. If you want to add a new property, you can add a new line without modifying the previously last line if that line already uses a trailing comma. This makes version-control diffs cleaner and editing code might be less troublesome.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Trailing commas"
        }
    ],
    "prod-FormalParameters": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "trailing_commas",
            "slug": "JavaScript/Reference/Trailing_commas",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas",
            "summary": "Trailing commas (sometimes called \"final commas\") can be useful when adding new elements, parameters, or properties to JavaScript code. If you want to add a new property, you can add a new line without modifying the previously last line if that line already uses a trailing comma. This makes version-control diffs cleaner and editing code might be less troublesome.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Trailing commas"
        }
    ],
    "prod-CoverParenthesizedExpressionAndArrowParameterList": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "trailing_commas",
            "slug": "JavaScript/Reference/Trailing_commas",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas",
            "summary": "Trailing commas (sometimes called \"final commas\") can be useful when adding new elements, parameters, or properties to JavaScript code. If you want to add a new property, you can add a new line without modifying the previously last line if that line already uses a trailing comma. This makes version-control diffs cleaner and editing code might be less troublesome.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Trailing commas"
        }
    ],
    "prod-NamedImports": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "trailing_commas",
            "slug": "JavaScript/Reference/Trailing_commas",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas",
            "summary": "Trailing commas (sometimes called \"final commas\") can be useful when adding new elements, parameters, or properties to JavaScript code. If you want to add a new property, you can add a new line without modifying the previously last line if that line already uses a trailing comma. This makes version-control diffs cleaner and editing code might be less troublesome.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Trailing commas"
        }
    ],
    "prod-NamedExports": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "trailing_commas",
            "slug": "JavaScript/Reference/Trailing_commas",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas",
            "summary": "Trailing commas (sometimes called \"final commas\") can be useful when adding new elements, parameters, or properties to JavaScript code. If you want to add a new property, you can add a new line without modifying the previously last line if that line already uses a trailing comma. This makes version-control diffs cleaner and editing code might be less troublesome.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Trailing commas"
        }
    ],
    "prod-QuantifierPrefix": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "trailing_commas",
            "slug": "JavaScript/Reference/Trailing_commas",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas",
            "summary": "Trailing commas (sometimes called \"final commas\") can be useful when adding new elements, parameters, or properties to JavaScript code. If you want to add a new property, you can add a new line without modifying the previously last line if that line already uses a trailing comma. This makes version-control diffs cleaner and editing code might be less troublesome.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Trailing commas"
        }
    ],
    "prod-annexB-InvalidBracedQuantifier": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/grammar.json",
            "name": "trailing_commas",
            "slug": "JavaScript/Reference/Trailing_commas",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas",
            "summary": "Trailing commas (sometimes called \"final commas\") can be useful when adding new elements, parameters, or properties to JavaScript code. If you want to add a new property, you can add a new line without modifying the previously last line if that line already uses a trailing comma. This makes version-control diffs cleaner and editing code might be less troublesome.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Trailing commas"
        }
    ],
    "sec-addition-operator-plus": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/addition.json",
            "name": "addition",
            "slug": "JavaScript/Reference/Operators/Addition",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition",
            "summary": "The addition (+) operator produces the sum of numeric operands or string concatenation.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Addition (+)"
        }
    ],
    "sec-assignment-operators": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/addition_assignment.json",
            "name": "addition_assignment",
            "slug": "JavaScript/Reference/Operators/Addition_assignment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Addition_assignment",
            "summary": "The addition assignment (+=) operator performs addition (which is either numeric addition or string concatenation) on the two operands and assigns the result to the left operand.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Addition assignment (+=)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/assignment.json",
            "name": "assignment",
            "slug": "JavaScript/Reference/Operators/Assignment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Assignment",
            "summary": "The assignment (=) operator is used to assign a value to a variable. The assignment operation evaluates to the assigned value. Chaining the assignment operator is possible in order to assign a single value to multiple variables.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Assignment (=)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/bitwise_and_assignment.json",
            "name": "bitwise_and_assignment",
            "slug": "JavaScript/Reference/Operators/Bitwise_AND_assignment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND_assignment",
            "summary": "The bitwise AND assignment (&=) operator performs bitwise AND on the two operands and assigns the result to the left operand.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Bitwise AND assignment (&=)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/bitwise_or_assignment.json",
            "name": "bitwise_or_assignment",
            "slug": "JavaScript/Reference/Operators/Bitwise_OR_assignment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR_assignment",
            "summary": "The bitwise OR assignment (|=) operator performs bitwise OR on the two operands and assigns the result to the left operand.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Bitwise OR assignment (|=)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/bitwise_xor_assignment.json",
            "name": "bitwise_xor_assignment",
            "slug": "JavaScript/Reference/Operators/Bitwise_XOR_assignment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR_assignment",
            "summary": "The bitwise XOR assignment (^=) operator performs bitwise XOR on the two operands and assigns the result to the left operand.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Bitwise XOR assignment (^=)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/division_assignment.json",
            "name": "division_assignment",
            "slug": "JavaScript/Reference/Operators/Division_assignment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Division_assignment",
            "summary": "The division assignment (/=) operator performs division on the two operands and assigns the result to the left operand.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Division assignment (/=)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/exponentiation_assignment.json",
            "name": "exponentiation_assignment",
            "slug": "JavaScript/Reference/Operators/Exponentiation_assignment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation_assignment",
            "summary": "The exponentiation assignment (**=) operator performs exponentiation on the two operands and assigns the result to the left operand.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "7.0.0"
                    },
                    {
                        "version_added": "6.5.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "51"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Exponentiation assignment (**=)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/left_shift_assignment.json",
            "name": "left_shift_assignment",
            "slug": "JavaScript/Reference/Operators/Left_shift_assignment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift_assignment",
            "summary": "The left shift assignment (<<=) operator performs left shift on the two operands and assigns the result to the left operand.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Left shift assignment (<<=)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/logical_and_assignment.json",
            "name": "logical_and_assignment",
            "slug": "JavaScript/Reference/Operators/Logical_AND_assignment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND_assignment",
            "summary": "The logical AND assignment (x &&= y) operator only assigns if x is truthy.",
            "support": {
                "chrome": {
                    "version_added": "85"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.2"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "79"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "85"
                }
            },
            "title": "Logical AND assignment (&&=)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/logical_or_assignment.json",
            "name": "logical_or_assignment",
            "slug": "JavaScript/Reference/Operators/Logical_OR_assignment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR_assignment",
            "summary": "The logical OR assignment (x ||= y) operator only assigns if x is falsy.",
            "support": {
                "chrome": {
                    "version_added": "85"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.2"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "79"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "85"
                }
            },
            "title": "Logical OR assignment (||=)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/multiplication_assignment.json",
            "name": "multiplication_assignment",
            "slug": "JavaScript/Reference/Operators/Multiplication_assignment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication_assignment",
            "summary": "The multiplication assignment (*=) operator performs multiplication on the two operands and assigns the result to the left operand.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Multiplication assignment (*=)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/nullish_coalescing_assignment.json",
            "name": "nullish_coalescing_assignment",
            "slug": "JavaScript/Reference/Operators/Logical_nullish_assignment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_nullish_assignment",
            "summary": "The nullish coalescing assignment (??=) operator, also known as the logical nullish assignment operator, only assigns if x is nullish (null or undefined).",
            "support": {
                "chrome": {
                    "version_added": "85"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.2"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "79"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "85"
                }
            },
            "title": "Nullish coalescing assignment (??=)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/remainder_assignment.json",
            "name": "remainder_assignment",
            "slug": "JavaScript/Reference/Operators/Remainder_assignment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder_assignment",
            "summary": "The remainder assignment (%=) operator performs remainder on the two operands and assigns the result to the left operand.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Remainder assignment (%=)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/right_shift_assignment.json",
            "name": "right_shift_assignment",
            "slug": "JavaScript/Reference/Operators/Right_shift_assignment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift_assignment",
            "summary": "The right shift assignment (>>=) operator performs right shift on the two operands and assigns the result to the left operand.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Right shift assignment (>>=)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/subtraction_assignment.json",
            "name": "subtraction_assignment",
            "slug": "JavaScript/Reference/Operators/Subtraction_assignment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction_assignment",
            "summary": "The subtraction assignment (-=) operator performs subtraction on the two operands and assigns the result to the left operand.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Subtraction assignment (-=)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/unsigned_right_shift_assignment.json",
            "name": "unsigned_right_shift_assignment",
            "slug": "JavaScript/Reference/Operators/Unsigned_right_shift_assignment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift_assignment",
            "summary": "The unsigned right shift assignment (>>>=) operator performs unsigned right shift on the two operands and assigns the result to the left operand.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Unsigned right shift assignment (>>>=)"
        }
    ],
    "sec-async-function-definitions": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/async_function.json",
            "name": "async_function",
            "slug": "JavaScript/Reference/Operators/async_function",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function",
            "summary": "The async function keywords can be used to define an async function inside an expression.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "7.6.0"
                    },
                    {
                        "version_added": "7.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "async-functions",
                "title": "Async functions"
            },
            "title": "async function expression"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/await.json",
            "name": "top_level",
            "slug": "JavaScript/Reference/Operators/await#top_level_await",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await#top_level_await",
            "summary": "The await operator is used to wait for a Promise and get its fulfillment value. It can only be used inside an async function or at the top level of a module.",
            "support": {
                "chrome": {
                    "version_added": "89"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "89"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "14.8.0",
                        "notes": "Not supported in CommonJS modules."
                    },
                    {
                        "version_added": "14.3.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--experimental-top-level-await"
                            }
                        ],
                        "notes": "Not supported in CommonJS modules."
                    }
                ],
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "75"
                    },
                    {
                        "version_added": "73",
                        "version_removed": "75",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "#enable-javascript-harmony"
                            }
                        ]
                    }
                ],
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "89"
                }
            },
            "caniuse": {
                "feature": "async-functions",
                "title": "Async functions"
            },
            "title": "await"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/await.json",
            "name": "await",
            "slug": "JavaScript/Reference/Operators/await",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await",
            "summary": "The await operator is used to wait for a Promise and get its fulfillment value. It can only be used inside an async function or at the top level of a module.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "7.6.0"
                    },
                    {
                        "version_added": "7.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "async-functions",
                "title": "Async functions"
            },
            "title": "await"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "async_function",
            "slug": "JavaScript/Reference/Statements/async_function",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function",
            "summary": "The async function declaration creates a binding of a new async function to a given name. The await keyword is permitted within the function body, enabling asynchronous, promise-based behavior to be written in a cleaner style and avoiding the need to explicitly configure promise chains.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "7.6.0"
                    },
                    {
                        "version_added": "7.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "async-functions",
                "title": "Async functions"
            },
            "title": "async function"
        }
    ],
    "sec-async-generator-function-definitions": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/async_generator_function.json",
            "name": "async_generator_function",
            "slug": "JavaScript/Reference/Operators/async_function*",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/async_function*",
            "summary": "The async function* keywords can be used to define an asynchronous generator function inside an expression.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "55"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "10.0.0"
                    },
                    {
                        "version_added": "8.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "12"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "async function* expression"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "async_generator_function",
            "slug": "JavaScript/Reference/Statements/async_function*",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function*",
            "summary": "The async function* declaration creates a binding of a new async generator function to a given name.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "55"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "10.0.0"
                    },
                    {
                        "version_added": "8.10.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "12"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "async function*"
        }
    ],
    "prod-BitwiseANDExpression": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/bitwise_and.json",
            "name": "bitwise_and",
            "slug": "JavaScript/Reference/Operators/Bitwise_AND",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_AND",
            "summary": "The bitwise AND (&) operator returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bits of both operands are 1.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Bitwise AND (&)"
        }
    ],
    "sec-bitwise-not-operator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/bitwise_not.json",
            "name": "bitwise_not",
            "slug": "JavaScript/Reference/Operators/Bitwise_NOT",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT",
            "summary": "The bitwise NOT (~) operator returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bit of the operand is 0, and a 0 otherwise.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Bitwise NOT (~)"
        }
    ],
    "prod-BitwiseORExpression": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/bitwise_or.json",
            "name": "bitwise_or",
            "slug": "JavaScript/Reference/Operators/Bitwise_OR",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_OR",
            "summary": "The bitwise OR (|) operator returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bits of either or both operands are 1.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Bitwise OR (|)"
        }
    ],
    "prod-BitwiseXORExpression": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/bitwise_xor.json",
            "name": "bitwise_xor",
            "slug": "JavaScript/Reference/Operators/Bitwise_XOR",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_XOR",
            "summary": "The bitwise XOR (^) operator returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bits of either but not both operands are 1.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Bitwise XOR (^)"
        }
    ],
    "sec-comma-operator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/comma.json",
            "name": "comma",
            "slug": "JavaScript/Reference/Operators/Comma_operator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Comma_operator",
            "summary": "The comma (,) operator evaluates each of its operands (from left to right) and returns the value of the last operand. This is commonly used to provide multiple updaters to a for loop's afterthought.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Comma operator (,)"
        }
    ],
    "sec-conditional-operator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/conditional.json",
            "name": "conditional",
            "slug": "JavaScript/Reference/Operators/Conditional_Operator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator",
            "summary": "The conditional (ternary) operator is the only JavaScript operator that takes three operands: a condition followed by a question mark (?), then an expression to execute if the condition is truthy followed by a colon (:), and finally the expression to execute if the condition is falsy. This operator is frequently used as an alternative to an if...else statement.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Conditional (ternary) operator"
        }
    ],
    "sec-postfix-decrement-operator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/decrement.json",
            "name": "decrement",
            "slug": "JavaScript/Reference/Operators/Decrement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Decrement",
            "summary": "The decrement (--) operator decrements (subtracts one from) its operand and returns the value before or after the decrement, depending on where the operator is placed.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Decrement (--)"
        }
    ],
    "sec-delete-operator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/delete.json",
            "name": "delete",
            "slug": "JavaScript/Reference/Operators/delete",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/delete",
            "summary": "The delete operator removes a property from an object. If the property's value is an object and there are no more references to the object, the object held by that property is eventually released automatically.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "delete operator"
        }
    ],
    "sec-destructuring-assignment": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/destructuring.json",
            "name": "destructuring",
            "slug": "JavaScript/Reference/Operators/Destructuring_assignment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment",
            "summary": "The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "41",
                    "notes": "Firefox provided a non-standard destructuring implementation from Firefox 2 to 40."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Destructuring assignment"
        }
    ],
    "sec-destructuring-binding-patterns": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/destructuring.json",
            "name": "destructuring",
            "slug": "JavaScript/Reference/Operators/Destructuring_assignment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment",
            "summary": "The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "41",
                    "notes": "Firefox provided a non-standard destructuring implementation from Firefox 2 to 40."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Destructuring assignment"
        }
    ],
    "sec-multiplicative-operators": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/division.json",
            "name": "division",
            "slug": "JavaScript/Reference/Operators/Division",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Division",
            "summary": "The division (/) operator produces the quotient of its operands where the left operand is the dividend and the right operand is the divisor.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Division (/)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/multiplication.json",
            "name": "multiplication",
            "slug": "JavaScript/Reference/Operators/Multiplication",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Multiplication",
            "summary": "The multiplication (*) operator produces the product of the operands.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Multiplication (*)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/remainder.json",
            "name": "remainder",
            "slug": "JavaScript/Reference/Operators/Remainder",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder",
            "summary": "The remainder (%) operator returns the remainder left over when one operand is divided by a second operand. It always takes the sign of the dividend.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Remainder (%)"
        }
    ],
    "sec-equality-operators": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/equality.json",
            "name": "equality",
            "slug": "JavaScript/Reference/Operators/Equality",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality",
            "summary": "The equality (==) operator checks whether its two operands are equal, returning a Boolean result. Unlike the strict equality operator, it attempts to convert and compare operands that are of different types.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Equality (==)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/inequality.json",
            "name": "inequality",
            "slug": "JavaScript/Reference/Operators/Inequality",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Inequality",
            "summary": "The inequality (!=) operator checks whether its two operands are not equal, returning a Boolean result. Unlike the strict inequality operator, it attempts to convert and compare operands that are of different types.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Inequality (!=)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/strict_equality.json",
            "name": "strict_equality",
            "slug": "JavaScript/Reference/Operators/Strict_equality",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_equality",
            "summary": "The strict equality (===) operator checks whether its two operands are equal, returning a Boolean result. Unlike the equality operator, the strict equality operator always considers operands of different types to be different.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Strict equality (===)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/strict_inequality.json",
            "name": "strict_inequality",
            "slug": "JavaScript/Reference/Operators/Strict_inequality",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Strict_inequality",
            "summary": "The strict inequality (!==) operator checks whether its two operands are not equal, returning a Boolean result. Unlike the inequality operator, the strict inequality operator always considers operands of different types to be different.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Strict inequality (!==)"
        }
    ],
    "sec-exp-operator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/exponentiation.json",
            "name": "exponentiation",
            "slug": "JavaScript/Reference/Operators/Exponentiation",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Exponentiation",
            "summary": "The exponentiation (**) operator returns the result of raising the first operand to the power of the second operand. It is equivalent to Math.pow(), except it also accepts BigInts as operands.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "7.0.0"
                    },
                    {
                        "version_added": "6.5.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "51"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Exponentiation (**)"
        }
    ],
    "sec-generator-function-definitions": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/generator_function.json",
            "name": "generator_function",
            "slug": "JavaScript/Reference/Operators/function*",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function*",
            "summary": "The function* keyword can be used to define a generator function inside an expression.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "26"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "4.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "es6-generators",
                "title": "ES6 Generators"
            },
            "title": "function* expression"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "generator_function",
            "slug": "JavaScript/Reference/Statements/function*",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*",
            "summary": "The function* declaration creates a binding of a new generator function to a given name. A generator function can be exited and later re-entered, with its context (variable bindings) saved across re-entrances.",
            "support": {
                "chrome": {
                    "version_added": "39"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "26"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "4.0.0"
                    },
                    {
                        "version_added": "0.12.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "es6-generators",
                "title": "ES6 Generators"
            },
            "title": "function*"
        }
    ],
    "sec-relational-operators": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/greater_than.json",
            "name": "greater_than",
            "slug": "JavaScript/Reference/Operators/Greater_than",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than",
            "summary": "The greater than (>) operator returns true if the left operand is greater than the right operand, and false otherwise.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Greater than (>)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/greater_than_or_equal.json",
            "name": "greater_than_or_equal",
            "slug": "JavaScript/Reference/Operators/Greater_than_or_equal",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Greater_than_or_equal",
            "summary": "The greater than or equal (>=) operator returns true if the left operand is greater than or equal to the right operand, and false otherwise.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Greater than or equal (>=)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/in.json",
            "name": "in",
            "slug": "JavaScript/Reference/Operators/in",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in",
            "summary": "The in operator returns true if the specified property is in the specified object or its prototype chain.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "in operator"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/instanceof.json",
            "name": "instanceof",
            "slug": "JavaScript/Reference/Operators/instanceof",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof",
            "summary": "The instanceof operator tests to see if the prototype property of a constructor appears anywhere in the prototype chain of an object. The return value is a boolean value. Its behavior can be customized with Symbol.hasInstance.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "instanceof"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/less_than.json",
            "name": "less_than",
            "slug": "JavaScript/Reference/Operators/Less_than",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than",
            "summary": "The less than (<) operator returns true if the left operand is less than the right operand, and false otherwise.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Less than (<)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/less_than_or_equal.json",
            "name": "less_than_or_equal",
            "slug": "JavaScript/Reference/Operators/Less_than_or_equal",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Less_than_or_equal",
            "summary": "The less than or equal (<=) operator returns true if the left operand is less than or equal to the right operand, and false otherwise.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Less than or equal (<=)"
        }
    ],
    "sec-grouping-operator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/grouping.json",
            "name": "grouping",
            "slug": "JavaScript/Reference/Operators/Grouping",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Grouping",
            "summary": "The grouping ( ) operator controls the precedence of evaluation in expressions. It also acts as a container for arbitrary expressions in certain syntactic constructs, where ambiguity or syntax errors would otherwise occur.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Grouping operator ( )"
        }
    ],
    "sec-import-calls": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/import.json",
            "name": "import",
            "slug": "JavaScript/Reference/Operators/Import",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Import",
            "summary": "The import() syntax, commonly called dynamic import, is a function-like expression that allows loading an ECMAScript module asynchronously and dynamically into a potentially non-module environment.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0",
                    "notes": "Bundled Deno applications (using `deno compile`) do not support dynamic imports"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "67"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "13.2.0",
                        "notes": "Dynamic <code>import</code> can be used in either CommonJS or ES module files, to import either CommonJS or ES module files. See Node's <a href='https://nodejs.org/api/esm.html#esm_import_expressions'>ECMAScript Modules documentation</a> for more details."
                    },
                    {
                        "version_added": "12.0.0",
                        "flags": [
                            {
                                "name": "--experimental-modules",
                                "type": "runtime_flag"
                            }
                        ],
                        "notes": "Dynamic <code>import</code> can be used in either CommonJS or ES module files, to import either CommonJS or ES module files. See Node's <a href='https://nodejs.org/api/esm.html#esm_import_expressions'>ECMAScript Modules documentation</a> for more details."
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "es6-module-dynamic-import",
                "title": "JavaScript modules: dynamic import()"
            },
            "title": "import()"
        }
    ],
    "prod-ImportMeta": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/import_meta.json",
            "name": "import_meta",
            "slug": "JavaScript/Reference/Operators/import.meta",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta",
            "summary": "The import.meta meta-property exposes context-specific metadata to a JavaScript module. It contains information about the module, such as the module's URL.",
            "support": {
                "chrome": {
                    "version_added": "64"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "62"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "10.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": "12"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "import.meta"
        }
    ],
    "sec-postfix-increment-operator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/increment.json",
            "name": "increment",
            "slug": "JavaScript/Reference/Operators/Increment",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Increment",
            "summary": "The increment (++) operator increments (adds one to) its operand and returns the value before or after the increment, depending on where the operator is placed.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Increment (++)"
        }
    ],
    "sec-left-shift-operator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/left_shift.json",
            "name": "left_shift",
            "slug": "JavaScript/Reference/Operators/Left_shift",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Left_shift",
            "summary": "The left shift (<<) operator returns a number or BigInt whose binary representation is the first operand shifted by the specified number of bits to the left. Excess bits shifted off to the left are discarded, and zero bits are shifted in from the right.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Left shift (<<)"
        }
    ],
    "prod-LogicalANDExpression": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/logical_and.json",
            "name": "logical_and",
            "slug": "JavaScript/Reference/Operators/Logical_AND",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND",
            "summary": "The logical AND (&&) (logical conjunction) operator for a set of boolean operands will be true if and only if all the operands are true. Otherwise it will be false.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Logical AND (&&)"
        }
    ],
    "sec-logical-not-operator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/logical_not.json",
            "name": "logical_not",
            "slug": "JavaScript/Reference/Operators/Logical_NOT",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_NOT",
            "summary": "The logical NOT (!) (logical complement, negation) operator takes truth to falsity and vice versa. It is typically used with boolean (logical) values. When used with non-Boolean values, it returns false if its single operand can be converted to true; otherwise, returns true.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Logical NOT (!)"
        }
    ],
    "prod-LogicalORExpression": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/logical_or.json",
            "name": "logical_or",
            "slug": "JavaScript/Reference/Operators/Logical_OR",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR",
            "summary": "The logical OR (||) (logical disjunction) operator for a set of operands is true if and only if one or more of its operands is true. It is typically used with boolean (logical) values. When it is, it returns a Boolean value. However, the || operator actually returns the value of one of the specified operands, so if this operator is used with non-Boolean values, it will return a non-Boolean value.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Logical OR (||)"
        }
    ],
    "sec-new-operator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/new.json",
            "name": "new",
            "slug": "JavaScript/Reference/Operators/new",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new",
            "summary": "The new operator lets developers create an instance of a user-defined object type or of one of the built-in object types that has a constructor function.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "new operator"
        }
    ],
    "sec-built-in-function-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/new_target.json",
            "name": "new_target",
            "slug": "JavaScript/Reference/Operators/new.target",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new.target",
            "summary": "The new.target meta-property lets you detect whether a function or constructor was called using the new operator. In constructors and functions invoked using the new operator, new.target returns a reference to the constructor or function that new was called upon. In normal function calls, new.target is undefined.",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "5.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "new.target"
        }
    ],
    "sec-null-value": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/null.json",
            "name": "null",
            "slug": "JavaScript/Reference/Operators/null",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/null",
            "summary": "The null value represents the intentional absence of any object value. It is one of JavaScript's primitive values and is treated as falsy for boolean operations.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "null"
        }
    ],
    "prod-CoalesceExpression": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/nullish_coalescing.json",
            "name": "nullish_coalescing",
            "slug": "JavaScript/Reference/Operators/Nullish_coalescing_operator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_operator",
            "summary": "The nullish coalescing (??) operator is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.",
            "support": {
                "chrome": {
                    "version_added": "80"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "72"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "14.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "13.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "80"
                }
            },
            "title": "Nullish coalescing operator (??)"
        }
    ],
    "sec-object-initializer": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/object_initializer.json",
            "name": "object_initializer",
            "slug": "JavaScript/Reference/Operators/Object_initializer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer",
            "summary": "An object initializer is a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}). Objects can also be initialized using Object.create() or by invoking a constructor function with the new operator.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "1"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Object initializer"
        }
    ],
    "prod-OptionalExpression": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/optional_chaining.json",
            "name": "optional_chaining",
            "slug": "JavaScript/Reference/Operators/Optional_chaining",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining",
            "summary": "The optional chaining (?.) operator accesses an object's property or calls a function. If the object accessed or function called using this operator is undefined or null, the expression short circuits and evaluates to undefined instead of throwing an error.",
            "support": {
                "chrome": {
                    "version_added": "80"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "74"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "14.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "13.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "80"
                }
            },
            "title": "Optional chaining (?.)"
        }
    ],
    "sec-property-accessors": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/property_accessors.json",
            "name": "property_accessors",
            "slug": "JavaScript/Reference/Operators/Property_Accessors",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Property_Accessors",
            "summary": "Property accessors provide access to an object's properties by using the dot notation or the bracket notation.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Property accessors"
        }
    ],
    "sec-signed-right-shift-operator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/right_shift.json",
            "name": "right_shift",
            "slug": "JavaScript/Reference/Operators/Right_shift",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Right_shift",
            "summary": "The right shift (>>) operator returns a number or BigInt whose binary representation is the first operand shifted by the specified number of bits to the right. Excess bits shifted off to the right are discarded, and copies of the leftmost bit are shifted in from the left. This operation is also called \"sign-propagating right shift\" or \"arithmetic right shift\", because the sign of the resulting number is the same as the sign of the first operand.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Right shift (>>)"
        }
    ],
    "prod-SpreadElement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/spread.json",
            "name": "spread_in_arrays",
            "slug": "JavaScript/Reference/Operators/Spread_syntax#Spread_in_array_literals",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_array_literals",
            "summary": "The spread (...) syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected. In an object literal, the spread syntax enumerates the properties of an object and adds the key-value pairs to the object being created.",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "16"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "5.0.0"
                    },
                    {
                        "version_added": "4.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "37"
                },
                "opera_android": {
                    "version_added": "37"
                },
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Spread syntax (...)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/spread.json",
            "name": "spread",
            "slug": "JavaScript/Reference/Operators/Spread_syntax",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax",
            "summary": "The spread (...) syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected. In an object literal, the spread syntax enumerates the properties of an object and adds the key-value pairs to the object being created.",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "16"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "5.0.0"
                    },
                    {
                        "version_added": "4.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "37"
                },
                "opera_android": {
                    "version_added": "37"
                },
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Spread syntax (...)"
        }
    ],
    "prod-ArgumentList": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/spread.json",
            "name": "spread_in_function_calls",
            "slug": "JavaScript/Reference/Operators/Spread_syntax#Spread_in_function_calls",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_function_calls",
            "summary": "The spread (...) syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected. In an object literal, the spread syntax enumerates the properties of an object and adds the key-value pairs to the object being created.",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "27"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "5.0.0"
                    },
                    {
                        "version_added": "4.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "37"
                },
                "opera_android": {
                    "version_added": "37"
                },
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Spread syntax (...)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/spread.json",
            "name": "spread",
            "slug": "JavaScript/Reference/Operators/Spread_syntax",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax",
            "summary": "The spread (...) syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected. In an object literal, the spread syntax enumerates the properties of an object and adds the key-value pairs to the object being created.",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "16"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "5.0.0"
                    },
                    {
                        "version_added": "4.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "37"
                },
                "opera_android": {
                    "version_added": "37"
                },
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Spread syntax (...)"
        }
    ],
    "prod-PropertyDefinition": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/spread.json",
            "name": "spread_in_object_literals",
            "slug": "JavaScript/Reference/Operators/Spread_syntax#Spread_in_object_literals",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax#Spread_in_object_literals",
            "summary": "The spread (...) syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected. In an object literal, the spread syntax enumerates the properties of an object and adds the key-value pairs to the object being created.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "55"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "8.3.0"
                    },
                    {
                        "version_added": "8.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "8.2"
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Spread syntax (...)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/spread.json",
            "name": "spread",
            "slug": "JavaScript/Reference/Operators/Spread_syntax",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax",
            "summary": "The spread (...) syntax allows an iterable, such as an array or string, to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected. In an object literal, the spread syntax enumerates the properties of an object and adds the key-value pairs to the object being created.",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "16"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "5.0.0"
                    },
                    {
                        "version_added": "4.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "37"
                },
                "opera_android": {
                    "version_added": "37"
                },
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Spread syntax (...)"
        }
    ],
    "sec-subtraction-operator-minus": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/subtraction.json",
            "name": "subtraction",
            "slug": "JavaScript/Reference/Operators/Subtraction",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Subtraction",
            "summary": "The subtraction (-) operator subtracts the two operands, producing their difference.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Subtraction (-)"
        }
    ],
    "sec-super-keyword": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/super.json",
            "name": "super",
            "slug": "JavaScript/Reference/Operators/super",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/super",
            "summary": "The super keyword is used to access properties on an object literal or class's [[Prototype]], or invoke a superclass's constructor.",
            "support": {
                "chrome": {
                    "version_added": "42"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "45"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "super"
        }
    ],
    "sec-this-keyword": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/this.json",
            "name": "this",
            "slug": "JavaScript/Reference/Operators/this",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this",
            "summary": "A function's this keyword behaves a little differently in JavaScript compared to other languages. It also has some differences between strict mode and non-strict mode.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "this"
        }
    ],
    "sec-typeof-operator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/typeof.json",
            "name": "typeof",
            "slug": "JavaScript/Reference/Operators/typeof",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof",
            "summary": "The typeof operator returns a string indicating the type of the operand's value.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "typeof"
        }
    ],
    "sec-unary-minus-operator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/unary_negation.json",
            "name": "unary_negation",
            "slug": "JavaScript/Reference/Operators/Unary_negation",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_negation",
            "summary": "The unary negation (-) operator precedes its operand and negates it.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Unary negation (-)"
        }
    ],
    "sec-unary-plus-operator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/unary_plus.json",
            "name": "unary_plus",
            "slug": "JavaScript/Reference/Operators/Unary_plus",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unary_plus",
            "summary": "The unary plus (+) operator precedes its operand and evaluates to its operand but attempts to convert it into a number, if it isn't already.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Unary plus (+)"
        }
    ],
    "sec-unsigned-right-shift-operator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/unsigned_right_shift.json",
            "name": "unsigned_right_shift",
            "slug": "JavaScript/Reference/Operators/Unsigned_right_shift",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Unsigned_right_shift",
            "summary": "The unsigned right shift (>>>) operator returns a number whose binary representation is the first operand shifted by the specified number of bits to the right. Excess bits shifted off to the right are discarded, and zero bits are shifted in from the left. This operation is also called \"zero-filling right shift\", because the sign bit becomes 0, so the resulting number is always positive. Unsigned right shift does not accept BigInt values.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Unsigned right shift (>>>)"
        }
    ],
    "sec-void-operator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/void.json",
            "name": "void",
            "slug": "JavaScript/Reference/Operators/void",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void",
            "summary": "The void operator evaluates the given expression and then returns undefined.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "void operator"
        }
    ],
    "prod-YieldExpression": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/yield.json",
            "name": "yield",
            "slug": "JavaScript/Reference/Operators/yield",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield",
            "summary": "The yield operator is used to pause and resume a generator function.",
            "support": {
                "chrome": {
                    "version_added": "39"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "26",
                    "notes": [
                        "Starting with Firefox 33, the parsing of the <code>yield</code> expression has been updated to conform with the ES2015 specification.",
                        "Starting with Firefox 29, an <code>IteratorResult</code> object returned for completed generator function."
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "4.0.0"
                    },
                    {
                        "version_added": "0.12.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "yield"
        }
    ],
    "sec-generator-function-definitions-runtime-semantics-evaluation": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/yield_star.json",
            "name": "yield_star",
            "slug": "JavaScript/Reference/Operators/yield*",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield*",
            "summary": "The yield* operator is used to delegate to another iterable object, such as a Generator.",
            "support": {
                "chrome": {
                    "version_added": "39"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "27",
                    "notes": "Starting with Firefox 33, the parsing of the <code>yield</code> expression has been updated to conform with the ES2015 specification."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "4.0.0"
                    },
                    {
                        "version_added": "0.12.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "yield*"
        }
    ],
    "prod-DecimalEscape": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/regular_expressions.json",
            "name": "backreference",
            "slug": "JavaScript/Reference/Regular_expressions/Backreference",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Backreference",
            "summary": "A backreference refers to the submatch of a previous capturing group and matches the same text as that group. For named capturing groups, you may prefer to use the named backreference syntax.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Backreference: \\1, \\2"
        }
    ],
    "prod-Atom": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/regular_expressions.json",
            "name": "capturing_group",
            "slug": "JavaScript/Reference/Regular_expressions/Capturing_group",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Capturing_group",
            "summary": "A capturing group groups a subpattern, allowing you to apply a quantifier to the entire group or use disjunctions within it. It memorizes information about the subpattern match, so that you can refer back to it later with a backreference, or access the information through the match results.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Capturing group: (...)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/regular_expressions.json",
            "name": "named_capturing_group",
            "slug": "JavaScript/Reference/Regular_expressions/Named_capturing_group",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_capturing_group",
            "summary": "A named capturing group is a particular kind of capturing group that allows to give a name to the group. The group's matching result can later be identified by this name instead of by its index in the pattern.",
            "support": {
                "chrome": {
                    "version_added": "64"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "78"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "10.0.0"
                    },
                    {
                        "version_added": "8.3.0",
                        "flags": [
                            {
                                "name": "--harmony",
                                "type": "runtime_flag"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Named capturing group: (?<name>...)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/regular_expressions.json",
            "name": "non_capturing_group",
            "slug": "JavaScript/Reference/Regular_expressions/Non-capturing_group",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Non-capturing_group",
            "summary": "A non-capturing group groups a subpattern, allowing you to apply a quantifier to the entire group or use disjunctions within it. It acts like the grouping operator in JavaScript expressions, and unlike capturing groups, it does not memorize the matched text, allowing for better performance and avoiding confusion when the pattern also contains useful capturing groups.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Non-capturing group: (?:...)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/regular_expressions.json",
            "name": "wildcard",
            "slug": "JavaScript/Reference/Regular_expressions/Wildcard",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Wildcard",
            "summary": "A wildcard matches all characters except line terminators. It also matches line terminators if the s flag is set.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Wildcard: ."
        }
    ],
    "prod-CharacterClass": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/regular_expressions.json",
            "name": "character_class",
            "slug": "JavaScript/Reference/Regular_expressions/Character_class",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class",
            "summary": "A character class matches any character in or not in a custom set of characters. When the v flag is enabled, it can also be used to match finite-length strings.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Character class: [...], [^...]"
        }
    ],
    "prod-CharacterClassEscape": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/regular_expressions.json",
            "name": "character_class_escape",
            "slug": "JavaScript/Reference/Regular_expressions/Character_class_escape",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_class_escape",
            "summary": "A character class escape is an escape sequence that represents a set of characters.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Character class escape: \\d, \\D, \\w, \\W, \\s, \\S"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/regular_expressions.json",
            "name": "unicode_character_class_escape",
            "slug": "JavaScript/Reference/Regular_expressions/Unicode_character_class_escape",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape",
            "summary": "A unicode character class escape is a kind of character class escape that matches a set of characters specified by a Unicode property. It's only supported in Unicode-aware mode. When the v flag is enabled, it can also be used to match finite-length strings.",
            "support": {
                "chrome": {
                    "version_added": "64"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "78"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "10.0.0"
                    },
                    {
                        "version_added": "8.3.0",
                        "flags": [
                            {
                                "name": "--harmony",
                                "type": "runtime_flag"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Unicode character class escape: \\p{...}, \\P{...}"
        }
    ],
    "prod-CharacterEscape": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/regular_expressions.json",
            "name": "character_escape",
            "slug": "JavaScript/Reference/Regular_expressions/Character_escape",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Character_escape",
            "summary": "A character escape represents a character that may not be able to be conveniently represented in its literal form.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Character escape: \\n, \\u{...}"
        }
    ],
    "prod-Disjunction": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/regular_expressions.json",
            "name": "disjunction",
            "slug": "JavaScript/Reference/Regular_expressions/Disjunction",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Disjunction",
            "summary": "A disjunction specifies multiple alternatives. Any alternative matching the input causes the entire disjunction to be matched.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Disjunction: |"
        }
    ],
    "prod-Assertion": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/regular_expressions.json",
            "name": "input_boundary_assertion",
            "slug": "JavaScript/Reference/Regular_expressions/Input_boundary_assertion",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Input_boundary_assertion",
            "summary": "An input boundary assertion checks if the current position in the string is an input boundary. An input boundary is the start or end of the string; or, if the m flag is set, the start or end of a line.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Input boundary assertion: ^, $"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/regular_expressions.json",
            "name": "lookahead_assertion",
            "slug": "JavaScript/Reference/Regular_expressions/Lookahead_assertion",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookahead_assertion",
            "summary": "A lookahead assertion \"looks ahead\": it attempts to match the subsequent input with the given pattern, but it does not consume any of the input — if the match is successful, the current position in the input stays the same.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Lookahead assertion: (?=...), (?!...)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/regular_expressions.json",
            "name": "lookbehind_assertion",
            "slug": "JavaScript/Reference/Regular_expressions/Lookbehind_assertion",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Lookbehind_assertion",
            "summary": "A lookbehind assertion \"looks behind\": it attempts to match the previous input with the given pattern, but it does not consume any of the input — if the match is successful, the current position in the input stays the same. It matches each atom in its pattern in the reverse order.",
            "support": {
                "chrome": {
                    "version_added": "62"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "78"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "8.10.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Lookbehind assertion: (?<=...), (?<!...)"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/regular_expressions.json",
            "name": "word_boundary_assertion",
            "slug": "JavaScript/Reference/Regular_expressions/Word_boundary_assertion",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Word_boundary_assertion",
            "summary": "A word boundary assertion checks if the current position in the string is a word boundary. A word boundary is where the next character is a word character and the previous character is not a word character, or vice versa.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Word boundary assertion: \\b, \\B"
        }
    ],
    "prod-PatternCharacter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/regular_expressions.json",
            "name": "literal_character",
            "slug": "JavaScript/Reference/Regular_expressions/Literal_character",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Literal_character",
            "summary": "A literal character specifies exactly itself to be matched in the input text.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Literal character: a, b"
        }
    ],
    "prod-AtomEscape": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/regular_expressions.json",
            "name": "named_backreference",
            "slug": "JavaScript/Reference/Regular_expressions/Named_backreference",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Named_backreference",
            "summary": "A named backreference refers to the submatch of a previous named capturing group and matches the same text as that group. For unnamed capturing groups, you need to use the normal backreference syntax.",
            "support": {
                "chrome": {
                    "version_added": "64"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "78"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "10.0.0"
                    },
                    {
                        "version_added": "8.3.0",
                        "flags": [
                            {
                                "name": "--harmony",
                                "type": "runtime_flag"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Named backreference: \\k<name>"
        }
    ],
    "prod-Quantifier": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/regular_expressions.json",
            "name": "quantifier",
            "slug": "JavaScript/Reference/Regular_expressions/Quantifier",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Regular_expressions/Quantifier",
            "summary": "A quantifier repeats an atom a certain number of times. The quantifier is placed after the atom it applies to.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Quantifier: *, +, ?, {n}, {n,}, {n,m}"
        }
    ],
    "sec-block": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "block",
            "slug": "JavaScript/Reference/Statements/block",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/block",
            "summary": "A block statement is used to group zero or more statements. The block is delimited by a pair of braces (\"curly brackets\") and contains a list of zero or more statements and declarations.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "block"
        }
    ],
    "sec-break-statement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "break",
            "slug": "JavaScript/Reference/Statements/break",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/break",
            "summary": "The break statement terminates the current loop or switch statement and transfers program control to the statement following the terminated statement. It can also be used to jump past a labeled statement when used within that labeled statement.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "break"
        }
    ],
    "sec-let-and-const-declarations": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "const",
            "slug": "JavaScript/Reference/Statements/const",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const",
            "summary": "The const declaration declares block-scoped local variables. The value of a constant can't be changed through reassignment using the assignment operator, but if a constant is an object, its properties can be added, updated, or removed.",
            "support": {
                "chrome": {
                    "version_added": "21"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "36",
                    "notes": [
                        "Before Firefox 13, <code>const</code> is implemented, but re-assignment is not failing.",
                        "Before Firefox 46, a <code>TypeError</code> was thrown on redeclaration instead of a <code>SyntaxError</code>."
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "let",
                "title": "let"
            },
            "title": "const"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "let",
            "slug": "JavaScript/Reference/Statements/let",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let",
            "summary": "The let declaration declares re-assignable, block-scoped local variables, optionally initializing each to a value.",
            "support": {
                "chrome": [
                    {
                        "version_added": "49"
                    },
                    {
                        "version_added": "41",
                        "version_removed": "49",
                        "partial_implementation": true,
                        "notes": "<a href='https://developer.mozilla.org/docs/Web/JavaScript/Reference/Strict_mode'>Strict mode</a> is required."
                    }
                ],
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "44",
                    "notes": [
                        "Before Firefox 44, <code>let</code> is only available to code blocks in HTML wrapped in a <code>&lt;script type=\"application/javascript;version=1.7\"&gt;</code> block (or higher version) and has different semantics (e.g. no temporal dead zone).",
                        "Before Firefox 46, a <code>TypeError</code> is thrown on redeclaration instead of a <code>SyntaxError</code>.",
                        "Firefox 54 adds support of <code>let</code> in workers."
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11",
                    "partial_implementation": true,
                    "notes": "In Internet Explorer, <code>let</code> within a <code>for</code> loop initializer does not create a separate variable for each loop iteration as defined by ES2015. Instead, it behaves as though the loop were wrapped in a scoping block with the <code>let</code> immediately before the loop."
                },
                "nodejs": {
                    "version_added": "6.0.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "17"
                },
                "opera_android": {
                    "version_added": "18"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "49",
                        "partial_implementation": true,
                        "notes": "<a href='https://developer.mozilla.org/docs/Web/JavaScript/Reference/Strict_mode'>Strict mode</a> is required."
                    }
                ]
            },
            "caniuse": {
                "feature": "let",
                "title": "let"
            },
            "title": "let"
        }
    ],
    "sec-continue-statement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "continue",
            "slug": "JavaScript/Reference/Statements/continue",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/continue",
            "summary": "The continue statement terminates execution of the statements in the current iteration of the current or labeled loop, and continues execution of the loop with the next iteration.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "continue"
        }
    ],
    "sec-debugger-statement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "debugger",
            "slug": "JavaScript/Reference/Statements/debugger",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger",
            "summary": "The debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "debugger"
        }
    ],
    "sec-do-while-statement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "do_while",
            "slug": "JavaScript/Reference/Statements/do...while",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/do...while",
            "summary": "The do...while statement creates a loop that executes a specified statement until the test condition evaluates to false. The condition is evaluated after executing the statement, resulting in the specified statement executing at least once.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "do...while"
        }
    ],
    "sec-empty-statement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "empty",
            "slug": "JavaScript/Reference/Statements/Empty",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/Empty",
            "summary": "An empty statement is used to provide no statement, although the JavaScript syntax would expect one.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "empty"
        }
    ],
    "sec-exports": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "default",
            "slug": "JavaScript/Reference/Statements/export",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export",
            "summary": "The export declaration is used to export values from a JavaScript module. Exported values can then be imported into other programs with the import declaration or dynamic import. The value of an imported binding is subject to change in the module that exports it — when a module updates the value of a binding that it exports, the update will be visible in its imported value.",
            "support": {
                "chrome": {
                    "version_added": "61"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "60"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "13.2.0",
                        "notes": "Modules must either have a filename ending in <code>.mjs</code>, or the nearest parent <code>package.json</code> file must contain <code>\"type\": \"module\"</code>. See Node's <a href='https://nodejs.org/api/esm.html#esm_enabling'>ECMAScript Modules documentation</a> for more details."
                    },
                    {
                        "version_added": "12.0.0",
                        "flags": [
                            {
                                "name": "--experimental-modules",
                                "type": "runtime_flag"
                            }
                        ],
                        "notes": "Modules must either have a filename ending in <code>.mjs</code>, or the nearest parent <code>package.json</code> file must contain <code>\"type\": \"module\"</code>. See Node's <a href='https://nodejs.org/docs/latest-v12.x/api/esm.html#esm_enabling'>ECMAScript Modules documentation</a> for more details."
                    },
                    {
                        "version_added": "8.5.0",
                        "flags": [
                            {
                                "name": "--experimental-modules",
                                "type": "runtime_flag"
                            }
                        ],
                        "notes": "Module filenames must end with <code>.mjs</code>, not <code>.js</code>. See Node's <a href='https://nodejs.org/docs/latest-v8.x/api/esm.html#esm_enabling'>ECMAScript Modules documentation</a> for more details."
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "export"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "namespace",
            "slug": "JavaScript/Reference/Statements/export",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export",
            "summary": "The export declaration is used to export values from a JavaScript module. Exported values can then be imported into other programs with the import declaration or dynamic import. The value of an imported binding is subject to change in the module that exports it — when a module updates the value of a binding that it exports, the update will be visible in its imported value.",
            "support": {
                "chrome": {
                    "version_added": "72"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "80"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "13.2.0",
                        "notes": "Modules must either have a filename ending in <code>.mjs</code>, or the nearest parent <code>package.json</code> file must contain <code>\"type\": \"module\"</code>. See Node's <a href='https://nodejs.org/api/esm.html#esm_enabling'>ECMAScript Modules documentation</a> for more details."
                    },
                    {
                        "version_added": "12.0.0",
                        "flags": [
                            {
                                "name": "--experimental-modules",
                                "type": "runtime_flag"
                            }
                        ],
                        "notes": "Modules must either have a filename ending in <code>.mjs</code>, or the nearest parent <code>package.json</code> file must contain <code>\"type\": \"module\"</code>. See Node's <a href='https://nodejs.org/docs/latest-v12.x/api/esm.html#esm_enabling'>ECMAScript Modules documentation</a> for more details."
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "export"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "export",
            "slug": "JavaScript/Reference/Statements/export",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export",
            "summary": "The export declaration is used to export values from a JavaScript module. Exported values can then be imported into other programs with the import declaration or dynamic import. The value of an imported binding is subject to change in the module that exports it — when a module updates the value of a binding that it exports, the update will be visible in its imported value.",
            "support": {
                "chrome": {
                    "version_added": "61"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "60"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "13.2.0",
                        "notes": "Modules must either have a filename ending in <code>.mjs</code>, or the nearest parent <code>package.json</code> file must contain <code>\"type\": \"module\"</code>. See Node's <a href='https://nodejs.org/api/esm.html#esm_enabling'>ECMAScript Modules documentation</a> for more details."
                    },
                    {
                        "version_added": "12.0.0",
                        "flags": [
                            {
                                "name": "--experimental-modules",
                                "type": "runtime_flag"
                            }
                        ],
                        "notes": "Modules must either have a filename ending in <code>.mjs</code>, or the nearest parent <code>package.json</code> file must contain <code>\"type\": \"module\"</code>. See Node's <a href='https://nodejs.org/docs/latest-v12.x/api/esm.html#esm_enabling'>ECMAScript Modules documentation</a> for more details."
                    },
                    {
                        "version_added": "8.5.0",
                        "flags": [
                            {
                                "name": "--experimental-modules",
                                "type": "runtime_flag"
                            }
                        ],
                        "notes": "Module filenames must end with <code>.mjs</code>, not <code>.js</code>. See Node's <a href='https://nodejs.org/docs/latest-v8.x/api/esm.html#esm_enabling'>ECMAScript Modules documentation</a> for more details."
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "export"
        }
    ],
    "sec-for-statement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "for",
            "slug": "JavaScript/Reference/Statements/for",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for",
            "summary": "The for statement creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "for"
        }
    ],
    "sec-for-in-and-for-of-statements": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "for_await_of",
            "slug": "JavaScript/Reference/Statements/for-await...of",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of",
            "summary": "The for await...of statement creates a loop iterating over async iterable objects as well as sync iterables. This statement can only be used in contexts where await can be used, which includes inside an async function body and in a module.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "10.0.0"
                    },
                    {
                        "version_added": "8.10.0",
                        "version_removed": "10.0.0",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--harmony-async-iteration"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "for await...of"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "for_in",
            "slug": "JavaScript/Reference/Statements/for...in",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in",
            "summary": "The for...in statement iterates over all enumerable string properties of an object (ignoring properties keyed by symbols), including inherited enumerable properties.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "2"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "for...in"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "for_of",
            "slug": "JavaScript/Reference/Statements/for...of",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of",
            "summary": "The for...of statement executes a loop that operates on a sequence of values sourced from an iterable object. Iterable objects include instances of built-ins such as Array, String, TypedArray, Map, Set, NodeList (and other DOM collections), as well as the arguments object, generators produced by generator functions, and user-defined iterables.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "13",
                    "notes": "Before Firefox 51, using the <code>for...of</code> loop construct with the <code>const</code> keyword threw a <code>SyntaxError</code> (\"missing = in const declaration\")."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "0.12.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "for...of"
        }
    ],
    "sec-if-statement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "if_else",
            "slug": "JavaScript/Reference/Statements/if...else",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else",
            "summary": "The if...else statement executes a statement if a specified condition is truthy. If the condition is falsy, another statement in the optional else clause will be executed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "if...else"
        }
    ],
    "sec-imports": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "import",
            "slug": "JavaScript/Reference/Statements/import",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import",
            "summary": "The static import declaration is used to import read-only live bindings which are exported by another module. The imported bindings are called live bindings because they are updated by the module that exported the binding, but cannot be re-assigned by the importing module.",
            "support": {
                "chrome": {
                    "version_added": "61"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "60"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "13.2.0",
                        "notes": "Modules must either have a filename ending in <code>.mjs</code>, or the nearest parent <code>package.json</code> file must contain <code>\"type\": \"module\"</code>. See Node's <a href='https://nodejs.org/api/esm.html#esm_enabling'>ECMAScript Modules documentation</a> for more details."
                    },
                    {
                        "version_added": "12.0.0",
                        "version_removed": "13.2.0",
                        "flags": [
                            {
                                "name": "--experimental-modules",
                                "type": "runtime_flag"
                            }
                        ],
                        "notes": "Modules must either have a filename ending in <code>.mjs</code>, or the nearest parent <code>package.json</code> file must contain <code>\"type\": \"module\"</code>. See Node's <a href='https://nodejs.org/docs/latest-v12.x/api/esm.html#esm_enabling'>ECMAScript Modules documentation</a> for more details."
                    },
                    {
                        "version_added": "8.5.0",
                        "version_removed": "12.0.0",
                        "flags": [
                            {
                                "name": "--experimental-modules",
                                "type": "runtime_flag"
                            }
                        ],
                        "notes": "Module filenames must end with <code>.mjs</code>, not <code>.js</code>. See Node's <a href='https://nodejs.org/docs/latest-v8.x/api/esm.html#esm_enabling'>ECMAScript Modules documentation</a> for more details."
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "import"
        }
    ],
    "sec-labelled-statements": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "label",
            "slug": "JavaScript/Reference/Statements/label",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label",
            "summary": "A labeled statement is any statement that is prefixed with an identifier. You can jump to this label using a break or continue statement nested within the labeled statement.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "label"
        }
    ],
    "sec-return-statement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "return",
            "slug": "JavaScript/Reference/Statements/return",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/return",
            "summary": "The return statement ends function execution and specifies a value to be returned to the function caller.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "return"
        }
    ],
    "sec-switch-statement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "switch",
            "slug": "JavaScript/Reference/Statements/switch",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch",
            "summary": "The switch statement evaluates an expression, matching the expression's value against a series of case clauses, and executes statements after the first case clause with a matching value, until a break statement is encountered. The default clause of a switch statement will be jumped to if no case matches the expression's value.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "switch"
        }
    ],
    "sec-throw-statement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "throw",
            "slug": "JavaScript/Reference/Statements/throw",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/throw",
            "summary": "The throw statement throws a user-defined exception. Execution of the current function will stop (the statements after throw won't be executed), and control will be passed to the first catch block in the call stack. If no catch block exists among caller functions, the program will terminate.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "throw"
        }
    ],
    "sec-try-statement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "try_catch",
            "slug": "JavaScript/Reference/Statements/try...catch",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch",
            "summary": "The try...catch statement is comprised of a try block and either a catch block, a finally block, or both. The code in the try block is executed first, and if it throws an exception, the code in the catch block will be executed. The code in the finally block will always be executed before control flow exits the entire construct.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "try...catch"
        }
    ],
    "sec-variable-statement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "var",
            "slug": "JavaScript/Reference/Statements/var",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/var",
            "summary": "The var statement declares function-scoped or globally-scoped variables, optionally initializing each to a value.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "var"
        }
    ],
    "sec-while-statement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/statements.json",
            "name": "while",
            "slug": "JavaScript/Reference/Statements/while",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while",
            "summary": "The while statement creates a loop that executes a specified statement as long as the test condition evaluates to true. The condition is evaluated before executing the statement.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "nodejs": {
                    "version_added": "0.10.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "while"
        }
    ]
}
