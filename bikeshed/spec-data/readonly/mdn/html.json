{
    "dom-audiotrack-enabled-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrack.json",
            "name": "enabled",
            "slug": "API/AudioTrack/enabled",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/enabled",
            "summary": "The AudioTrack property enabled specifies whether or not the described audio track is currently enabled for use. If the track is disabled by setting enabled to false, the track is muted and does not produce audio.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrack: enabled property"
        }
    ],
    "dom-audiotrack-id-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrack.json",
            "name": "id",
            "slug": "API/AudioTrack/id",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/id",
            "summary": "The id property contains a string which uniquely identifies the track represented by the AudioTrack.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrack: id property"
        }
    ],
    "dom-audiotrack-kind-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrack.json",
            "name": "kind",
            "slug": "API/AudioTrack/kind",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/kind",
            "summary": "The kind property contains a string indicating the category of audio contained in the AudioTrack.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrack: kind property"
        }
    ],
    "dom-audiotrack-label-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrack.json",
            "name": "label",
            "slug": "API/AudioTrack/label",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/label",
            "summary": "The read-only AudioTrack property label returns a string specifying the audio track's human-readable label, if one is available; otherwise, it returns an empty string.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrack: label property"
        }
    ],
    "dom-audiotrack-language-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrack.json",
            "name": "language",
            "slug": "API/AudioTrack/language",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack/language",
            "summary": "The read-only AudioTrack property language returns a string identifying the language used in the audio track.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrack: language property"
        }
    ],
    "audiotrack": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrack.json",
            "name": "AudioTrack",
            "slug": "API/AudioTrack",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrack",
            "summary": "The AudioTrack interface represents a single audio track from one of the HTML media elements, <audio> or <video>.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrack"
        }
    ],
    "event-media-addtrack": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrackList.json",
            "name": "addtrack_event",
            "slug": "API/AudioTrackList/addtrack_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/addtrack_event",
            "summary": "The addtrack event is fired when a track is added to an AudioTrackList.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrackList: addtrack event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackList.json",
            "name": "addtrack_event",
            "slug": "API/TextTrackList/addtrack_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/addtrack_event",
            "summary": "The addtrack event is fired when a track is added to a TextTrackList.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackList: addtrack event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrackList.json",
            "name": "addtrack_event",
            "slug": "API/VideoTrackList/addtrack_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/addtrack_event",
            "summary": "The addtrack event is fired when a video track is added to a VideoTrackList.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrackList: addtrack event"
        }
    ],
    "handler-tracklist-onaddtrack": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrackList.json",
            "name": "addtrack_event",
            "slug": "API/AudioTrackList/addtrack_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/addtrack_event",
            "summary": "The addtrack event is fired when a track is added to an AudioTrackList.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrackList: addtrack event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackList.json",
            "name": "addtrack_event",
            "slug": "API/TextTrackList/addtrack_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/addtrack_event",
            "summary": "The addtrack event is fired when a track is added to a TextTrackList.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackList: addtrack event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrackList.json",
            "name": "addtrack_event",
            "slug": "API/VideoTrackList/addtrack_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/addtrack_event",
            "summary": "The addtrack event is fired when a video track is added to a VideoTrackList.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrackList: addtrack event"
        }
    ],
    "event-media-change": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrackList.json",
            "name": "change_event",
            "slug": "API/AudioTrackList/change_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/change_event",
            "summary": "The change event is fired when an audio track is enabled or disabled, for example by changing the track's enabled property.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrackList: change event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackList.json",
            "name": "change_event",
            "slug": "API/TextTrackList/change_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/change_event",
            "summary": "The change event is fired when a text track is made active or inactive, or a TextTrackList is otherwise changed.",
            "support": {
                "chrome": {
                    "version_added": "33"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackList: change event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrackList.json",
            "name": "change_event",
            "slug": "API/VideoTrackList/change_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/change_event",
            "summary": "The change event is fired when a video track is made active or inactive, for example by changing the track's selected property.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrackList: change event"
        }
    ],
    "handler-tracklist-onchange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrackList.json",
            "name": "change_event",
            "slug": "API/AudioTrackList/change_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/change_event",
            "summary": "The change event is fired when an audio track is enabled or disabled, for example by changing the track's enabled property.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrackList: change event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackList.json",
            "name": "change_event",
            "slug": "API/TextTrackList/change_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/change_event",
            "summary": "The change event is fired when a text track is made active or inactive, or a TextTrackList is otherwise changed.",
            "support": {
                "chrome": {
                    "version_added": "33"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackList: change event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrackList.json",
            "name": "change_event",
            "slug": "API/VideoTrackList/change_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/change_event",
            "summary": "The change event is fired when a video track is made active or inactive, for example by changing the track's selected property.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrackList: change event"
        }
    ],
    "dom-audiotracklist-gettrackbyid-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrackList.json",
            "name": "getTrackById",
            "slug": "API/AudioTrackList/getTrackById",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/getTrackById",
            "summary": "The AudioTrackList method getTrackById() returns the first AudioTrack object from the track list whose id matches the specified string. This lets you find a specified track if you know its ID string.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrackList: getTrackById() method"
        }
    ],
    "dom-audiotracklist-length-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrackList.json",
            "name": "length",
            "slug": "API/AudioTrackList/length",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/length",
            "summary": "The read-only AudioTrackList property length returns the number of entries in the AudioTrackList, each of which is an AudioTrack representing one audio track in the media element. A value of 0 indicates that there are no audio tracks in the media.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrackList: length property"
        }
    ],
    "event-media-removetrack": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrackList.json",
            "name": "removetrack_event",
            "slug": "API/AudioTrackList/removetrack_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/removetrack_event",
            "summary": "The removetrack event is fired when a track is removed from an AudioTrackList.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrackList: removetrack event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackList.json",
            "name": "removetrack_event",
            "slug": "API/TextTrackList/removetrack_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/removetrack_event",
            "summary": "The removetrack event is fired when a track is removed from a TextTrackList.",
            "support": {
                "chrome": {
                    "version_added": "33"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "20"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "15"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "20"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "14"
                    }
                ],
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackList: removeTrack event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrackList.json",
            "name": "removetrack_event",
            "slug": "API/VideoTrackList/removetrack_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/removetrack_event",
            "summary": "The removetrack event is fired when a video track is removed from a VideoTrackList.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrackList: removetrack event"
        }
    ],
    "handler-tracklist-onremovetrack": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrackList.json",
            "name": "removetrack_event",
            "slug": "API/AudioTrackList/removetrack_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList/removetrack_event",
            "summary": "The removetrack event is fired when a track is removed from an AudioTrackList.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrackList: removetrack event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackList.json",
            "name": "removetrack_event",
            "slug": "API/TextTrackList/removetrack_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/removetrack_event",
            "summary": "The removetrack event is fired when a track is removed from a TextTrackList.",
            "support": {
                "chrome": {
                    "version_added": "33"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "20"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "15"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "20"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "14"
                    }
                ],
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackList: removeTrack event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrackList.json",
            "name": "removetrack_event",
            "slug": "API/VideoTrackList/removetrack_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/removetrack_event",
            "summary": "The removetrack event is fired when a video track is removed from a VideoTrackList.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrackList: removetrack event"
        }
    ],
    "audiotracklist-and-videotracklist-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioTrackList.json",
            "name": "AudioTrackList",
            "slug": "API/AudioTrackList",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList",
            "summary": "The AudioTrackList interface is used to represent a list of the audio tracks contained within a given HTML media element, with each track represented by a separate AudioTrack object in the list.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "AudioTrackList"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrackList.json",
            "name": "VideoTrackList",
            "slug": "API/VideoTrackList",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList",
            "summary": "The VideoTrackList interface is used to represent a list of the video tracks contained within a <video> element, with each track represented by a separate VideoTrack object in the list.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrackList"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": null,
            "name": "AudioTrackList",
            "slug": "API/AudioTrackList",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioTrackList",
            "summary": "The AudioTrackList interface is used to represent a list of the audio tracks contained within a given HTML media element, with each track represented by a separate AudioTrack object in the list.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "caniuse": {
                "feature": "audiotracks",
                "title": "Audio Tracks"
            },
            "title": "AudioTrackList"
        }
    ],
    "dom-barprop-visible": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BarProp.json",
            "name": "visible",
            "slug": "API/BarProp/visible",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BarProp/visible",
            "summary": "The visible read-only property of the BarProp interface returns true if the user interface element it represents is visible.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BarProp: visible property"
        }
    ],
    "barprop": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BarProp.json",
            "name": "BarProp",
            "slug": "API/BarProp",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BarProp",
            "summary": "The BarProp interface of the Document Object Model represents the web browser user interface elements that are exposed to scripts in web pages. Each of the following interface elements are represented by a BarProp object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BarProp"
        }
    ],
    "the-beforeunloadevent-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BeforeUnloadEvent.json",
            "name": "BeforeUnloadEvent",
            "slug": "API/BeforeUnloadEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BeforeUnloadEvent",
            "summary": "BeforeUnloadEvent is an interface for the beforeunload event.",
            "support": {
                "chrome": {
                    "version_added": "30"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.24"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "3.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BeforeUnloadEvent"
        }
    ],
    "dom-broadcastchannel-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BroadcastChannel.json",
            "name": "BroadcastChannel",
            "slug": "API/BroadcastChannel/BroadcastChannel",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/BroadcastChannel",
            "summary": "The BroadcastChannel() constructor creates a new BroadcastChannel and connects it to the underlying channel.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.11"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BroadcastChannel: BroadcastChannel() constructor"
        }
    ],
    "dom-broadcastchannel-close-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BroadcastChannel.json",
            "name": "close",
            "slug": "API/BroadcastChannel/close",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/close",
            "summary": "The BroadcastChannel.close() terminates the connection to the underlying channel, allowing the object to be garbage collected. This is a necessary step to perform as there is no other way for a browser to know that this channel is not needed anymore.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.11"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BroadcastChannel: close() method"
        }
    ],
    "event-message": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BroadcastChannel.json",
            "name": "message_event",
            "slug": "API/BroadcastChannel/message_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/message_event",
            "summary": "The message event is fired on a BroadcastChannel object when a message arrives on that channel.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.11"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BroadcastChannel: message event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DedicatedWorkerGlobalScope.json",
            "name": "message_event",
            "slug": "API/DedicatedWorkerGlobalScope/message_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/message_event",
            "summary": "The message event is fired on a DedicatedWorkerGlobalScope object when the worker receives a message from its parent (i.e. when the parent sends a message using Worker.postMessage()).",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DedicatedWorkerGlobalScope: message event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "message_event",
            "slug": "API/EventSource/message_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/EventSource/message_event",
            "summary": "The message event of the EventSource API is fired when data is received through an event source.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource: message event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessagePort.json",
            "name": "message_event",
            "slug": "API/MessagePort/message_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/message_event",
            "summary": "The message event is fired on a MessagePort object when a message arrives on that channel.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.12"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": [
                    {
                        "version_added": "14.7.0"
                    },
                    {
                        "version_added": "10.5.0",
                        "version_removed": "14.7.0",
                        "partial_implementation": true,
                        "notes": "Supports the event, but only via Node <code>EventEmitter</code>."
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessagePort: message event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "message_event",
            "slug": "API/Window/message_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/message_event",
            "summary": "The message event is fired on a Window object when the window receives a message, for example from a call to Window.postMessage() from another browsing context.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: message event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Worker.json",
            "name": "message_event",
            "slug": "API/Worker/message_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Worker/message_event",
            "summary": "The message event is fired on a Worker object when the worker's parent receives a message from its worker (i.e. when the worker sends a message using DedicatedWorkerGlobalScope.postMessage()).",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": [
                    {
                        "version_added": "12.17.0",
                        "partial_implementation": true,
                        "notes": "Supports the event, but only via Node <code>EventEmitter</code>."
                    },
                    {
                        "version_added": "11.7.0",
                        "partial_implementation": true,
                        "notes": "Supports the event, but only via Node <code>EventEmitter</code>."
                    },
                    {
                        "version_added": "10.5.0",
                        "partial_implementation": true,
                        "notes": "Supports the event, but only via Node <code>EventEmitter</code>.",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--experimental-worker"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Worker: message event"
        }
    ],
    "handler-broadcastchannel-onmessage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BroadcastChannel.json",
            "name": "message_event",
            "slug": "API/BroadcastChannel/message_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/message_event",
            "summary": "The message event is fired on a BroadcastChannel object when a message arrives on that channel.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.11"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BroadcastChannel: message event"
        }
    ],
    "event-messageerror": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BroadcastChannel.json",
            "name": "messageerror_event",
            "slug": "API/BroadcastChannel/messageerror_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/messageerror_event",
            "summary": "The messageerror event is fired on a BroadcastChannel object when a message that can't be deserialized arrives on the channel.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.11"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BroadcastChannel: messageerror event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DedicatedWorkerGlobalScope.json",
            "name": "messageerror_event",
            "slug": "API/DedicatedWorkerGlobalScope/messageerror_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/messageerror_event",
            "summary": "The messageerror event is fired on a DedicatedWorkerGlobalScope object when it receives a message that can't be deserialized.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "16.4",
                    "notes": "See <a href='https://webkit.org/b/171216'>bug 171216</a>."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DedicatedWorkerGlobalScope: messageerror event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessagePort.json",
            "name": "messageerror_event",
            "slug": "API/MessagePort/messageerror_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/messageerror_event",
            "summary": "The messageerror event is fired on a MessagePort object when it receives a message that can't be deserialized.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.12"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "14.7.0"
                    },
                    {
                        "version_added": "14.5.0",
                        "version_removed": "14.7.0",
                        "partial_implementation": true,
                        "notes": "Supports the event, but only via Node <code>EventEmitter</code>."
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "16.4",
                    "notes": "See <a href='https://webkit.org/b/171216'>bug 171216</a>."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessagePort: messageerror event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "messageerror_event",
            "slug": "API/Window/messageerror_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/messageerror_event",
            "summary": "The messageerror event is fired on a Window object when it receives a message that can't be deserialized.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "16.4",
                    "notes": "See <a href='https://webkit.org/b/171216'>bug 171216</a>."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: messageerror event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Worker.json",
            "name": "messageerror_event",
            "slug": "API/Worker/messageerror_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Worker/messageerror_event",
            "summary": "The messageerror event is fired on a Worker object when it receives a message that can't be deserialized.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "16.4",
                    "notes": "See <a href='https://webkit.org/b/171216'>bug 171216</a>."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Worker: messageerror event"
        }
    ],
    "handler-broadcastchannel-onmessageerror": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BroadcastChannel.json",
            "name": "messageerror_event",
            "slug": "API/BroadcastChannel/messageerror_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/messageerror_event",
            "summary": "The messageerror event is fired on a BroadcastChannel object when a message that can't be deserialized arrives on the channel.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.11"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BroadcastChannel: messageerror event"
        }
    ],
    "dom-broadcastchannel-name-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BroadcastChannel.json",
            "name": "name",
            "slug": "API/BroadcastChannel/name",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/name",
            "summary": "The read-only BroadcastChannel.name property returns a string, which uniquely identifies the given channel with its name. This name is passed to the BroadcastChannel() constructor at creation time and is therefore read-only.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.11"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BroadcastChannel: name property"
        }
    ],
    "dom-broadcastchannel-postmessage-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BroadcastChannel.json",
            "name": "postMessage",
            "slug": "API/BroadcastChannel/postMessage",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/postMessage",
            "summary": "The BroadcastChannel.postMessage() sends a message, which can be of any kind of Object, to each listener in any browsing context with the same origin. The message is transmitted as a 'message' event targeted at each BroadcastChannel bound to the channel.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.11"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BroadcastChannel: postMessage() method"
        }
    ],
    "broadcasting-to-other-browsing-contexts": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BroadcastChannel.json",
            "name": "BroadcastChannel",
            "slug": "API/BroadcastChannel",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel",
            "summary": "The BroadcastChannel interface represents a named channel that any browsing context of a given origin can subscribe to. It allows communication between different documents (in different windows, tabs, frames or iframes) of the same origin. Messages are broadcasted via a message event fired at all BroadcastChannel objects listening to the channel, except the object that sent the message.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.11",
                    "flags": [
                        {
                            "type": "runtime_flag",
                            "name": "--unstable"
                        }
                    ]
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.4.0",
                    "alternative_name": "worker_threads.BroadcastChannel",
                    "notes": [
                        "Experimental implementation",
                        "Must be imported using either <code>require('worker_threads')</code> or <code>import * from 'worker_threads'</code>."
                    ]
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BroadcastChannel"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "Broadcast_Channel_API",
            "slug": "API/Broadcast_Channel_API",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API",
            "summary": "The Broadcast Channel API allows basic communication between browsing contexts (that is, windows, tabs, frames, or iframes) and workers on the same origin.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.11",
                    "flags": [
                        {
                            "type": "runtime_flag",
                            "name": "--unstable"
                        }
                    ]
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.4.0",
                    "alternative_name": "worker_threads.BroadcastChannel",
                    "notes": [
                        "Experimental implementation",
                        "Must be imported using either <code>require('worker_threads')</code> or <code>import * from 'worker_threads'</code>."
                    ]
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Broadcast Channel API"
        }
    ],
    "dom-canvasgradient-addcolorstop-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasGradient.json",
            "name": "addColorStop",
            "slug": "API/CanvasGradient/addColorStop",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient/addColorStop",
            "summary": "The CanvasGradient.addColorStop() method adds a new color stop, defined by an offset and a color, to a given canvas gradient.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasGradient: addColorStop() method"
        }
    ],
    "canvasgradient": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasGradient.json",
            "name": "CanvasGradient",
            "slug": "API/CanvasGradient",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasGradient",
            "summary": "The CanvasGradient interface represents an opaque object describing a gradient. It is returned by the methods CanvasRenderingContext2D.createLinearGradient(), CanvasRenderingContext2D.createConicGradient() or CanvasRenderingContext2D.createRadialGradient().",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5",
                    "notes": "Before Firefox 5.0, specifying non-finite values when adding color stops through a call to <code>addColorStop()</code> incorrectly throws <code>SYNTAX_ERR</code> instead of <code>INDEX_SIZE_ERR</code>."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasGradient"
        }
    ],
    "dom-canvaspattern-settransform-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasPattern.json",
            "name": "setTransform",
            "slug": "API/CanvasPattern/setTransform",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern/setTransform",
            "summary": "The CanvasPattern.setTransform() method uses a DOMMatrix object as the pattern's transformation matrix and invokes it on the pattern.",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "33"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasPattern: setTransform() method"
        }
    ],
    "canvaspattern": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasPattern.json",
            "name": "CanvasPattern",
            "slug": "API/CanvasPattern",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasPattern",
            "summary": "The CanvasPattern interface represents an opaque object describing a pattern, based on an image, a canvas, or a video, created by the CanvasRenderingContext2D.createPattern() method.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasPattern"
        }
    ],
    "dom-context-2d-arc-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "arc",
            "slug": "API/CanvasRenderingContext2D/arc",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc",
            "summary": "The CanvasRenderingContext2D.arc() method of the Canvas 2D API adds a circular arc to the current sub-path.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: arc() method"
        }
    ],
    "dom-context-2d-arcto-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "arcTo",
            "slug": "API/CanvasRenderingContext2D/arcTo",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arcTo",
            "summary": "The CanvasRenderingContext2D.arcTo() method of the Canvas 2D API adds a circular arc to the current sub-path, using the given control points and radius. The arc is automatically connected to the path's latest point with a straight line, if necessary for the specified parameters.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: arcTo() method"
        }
    ],
    "dom-context-2d-beginpath-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "beginPath",
            "slug": "API/CanvasRenderingContext2D/beginPath",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath",
            "summary": "The CanvasRenderingContext2D.beginPath() method of the Canvas 2D API starts a new path by emptying the list of sub-paths. Call this method when you want to create a new path.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: beginPath() method"
        }
    ],
    "dom-context-2d-beziercurveto-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "bezierCurveTo",
            "slug": "API/CanvasRenderingContext2D/bezierCurveTo",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo",
            "summary": "The CanvasRenderingContext2D.bezierCurveTo() method of the Canvas 2D API adds a cubic Bézier curve to the current sub-path. It requires three points: the first two are control points and the third one is the end point. The starting point is the latest point in the current path, which can be changed using moveTo() before creating the Bézier curve.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: bezierCurveTo() method"
        }
    ],
    "dom-context-2d-canvas-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "canvas",
            "slug": "API/CanvasRenderingContext2D/canvas",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/canvas",
            "summary": "The CanvasRenderingContext2D.canvas property, part of the Canvas API, is a read-only reference to the HTMLCanvasElement object that is associated with a given context. It might be null if there is no associated <canvas> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: canvas property"
        }
    ],
    "dom-context-2d-clearrect-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "clearRect",
            "slug": "API/CanvasRenderingContext2D/clearRect",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearRect",
            "summary": "The CanvasRenderingContext2D.clearRect() method of the Canvas 2D API erases the pixels in a rectangular area by setting them to transparent black.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: clearRect() method"
        }
    ],
    "dom-context-2d-clip-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "clip",
            "slug": "API/CanvasRenderingContext2D/clip",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip",
            "summary": "The CanvasRenderingContext2D.clip() method of the Canvas 2D API turns the current or given path into the current clipping region. The previous clipping region, if any, is intersected with the current or given path to create the new clipping region.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: clip() method"
        }
    ],
    "dom-context-2d-closepath-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "closePath",
            "slug": "API/CanvasRenderingContext2D/closePath",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/closePath",
            "summary": "The CanvasRenderingContext2D.closePath() method of the Canvas 2D API attempts to add a straight line from the current point to the start of the current sub-path. If the shape has already been closed or has only one point, this function does nothing.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: closePath() method"
        }
    ],
    "dom-context-2d-createconicgradient-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "createConicGradient",
            "slug": "API/CanvasRenderingContext2D/createConicGradient",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createConicGradient",
            "summary": "The CanvasRenderingContext2D.createConicGradient() method of the Canvas 2D API creates a gradient around a point with given coordinates.",
            "support": {
                "chrome": {
                    "version_added": "99"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": [
                    {
                        "version_added": "112"
                    },
                    {
                        "version_added": "90",
                        "notes": "Implements an older version of the specification. The gradient starts from a line going vertically up from the center, like the equivalent CSS function.",
                        "partial_implementation": true
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": [
                    {
                        "version_added": "16.1"
                    },
                    {
                        "version_added": "15",
                        "notes": "Implements an older version of the specification. The gradient starts from a line going vertically up from the center, like the equivalent CSS function.",
                        "partial_implementation": true
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "99"
                }
            },
            "title": "CanvasRenderingContext2D: createConicGradient() method"
        }
    ],
    "dom-context-2d-createimagedata-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "createImageData",
            "slug": "API/CanvasRenderingContext2D/createImageData",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createImageData",
            "summary": "The CanvasRenderingContext2D.createImageData() method of the Canvas 2D API creates a new, blank ImageData object with the specified dimensions. All of the pixels in the new object are transparent black.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: createImageData() method"
        }
    ],
    "dom-context-2d-createlineargradient-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "createLinearGradient",
            "slug": "API/CanvasRenderingContext2D/createLinearGradient",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createLinearGradient",
            "summary": "The CanvasRenderingContext2D.createLinearGradient() method of the Canvas 2D API creates a gradient along the line connecting two given coordinates.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: createLinearGradient() method"
        }
    ],
    "dom-context-2d-createpattern-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "createPattern",
            "slug": "API/CanvasRenderingContext2D/createPattern",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createPattern",
            "summary": "The CanvasRenderingContext2D.createPattern() method of the Canvas 2D API creates a pattern using the specified image and repetition. This method returns a CanvasPattern.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: createPattern() method"
        }
    ],
    "dom-context-2d-createradialgradient-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "createRadialGradient",
            "slug": "API/CanvasRenderingContext2D/createRadialGradient",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient",
            "summary": "The CanvasRenderingContext2D.createRadialGradient() method of the Canvas 2D API creates a radial gradient using the size and coordinates of two circles.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: createRadialGradient() method"
        }
    ],
    "dom-context-2d-direction-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "direction",
            "slug": "API/CanvasRenderingContext2D/direction",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/direction",
            "summary": "The CanvasRenderingContext2D.direction property of the Canvas 2D API specifies the current text direction used to draw text.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "101"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: direction property"
        }
    ],
    "dom-context-2d-drawfocusifneeded-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "drawFocusIfNeeded",
            "slug": "API/CanvasRenderingContext2D/drawFocusIfNeeded",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawFocusIfNeeded",
            "summary": "The CanvasRenderingContext2D.drawFocusIfNeeded() method of the Canvas 2D API draws a focus ring around the current or given path, if the specified element is focused.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": [
                    {
                        "version_added": "32"
                    },
                    {
                        "version_added": "28",
                        "alternative_name": "drawSystemFocusRing"
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: drawFocusIfNeeded() method"
        }
    ],
    "dom-context-2d-drawimage-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "drawImage",
            "slug": "API/CanvasRenderingContext2D/drawImage",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage",
            "summary": "The CanvasRenderingContext2D.drawImage() method of the Canvas 2D API provides different ways to draw an image onto the canvas.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: drawImage() method"
        }
    ],
    "dom-context-2d-ellipse-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "ellipse",
            "slug": "API/CanvasRenderingContext2D/ellipse",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse",
            "summary": "The CanvasRenderingContext2D.ellipse() method of the Canvas 2D API adds an elliptical arc to the current sub-path.",
            "support": {
                "chrome": {
                    "version_added": "31"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: ellipse() method"
        }
    ],
    "dom-context-2d-fill-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "fill",
            "slug": "API/CanvasRenderingContext2D/fill",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill",
            "summary": "The CanvasRenderingContext2D.fill() method of the Canvas 2D API fills the current or given path with the current fillStyle.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: fill() method"
        }
    ],
    "dom-context-2d-fillrect-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "fillRect",
            "slug": "API/CanvasRenderingContext2D/fillRect",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect",
            "summary": "The CanvasRenderingContext2D.fillRect() method of the Canvas 2D API draws a rectangle that is filled according to the current fillStyle.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: fillRect() method"
        }
    ],
    "dom-context-2d-fillstyle-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "fillStyle",
            "slug": "API/CanvasRenderingContext2D/fillStyle",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle",
            "summary": "The CanvasRenderingContext2D.fillStyle property of the Canvas 2D API specifies the color, gradient, or pattern to use inside shapes. The default style is #000 (black).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: fillStyle property"
        }
    ],
    "dom-context-2d-filltext-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "fillText",
            "slug": "API/CanvasRenderingContext2D/fillText",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText",
            "summary": "The CanvasRenderingContext2D method fillText(), part of the Canvas 2D API, draws a text string at the specified coordinates, filling the string's characters with the current fillStyle. An optional parameter allows specifying a maximum width for the rendered text, which the user agent will achieve by condensing the text or by using a lower font size.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: fillText() method"
        }
    ],
    "dom-context-2d-filter-dev": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "filter",
            "slug": "API/CanvasRenderingContext2D/filter",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter",
            "summary": "The CanvasRenderingContext2D.filter property of the Canvas 2D API provides filter effects such as blurring and grayscaling. It is similar to the CSS filter property and accepts the same values.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false,
                    "notes": "See <a href='https://webkit.org/b/198416'>bug 198416</a>."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: filter property"
        }
    ],
    "dom-context-2d-font-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "font",
            "slug": "API/CanvasRenderingContext2D/font",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font",
            "summary": "The CanvasRenderingContext2D.font property of the Canvas 2D API specifies the current text style to use when drawing text. This string uses the same syntax as the CSS font specifier.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: font property"
        }
    ],
    "dom-context-2d-fontkerning": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "fontKerning",
            "slug": "API/CanvasRenderingContext2D/fontKerning",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fontKerning",
            "summary": "The CanvasRenderingContext2D.fontKerning property of the Canvas API specifies how font kerning information is used.",
            "support": {
                "chrome": {
                    "version_added": "99"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "104"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "99"
                }
            },
            "title": "CanvasRenderingContext2D: fontKerning property"
        }
    ],
    "dom-context-2d-fontstretch": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "fontStretch",
            "slug": "API/CanvasRenderingContext2D/fontStretch",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fontStretch",
            "summary": "The CanvasRenderingContext2D.fontStretch property of the Canvas API specifies how the font may be expanded or condensed when drawing text.",
            "support": {
                "chrome": {
                    "version_added": "99"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "99"
                }
            },
            "title": "CanvasRenderingContext2D: fontStretch property"
        }
    ],
    "dom-context-2d-fontvariantcaps": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "fontVariantCaps",
            "slug": "API/CanvasRenderingContext2D/fontVariantCaps",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fontVariantCaps",
            "summary": "The CanvasRenderingContext2D.fontVariantCaps property of the Canvas API specifies an alternative capitalization of the rendered text.",
            "support": {
                "chrome": {
                    "version_added": "99"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "99"
                }
            },
            "title": "CanvasRenderingContext2D: fontVariantCaps property"
        }
    ],
    "2dcontext:dom-context-2d-canvas-getcontextattributes-2": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "getContextAttributes",
            "slug": "API/CanvasRenderingContext2D/getContextAttributes",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getContextAttributes",
            "summary": "The CanvasRenderingContext2D.getContextAttributes() method returns an object that contains the actual context parameters. Context attributes can be requested with HTMLCanvasElement.getContext() on context creation.",
            "support": {
                "chrome": [
                    {
                        "version_added": "73"
                    },
                    {
                        "version_added": "32",
                        "version_removed": "60"
                    }
                ],
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "60"
                    }
                ]
            },
            "title": "CanvasRenderingContext2D: getContextAttributes() method"
        }
    ],
    "dom-context-2d-getimagedata-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "getImageData",
            "slug": "API/CanvasRenderingContext2D/getImageData",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getImageData",
            "summary": "The CanvasRenderingContext2D method getImageData() of the Canvas 2D API returns an ImageData object representing the underlying pixel data for a specified portion of the canvas.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2",
                    "notes": "Since Firefox 5, <code>getImageData</code> now correctly accepts rectangles that extend beyond the bounds of the canvas; pixels outside the canvas are returned as transparent black and now also returns at least one pixel's worth of image data if a rectangle smaller than one pixel is specified."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: getImageData() method"
        }
    ],
    "dom-context-2d-getlinedash-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "getLineDash",
            "slug": "API/CanvasRenderingContext2D/getLineDash",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getLineDash",
            "summary": "The getLineDash() method of the Canvas 2D API's CanvasRenderingContext2D interface gets the current line dash pattern.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "27"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: getLineDash() method"
        }
    ],
    "dom-context-2d-gettransform-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "getTransform",
            "slug": "API/CanvasRenderingContext2D/getTransform",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getTransform",
            "summary": "The CanvasRenderingContext2D.getTransform() method of the Canvas 2D API retrieves the current transformation matrix being applied to the context.",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "70"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: getTransform() method"
        }
    ],
    "dom-context-2d-globalalpha-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "globalAlpha",
            "slug": "API/CanvasRenderingContext2D/globalAlpha",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha",
            "summary": "The CanvasRenderingContext2D.globalAlpha property of the Canvas 2D API specifies the alpha (transparency) value that is applied to shapes and images before they are drawn onto the canvas.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: globalAlpha property"
        }
    ],
    "dom-context-2d-globalcompositeoperation-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "globalCompositeOperation",
            "slug": "API/CanvasRenderingContext2D/globalCompositeOperation",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation",
            "summary": "The CanvasRenderingContext2D.globalCompositeOperation property of the Canvas 2D API sets the type of compositing operation to apply when drawing new shapes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: globalCompositeOperation property"
        }
    ],
    "dom-context-2d-imagesmoothingenabled-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "imageSmoothingEnabled",
            "slug": "API/CanvasRenderingContext2D/imageSmoothingEnabled",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled",
            "summary": "The imageSmoothingEnabled property of the CanvasRenderingContext2D interface, part of the Canvas API, determines whether scaled images are smoothed (true, default) or not (false). On getting the imageSmoothingEnabled property, the last value it was set to is returned.",
            "support": {
                "chrome": {
                    "version_added": "30"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "51"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11",
                    "prefix": "ms"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: imageSmoothingEnabled property"
        }
    ],
    "dom-context-2d-imagesmoothingquality-dev": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "imageSmoothingQuality",
            "slug": "API/CanvasRenderingContext2D/imageSmoothingQuality",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingQuality",
            "summary": "The imageSmoothingQuality property of the CanvasRenderingContext2D interface, part of the Canvas API, lets you set the quality of image smoothing.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: imageSmoothingQuality property"
        }
    ],
    "dom-context-2d-iscontextlost": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "isContextLost",
            "slug": "API/CanvasRenderingContext2D/isContextLost",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isContextLost",
            "summary": "The CanvasRenderingContext2D.isContextLost() method of the Canvas 2D API returns true if the rendering context is lost (and has not yet been reset). This might occur due to driver crashes, running out of memory, and so on.",
            "support": {
                "chrome": {
                    "version_added": "99"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "99"
                }
            },
            "title": "CanvasRenderingContext2D: isContextLost() method"
        }
    ],
    "dom-context-2d-ispointinpath-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "isPointInPath",
            "slug": "API/CanvasRenderingContext2D/isPointInPath",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInPath",
            "summary": "The CanvasRenderingContext2D.isPointInPath() method of the Canvas 2D API reports whether or not the specified point is contained in the current path.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: isPointInPath() method"
        }
    ],
    "dom-context-2d-ispointinstroke-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "isPointInStroke",
            "slug": "API/CanvasRenderingContext2D/isPointInStroke",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInStroke",
            "summary": "The CanvasRenderingContext2D.isPointInStroke() method of the Canvas 2D API reports whether or not the specified point is inside the area contained by the stroking of a path.",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "19"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: isPointInStroke() method"
        }
    ],
    "dom-context-2d-letterspacing": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "letterSpacing",
            "slug": "API/CanvasRenderingContext2D/letterSpacing",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/letterSpacing",
            "summary": "The CanvasRenderingContext2D.letterSpacing property of the Canvas API specifies the spacing between letters when drawing text.",
            "support": {
                "chrome": {
                    "version_added": "99"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "99"
                }
            },
            "title": "CanvasRenderingContext2D: letterSpacing property"
        }
    ],
    "dom-context-2d-linecap-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "lineCap",
            "slug": "API/CanvasRenderingContext2D/lineCap",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap",
            "summary": "The CanvasRenderingContext2D.lineCap property of the Canvas 2D API determines the shape used to draw the end points of lines.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: lineCap property"
        }
    ],
    "dom-context-2d-linedashoffset-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "lineDashOffset",
            "slug": "API/CanvasRenderingContext2D/lineDashOffset",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset",
            "summary": "The CanvasRenderingContext2D.lineDashOffset property of the Canvas 2D API sets the line dash offset, or \"phase.\"",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "27"
                    },
                    {
                        "alternative_name": "mozDashOffset",
                        "version_added": "7"
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: lineDashOffset property"
        }
    ],
    "dom-context-2d-linejoin-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "lineJoin",
            "slug": "API/CanvasRenderingContext2D/lineJoin",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin",
            "summary": "The CanvasRenderingContext2D.lineJoin property of the Canvas 2D API determines the shape used to join two line segments where they meet.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: lineJoin property"
        }
    ],
    "dom-context-2d-lineto-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "lineTo",
            "slug": "API/CanvasRenderingContext2D/lineTo",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo",
            "summary": "The CanvasRenderingContext2D method lineTo(), part of the Canvas 2D API, adds a straight line to the current sub-path by connecting the sub-path's last point to the specified (x, y) coordinates.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: lineTo() method"
        }
    ],
    "dom-context-2d-linewidth-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "lineWidth",
            "slug": "API/CanvasRenderingContext2D/lineWidth",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth",
            "summary": "The CanvasRenderingContext2D.lineWidth property of the Canvas 2D API sets the thickness of lines.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: lineWidth property"
        }
    ],
    "dom-context-2d-measuretext-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "measureText",
            "slug": "API/CanvasRenderingContext2D/measureText",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/measureText",
            "summary": "The CanvasRenderingContext2D.measureText() method returns a TextMetrics object that contains information about the measured text (such as its width, for example).",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: measureText() method"
        }
    ],
    "dom-context-2d-miterlimit-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "miterLimit",
            "slug": "API/CanvasRenderingContext2D/miterLimit",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit",
            "summary": "The CanvasRenderingContext2D.miterLimit property of the Canvas 2D API sets the miter limit ratio.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: miterLimit property"
        }
    ],
    "dom-context-2d-moveto-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "moveTo",
            "slug": "API/CanvasRenderingContext2D/moveTo",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo",
            "summary": "The CanvasRenderingContext2D.moveTo() method of the Canvas 2D API begins a new sub-path at the point specified by the given (x, y) coordinates.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: moveTo() method"
        }
    ],
    "dom-context-2d-putimagedata-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "putImageData",
            "slug": "API/CanvasRenderingContext2D/putImageData",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/putImageData",
            "summary": "The CanvasRenderingContext2D.putImageData() method of the Canvas 2D API paints data from the given ImageData object onto the canvas. If a dirty rectangle is provided, only the pixels from that rectangle are painted. This method is not affected by the canvas transformation matrix.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: putImageData() method"
        }
    ],
    "dom-context-2d-quadraticcurveto-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "quadraticCurveTo",
            "slug": "API/CanvasRenderingContext2D/quadraticCurveTo",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo",
            "summary": "The CanvasRenderingContext2D.quadraticCurveTo() method of the Canvas 2D API adds a quadratic Bézier curve to the current sub-path. It requires two points: the first one is a control point and the second one is the end point. The starting point is the latest point in the current path, which can be changed using moveTo() before creating the quadratic Bézier curve.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: quadraticCurveTo() method"
        }
    ],
    "dom-context-2d-rect-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "rect",
            "slug": "API/CanvasRenderingContext2D/rect",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rect",
            "summary": "The CanvasRenderingContext2D.rect() method of the Canvas 2D API adds a rectangle to the current path.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: rect() method"
        }
    ],
    "dom-context-2d-reset": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "reset",
            "slug": "API/CanvasRenderingContext2D/reset",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/reset",
            "summary": "The CanvasRenderingContext2D.reset() method of the Canvas 2D API resets the rendering context to its default state, allowing it to be reused for drawing something else without having to explicitly reset all the properties.",
            "support": {
                "chrome": {
                    "version_added": "99"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "113"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "99"
                }
            },
            "title": "CanvasRenderingContext2D: reset() method"
        },
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/OffscreenCanvasRenderingContext2D.json",
            "name": "reset",
            "slug": "API/OffscreenCanvasRenderingContext2D#canvasrenderingcontext2d.reset",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D#canvasrenderingcontext2d.reset",
            "summary": "The OffscreenCanvasRenderingContext2D interface is a CanvasRenderingContext2D rendering context for drawing to the bitmap of an OffscreenCanvas object. It is similar to the CanvasRenderingContext2D object, with the following differences:",
            "support": {
                "chrome": {
                    "version_added": "99"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "113"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "99"
                }
            },
            "title": "OffscreenCanvasRenderingContext2D"
        }
    ],
    "dom-context-2d-resettransform-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "resetTransform",
            "slug": "API/CanvasRenderingContext2D/resetTransform",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/resetTransform",
            "summary": "The CanvasRenderingContext2D.resetTransform() method of the Canvas 2D API resets the current transform to the identity matrix.",
            "support": {
                "chrome": {
                    "version_added": "31"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "36"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: resetTransform() method"
        }
    ],
    "dom-context-2d-restore-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "restore",
            "slug": "API/CanvasRenderingContext2D/restore",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/restore",
            "summary": "The CanvasRenderingContext2D.restore() method of the Canvas 2D API restores the most recently saved canvas state by popping the top entry in the drawing state stack. If there is no saved state, this method does nothing.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: restore() method"
        }
    ],
    "dom-context-2d-rotate-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "rotate",
            "slug": "API/CanvasRenderingContext2D/rotate",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate",
            "summary": "The CanvasRenderingContext2D.rotate() method of the Canvas 2D API adds a rotation to the transformation matrix.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: rotate() method"
        }
    ],
    "dom-context-2d-roundrect": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "roundRect",
            "slug": "API/CanvasRenderingContext2D/roundRect",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/roundRect",
            "summary": "The CanvasRenderingContext2D.roundRect() method of the Canvas 2D API adds a rounded rectangle to the current path.",
            "support": {
                "chrome": {
                    "version_added": "99"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "112"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "99"
                }
            },
            "title": "CanvasRenderingContext2D: roundRect() method"
        }
    ],
    "dom-context-2d-save-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "save",
            "slug": "API/CanvasRenderingContext2D/save",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/save",
            "summary": "The CanvasRenderingContext2D.save() method of the Canvas 2D API saves the entire state of the canvas by pushing the current state onto a stack.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: save() method"
        }
    ],
    "dom-context-2d-scale-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "scale",
            "slug": "API/CanvasRenderingContext2D/scale",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scale",
            "summary": "The CanvasRenderingContext2D.scale() method of the Canvas 2D API adds a scaling transformation to the canvas units horizontally and/or vertically.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: scale() method"
        }
    ],
    "dom-context-2d-scrollpathintoview-dev": [
        {
            "engines": [
                "blink"
            ],
            "needsflag": [
                "blink"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "scrollPathIntoView",
            "slug": "API/CanvasRenderingContext2D/scrollPathIntoView",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scrollPathIntoView",
            "summary": "The CanvasRenderingContext2D.scrollPathIntoView() method of the Canvas 2D API scrolls the current or given path into view. It is similar to Element.scrollIntoView().",
            "support": {
                "chrome": {
                    "version_added": "36",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "#enable-experimental-web-platform-features"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "#enable-experimental-web-platform-features"
                        }
                    ]
                }
            },
            "title": "CanvasRenderingContext2D: scrollPathIntoView() method"
        }
    ],
    "dom-context-2d-setlinedash-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "setLineDash",
            "slug": "API/CanvasRenderingContext2D/setLineDash",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash",
            "summary": "The setLineDash() method of the Canvas 2D API's CanvasRenderingContext2D interface sets the line dash pattern used when stroking lines. It uses an array of values that specify alternating lengths of lines and gaps which describe the pattern.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "27"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: setLineDash() method"
        }
    ],
    "dom-context-2d-settransform-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "setTransform",
            "slug": "API/CanvasRenderingContext2D/setTransform",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setTransform",
            "summary": "The CanvasRenderingContext2D.setTransform() method of the Canvas 2D API resets (overrides) the current transformation to the identity matrix, and then invokes a transformation described by the arguments of this method. This lets you scale, rotate, translate (move), and skew the context.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: setTransform() method"
        }
    ],
    "dom-context-2d-shadowblur-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "shadowBlur",
            "slug": "API/CanvasRenderingContext2D/shadowBlur",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur",
            "summary": "The CanvasRenderingContext2D.shadowBlur property of the Canvas 2D API specifies the amount of blur applied to shadows. The default is 0 (no blur).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: shadowBlur property"
        }
    ],
    "dom-context-2d-shadowcolor-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "shadowColor",
            "slug": "API/CanvasRenderingContext2D/shadowColor",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor",
            "summary": "The CanvasRenderingContext2D.shadowColor property of the Canvas 2D API specifies the color of shadows.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: shadowColor property"
        }
    ],
    "dom-context-2d-shadowoffsetx-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "shadowOffsetX",
            "slug": "API/CanvasRenderingContext2D/shadowOffsetX",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX",
            "summary": "The CanvasRenderingContext2D.shadowOffsetX property of the Canvas 2D API specifies the distance that shadows will be offset horizontally.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: shadowOffsetX property"
        }
    ],
    "dom-context-2d-shadowoffsety-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "shadowOffsetY",
            "slug": "API/CanvasRenderingContext2D/shadowOffsetY",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY",
            "summary": "The CanvasRenderingContext2D.shadowOffsetY property of the Canvas 2D API specifies the distance that shadows will be offset vertically.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: shadowOffsetY property"
        }
    ],
    "dom-context-2d-stroke-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "stroke",
            "slug": "API/CanvasRenderingContext2D/stroke",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/stroke",
            "summary": "The CanvasRenderingContext2D.stroke() method of the Canvas 2D API strokes (outlines) the current or given path with the current stroke style.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: stroke() method"
        }
    ],
    "dom-context-2d-strokerect-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "strokeRect",
            "slug": "API/CanvasRenderingContext2D/strokeRect",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeRect",
            "summary": "The CanvasRenderingContext2D.strokeRect() method of the Canvas 2D API draws a rectangle that is stroked (outlined) according to the current strokeStyle and other context settings.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: strokeRect() method"
        }
    ],
    "dom-context-2d-strokestyle-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "strokeStyle",
            "slug": "API/CanvasRenderingContext2D/strokeStyle",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle",
            "summary": "The CanvasRenderingContext2D.strokeStyle property of the Canvas 2D API specifies the color, gradient, or pattern to use for the strokes (outlines) around shapes. The default is #000 (black).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: strokeStyle property"
        }
    ],
    "dom-context-2d-stroketext-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "strokeText",
            "slug": "API/CanvasRenderingContext2D/strokeText",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeText",
            "summary": "The CanvasRenderingContext2D method strokeText(), part of the Canvas 2D API, strokes — that is, draws the outlines of — the characters of a text string at the specified coordinates. An optional parameter allows specifying a maximum width for the rendered text, which the user agent will achieve by condensing the text or by using a lower font size.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: strokeText() method"
        }
    ],
    "dom-context-2d-textalign-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "textAlign",
            "slug": "API/CanvasRenderingContext2D/textAlign",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign",
            "summary": "The CanvasRenderingContext2D.textAlign property of the Canvas 2D API specifies the current text alignment used when drawing text.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: textAlign property"
        }
    ],
    "dom-context-2d-textbaseline-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "textBaseline",
            "slug": "API/CanvasRenderingContext2D/textBaseline",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline",
            "summary": "The CanvasRenderingContext2D.textBaseline property of the Canvas 2D API specifies the current text baseline used when drawing text.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: textBaseline property"
        }
    ],
    "dom-context-2d-textrendering": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "textRendering",
            "slug": "API/CanvasRenderingContext2D/textRendering",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textRendering",
            "summary": "The CanvasRenderingContext2D.textRendering property of the Canvas API provides information to the rendering engine about what to optimize for when rendering text.",
            "support": {
                "chrome": {
                    "version_added": "99"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "99"
                }
            },
            "title": "CanvasRenderingContext2D: textRendering property"
        }
    ],
    "dom-context-2d-transform-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "transform",
            "slug": "API/CanvasRenderingContext2D/transform",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/transform",
            "summary": "The CanvasRenderingContext2D.transform() method of the Canvas 2D API multiplies the current transformation with the matrix described by the arguments of this method. This lets you scale, rotate, translate (move), and skew the context.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: transform() method"
        }
    ],
    "dom-context-2d-translate-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "translate",
            "slug": "API/CanvasRenderingContext2D/translate",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/translate",
            "summary": "The CanvasRenderingContext2D.translate() method of the Canvas 2D API adds a translation transformation to the current matrix.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D: translate() method"
        }
    ],
    "dom-context-2d-wordspacing": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "wordSpacing",
            "slug": "API/CanvasRenderingContext2D/wordSpacing",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/wordSpacing",
            "summary": "The CanvasRenderingContext2D.wordSpacing property of the Canvas API specifies the spacing between words when drawing text.",
            "support": {
                "chrome": {
                    "version_added": "99"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "99"
                }
            },
            "title": "CanvasRenderingContext2D: wordSpacing property"
        }
    ],
    "2dcontext": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CanvasRenderingContext2D.json",
            "name": "CanvasRenderingContext2D",
            "slug": "API/CanvasRenderingContext2D",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
            "summary": "The CanvasRenderingContext2D interface, part of the Canvas API, provides the 2D rendering context for the drawing surface of a <canvas> element. It is used for drawing shapes, text, images, and other objects.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D"
        }
    ],
    "dom-customelementregistry-define-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CustomElementRegistry.json",
            "name": "define",
            "slug": "API/CustomElementRegistry/define",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define",
            "summary": "The define() method of the CustomElementRegistry interface defines a new custom element.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CustomElementRegistry: define() method"
        }
    ],
    "dom-customelementregistry-get-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CustomElementRegistry.json",
            "name": "get",
            "slug": "API/CustomElementRegistry/get",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/get",
            "summary": "The get() method of the CustomElementRegistry interface returns the constructor for a previously-defined custom element.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CustomElementRegistry: get() method"
        }
    ],
    "dom-customelementregistry-getname": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "partial": [
                "webkit"
            ],
            "filename": "api/CustomElementRegistry.json",
            "name": "getName",
            "slug": "API/CustomElementRegistry/getName",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/getName",
            "summary": "The getName() method of the CustomElementRegistry interface returns the name for a previously-defined custom element.",
            "support": {
                "chrome": {
                    "version_added": "117"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "116"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "preview",
                    "partial_implementation": true,
                    "notes": "Supports 'Autonomous custom elements' but not 'Customized built-in elements'."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "117"
                }
            },
            "title": "CustomElementRegistry: getName() method"
        }
    ],
    "dom-customelementregistry-upgrade-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CustomElementRegistry.json",
            "name": "upgrade",
            "slug": "API/CustomElementRegistry/upgrade",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/upgrade",
            "summary": "The upgrade() method of the CustomElementRegistry interface upgrades all shadow-containing custom elements in a Node subtree, even before they are connected to the main document.",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "12.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CustomElementRegistry: upgrade() method"
        }
    ],
    "dom-customelementregistry-whendefined-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CustomElementRegistry.json",
            "name": "whenDefined",
            "slug": "API/CustomElementRegistry/whenDefined",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/whenDefined",
            "summary": "The whenDefined() method of the CustomElementRegistry interface returns a Promise that resolves when the named element is defined.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CustomElementRegistry: whenDefined() method"
        }
    ],
    "custom-elements-api": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/CustomElementRegistry.json",
            "name": "CustomElementRegistry",
            "slug": "API/CustomElementRegistry",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry",
            "summary": "The CustomElementRegistry interface provides methods for registering custom elements and querying registered elements. To get an instance of it, use the window.customElements property.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CustomElementRegistry"
        }
    ],
    "dom-domparser-constructor-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMParser.json",
            "name": "DOMParser",
            "slug": "API/DOMParser/DOMParser",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/DOMParser",
            "summary": "The DOMParser() constructor creates a new DOMParser object. This object can be used to parse the text of a document using the parseFromString() method.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMParser: DOMParser() constructor"
        }
    ],
    "dom-domparser-parsefromstring-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMParser.json",
            "name": "parseFromString",
            "slug": "API/DOMParser/parseFromString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString",
            "summary": "The parseFromString() method of the DOMParser interface parses a string containing either HTML or XML, returning an HTMLDocument or an XMLDocument.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMParser: parseFromString() method"
        }
    ],
    "dom-parsing-and-serialization": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMParser.json",
            "name": "DOMParser",
            "slug": "API/DOMParser",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMParser",
            "summary": "The DOMParser interface provides the ability to parse XML or HTML source code from a string into a DOM Document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMParser"
        }
    ],
    "dom-domstringlist-contains": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMStringList.json",
            "name": "contains",
            "slug": "API/DOMStringList/contains",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList/contains",
            "summary": "The contains() method returns a boolean indicating whether the given string is in the list.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMStringList: contains() method"
        }
    ],
    "dom-domstringlist-item": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMStringList.json",
            "name": "item",
            "slug": "API/DOMStringList/item",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList/item",
            "summary": "The item() method returns a string from a DOMStringList by index.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMStringList: item() method"
        }
    ],
    "dom-domstringlist-length": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMStringList.json",
            "name": "length",
            "slug": "API/DOMStringList/length",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList/length",
            "summary": "The read-only length property indicates the number of strings in the DOMStringList.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMStringList: length property"
        }
    ],
    "the-domstringlist-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMStringList.json",
            "name": "DOMStringList",
            "slug": "API/DOMStringList",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMStringList",
            "summary": "The DOMString interface is a legacy type returned by some APIs and represents a non-modifiable list of strings (DOMString). Modern APIs use Array objects (in WebIDL: sequence<DOMString>) instead.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMStringList"
        }
    ],
    "embedding-custom-non-visible-data-with-the-data-*-attributes:domstringmap-3": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DOMStringMap.json",
            "name": "DOMStringMap",
            "slug": "API/DOMStringMap",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DOMStringMap",
            "summary": "The DOMStringMap interface is used for the HTMLElement.dataset/SVGElement.dataset attribute, to represent data for custom attributes added to elements.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DOMStringMap"
        }
    ],
    "dom-datatransfer-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransfer.json",
            "name": "DataTransfer",
            "slug": "API/DataTransfer/DataTransfer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/DataTransfer",
            "summary": "The DataTransfer constructor creates a new DataTransfer object instance.",
            "support": {
                "chrome": {
                    "version_added": "59"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "62"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": {
                    "version_added": "44"
                },
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransfer: DataTransfer() constructor"
        }
    ],
    "dom-datatransfer-cleardata-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransfer.json",
            "name": "clearData",
            "slug": "API/DataTransfer/clearData",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/clearData",
            "summary": "The DataTransfer.clearData() method removes the drag operation's drag data for the given type. If data for the given type does not exist, this method does nothing.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransfer: clearData() method"
        }
    ],
    "dom-datatransfer-dropeffect-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransfer.json",
            "name": "dropEffect",
            "slug": "API/DataTransfer/dropEffect",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/dropEffect",
            "summary": "The DataTransfer.dropEffect property controls the feedback (typically visual) the user is given during a drag and drop operation. It will affect which cursor is displayed while dragging. For example, when the user hovers over a target drop element, the browser's cursor may indicate which type of operation will occur.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransfer: dropEffect property"
        }
    ],
    "dom-datatransfer-effectallowed-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransfer.json",
            "name": "effectAllowed",
            "slug": "API/DataTransfer/effectAllowed",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/effectAllowed",
            "summary": "The DataTransfer.effectAllowed property specifies the effect that is allowed for a drag operation. The copy operation is used to indicate that the data being dragged will be copied from its present location to the drop location. The move operation is used to indicate that the data being dragged will be moved, and the link operation is used to indicate that some form of relationship or connection will be created between the source and drop locations.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransfer: effectAllowed property"
        }
    ],
    "dom-datatransfer-files-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransfer.json",
            "name": "files",
            "slug": "API/DataTransfer/files",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/files",
            "summary": "The files property of DataTransfer objects is a list of the files in the drag operation. If the operation includes no files, the list is empty.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransfer: files property"
        }
    ],
    "dom-datatransfer-getdata-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransfer.json",
            "name": "getData",
            "slug": "API/DataTransfer/getData",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/getData",
            "summary": "The DataTransfer.getData() method retrieves drag data (as a string) for the specified type. If the drag operation does not include data, this method returns an empty string.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransfer: getData() method"
        }
    ],
    "dom-datatransfer-items-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransfer.json",
            "name": "items",
            "slug": "API/DataTransfer/items",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/items",
            "summary": "The read-only DataTransfer property items property is a list of the data transfer items in a drag operation. The list includes one item for each item in the operation and if the operation had no items, the list is empty.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": {
                    "version_added": "52"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransfer: items property"
        }
    ],
    "dom-datatransfer-setdata-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransfer.json",
            "name": "setData",
            "slug": "API/DataTransfer/setData",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setData",
            "summary": "The DataTransfer.setData() method sets the drag operation's drag data to the specified data and type. If data for the given type does not exist, it is added at the end of the drag data store, such that the last item in the types list will be the new type. If data for the given type already exists, the existing data is replaced in the same position. That is, the order of the types list is not changed when replacing data of the same type.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransfer: setData() method"
        }
    ],
    "dom-datatransfer-setdragimage-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransfer.json",
            "name": "setDragImage",
            "slug": "API/DataTransfer/setDragImage",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage",
            "summary": "When a drag occurs, a translucent image is generated from the drag target (the element the dragstart event is fired at), and follows the mouse pointer during the drag. This image is created automatically, so you do not need to create it yourself. However, if a custom image is desired, the DataTransfer.setDragImage() method can be used to set the custom image to be used. The image will typically be an <img> element but it can also be a <canvas> or any other visible element.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransfer: setDragImage() method"
        }
    ],
    "dom-datatransfer-types-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransfer.json",
            "name": "types",
            "slug": "API/DataTransfer/types",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/types",
            "summary": "The DataTransfer.types read-only property returns the available types that exist in the items.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10",
                    "notes": [
                        "The property returns a <a href='https://developer.mozilla.org/docs/Web/API/DOMStringList'><code>DOMStringList</code></a>.",
                        "<code>Text</code> is returned instead of <code>text/plain</code>"
                    ]
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1",
                    "notes": "As of Opera 12, <code>Text</code> is returned instead of <code>text/plain</code>"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransfer: types property"
        }
    ],
    "the-datatransfer-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransfer.json",
            "name": "DataTransfer",
            "slug": "API/DataTransfer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer",
            "summary": "The DataTransfer object is used to hold the data that is being dragged during a drag and drop operation. It may hold one or more data items, each of one or more data types. For more information about drag and drop, see HTML Drag and Drop API.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5",
                    "notes": "As of Firefox 52, the <a href='https://developer.mozilla.org/docs/Web/API/DataTransfer/types'><code>DataTransfer.types</code></a> property returns a frozen array of <a href='https://developer.mozilla.org/docs/Web/API/DOMString'><code>DOMString</code></a>s as per spec, rather than a <a href='https://developer.mozilla.org/docs/Web/API/DOMStringList'><code>DOMStringList</code></a>."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransfer"
        }
    ],
    "dom-datatransferitem-getasfile-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransferItem.json",
            "name": "getAsFile",
            "slug": "API/DataTransferItem/getAsFile",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/getAsFile",
            "summary": "If the item is a file, the DataTransferItem.getAsFile() method returns the drag data item's File object. If the item is not a file, this method returns null.",
            "support": {
                "chrome": {
                    "version_added": "11"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransferItem: getAsFile() method"
        }
    ],
    "dom-datatransferitem-getasstring-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransferItem.json",
            "name": "getAsString",
            "slug": "API/DataTransferItem/getAsString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/getAsString",
            "summary": "The DataTransferItem.getAsString() method invokes the given callback with the drag data item's string data as the argument if the item's kind is a Plain unicode string (i.e. kind is string).",
            "support": {
                "chrome": {
                    "version_added": "11"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransferItem: getAsString() method"
        }
    ],
    "dom-datatransferitem-kind-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransferItem.json",
            "name": "kind",
            "slug": "API/DataTransferItem/kind",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/kind",
            "summary": "The read-only DataTransferItem.kind property returns a DataTransferItem representing the drag data item kind: some text or some file.",
            "support": {
                "chrome": {
                    "version_added": "11"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransferItem: kind property"
        }
    ],
    "dom-datatransferitem-type-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransferItem.json",
            "name": "type",
            "slug": "API/DataTransferItem/type",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/type",
            "summary": "The read-only DataTransferItem.type property returns the type (format) of the DataTransferItem object representing the drag data item. The type is a Unicode string generally given by a MIME type, although a MIME type is not required.",
            "support": {
                "chrome": {
                    "version_added": "11"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransferItem: type property"
        }
    ],
    "the-datatransferitem-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransferItem.json",
            "name": "DataTransferItem",
            "slug": "API/DataTransferItem",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem",
            "summary": "The DataTransferItem object represents one drag data item. During a drag operation, each drag event has a dataTransfer property which contains a list of drag data items. Each item in the list is a DataTransferItem object.",
            "support": {
                "chrome": {
                    "version_added": "11"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransferItem"
        }
    ],
    "dom-datatransferitemlist-add-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransferItemList.json",
            "name": "add",
            "slug": "API/DataTransferItemList/add",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList/add",
            "summary": "The DataTransferItemList.add() method creates a new DataTransferItem using the specified data and adds it to the drag data list. The item may be a File or a string of a given type. If the item is successfully added to the list, the newly-created DataTransferItem object is returned.",
            "support": {
                "chrome": {
                    "version_added": "13"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransferItemList: add() method"
        }
    ],
    "dom-datatransferitemlist-clear-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransferItemList.json",
            "name": "clear",
            "slug": "API/DataTransferItemList/clear",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList/clear",
            "summary": "The DataTransferItemList method clear() removes all DataTransferItem objects from the drag data items list, leaving the list empty.",
            "support": {
                "chrome": {
                    "version_added": "13"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransferItemList: clear() method"
        }
    ],
    "dom-datatransferitemlist-length-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransferItemList.json",
            "name": "length",
            "slug": "API/DataTransferItemList/length",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList/length",
            "summary": "The read-only length property of the DataTransferItemList interface returns the number of items currently in the drag item list.",
            "support": {
                "chrome": {
                    "version_added": "13"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransferItemList: length property"
        }
    ],
    "dom-datatransferitemlist-remove-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransferItemList.json",
            "name": "remove",
            "slug": "API/DataTransferItemList/remove",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList/remove",
            "summary": "The DataTransferItemList.remove() method removes the DataTransferItem at the specified index from the list. If the index is less than zero or greater than one less than the length of the list, the list will not be changed.",
            "support": {
                "chrome": {
                    "version_added": "31"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransferItemList: remove() method"
        }
    ],
    "the-datatransferitemlist-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DataTransferItemList.json",
            "name": "DataTransferItemList",
            "slug": "API/DataTransferItemList",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItemList",
            "summary": "The DataTransferItemList object is a list of DataTransferItem objects representing items being dragged. During a drag operation, each DragEvent has a dataTransfer property and that property is a DataTransferItemList.",
            "support": {
                "chrome": {
                    "version_added": "13"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DataTransferItemList"
        }
    ],
    "dom-dedicatedworkerglobalscope-close-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DedicatedWorkerGlobalScope.json",
            "name": "close",
            "slug": "API/DedicatedWorkerGlobalScope/close",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/close",
            "summary": "The close() method of the DedicatedWorkerGlobalScope interface discards any tasks queued in the DedicatedWorkerGlobalScope's event loop, effectively closing this particular scope.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DedicatedWorkerGlobalScope: close() method"
        }
    ],
    "handler-dedicatedworkerglobalscope-onmessage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DedicatedWorkerGlobalScope.json",
            "name": "message_event",
            "slug": "API/DedicatedWorkerGlobalScope/message_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/message_event",
            "summary": "The message event is fired on a DedicatedWorkerGlobalScope object when the worker receives a message from its parent (i.e. when the parent sends a message using Worker.postMessage()).",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DedicatedWorkerGlobalScope: message event"
        }
    ],
    "handler-dedicatedworkerglobalscope-onmessageerror": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DedicatedWorkerGlobalScope.json",
            "name": "messageerror_event",
            "slug": "API/DedicatedWorkerGlobalScope/messageerror_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/messageerror_event",
            "summary": "The messageerror event is fired on a DedicatedWorkerGlobalScope object when it receives a message that can't be deserialized.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "16.4",
                    "notes": "See <a href='https://webkit.org/b/171216'>bug 171216</a>."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DedicatedWorkerGlobalScope: messageerror event"
        }
    ],
    "dom-dedicatedworkerglobalscope-name-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DedicatedWorkerGlobalScope.json",
            "name": "name",
            "slug": "API/DedicatedWorkerGlobalScope/name",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/name",
            "summary": "The name read-only property of the DedicatedWorkerGlobalScope interface returns the name that the Worker was (optionally) given when it was created. This is the name that the Worker() constructor can pass to get a reference to the DedicatedWorkerGlobalScope.",
            "support": {
                "chrome": {
                    "version_added": "70"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "55"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "12.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DedicatedWorkerGlobalScope: name property"
        }
    ],
    "dom-dedicatedworkerglobalscope-postmessage-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DedicatedWorkerGlobalScope.json",
            "name": "postMessage",
            "slug": "API/DedicatedWorkerGlobalScope/postMessage",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/postMessage",
            "summary": "The postMessage() method of the DedicatedWorkerGlobalScope interface sends a message to the main thread that spawned it.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": [
                    {
                        "version_added": "1.14",
                        "notes": "The <code>message</code> parameter does not support cloning <code>Blob</code> values."
                    },
                    {
                        "version_added": "1.12",
                        "version_removed": "1.14",
                        "partial_implementation": true,
                        "notes": [
                            "The <code>message</code> parameter does not support cloning <code>Blob</code> values.",
                            "The <code>transfer</code> parameter does not accept <code>ArrayBuffer</code> items. Passing an <code>ArrayBuffer</code> results in an error being thrown."
                        ]
                    },
                    {
                        "version_added": "1.10",
                        "version_removed": "1.12",
                        "partial_implementation": true,
                        "notes": [
                            "The <code>message</code> parameter does not support cloning <code>SharedArrayBuffer</code> or <code>Blob</code> values.",
                            "The <code>transfer</code> parameter is ignored."
                        ]
                    },
                    {
                        "version_added": "1.0",
                        "version_removed": "1.10",
                        "partial_implementation": true,
                        "notes": [
                            "Data passed in the <code>message</code> parameter is serialized with JSON, not the structured clone algorithm.",
                            "The <code>transfer</code> parameter is ignored."
                        ]
                    }
                ],
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DedicatedWorkerGlobalScope: postMessage() method"
        }
    ],
    "dedicated-workers-and-the-dedicatedworkerglobalscope-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DedicatedWorkerGlobalScope.json",
            "name": "DedicatedWorkerGlobalScope",
            "slug": "API/DedicatedWorkerGlobalScope",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope",
            "summary": "The DedicatedWorkerGlobalScope object (the Worker global scope) is accessible through the self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See also: Functions available to workers.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DedicatedWorkerGlobalScope"
        }
    ],
    "stop-parsing": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "DOMContentLoaded_event",
            "slug": "API/Document/DOMContentLoaded_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/DOMContentLoaded_event",
            "summary": "The DOMContentLoaded event fires when the initial HTML document has been completely loaded and parsed, without waiting for stylesheets, images, and subframes to finish loading.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: DOMContentLoaded event"
        }
    ],
    "dom-documentorshadowroot-activeelement-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "activeElement",
            "slug": "API/Document/activeElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement",
            "summary": "The activeElement read-only property of the Document interface returns the Element within the DOM that currently has focus.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: activeElement property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ShadowRoot.json",
            "name": "activeElement",
            "slug": "API/ShadowRoot/activeElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot/activeElement",
            "summary": "The activeElement read-only property of the ShadowRoot interface returns the element within the shadow tree that has focus.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ShadowRoot: activeElement property"
        }
    ],
    "dom-document-body-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "body",
            "slug": "API/Document/body",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/body",
            "summary": "The Document.body property represents the <body> or <frameset> node of the current document, or null if no such element exists.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "60"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "60",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.6"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: body property"
        }
    ],
    "dom-document-close-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "close",
            "slug": "API/Document/close",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/close",
            "summary": "The Document.close() method finishes writing to a document, opened with Document.open().",
            "support": {
                "chrome": [
                    {
                        "version_added": "64"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "64",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "51"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "51",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "47"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "47",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "safari": [
                    {
                        "version_added": "11"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "11",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "64",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ]
            },
            "title": "Document: close() method"
        }
    ],
    "dom-document-cookie": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "cookie",
            "slug": "API/Document/cookie",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie",
            "summary": "The Document property cookie lets you read and write cookies associated with the document. It serves as a getter and setter for the actual values of the cookies.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 68, <code>cookie</code> was available only on HTML documents; it is now available on all documents, such as XML and SVG."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: cookie property"
        }
    ],
    "dom-document-currentscript-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "currentScript",
            "slug": "API/Document/currentScript",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/currentScript",
            "summary": "The Document.currentScript property returns the <script> element whose script is currently being processed and isn't a JavaScript module. (For modules use import.meta instead.)",
            "support": {
                "chrome": {
                    "version_added": "29"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: currentScript property"
        }
    ],
    "dom-document-defaultview-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "defaultView",
            "slug": "API/Document/defaultView",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/defaultView",
            "summary": "In browsers, document.defaultView returns the window object associated with a document, or null if none is available.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: defaultView property"
        }
    ],
    "dom-document-designmode-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "designMode",
            "slug": "API/Document/designMode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/designMode",
            "summary": "document.designMode controls whether the entire document is editable. Valid values are \"on\" and \"off\". According to the specification, this property is meant to default to \"off\". Firefox follows this standard. The earlier versions of Chrome and IE default to \"inherit\". Starting in Chrome 43, the default is \"off\" and \"inherit\" is no longer supported. In IE6-10, the value is capitalized.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: designMode property"
        }
    ],
    "dom-document-dir": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "dir",
            "slug": "API/Document/dir",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/dir",
            "summary": "The Document.dir property is a string representing the directionality of the text of the document, whether left to right (default) or right to left. Possible values are 'rtl', right to left, and 'ltr', left to right.",
            "support": {
                "chrome": [
                    {
                        "version_added": "64"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "64",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Incorrect behavior before Firefox 23."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "51"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "51",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "47"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "47",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "safari": [
                    {
                        "version_added": "10.1"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "10.1",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "64",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ]
            },
            "title": "Document: dir property"
        }
    ],
    "dom-document-embeds-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "embeds",
            "slug": "API/Document/embeds",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/embeds",
            "summary": "The embeds read-only property of the Document interface returns a list of the embedded <embed> elements within the current document.",
            "support": {
                "chrome": [
                    {
                        "version_added": "64"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "64",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "51"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "51",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "47"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "47",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "safari": [
                    {
                        "version_added": "10.1"
                    },
                    {
                        "version_added": "2",
                        "version_removed": "10.1",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "64",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ]
            },
            "title": "Document: embeds property"
        }
    ],
    "dom-document-forms-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "forms",
            "slug": "API/Document/forms",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/forms",
            "summary": "The forms read-only property of the Document interface returns an HTMLCollection listing all the <form> elements contained in the document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: forms property"
        }
    ],
    "dom-document-getelementsbyname-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "getElementsByName",
            "slug": "API/Document/getElementsByName",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByName",
            "summary": "The getElementsByName() method of the Document object returns a NodeList Collection of elements with a given name attribute in the document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5",
                    "notes": "Returns an <code>HTMLCollection</code>, not a <code>NodeList</code>"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: getElementsByName() method"
        }
    ],
    "dom-document-hasfocus-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "hasFocus",
            "slug": "API/Document/hasFocus",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/hasFocus",
            "summary": "The hasFocus() method of the Document interface returns a boolean value indicating whether the document or any element inside the document has focus. This method can be used to determine whether the active element in a document has focus.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: hasFocus() method"
        }
    ],
    "dom-document-head-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "head",
            "slug": "API/Document/head",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/head",
            "summary": "The head read-only property of the Document interface returns the <head> element of the current document.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: head property"
        }
    ],
    "dom-document-hidden": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "hidden",
            "slug": "API/Document/hidden",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/hidden",
            "summary": "The Document.hidden read-only property returns a Boolean value indicating if the page is considered hidden or not.",
            "support": {
                "chrome": [
                    {
                        "version_added": "33"
                    },
                    {
                        "version_added": "13",
                        "prefix": "webkit"
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "18",
                        "notes": "Since Firefox 56 it also returns <code>true</code> on macOS when the window is completely hidden by another non-translucent application."
                    },
                    {
                        "version_added": "10",
                        "version_removed": "52",
                        "prefix": "moz"
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": [
                    {
                        "version_added": "4.4.3"
                    },
                    {
                        "version_added": "37",
                        "prefix": "webkit"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": "79",
                        "prefix": "webkit"
                    }
                ]
            },
            "title": "Document: hidden property"
        }
    ],
    "dom-document-images-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "images",
            "slug": "API/Document/images",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/images",
            "summary": "The images read-only property of the Document interface returns a collection of the images in the current HTML document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: images property"
        }
    ],
    "dom-document-lastmodified-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "lastModified",
            "slug": "API/Document/lastModified",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/lastModified",
            "summary": "The lastModified property of the Document interface returns a string containing the date and time on which the current document was last modified.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: lastModified property"
        }
    ],
    "dom-document-links-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "links",
            "slug": "API/Document/links",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/links",
            "summary": "The links read-only property of the Document interface returns a collection of all <area> elements and <a> elements in a document with a value for the href attribute.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: links property"
        }
    ],
    "the-location-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "location",
            "slug": "API/Document/location",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/location",
            "summary": "The Document.location read-only property returns a Location object, which contains information about the URL of the document and provides methods for changing that URL and loading another URL.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: location property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "Location",
            "slug": "API/Location",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Location",
            "summary": "The Location interface represents the location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the Document and Window interface have such a linked Location, accessible via Document.location and Window.location respectively.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Location"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "location",
            "slug": "API/Window/location",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/location",
            "summary": "The Window.location read-only property returns a Location object with information about the current location of the document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7",
                    "flags": [
                        {
                            "type": "runtime_flag",
                            "name": "--location",
                            "value_to_set": "<desired origin>"
                        }
                    ]
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 57, single quotes contained in URLs were escaped when accessed via URL APIs. See <a href='https://bugzil.la/1386683'>bug 1386683</a>."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: location property"
        }
    ],
    "dom-document-open-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "open",
            "slug": "API/Document/open",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/open",
            "summary": "The Document.open() method opens a document for writing.",
            "support": {
                "chrome": [
                    {
                        "version_added": "64"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "64",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "51"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "51",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "47"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "47",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "safari": [
                    {
                        "version_added": "11"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "11",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "64",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ]
            },
            "title": "Document: open() method"
        }
    ],
    "dom-document-plugins-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "plugins",
            "slug": "API/Document/plugins",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/plugins",
            "summary": "The plugins read-only property of the Document interface returns an HTMLCollection object containing one or more HTMLEmbedElements representing the <embed> elements in the current document.",
            "support": {
                "chrome": [
                    {
                        "version_added": "64"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "64",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "51"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "51",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "47"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "47",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "safari": [
                    {
                        "version_added": "10.1"
                    },
                    {
                        "version_added": "3",
                        "version_removed": "10.1",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "10.3"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "10.3",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "64",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ]
            },
            "title": "Document: plugins property"
        }
    ],
    "current-document-readiness": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "readyState",
            "slug": "API/Document/readyState",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState",
            "summary": "The Document.readyState property describes the loading state of the document. When the value of this property changes, a readystatechange event fires on the document object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": "mirror",
                "ie": [
                    {
                        "version_added": "11"
                    },
                    {
                        "version_added": "9",
                        "version_removed": "11",
                        "notes": "Internet Explorer 9 and 10 have bugs where the 'interactive' state can be fired too early before the document has finished parsing."
                    },
                    {
                        "version_added": "4",
                        "version_removed": "9",
                        "partial_implementation": true,
                        "notes": "Only supports 'complete'."
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "11",
                    "notes": "Opera Presto fires 'complete' late after the 'load' event (in an incorrect order as per HTML5 standard specification)."
                },
                "opera_android": {
                    "version_added": "11",
                    "notes": "Opera Presto fires 'complete' late after the 'load' event (in an incorrect order as per HTML5 standard specification)."
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: readyState property"
        }
    ],
    "event-readystatechange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "readystatechange_event",
            "slug": "API/Document/readystatechange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/readystatechange_event",
            "summary": "The readystatechange event is fired when the readyState attribute of a document has changed.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: readystatechange event"
        }
    ],
    "dom-document-referrer-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "referrer",
            "slug": "API/Document/referrer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/referrer",
            "summary": "The Document.referrer property returns the URI of the page that linked to this page.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: referrer property"
        }
    ],
    "dom-document-scripts-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "scripts",
            "slug": "API/Document/scripts",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/scripts",
            "summary": "The scripts property of the Document interface returns a list of the <script> elements in the document. The returned object is an HTMLCollection.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: scripts property"
        }
    ],
    "handler-onscroll": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "scroll_event",
            "slug": "API/Document/scroll_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/scroll_event",
            "summary": "The scroll event fires when the document view has been scrolled. To detect when scrolling has completed, see the Document: scrollend event. For element scrolling, see Element: scroll event.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: scroll event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "scroll_event",
            "slug": "API/Element/scroll_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll_event",
            "summary": "The scroll event fires when an element has been scrolled. To detect when scrolling has completed, see the Element: scrollend event.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: scroll event"
        }
    ],
    "handler-onscrollend": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/Document.json",
            "name": "scrollend_event",
            "slug": "API/Document/scrollend_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/scrollend_event",
            "summary": "The scrollend event fires when the document view has completed scrolling. Scrolling is considered completed when the scroll position has no more pending updates and the user has completed their gesture.",
            "support": {
                "chrome": {
                    "version_added": "114"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "109"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "114"
                }
            },
            "title": "Document: scrollend event"
        },
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/Element.json",
            "name": "scrollend_event",
            "slug": "API/Element/scrollend_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollend_event",
            "summary": "The scrollend event fires when element scrolling has completed. Scrolling is considered completed when the scroll position has no more pending updates and the user has completed their gesture.",
            "support": {
                "chrome": {
                    "version_added": "114"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "109"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "114"
                }
            },
            "title": "Element: scrollend event"
        }
    ],
    "document.title": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "title",
            "slug": "API/Document/title",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/title",
            "summary": "The document.title property gets or sets the current title of the document. When present, it defaults to the value of the <title>.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document: title property"
        }
    ],
    "event-visibilitychange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "visibilitychange_event",
            "slug": "API/Document/visibilitychange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilitychange_event",
            "summary": "The visibilitychange event is fired at the document when the contents of its tab have become visible or have been hidden.",
            "support": {
                "chrome": [
                    {
                        "version_added": "62"
                    },
                    {
                        "version_added": "33",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    },
                    {
                        "version_added": "13",
                        "prefix": "webkit",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10",
                    "partial_implementation": true,
                    "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "49"
                    },
                    {
                        "version_added": "20",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    },
                    {
                        "version_added": "15",
                        "prefix": "webkit",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "15",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "46"
                    },
                    {
                        "version_added": "20",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    },
                    {
                        "version_added": "14",
                        "prefix": "webkit",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "14",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    }
                ],
                "safari": [
                    {
                        "version_added": "14.1"
                    },
                    {
                        "version_added": "14",
                        "partial_implementation": true,
                        "notes": "Doesn't fire the <code>visibilitychange</code> event when navigating away from a document, so also include code to check for the <code>pagehide</code> event (which does fire for that case in all current browsers). See WebKit bugs <a href='https://webkit.org/b/116769'>116769</a>, <a href='https://webkit.org/b/151234'>151234</a>, <a href='https://webkit.org/b/151610'>151610</a>, and <a href='https://webkit.org/b/194897'>194897</a>."
                    },
                    {
                        "version_added": "10.1",
                        "partial_implementation": true,
                        "notes": [
                            "Doesn't fire the <code>visibilitychange</code> event when navigating away from a document, so also include code to check for the <code>pagehide</code> event (which does fire for that case in all current browsers). See WebKit bugs <a href='https://webkit.org/b/116769'>116769</a>, <a href='https://webkit.org/b/151234'>151234</a>, <a href='https://webkit.org/b/151610'>151610</a>, and <a href='https://webkit.org/b/194897'>194897</a>.",
                            "Before Safari 14, the event does not bubble, so <code>document.addEventListener('visibilitychange', ...)</code> works, but <code>window.addEventListener('visibilitychange', ...)</code> does not."
                        ]
                    },
                    {
                        "version_added": "7",
                        "partial_implementation": true,
                        "notes": [
                            "Doesn't fire the <code>visibilitychange</code> event when navigating away from a document, so also include code to check for the <code>pagehide</code> event (which does fire for that case in all current browsers). See WebKit bugs <a href='https://webkit.org/b/116769'>116769</a>, <a href='https://webkit.org/b/151234'>151234</a>, <a href='https://webkit.org/b/151610'>151610</a>, and <a href='https://webkit.org/b/194897'>194897</a>.",
                            "Before Safari 14, the event does not bubble, so <code>document.addEventListener('visibilitychange', ...)</code> works, but <code>window.addEventListener('visibilitychange', ...)</code> does not.",
                            "The <code>onvisibilitychange</code> event handler property is not supported."
                        ]
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": [
                    {
                        "version_added": "62"
                    },
                    {
                        "version_added": "4.4.3",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    },
                    {
                        "version_added": "37",
                        "prefix": "webkit",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": "79",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    },
                    {
                        "version_added": "79",
                        "prefix": "webkit",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    }
                ]
            },
            "title": "Document: visibilitychange event"
        }
    ],
    "handler-onvisibilitychange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "visibilitychange_event",
            "slug": "API/Document/visibilitychange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilitychange_event",
            "summary": "The visibilitychange event is fired at the document when the contents of its tab have become visible or have been hidden.",
            "support": {
                "chrome": [
                    {
                        "version_added": "62"
                    },
                    {
                        "version_added": "33",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    },
                    {
                        "version_added": "13",
                        "prefix": "webkit",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10",
                    "partial_implementation": true,
                    "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "49"
                    },
                    {
                        "version_added": "20",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    },
                    {
                        "version_added": "15",
                        "prefix": "webkit",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "15",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "46"
                    },
                    {
                        "version_added": "20",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    },
                    {
                        "version_added": "14",
                        "prefix": "webkit",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "14",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    }
                ],
                "safari": [
                    {
                        "version_added": "14.1"
                    },
                    {
                        "version_added": "14",
                        "partial_implementation": true,
                        "notes": "Doesn't fire the <code>visibilitychange</code> event when navigating away from a document, so also include code to check for the <code>pagehide</code> event (which does fire for that case in all current browsers). See WebKit bugs <a href='https://webkit.org/b/116769'>116769</a>, <a href='https://webkit.org/b/151234'>151234</a>, <a href='https://webkit.org/b/151610'>151610</a>, and <a href='https://webkit.org/b/194897'>194897</a>."
                    },
                    {
                        "version_added": "10.1",
                        "partial_implementation": true,
                        "notes": [
                            "Doesn't fire the <code>visibilitychange</code> event when navigating away from a document, so also include code to check for the <code>pagehide</code> event (which does fire for that case in all current browsers). See WebKit bugs <a href='https://webkit.org/b/116769'>116769</a>, <a href='https://webkit.org/b/151234'>151234</a>, <a href='https://webkit.org/b/151610'>151610</a>, and <a href='https://webkit.org/b/194897'>194897</a>.",
                            "Before Safari 14, the event does not bubble, so <code>document.addEventListener('visibilitychange', ...)</code> works, but <code>window.addEventListener('visibilitychange', ...)</code> does not."
                        ]
                    },
                    {
                        "version_added": "7",
                        "partial_implementation": true,
                        "notes": [
                            "Doesn't fire the <code>visibilitychange</code> event when navigating away from a document, so also include code to check for the <code>pagehide</code> event (which does fire for that case in all current browsers). See WebKit bugs <a href='https://webkit.org/b/116769'>116769</a>, <a href='https://webkit.org/b/151234'>151234</a>, <a href='https://webkit.org/b/151610'>151610</a>, and <a href='https://webkit.org/b/194897'>194897</a>.",
                            "Before Safari 14, the event does not bubble, so <code>document.addEventListener('visibilitychange', ...)</code> works, but <code>window.addEventListener('visibilitychange', ...)</code> does not.",
                            "The <code>onvisibilitychange</code> event handler property is not supported."
                        ]
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": [
                    {
                        "version_added": "62"
                    },
                    {
                        "version_added": "4.4.3",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    },
                    {
                        "version_added": "37",
                        "prefix": "webkit",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": "79",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    },
                    {
                        "version_added": "79",
                        "prefix": "webkit",
                        "partial_implementation": true,
                        "notes": "The <code>onvisibilitychange</code> event handler property is not supported."
                    }
                ]
            },
            "title": "Document: visibilitychange event"
        }
    ],
    "dom-document-visibilitystate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "visibilityState",
            "slug": "API/Document/visibilityState",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/visibilityState",
            "summary": "The Document.visibilityState read-only property returns the visibility of the document, that is in which context this element is now visible. It is useful to know if the document is in the background or an invisible tab, or only loaded for pre-rendering.",
            "support": {
                "chrome": [
                    {
                        "version_added": "33"
                    },
                    {
                        "version_added": "13",
                        "prefix": "webkit"
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "18"
                    },
                    {
                        "version_added": "10",
                        "version_removed": "52",
                        "prefix": "moz"
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "20"
                    },
                    {
                        "version_added": "15",
                        "prefix": "webkit"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "15"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "20"
                    },
                    {
                        "version_added": "14",
                        "prefix": "webkit"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "14"
                    }
                ],
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": [
                    {
                        "version_added": "4.4.3"
                    },
                    {
                        "version_added": "37",
                        "prefix": "webkit"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": "79",
                        "prefix": "webkit"
                    }
                ]
            },
            "title": "Document: visibilityState property"
        }
    ],
    "dom-document-write-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "write",
            "slug": "API/Document/write",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/write",
            "summary": "The document.write() method writes a string of text to a document stream opened by document.open().",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "document: write() method"
        }
    ],
    "dom-document-writeln-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "writeln",
            "slug": "API/Document/writeln",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document/writeln",
            "summary": "Writes a string of text followed by a newline character to a document.",
            "support": {
                "chrome": [
                    {
                        "version_added": "64"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "64",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "51"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "51",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "47"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "47",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "safari": [
                    {
                        "version_added": "11"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "11",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "64",
                        "partial_implementation": true,
                        "notes": "Only supported for <a href='https://developer.mozilla.org/docs/Web/API/HTMLDocument'><code>HTMLDocument</code></a>, not all <code>Document</code> objects."
                    }
                ]
            },
            "title": "document: writeln() method"
        }
    ],
    "the-document-object": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Document.json",
            "name": "Document",
            "slug": "API/Document",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Document",
            "summary": "The Document interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document"
        }
    ],
    "the-dragevent-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DragEvent.json",
            "name": "DragEvent",
            "slug": "API/DragEvent/DragEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DragEvent/DragEvent",
            "summary": "This constructor is used to create a synthetic DragEvent object.",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DragEvent: DragEvent() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DragEvent.json",
            "name": "DragEvent",
            "slug": "API/DragEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DragEvent",
            "summary": "The DragEvent interface is a DOM event that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element). Applications are free to interpret a drag and drop interaction in an application-specific way.",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9",
                    "notes": "Before Internet Explorer 10, <code>DragEvent</code> is exposed in standards mode but not quirks mode."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DragEvent"
        }
    ],
    "dom-dragevent-datatransfer-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DragEvent.json",
            "name": "dataTransfer",
            "slug": "API/DragEvent/dataTransfer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DragEvent/dataTransfer",
            "summary": "The DragEvent.dataTransfer property holds the drag operation's data (as a DataTransfer object).",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10",
                    "partial_implementation": true,
                    "notes": "The value is always <code>null</code>."
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DragEvent: dataTransfer property"
        }
    ],
    "handler-onauxclick": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/Element.json",
            "name": "auxclick_event",
            "slug": "API/Element/auxclick_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/auxclick_event",
            "summary": "The auxclick event is fired at an Element when a non-primary pointing device button (any mouse button other than the primary—usually leftmost—button) has been pressed and released both within the same element.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53",
                    "notes": "Starting in Firefox 68, the <code>auxclick</code> event is used to trigger the <em>new tab on middle-click</em> action; previously, this had been done with the <code>click</code> event. Apps can prevent middle-click from opening new tabs (or middle-click to paste, if that feature is enabled) by intercepting <code>auxclick</code> on links, and <code>auxclick</code> event handlers can now open popups without triggering the popup blocker."
                },
                "firefox_android": {
                    "version_added": "53"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: auxclick event"
        }
    ],
    "event-beforematch": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/Element.json",
            "name": "beforematch_event",
            "slug": "API/Element/beforematch_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/beforematch_event",
            "summary": "An element receives a beforematch event when it is in the hidden until found state and the browser is about to reveal its content because the user has found the content through the \"find in page\" feature or through fragment navigation.",
            "support": {
                "chrome": {
                    "version_added": "102"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": false
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "102"
                }
            },
            "title": "Element: beforematch event"
        }
    ],
    "handler-onblur": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "blur_event",
            "slug": "API/Element/blur_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/blur_event",
            "summary": "The blur event fires when an element has lost focus. The event does not bubble, but the related focusout event that follows does bubble.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "24"
                    },
                    {
                        "version_added": "6",
                        "version_removed": "24",
                        "notes": "The interface for this event is <a href='https://developer.mozilla.org/docs/Web/API/Event'><code>Event</code></a>, not <a href='https://developer.mozilla.org/docs/Web/API/FocusEvent'><code>FocusEvent</code></a>."
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: blur event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "blur_event",
            "slug": "API/Window/blur_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/blur_event",
            "summary": "The blur event fires when an element has lost focus.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6",
                    "notes": [
                        "Apart from firing the event on <code>window</code> as other browsers do, Firefox also fires the event on the <code>document</code> object. See <a href='https://bugzil.la/1228802'>bug 1228802</a>.",
                        "Before Firefox 24, the interface for this event is a plain <a href='https://developer.mozilla.org/docs/Web/API/Event'><code>Event</code></a>, not <a href='https://developer.mozilla.org/docs/Web/API/FocusEvent'><code>FocusEvent</code></a>."
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: blur event"
        }
    ],
    "handler-onclick": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "click_event",
            "slug": "API/Element/click_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/click_event",
            "summary": "An element receives a click event when a pointing device button (such as a mouse's primary mouse button) is both pressed and released while the pointer is located inside the element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6",
                    "notes": "Beginning in Firefox 68, Firefox no longer incorrectly sends a <code>click</code> event for buttons other than the primary mouse button; previously, there were circumstances in which this would occur. One example: middle-clicking a link would send a <code>click</code> to the document's <code>&lt;html&gt;</code> element."
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: click event"
        }
    ],
    "handler-oncopy": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "copy_event",
            "slug": "API/Element/copy_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/copy_event",
            "summary": "The copy event fires when the user initiates a copy action through the browser's user interface.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9",
                    "notes": "Before Internet Explorer 9, this event is not supported via <code>addEventListener</code>; however, the event handler is supported since IE 5.5. The event can be listened to via <code>element.oncopy</code>."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: copy event"
        }
    ],
    "handler-oncut": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "cut_event",
            "slug": "API/Element/cut_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/cut_event",
            "summary": "The cut event is fired when the user has initiated a \"cut\" action through the browser's user interface.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9",
                    "notes": "Before Internet Explorer 9, this event is not supported via <code>addEventListener</code>; however, the event handler is supported since IE 5.5. The event can be listened to via <code>element.oncopy</code>."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: cut event"
        }
    ],
    "handler-ondblclick": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "dblclick_event",
            "slug": "API/Element/dblclick_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/dblclick_event",
            "summary": "The dblclick event fires when a pointing device button (such as a mouse's primary button) is double-clicked; that is, when it's rapidly clicked twice on a single element within a very short span of time.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6",
                    "notes": "Starting in Firefox 68, <code>dblclick</code> events are only sent for the primary mouse button, per the specification."
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: dblclick event"
        }
    ],
    "handler-onfocus": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "focus_event",
            "slug": "API/Element/focus_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/focus_event",
            "summary": "The focus event fires when an element has received focus. The event does not bubble, but the related focusin event that follows does bubble.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "24"
                    },
                    {
                        "version_added": "6",
                        "version_removed": "24",
                        "notes": "The interface for this event is <a href='https://developer.mozilla.org/docs/Web/API/Event'><code>Event</code></a>, not <a href='https://developer.mozilla.org/docs/Web/API/FocusEvent'><code>FocusEvent</code></a>."
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: focus event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "focus_event",
            "slug": "API/Window/focus_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/focus_event",
            "summary": "The focus event fires when an element has received focus.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6",
                    "notes": [
                        "Apart from firing the event on <code>window</code> as other browsers do, Firefox also fires the event on the <code>document</code> object. See <a href='https://bugzil.la/1228802'>bug 1228802</a>.",
                        "Before Firefox 24, the interface for this event is a plain <a href='https://developer.mozilla.org/docs/Web/API/Event'><code>Event</code></a>, not <a href='https://developer.mozilla.org/docs/Web/API/FocusEvent'><code>FocusEvent</code></a>."
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: focus event"
        }
    ],
    "handler-onkeydown": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "keydown_event",
            "slug": "API/Element/keydown_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event",
            "summary": "The keydown event is fired when a key is pressed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: keydown event"
        }
    ],
    "handler-onkeyup": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "keyup_event",
            "slug": "API/Element/keyup_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/keyup_event",
            "summary": "The keyup event is fired when a key is released.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: keyup event"
        }
    ],
    "handler-onmousedown": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "mousedown_event",
            "slug": "API/Element/mousedown_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/mousedown_event",
            "summary": "The mousedown event is fired at an Element when a pointing device button is pressed while the pointer is inside the element.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: mousedown event"
        }
    ],
    "handler-onmouseenter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "mouseenter_event",
            "slug": "API/Element/mouseenter_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseenter_event",
            "summary": "The mouseenter event is fired at an Element when a pointing device (usually a mouse) is initially moved so that its hotspot is within the element at which the event was fired.",
            "support": {
                "chrome": {
                    "version_added": "30"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "10"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: mouseenter event"
        }
    ],
    "handler-onmouseleave": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "mouseleave_event",
            "slug": "API/Element/mouseleave_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseleave_event",
            "summary": "The mouseleave event is fired at an Element when the cursor of a pointing device (usually a mouse) is moved out of it.",
            "support": {
                "chrome": {
                    "version_added": "30"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "10"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: mouseleave event"
        }
    ],
    "handler-onmousemove": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "mousemove_event",
            "slug": "API/Element/mousemove_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/mousemove_event",
            "summary": "The mousemove event is fired at an element when a pointing device (usually a mouse) is moved while the cursor's hotspot is inside it.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: mousemove event"
        }
    ],
    "handler-onmouseout": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "mouseout_event",
            "slug": "API/Element/mouseout_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseout_event",
            "summary": "The mouseout event is fired at an Element when a pointing device (usually a mouse) is used to move the cursor so that it is no longer contained within the element or one of its children.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: mouseout event"
        }
    ],
    "handler-onmouseover": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "mouseover_event",
            "slug": "API/Element/mouseover_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseover_event",
            "summary": "The mouseover event is fired at an Element when a pointing device (such as a mouse or trackpad) is used to move the cursor onto the element or one of its child elements.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: mouseover event"
        }
    ],
    "handler-onmouseup": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "mouseup_event",
            "slug": "API/Element/mouseup_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/mouseup_event",
            "summary": "The mouseup event is fired at an Element when a button on a pointing device (such as a mouse or trackpad) is released while the pointer is located inside it.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: mouseup event"
        }
    ],
    "handler-onpaste": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "paste_event",
            "slug": "API/Element/paste_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/paste_event",
            "summary": "The paste event is fired when the user has initiated a \"paste\" action through the browser's user interface.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9",
                    "notes": [
                        "Before Internet Explorer 11, copying files does not trigger the <code>paste</code> event.",
                        "Before Internet Explorer 9, this event is not supported via <code>addEventListener</code>; however, the event handler is supported since IE 5.5. The event can be listened to via <code>element.oncopy</code>."
                    ]
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: paste event"
        }
    ],
    "handler-onsecuritypolicyviolation": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "securitypolicyviolation_event",
            "slug": "API/Element/securitypolicyviolation_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/securitypolicyviolation_event",
            "summary": "The securitypolicyviolation event is fired when a Content Security Policy is violated.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: securitypolicyviolation event"
        }
    ],
    "handler-onwheel": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Element.json",
            "name": "wheel_event",
            "slug": "API/Element/wheel_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Element/wheel_event",
            "summary": "The wheel event fires when the user rotates a wheel button on a pointing device (typically a mouse).",
            "support": {
                "chrome": {
                    "version_added": "31"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "17"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9",
                    "notes": "The <code>onwheel</code> event handler property is not supported. To listen to this event, use <code>element.addEventListener('wheel', function() {});</code>. See <a href='https://connect.microsoft.com/IE/feedback/details/782835/missing-onwheel-attribute-for-the-wheel-event-although-its-supported-via-addeventlistener'>IE bug 782835</a>."
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": {
                    "version_added": false
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Element: wheel event"
        }
    ],
    "dom-elementinternals-checkvalidity": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ElementInternals.json",
            "name": "checkValidity",
            "slug": "API/ElementInternals/checkValidity",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/checkValidity",
            "summary": "The checkValidity() method of the ElementInternals interface checks if the element meets any constraint validation rules applied to it.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "98"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ElementInternals: checkValidity() method"
        }
    ],
    "dom-elementinternals-form": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ElementInternals.json",
            "name": "form",
            "slug": "API/ElementInternals/form",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/form",
            "summary": "The form read-only property of the ElementInternals interface returns the HTMLFormElement associated with this element.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "98"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ElementInternals: form property"
        }
    ],
    "dom-elementinternals-labels": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ElementInternals.json",
            "name": "labels",
            "slug": "API/ElementInternals/labels",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/labels",
            "summary": "The labels read-only property of the ElementInternals interface returns the labels associated with the element.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "98"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ElementInternals: labels property"
        }
    ],
    "dom-elementinternals-reportvalidity": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ElementInternals.json",
            "name": "reportValidity",
            "slug": "API/ElementInternals/reportValidity",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/reportValidity",
            "summary": "The reportValidity() method of the ElementInternals interface checks if the element meets any constraint validation rules applied to it.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "98"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ElementInternals: reportValidity() method"
        }
    ],
    "dom-elementinternals-setformvalue": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ElementInternals.json",
            "name": "setFormValue",
            "slug": "API/ElementInternals/setFormValue",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/setFormValue",
            "summary": "The setFormValue() method of the ElementInternals interface sets the element's submission value and state, communicating these to the user agent.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "98"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ElementInternals: setFormValue() method"
        }
    ],
    "dom-elementinternals-setvalidity": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ElementInternals.json",
            "name": "setValidity",
            "slug": "API/ElementInternals/setValidity",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/setValidity",
            "summary": "The setValidity() method of the ElementInternals interface sets the validity of the element.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "98"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ElementInternals: setValidity() method"
        }
    ],
    "dom-elementinternals-shadowroot": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ElementInternals.json",
            "name": "shadowRoot",
            "slug": "API/ElementInternals/shadowRoot",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/shadowRoot",
            "summary": "The shadowRoot read-only property of the ElementInternals interface returns the ShadowRoot for this element.",
            "support": {
                "chrome": {
                    "version_added": "88"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "93"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "88"
                }
            },
            "title": "ElementInternals: shadowRoot property"
        }
    ],
    "dom-elementinternals-validationmessage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ElementInternals.json",
            "name": "validationMessage",
            "slug": "API/ElementInternals/validationMessage",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/validationMessage",
            "summary": "The validationMessage read-only property of the ElementInternals interface returns the validation message for the element.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "98"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ElementInternals: validationMessage property"
        }
    ],
    "dom-elementinternals-validity": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ElementInternals.json",
            "name": "validity",
            "slug": "API/ElementInternals/validity",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/validity",
            "summary": "The validity read-only property of the ElementInternals interface returns a ValidityState object which represents the different validity states the element can be in, with respect to constraint validation.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "98"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ElementInternals: validity property"
        }
    ],
    "dom-elementinternals-willvalidate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ElementInternals.json",
            "name": "willValidate",
            "slug": "API/ElementInternals/willValidate",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals/willValidate",
            "summary": "The willValidate read-only property of the ElementInternals interface returns true if the element is a submittable element that is a candidate for constraint validation.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "98"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ElementInternals: willValidate property"
        }
    ],
    "the-elementinternals-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ElementInternals.json",
            "name": "ElementInternals",
            "slug": "API/ElementInternals",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ElementInternals",
            "summary": "The ElementInternals interface of the Document Object Model gives web developers a way to allow custom elements to fully participate in HTML forms. It provides utilities for working with these elements in the same way you would work with any standard HTML form element, and also exposes the Accessibility Object Model to the element.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "93"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4",
                    "notes": "See <a href='https://webkit.org/b/197960'>bug 197960</a>."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ElementInternals"
        }
    ],
    "the-errorevent-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ErrorEvent.json",
            "name": "ErrorEvent",
            "slug": "API/ErrorEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ErrorEvent",
            "summary": "The ErrorEvent interface represents events providing information related to errors in scripts or in files.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "27"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ErrorEvent"
        }
    ],
    "dom-eventsource-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "EventSource",
            "slug": "API/EventSource/EventSource",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/EventSource/EventSource",
            "summary": "The EventSource() constructor returns a newly-created EventSource, which represents a remote resource.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource: EventSource() constructor"
        }
    ],
    "dom-eventsource-close-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "close",
            "slug": "API/EventSource/close",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/EventSource/close",
            "summary": "The close() method of the EventSource interface closes the connection, if one is made, and sets the EventSource.readyState attribute to 2 (closed).",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource: close() method"
        }
    ],
    "event-error": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "error_event",
            "slug": "API/EventSource/error_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/EventSource/error_event",
            "summary": "The error event of the EventSource API is fired when a connection with an event source fails to be opened.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource: error event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "error_event",
            "slug": "API/Window/error_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/error_event",
            "summary": "The error event is fired on a Window object when a resource failed to load or couldn't be used — for example if a script has an execution error.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: error event"
        }
    ],
    "handler-eventsource-onerror": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "error_event",
            "slug": "API/EventSource/error_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/EventSource/error_event",
            "summary": "The error event of the EventSource API is fired when a connection with an event source fails to be opened.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource: error event"
        }
    ],
    "handler-eventsource-onmessage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "message_event",
            "slug": "API/EventSource/message_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/EventSource/message_event",
            "summary": "The message event of the EventSource API is fired when data is received through an event source.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource: message event"
        }
    ],
    "event-open": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "open_event",
            "slug": "API/EventSource/open_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/EventSource/open_event",
            "summary": "The open event of the EventSource API is fired when a connection with an event source is opened.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource: open event"
        }
    ],
    "handler-eventsource-onopen": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "open_event",
            "slug": "API/EventSource/open_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/EventSource/open_event",
            "summary": "The open event of the EventSource API is fired when a connection with an event source is opened.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource: open event"
        }
    ],
    "dom-eventsource-readystate-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "readyState",
            "slug": "API/EventSource/readyState",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/EventSource/readyState",
            "summary": "The readyState read-only property of the EventSource interface returns a number representing the state of the connection.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource: readyState property"
        }
    ],
    "dom-eventsource-url-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "url",
            "slug": "API/EventSource/url",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/EventSource/url",
            "summary": "The url read-only property of the EventSource interface returns a string representing the URL of the source.",
            "support": {
                "chrome": {
                    "version_added": "18"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource: url property"
        }
    ],
    "dom-eventsource-withcredentials-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "withCredentials",
            "slug": "API/EventSource/withCredentials",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/EventSource/withCredentials",
            "summary": "The withCredentials read-only property of the EventSource interface returns a boolean value indicating whether the EventSource object was instantiated with CORS credentials set.",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource: withCredentials property"
        }
    ],
    "the-eventsource-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/EventSource.json",
            "name": "EventSource",
            "slug": "API/EventSource",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/EventSource",
            "summary": "The EventSource interface is web content's interface to server-sent events.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "EventSource"
        }
    ],
    "dom-input-files-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/FileList.json",
            "name": "FileList",
            "slug": "API/FileList",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/FileList",
            "summary": "An object of this type is returned by the files property of the HTML <input> element; this lets you access the list of files selected with the <input type=\"file\"> element. It's also used for a list of files dropped into web content when using the drag and drop API; see the DataTransfer object for details on this usage.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "FileList"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "files",
            "slug": "API/HTMLInputElement/files",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/files",
            "summary": "The HTMLInputElement.files property allows you to access the FileList selected with the <input type=\"file\"> element.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10",
                    "partial_implementation": true,
                    "notes": "This property is read-only."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLInputElement: files property"
        }
    ],
    "the-formdataevent-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/FormDataEvent.json",
            "name": "FormDataEvent",
            "slug": "API/FormDataEvent/FormDataEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/FormDataEvent/FormDataEvent",
            "summary": "The FormDataEvent() constructor creates a new FormDataEvent object.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "72"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "FormDataEvent: FormDataEvent() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/FormDataEvent.json",
            "name": "FormDataEvent",
            "slug": "API/FormDataEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/FormDataEvent",
            "summary": "The FormDataEvent interface represents a formdata event — such an event is fired on an HTMLFormElement object after the entry list representing the form's data is constructed. This happens when the form is submitted, but can also be triggered by the invocation of a FormData() constructor.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "72"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "FormDataEvent"
        }
    ],
    "the-formdataevent-interface:dom-formdataevent-formdata-2": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/FormDataEvent.json",
            "name": "formData",
            "slug": "API/FormDataEvent/formData",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/FormDataEvent/formData",
            "summary": "The formData read-only property of the FormDataEvent interface contains the FormData object representing the data contained in the form when the event was fired.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "72"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "FormDataEvent: formData property"
        }
    ],
    "dom-a-download": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAnchorElement.json",
            "name": "download",
            "slug": "API/HTMLAnchorElement/download",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/download",
            "summary": "The HTMLAnchorElement.download property is a string indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value, if any, specifies the default file name for use in labeling the resource in a local file system. If the name is not a valid file name in the underlying OS, the browser will adjust it.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "20"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAnchorElement: download property"
        }
    ],
    "dom-hyperlink-hash-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAnchorElement.json",
            "name": "hash",
            "slug": "API/HTMLAnchorElement/hash",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/hash",
            "summary": "The HTMLAnchorElement.hash property returns a string containing a '#' followed by the fragment identifier of the URL.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "From Firefox 29 to Firefox 40, the returned value was incorrectly percent-decoded."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAnchorElement: hash property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAreaElement.json",
            "name": "hash",
            "slug": "API/HTMLAreaElement/hash",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/hash",
            "summary": "The HTMLAreaElement.hash property returns a string containing a '#' followed by the fragment identifier of the URL.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "From Firefox 29 to Firefox 40, the returned value was incorrectly percent-decoded."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAreaElement: hash property"
        }
    ],
    "dom-hyperlink-host-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAnchorElement.json",
            "name": "host",
            "slug": "API/HTMLAnchorElement/host",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/host",
            "summary": "The HTMLAnchorElement.host property is a string containing the host, that is the hostname, and then, if the port of the URL is nonempty, a ':', and the port of the URL.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5",
                    "notes": "In Internet Explorer 9, the host of an <a href='https://developer.mozilla.org/docs/Web/HTML/Element/a'><code>&lt;a&gt;</code></a> always include the port (e.g. <code>developer.mozilla.org:443</code>), even if there is no explicit port in the <code>href</code> attribute value."
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAnchorElement: host property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAreaElement.json",
            "name": "host",
            "slug": "API/HTMLAreaElement/host",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/host",
            "summary": "The HTMLAreaElement.host property is a string containing the host, that is the hostname, and then, if the port of the URL is nonempty, a ':', and the port of the URL.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5",
                    "notes": "In Internet Explorer 9, the host of an <a href='https://developer.mozilla.org/docs/Web/HTML/Element/a'><code>&lt;a&gt;</code></a> always include the port (e.g. <code>developer.mozilla.org:443</code>), even if there is no explicit port in the <code>href</code> attribute value."
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAreaElement: host property"
        }
    ],
    "dom-hyperlink-hostname-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAnchorElement.json",
            "name": "hostname",
            "slug": "API/HTMLAnchorElement/hostname",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/hostname",
            "summary": "The HTMLAnchorElement.hostname property is a string containing the domain of the URL.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAnchorElement: hostname property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAreaElement.json",
            "name": "hostname",
            "slug": "API/HTMLAreaElement/hostname",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/hostname",
            "summary": "The HTMLAreaElement.hostname property is a string containing the domain of the URL.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAreaElement: hostname property"
        }
    ],
    "dom-hyperlink-href-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAnchorElement.json",
            "name": "href",
            "slug": "API/HTMLAnchorElement/href",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/href",
            "summary": "The HTMLAnchorElement.href property is a stringifier that returns a string containing the whole URL, and allows the href to be updated.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAnchorElement: href property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAnchorElement.json",
            "name": "toString",
            "slug": "API/HTMLAnchorElement/toString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/toString",
            "summary": "The HTMLAnchorElement.toString() stringifier method returns a string containing the whole URL. It is a read-only version of HTMLAnchorElement.href.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAnchorElement: toString() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAreaElement.json",
            "name": "href",
            "slug": "API/HTMLAreaElement/href",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/href",
            "summary": "The HTMLAreaElement.href property is a stringifier that returns a string containing the whole URL, and allows the href to be updated.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAreaElement: href property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAreaElement.json",
            "name": "toString",
            "slug": "API/HTMLAreaElement/toString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/toString",
            "summary": "The HTMLAreaElement.toString() stringifier method returns a string containing the whole URL. It is a read-only version of HTMLAreaElement.href.",
            "support": {
                "chrome": {
                    "version_added": "32"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAreaElement: toString() method"
        }
    ],
    "dom-hyperlink-origin-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAnchorElement.json",
            "name": "origin",
            "slug": "API/HTMLAnchorElement/origin",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/origin",
            "summary": "The HTMLAnchorElement.origin read-only property is a string containing the Unicode serialization of the origin of the represented URL.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "26",
                    "notes": "Before Firefox 49, results for URL using the <code>blob</code> scheme incorrectly returned <code>null</code>."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAnchorElement: origin property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAreaElement.json",
            "name": "origin",
            "slug": "API/HTMLAreaElement/origin",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/origin",
            "summary": "The HTMLAreaElement.origin read-only property is a string containing the Unicode serialization of the origin of the represented URL.",
            "support": {
                "chrome": {
                    "version_added": "32"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "26",
                    "notes": "Before Firefox 49, results for URL using the <code>blob</code> scheme incorrectly returned <code>null</code>."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAreaElement: origin property"
        }
    ],
    "dom-hyperlink-password-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAnchorElement.json",
            "name": "password",
            "slug": "API/HTMLAnchorElement/password",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/password",
            "summary": "The HTMLAnchorElement.password property is a string containing the password specified before the domain name.",
            "support": {
                "chrome": {
                    "version_added": "32"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "26"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAnchorElement: password property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAreaElement.json",
            "name": "password",
            "slug": "API/HTMLAreaElement/password",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/password",
            "summary": "The HTMLAreaElement.password property is a string containing the password specified before the domain name.",
            "support": {
                "chrome": {
                    "version_added": "32"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "26"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAreaElement: password property"
        }
    ],
    "dom-hyperlink-pathname-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAnchorElement.json",
            "name": "pathname",
            "slug": "API/HTMLAnchorElement/pathname",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/pathname",
            "summary": "The HTMLAnchorElement.pathname property is a string containing an initial '/' followed by the path of the URL not including the query string or fragment (or the empty string if there is no path).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 53, the <code>pathname</code> and <code>search</code> <code>HTMLHyperlinkElementUtils</code> properties returned the wrong parts of the URL. For example, for a URL of <code>http://z.com/x?a=true&amp;b=false</code>, <code>pathname</code> would return <code>'/x?a=true&amp;b=false'</code> and <code>search</code> would return '', rather than <code>'/x'</code> and <code>'?a=true&amp;b=false'</code> respectively. This has now been fixed."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAnchorElement: pathname property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAreaElement.json",
            "name": "pathname",
            "slug": "API/HTMLAreaElement/pathname",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/pathname",
            "summary": "The HTMLAreaElement.pathname property is a string containing an initial '/' followed by the path of the URL not including the query string or fragment (or the empty string if there is no path).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 53, the <code>pathname</code> and <code>search</code> <code>HTMLHyperlinkElementUtils</code> properties returned the wrong parts of the URL. For example, for a URL of <code>http://z.com/x?a=true&amp;b=false</code>, <code>pathname</code> would return <code>'/x?a=true&amp;b=false'</code> and <code>search</code> would return '', rather than <code>'/x'</code> and <code>'?a=true&amp;b=false'</code> respectively. This has now been fixed."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAreaElement: pathname property"
        }
    ],
    "dom-hyperlink-port-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAnchorElement.json",
            "name": "port",
            "slug": "API/HTMLAnchorElement/port",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/port",
            "summary": "The HTMLAnchorElement.port property is a string containing the port number of the URL. If the URL does not contain an explicit port number, it will be set to ''.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAnchorElement: port property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAreaElement.json",
            "name": "port",
            "slug": "API/HTMLAreaElement/port",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/port",
            "summary": "The HTMLAreaElement.port property is a string containing the port number of the URL. If the URL does not contain an explicit port number, it will be set to ''.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAreaElement: port property"
        }
    ],
    "dom-hyperlink-protocol-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAnchorElement.json",
            "name": "protocol",
            "slug": "API/HTMLAnchorElement/protocol",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/protocol",
            "summary": "The HTMLAnchorElement.protocol property is a string representing the protocol scheme of the URL, including the final ':'.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAnchorElement: protocol property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAreaElement.json",
            "name": "protocol",
            "slug": "API/HTMLAreaElement/protocol",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/protocol",
            "summary": "The HTMLAreaElement.protocol property is a string representing the protocol scheme of the URL, including the final ':'.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAreaElement: protocol property"
        }
    ],
    "dom-a-referrerpolicy": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAnchorElement.json",
            "name": "referrerPolicy",
            "slug": "API/HTMLAnchorElement/referrerPolicy",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/referrerPolicy",
            "summary": "The HTMLAnchorElement.referrerPolicy property reflect the HTML referrerpolicy attribute of the <a> element defining which referrer is sent when fetching the resource.",
            "support": {
                "chrome": [
                    {
                        "version_added": "52"
                    },
                    {
                        "alternative_name": "referrerpolicy",
                        "version_added": "51",
                        "version_removed": "52"
                    }
                ],
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "alternative_name": "referrerpolicy",
                        "version_added": false,
                        "version_removed": "52"
                    }
                ]
            },
            "title": "HTMLAnchorElement: referrerPolicy property"
        }
    ],
    "dom-a-rel": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAnchorElement.json",
            "name": "rel",
            "slug": "API/HTMLAnchorElement/rel",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/rel",
            "summary": "The HTMLAnchorElement.rel property reflects the rel attribute. It is a string containing a space-separated list of link types indicating the relationship between the resource represented by the <a> element and the current document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAnchorElement: rel property"
        }
    ],
    "dom-a-rellist": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAnchorElement.json",
            "name": "relList",
            "slug": "API/HTMLAnchorElement/relList",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/relList",
            "summary": "The HTMLAnchorElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the <a> element and the current document.",
            "support": {
                "chrome": {
                    "version_added": "65"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "30"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAnchorElement: relList property"
        }
    ],
    "dom-hyperlink-search-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAnchorElement.json",
            "name": "search",
            "slug": "API/HTMLAnchorElement/search",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/search",
            "summary": "The HTMLAnchorElement.search property is a search string, also called a query string, that is a string containing a '?' followed by the parameters of the URL.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 53, the <code>pathname</code> and <code>search</code> <code>HTMLHyperlinkElementUtils</code> properties returned the wrong parts of the URL. For example, for a URL of <code>http://z.com/x?a=true&amp;b=false</code>, <code>pathname</code> would return <code>'/x?a=true&amp;b=false'</code> and <code>search</code> would return '', rather than <code>'/x'</code> and <code>'?a=true&amp;b=false'</code> respectively. This has now been fixed."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAnchorElement: search property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAreaElement.json",
            "name": "search",
            "slug": "API/HTMLAreaElement/search",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/search",
            "summary": "The HTMLAreaElement.search property is a search string, also called a query string, that is a string containing a '?' followed by the parameters of the URL.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 53, the <code>pathname</code> and <code>search</code> <code>HTMLHyperlinkElementUtils</code> properties returned the wrong parts of the URL. For example, for a URL of <code>http://z.com/x?a=true&amp;b=false</code>, <code>pathname</code> would return <code>'/x?a=true&amp;b=false'</code> and <code>search</code> would return '', rather than <code>'/x'</code> and <code>'?a=true&amp;b=false'</code> respectively. This has now been fixed."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAreaElement: search property"
        }
    ],
    "dom-hyperlink-username-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAnchorElement.json",
            "name": "username",
            "slug": "API/HTMLAnchorElement/username",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/username",
            "summary": "The HTMLAnchorElement.username property is a string containing the username specified before the domain name.",
            "support": {
                "chrome": {
                    "version_added": "32"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "26"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAnchorElement: username property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAreaElement.json",
            "name": "username",
            "slug": "API/HTMLAreaElement/username",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/username",
            "summary": "The HTMLAreaElement.username property is a string containing the username specified before the domain name.",
            "support": {
                "chrome": {
                    "version_added": "32"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "26"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAreaElement: username property"
        }
    ],
    "htmlanchorelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAnchorElement.json",
            "name": "HTMLAnchorElement",
            "slug": "API/HTMLAnchorElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement",
            "summary": "The HTMLAnchorElement interface represents hyperlink elements and provides special properties and methods (beyond those of the regular HTMLElement object interface that they inherit from) for manipulating the layout and presentation of such elements. This interface corresponds to <a> element; not to be confused with <link>, which is represented by HTMLLinkElement)",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAnchorElement"
        }
    ],
    "dom-area-referrerpolicy": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAreaElement.json",
            "name": "referrerPolicy",
            "slug": "API/HTMLAreaElement/referrerPolicy",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/referrerPolicy",
            "summary": "The HTMLAreaElement.referrerPolicy property reflect the HTML referrerpolicy attribute of the <area> element defining which referrer is sent when fetching the resource.",
            "support": {
                "chrome": [
                    {
                        "version_added": "52"
                    },
                    {
                        "alternative_name": "referrerpolicy",
                        "version_added": "51",
                        "version_removed": "52"
                    }
                ],
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "alternative_name": "referrerpolicy",
                        "version_added": false,
                        "version_removed": "52"
                    }
                ]
            },
            "title": "HTMLAreaElement: referrerPolicy property"
        }
    ],
    "dom-area-rel": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAreaElement.json",
            "name": "rel",
            "slug": "API/HTMLAreaElement/rel",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/rel",
            "summary": "The HTMLAreaElement.rel property reflects the rel attribute. It is a string containing a space-separated list of link types indicating the relationship between the resource represented by the <area> element and the current document.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "30"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAreaElement: rel property"
        }
    ],
    "dom-area-rellist": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAreaElement.json",
            "name": "relList",
            "slug": "API/HTMLAreaElement/relList",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement/relList",
            "summary": "The HTMLAreaElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the <area> element and the current document.",
            "support": {
                "chrome": {
                    "version_added": "65"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "30"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAreaElement: relList property"
        }
    ],
    "htmlareaelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAreaElement.json",
            "name": "HTMLAreaElement",
            "slug": "API/HTMLAreaElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAreaElement",
            "summary": "The HTMLAreaElement interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <area> elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAreaElement"
        }
    ],
    "dom-audio-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAudioElement.json",
            "name": "Audio",
            "slug": "API/HTMLAudioElement/Audio",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement/Audio",
            "summary": "The Audio() constructor creates and returns a new HTMLAudioElement which can be either attached to a document for the user to interact with and/or listen to, or can be used offscreen to manage and play audio.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAudioElement: Audio() constructor"
        }
    ],
    "htmlaudioelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLAudioElement.json",
            "name": "HTMLAudioElement",
            "slug": "API/HTMLAudioElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAudioElement",
            "summary": "The HTMLAudioElement interface provides access to the properties of <audio> elements, as well as methods to manipulate them.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAudioElement"
        }
    ],
    "htmlbrelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLBRElement.json",
            "name": "HTMLBRElement",
            "slug": "API/HTMLBRElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLBRElement",
            "summary": "The HTMLBRElement interface represents an HTML line break element (<br>). It inherits from HTMLElement.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLBRElement"
        }
    ],
    "htmlbaseelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLBaseElement.json",
            "name": "HTMLBaseElement",
            "slug": "API/HTMLBaseElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLBaseElement",
            "summary": "The HTMLBaseElement interface contains the base URI for a document. This object inherits all of the properties and methods as described in the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLBaseElement"
        }
    ],
    "htmlbodyelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLBodyElement.json",
            "name": "HTMLBodyElement",
            "slug": "API/HTMLBodyElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLBodyElement",
            "summary": "The HTMLBodyElement interface provides special properties (beyond those inherited from the regular HTMLElement interface) for manipulating <body> elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLBodyElement"
        }
    ],
    "dom-fe-disabled": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLButtonElement.json",
            "name": "disabled",
            "slug": "API/HTMLButtonElement/disabled",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/disabled",
            "summary": "The HTMLButtonElement.disabled property indicates whether the control is disabled, meaning that it does not accept any clicks.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLButtonElement: disabled property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "disabled",
            "slug": "API/HTMLSelectElement/disabled",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/disabled",
            "summary": "The HTMLSelectElement.disabled property is a boolean value that reflects the disabled HTML attribute, which indicates whether the control is disabled. If it is disabled, it does not accept clicks. A disabled element is unusable and un-clickable.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSelectElement: disabled property"
        }
    ],
    "dom-lfe-labels-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLButtonElement.json",
            "name": "labels",
            "slug": "API/HTMLButtonElement/labels",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/labels",
            "summary": "The HTMLButtonElement.labels read-only property returns a NodeList of the <label> elements associated with the <button> element.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLButtonElement: labels property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "labels",
            "slug": "API/HTMLInputElement/labels",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/labels",
            "summary": "The HTMLInputElement.labels read-only property returns a NodeList of the <label> elements associated with the <input> element, if the element is not hidden. If the element has the type hidden, the property returns null.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLInputElement: labels property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMeterElement.json",
            "name": "labels",
            "slug": "API/HTMLMeterElement/labels",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement/labels",
            "summary": "The HTMLMeterElement.labels read-only property returns a NodeList of the <label> elements associated with the <meter> element.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMeterElement: labels property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLOutputElement.json",
            "name": "labels",
            "slug": "API/HTMLOutputElement/labels",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement/labels",
            "summary": "The HTMLOutputElement.labels read-only property returns a NodeList of the <label> elements associated with the <output> element.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLOutputElement: labels property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLProgressElement.json",
            "name": "labels",
            "slug": "API/HTMLProgressElement/labels",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement/labels",
            "summary": "The HTMLProgressElement.labels read-only property returns a NodeList of the <label> elements associated with the <progress> element.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLProgressElement: labels property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "labels",
            "slug": "API/HTMLSelectElement/labels",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/labels",
            "summary": "The HTMLSelectElement.labels read-only property returns a NodeList of the <label> elements associated with the <select> element.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSelectElement: labels property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTextAreaElement.json",
            "name": "labels",
            "slug": "API/HTMLTextAreaElement/labels",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/labels",
            "summary": "The HTMLTextAreaElement.labels read-only property returns a NodeList of the <label> elements associated with the <textarea> element.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTextAreaElement: labels property"
        }
    ],
    "dom-popovertargetaction": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/HTMLButtonElement.json",
            "name": "popoverTargetAction",
            "slug": "API/HTMLButtonElement/popoverTargetAction",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/popoverTargetAction",
            "summary": "The popoverTargetAction property of the HTMLButtonElement interface gets and sets the action to be performed (\"hide\", \"show\", or \"toggle\") on a popover element being controlled by a button.",
            "support": {
                "chrome": {
                    "version_added": "114"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "114",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.element.popover.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "17"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "114"
                }
            },
            "title": "HTMLButtonElement: popoverTargetAction property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "popoverTargetAction",
            "slug": "API/HTMLInputElement/popoverTargetAction",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/popoverTargetAction",
            "summary": "The popoverTargetAction property of the HTMLInputElement interface gets and sets the action to be performed (\"hide\", \"show\", or \"toggle\") on a popover element being controlled by an <input> element of type=\"button\".",
            "support": {
                "chrome": {
                    "version_added": "114"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "114",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.element.popover.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "17"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "114"
                }
            },
            "title": "HTMLInputElement: popoverTargetAction property"
        }
    ],
    "dom-popovertargetelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/HTMLButtonElement.json",
            "name": "popoverTargetElement",
            "slug": "API/HTMLButtonElement/popoverTargetElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement/popoverTargetElement",
            "summary": "The popoverTargetElement property of the HTMLButtonElement interface gets and sets the popover element to control via a button.",
            "support": {
                "chrome": {
                    "version_added": "114"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "114",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.element.popover.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "17"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "114"
                }
            },
            "title": "HTMLButtonElement: popoverTargetElement property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "popoverTargetElement",
            "slug": "API/HTMLInputElement/popoverTargetElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/popoverTargetElement",
            "summary": "The popoverTargetElement property of the HTMLInputElement interface gets and sets the popover element to control via an <input> element of type=\"button\".",
            "support": {
                "chrome": {
                    "version_added": "114"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "114",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.element.popover.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "17"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "114"
                }
            },
            "title": "HTMLInputElement: popoverTargetElement property"
        }
    ],
    "htmlbuttonelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLButtonElement.json",
            "name": "HTMLButtonElement",
            "slug": "API/HTMLButtonElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLButtonElement",
            "summary": "The HTMLButtonElement interface provides properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <button> elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLButtonElement"
        }
    ],
    "event-contextlost": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/HTMLCanvasElement.json",
            "name": "contextlost_event",
            "slug": "API/HTMLCanvasElement/webglcontextlost_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/webglcontextlost_event",
            "summary": "The webglcontextlost event of the WebGL API is fired if the user agent detects that the drawing buffer associated with a WebGLRenderingContext object has been lost.",
            "support": {
                "chrome": {
                    "version_added": "98"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "98"
                }
            },
            "title": "HTMLCanvasElement: webglcontextlost event"
        }
    ],
    "event-contextrestored": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/HTMLCanvasElement.json",
            "name": "contextrestored_event",
            "slug": "API/HTMLCanvasElement/contextrestored_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/contextrestored_event",
            "summary": "The contextrestored event of the Canvas API is fired if the user agent restores the backing storage for a CanvasRenderingContext2D.",
            "support": {
                "chrome": {
                    "version_added": "98"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "98"
                }
            },
            "title": "HTMLCanvasElement: contextrestored event"
        }
    ],
    "dom-canvas-getcontext-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLCanvasElement.json",
            "name": "getContext",
            "slug": "API/HTMLCanvasElement/getContext",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext",
            "summary": "The HTMLCanvasElement.getContext() method returns a drawing context on the canvas, or null if the context identifier is not supported, or the canvas has already been set to a different context mode.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLCanvasElement: getContext() method"
        }
    ],
    "dom-canvas-height": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLCanvasElement.json",
            "name": "height",
            "slug": "API/HTMLCanvasElement/height",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height",
            "summary": "The HTMLCanvasElement.height property is a positive integer reflecting the height HTML attribute of the <canvas> element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 150 is used.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLCanvasElement: height property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLCanvasElement.json",
            "name": "width",
            "slug": "API/HTMLCanvasElement/width",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width",
            "summary": "The HTMLCanvasElement.width property is a positive integer reflecting the width HTML attribute of the <canvas> element interpreted in CSS pixels. When the attribute is not specified, or if it is set to an invalid value, like a negative, the default value of 300 is used.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLCanvasElement: width property"
        }
    ],
    "dom-canvas-toblob-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLCanvasElement.json",
            "name": "toBlob",
            "slug": "API/HTMLCanvasElement/toBlob",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob",
            "summary": "The HTMLCanvasElement.toBlob() method creates a Blob object representing the image contained in the canvas. This file may be cached on the disk or stored in memory at the discretion of the user agent.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "18"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10",
                    "prefix": "ms"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLCanvasElement: toBlob() method"
        }
    ],
    "dom-canvas-todataurl-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLCanvasElement.json",
            "name": "toDataURL",
            "slug": "API/HTMLCanvasElement/toDataURL",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL",
            "summary": "The HTMLCanvasElement.toDataURL() method returns a data URL containing a representation of the image in the format specified by the type parameter.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLCanvasElement: toDataURL() method"
        }
    ],
    "dom-canvas-transfercontroltooffscreen-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLCanvasElement.json",
            "name": "transferControlToOffscreen",
            "slug": "API/HTMLCanvasElement/transferControlToOffscreen",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/transferControlToOffscreen",
            "summary": "The HTMLCanvasElement.transferControlToOffscreen() method transfers control to an OffscreenCanvas object, either on the main thread or on a worker.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "105"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLCanvasElement: transferControlToOffscreen() method"
        }
    ],
    "htmlcanvaselement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLCanvasElement.json",
            "name": "HTMLCanvasElement",
            "slug": "API/HTMLCanvasElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement",
            "summary": "The HTMLCanvasElement interface provides properties and methods for manipulating the layout and presentation of <canvas> elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLCanvasElement"
        }
    ],
    "htmldlistelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDListElement.json",
            "name": "HTMLDListElement",
            "slug": "API/HTMLDListElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDListElement",
            "summary": "The HTMLDListElement interface provides special properties (beyond those of the regular HTMLElement interface it also has available to it by inheritance) for manipulating definition list (<dl>) elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDListElement"
        }
    ],
    "dom-data-value": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDataElement.json",
            "name": "value",
            "slug": "API/HTMLDataElement/value",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataElement/value",
            "summary": "The value property of the HTMLDataElement interface returns a string reflecting the value HTML attribute.",
            "support": {
                "chrome": {
                    "version_added": "62"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDataElement: value property"
        }
    ],
    "htmldataelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDataElement.json",
            "name": "HTMLDataElement",
            "slug": "API/HTMLDataElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataElement",
            "summary": "The HTMLDataElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <data> elements.",
            "support": {
                "chrome": {
                    "version_added": "62"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDataElement"
        }
    ],
    "htmldatalistelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDataListElement.json",
            "name": "HTMLDataListElement",
            "slug": "API/HTMLDataListElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDataListElement",
            "summary": "The HTMLDataListElement interface provides special properties (beyond the HTMLElement object interface it also has available to it by inheritance) to manipulate <datalist> elements and their content.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "12.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDataListElement"
        }
    ],
    "dom-details-open": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDetailsElement.json",
            "name": "open",
            "slug": "API/HTMLDetailsElement/open",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement/open",
            "summary": "The open property of the HTMLDetailsElement interface is a boolean value reflecting the open HTML attribute, indicating whether the <details>'s contents (not counting the <summary>) is to be shown to the user.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDetailsElement: open property"
        }
    ],
    "event-toggle": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDetailsElement.json",
            "name": "toggle_event",
            "slug": "API/HTMLDetailsElement/toggle_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement/toggle_event",
            "summary": "The toggle event fires when the open/closed state of a <details> element is toggled.",
            "support": {
                "chrome": {
                    "version_added": "36"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDetailsElement: toggle event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/HTMLElement.json",
            "name": "toggle_event",
            "slug": "API/HTMLElement/toggle_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/toggle_event",
            "summary": "The toggle event of the HTMLElement interface fires on a popover element (i.e. one that has a valid popover attribute) just after it is shown or hidden.",
            "support": {
                "chrome": {
                    "version_added": "114"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "114",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.element.popover.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "preview"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "114"
                }
            },
            "title": "HTMLElement: toggle event"
        }
    ],
    "htmldetailselement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDetailsElement.json",
            "name": "HTMLDetailsElement",
            "slug": "API/HTMLDetailsElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDetailsElement",
            "summary": "The HTMLDetailsElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <details> elements.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDetailsElement"
        }
    ],
    "event-cancel": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDialogElement.json",
            "name": "cancel_event",
            "slug": "API/HTMLDialogElement/cancel_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/cancel_event",
            "summary": "The cancel event fires on a <dialog> when the user instructs the browser that they wish to dismiss the current open dialog. The browser fires this event when the user presses the Esc key.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "98"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDialogElement: cancel event"
        }
    ],
    "handler-oncancel": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDialogElement.json",
            "name": "cancel_event",
            "slug": "API/HTMLDialogElement/cancel_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/cancel_event",
            "summary": "The cancel event fires on a <dialog> when the user instructs the browser that they wish to dismiss the current open dialog. The browser fires this event when the user presses the Esc key.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "98"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDialogElement: cancel event"
        }
    ],
    "dom-dialog-close-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDialogElement.json",
            "name": "close",
            "slug": "API/HTMLDialogElement/close",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/close",
            "summary": "The close() method of the HTMLDialogElement interface closes the <dialog>. An optional string may be passed as an argument, updating the returnValue of the dialog.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "98"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDialogElement: close() method"
        }
    ],
    "event-close": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDialogElement.json",
            "name": "close_event",
            "slug": "API/HTMLDialogElement/close_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/close_event",
            "summary": "The close event is fired on an HTMLDialogElement object when the <dialog> it represents has been closed.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "98"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDialogElement: close event"
        }
    ],
    "dom-dialog-open": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDialogElement.json",
            "name": "open",
            "slug": "API/HTMLDialogElement/open",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/open",
            "summary": "The open property of the HTMLDialogElement interface is a boolean value reflecting the open HTML attribute, indicating whether the <dialog> is available for interaction.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "98"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDialogElement: open property"
        }
    ],
    "dom-dialog-returnvalue-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDialogElement.json",
            "name": "returnValue",
            "slug": "API/HTMLDialogElement/returnValue",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/returnValue",
            "summary": "The returnValue property of the HTMLDialogElement interface gets or sets the return value for the <dialog>, usually to indicate which button the user pressed to close it.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "98"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDialogElement: returnValue property"
        }
    ],
    "dom-dialog-show-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDialogElement.json",
            "name": "show",
            "slug": "API/HTMLDialogElement/show",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/show",
            "summary": "The show() method of the HTMLDialogElement interface displays the dialog modelessly, i.e. still allowing interaction with content outside of the dialog.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "98"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDialogElement: show() method"
        }
    ],
    "dom-dialog-showmodal-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDialogElement.json",
            "name": "showModal",
            "slug": "API/HTMLDialogElement/showModal",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement/showModal",
            "summary": "The showModal() method of the HTMLDialogElement interface displays the dialog as a modal, over the top of any other dialogs that might be present. It displays in the top layer, along with a ::backdrop pseudo-element. Interaction outside the dialog is blocked and the content outside it is rendered inert.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "98"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDialogElement: showModal() method"
        }
    ],
    "htmldialogelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDialogElement.json",
            "name": "HTMLDialogElement",
            "slug": "API/HTMLDialogElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDialogElement",
            "summary": "The HTMLDialogElement interface provides methods to manipulate <dialog> elements. It inherits properties and methods from the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "98"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDialogElement"
        }
    ],
    "htmldivelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDivElement.json",
            "name": "HTMLDivElement",
            "slug": "API/HTMLDivElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDivElement",
            "summary": "The HTMLDivElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <div> elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDivElement"
        }
    ],
    "htmldocument": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLDocument.json",
            "name": "HTMLDocument",
            "slug": "API/HTMLDocument",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLDocument",
            "summary": "For historical reasons, Window objects have a window.HTMLDocument property whose value is the Document interface. So you can think of HTMLDocument as an alias for Document, and you can find documentation for HTMLDocument members under the documentation for the Document interface.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLDocument"
        }
    ],
    "dom-accesskey": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "accessKey",
            "slug": "API/HTMLElement/accessKey",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/accessKey",
            "summary": "The HTMLElement.accessKey property sets the keystroke which a user can press to jump to a given element.",
            "support": {
                "chrome": {
                    "version_added": "17"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: accessKey property"
        }
    ],
    "dom-accesskeylabel": [
        {
            "engines": [
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "accessKeyLabel",
            "slug": "API/HTMLElement/accessKeyLabel",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/accessKeyLabel",
            "summary": "The HTMLElement.accessKeyLabel read-only property returns a string containing the element's browser-assigned access key (if any); otherwise it returns an empty string.",
            "support": {
                "chrome": {
                    "version_added": false,
                    "notes": "See <a href='https://crbug.com/393466'>bug 393466</a>."
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "8"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": false,
                    "notes": "See <a href='https://crbug.com/393466'>bug 393466</a>."
                }
            },
            "title": "HTMLElement: accessKeyLabel property"
        }
    ],
    "dom-attachinternals": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "attachInternals",
            "slug": "API/HTMLElement/attachInternals",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/attachInternals",
            "summary": "The HTMLElement.attachInternals() method returns an ElementInternals object. This method allows a custom element to participate in HTML forms. The ElementInternals interface provides utilities for working with these elements in the same way you would work with any standard HTML form element, and also exposes the Accessibility Object Model to the element.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "93"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4",
                    "notes": "See <a href='https://webkit.org/b/197960'>bug 197960</a>."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: attachInternals() method"
        }
    ],
    "event-beforetoggle": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/HTMLElement.json",
            "name": "beforetoggle_event",
            "slug": "API/HTMLElement/beforetoggle_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/beforetoggle_event",
            "summary": "The beforetoggle event of the HTMLElement interface fires on a popover element (i.e. one that has a valid popover attribute) just before it is shown or hidden.",
            "support": {
                "chrome": {
                    "version_added": "114"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "114",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.element.popover.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "preview"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "114"
                }
            },
            "title": "HTMLElement: beforetoggle event"
        }
    ],
    "dom-blur-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "blur",
            "slug": "API/HTMLElement/blur",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/blur",
            "summary": "The HTMLElement.blur() method removes keyboard focus from the current element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: blur() method"
        }
    ],
    "event-change": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "change_event",
            "slug": "API/HTMLElement/change_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event",
            "summary": "The change event is fired for <input>, <select>, and <textarea> elements when the user modifies the element's value. Unlike the input event, the change event is not necessarily fired for each alteration to an element's value.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: change event"
        }
    ],
    "handler-onchange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "change_event",
            "slug": "API/HTMLElement/change_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event",
            "summary": "The change event is fired for <input>, <select>, and <textarea> elements when the user modifies the element's value. Unlike the input event, the change event is not necessarily fired for each alteration to an element's value.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: change event"
        }
    ],
    "dom-click-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "click",
            "slug": "API/HTMLElement/click",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click",
            "summary": "The HTMLElement.click() method simulates a mouse click on an element.",
            "support": {
                "chrome": {
                    "version_added": "9",
                    "notes": "Before Chrome 19, <code>click()</code> is only defined on buttons and inputs."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3",
                    "notes": [
                        "Before Firefox 5, <code>click()</code> is only defined on buttons and inputs, and has no effect on text and file inputs.",
                        "Starting in Firefox 75, the <code>click()</code> function works even when the element is not attached to a DOM tree."
                    ]
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": [
                        "Before Firefox 5, <code>click()</code> is only defined on buttons and inputs, and has no effect on text and file inputs.",
                        "Starting in Firefox for Android 79, the <code>click()</code> function works even when the element is not attached to a DOM tree."
                    ]
                },
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "1.0",
                    "notes": "Before Samsung Internet 1.5, <code>click()</code> is only defined on buttons and inputs."
                },
                "webview_android": {
                    "version_added": "4.4",
                    "notes": "Before Android WebView 4.4, <code>click()</code> is only defined on buttons and inputs."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before Chrome 19, <code>click()</code> is only defined on buttons and inputs."
                }
            },
            "title": "HTMLElement: click() method"
        }
    ],
    "contenteditable": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "contentEditable",
            "slug": "API/HTMLElement/contentEditable",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/contentEditable",
            "summary": "The contentEditable property of the HTMLElement interface specifies whether or not the element is editable.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: contentEditable property"
        }
    ],
    "dom-dataset-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "dataset",
            "slug": "API/HTMLElement/dataset",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset",
            "summary": "The dataset read-only property of the HTMLElement interface provides read/write access to custom data attributes (data-*) on elements. It exposes a map of strings (DOMStringMap) with an entry for each data-* attribute.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: dataset property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/SVGElement.json",
            "name": "dataset",
            "slug": "API/SVGElement/dataset",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGElement/dataset",
            "summary": "The dataset read-only property of the HTMLElement interface provides read/write access to custom data attributes (data-*) on elements. It exposes a map of strings (DOMStringMap) with an entry for each data-* attribute.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "51"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "41"
                },
                "opera_android": {
                    "version_added": "41"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: dataset property"
        }
    ],
    "dom-dir": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "dir",
            "slug": "API/HTMLElement/dir",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dir",
            "summary": "The HTMLElement.dir property gets or sets the text writing directionality of the content of the current element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: dir property"
        }
    ],
    "ix-handler-ondrag": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "drag_event",
            "slug": "API/HTMLElement/drag_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event",
            "summary": "The drag event is fired every few hundred milliseconds as an element or text selection is being dragged by the user.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: drag event"
        }
    ],
    "event-dnd-drag": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "drag_event",
            "slug": "API/HTMLElement/drag_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drag_event",
            "summary": "The drag event is fired every few hundred milliseconds as an element or text selection is being dragged by the user.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: drag event"
        }
    ],
    "ix-handler-ondragend": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "dragend_event",
            "slug": "API/HTMLElement/dragend_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event",
            "summary": "The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: dragend event"
        }
    ],
    "event-dnd-dragend": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "dragend_event",
            "slug": "API/HTMLElement/dragend_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragend_event",
            "summary": "The dragend event is fired when a drag operation is being ended (by releasing a mouse button or hitting the escape key).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: dragend event"
        }
    ],
    "ix-handler-ondragenter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "dragenter_event",
            "slug": "API/HTMLElement/dragenter_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event",
            "summary": "The dragenter event is fired when a dragged element or text selection enters a valid drop target.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: dragenter event"
        }
    ],
    "event-dnd-dragenter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "dragenter_event",
            "slug": "API/HTMLElement/dragenter_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragenter_event",
            "summary": "The dragenter event is fired when a dragged element or text selection enters a valid drop target.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: dragenter event"
        }
    ],
    "ix-handler-ondragleave": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "dragleave_event",
            "slug": "API/HTMLElement/dragleave_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event",
            "summary": "The dragleave event is fired when a dragged element or text selection leaves a valid drop target.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: dragleave event"
        }
    ],
    "event-dnd-dragleave": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "dragleave_event",
            "slug": "API/HTMLElement/dragleave_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragleave_event",
            "summary": "The dragleave event is fired when a dragged element or text selection leaves a valid drop target.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: dragleave event"
        }
    ],
    "ix-handler-ondragover": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "dragover_event",
            "slug": "API/HTMLElement/dragover_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event",
            "summary": "The dragover event is fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: dragover event"
        }
    ],
    "event-dnd-dragover": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "dragover_event",
            "slug": "API/HTMLElement/dragover_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragover_event",
            "summary": "The dragover event is fired when an element or text selection is being dragged over a valid drop target (every few hundred milliseconds).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: dragover event"
        }
    ],
    "ix-handler-ondragstart": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "dragstart_event",
            "slug": "API/HTMLElement/dragstart_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event",
            "summary": "The dragstart event is fired when the user starts dragging an element or text selection.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: dragstart event"
        }
    ],
    "event-dnd-dragstart": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "dragstart_event",
            "slug": "API/HTMLElement/dragstart_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dragstart_event",
            "summary": "The dragstart event is fired when the user starts dragging an element or text selection.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: dragstart event"
        }
    ],
    "ix-handler-ondrop": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "drop_event",
            "slug": "API/HTMLElement/drop_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event",
            "summary": "The drop event is fired when an element or text selection is dropped on a valid drop target. To ensure that the drop event always fires as expected, you should always include a preventDefault() call in the part of your code which handles the dragover event.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: drop event"
        }
    ],
    "event-dnd-drop": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "drop_event",
            "slug": "API/HTMLElement/drop_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/drop_event",
            "summary": "The drop event is fired when an element or text selection is dropped on a valid drop target. To ensure that the drop event always fires as expected, you should always include a preventDefault() call in the part of your code which handles the dragover event.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: drop event"
        }
    ],
    "dom-enterkeyhint": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "enterKeyHint",
            "slug": "API/HTMLElement/enterKeyHint",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/enterKeyHint",
            "summary": "The enterKeyHint property is an enumerated property defining what action label (or icon) to present for the enter key on virtual keyboards. It reflects the enterkeyhint HTML global attribute and is an enumerated property, only accepting the following values as a string:",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "94"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "13.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: enterKeyHint property"
        }
    ],
    "dom-focus-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "focus",
            "slug": "API/HTMLElement/focus",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus",
            "summary": "The HTMLElement.focus() method sets focus on the specified element, if it can be focused. The focused element is the element that will receive keyboard and similar events by default.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: focus() method"
        }
    ],
    "dom-hidden": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "hidden",
            "slug": "API/HTMLElement/hidden",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/hidden",
            "summary": "The HTMLElement property hidden reflects the value of the element's hidden attribute.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: hidden property"
        }
    ],
    "dom-hidepopover": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/HTMLElement.json",
            "name": "hidePopover",
            "slug": "API/HTMLElement/hidePopover",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/hidePopover",
            "summary": "The hidePopover() method of the HTMLElement interface hides a popover element (i.e. one that has a valid popover attribute) by removing it from the top layer and styling it with display: none.",
            "support": {
                "chrome": {
                    "version_added": "114"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "114",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.element.popover.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "17"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "114"
                }
            },
            "title": "HTMLElement: hidePopover() method"
        }
    ],
    "dom-inert": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "inert",
            "slug": "API/HTMLElement/inert",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert",
            "summary": "The HTMLElement property inert reflects the value of the element's inert attribute. It is a boolean value that, when present, makes the browser \"ignore\" user input events for the element, including focus events and events from assistive technologies. The browser may also ignore page search and text selection in the element. This can be useful when building UIs such as modals where you would want to \"trap\" the focus inside the modal when it's visible.",
            "support": {
                "chrome": {
                    "version_added": "102"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "112"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "102"
                }
            },
            "title": "HTMLElement: inert property"
        }
    ],
    "the-innertext-idl-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "innerText",
            "slug": "API/HTMLElement/innerText",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText",
            "summary": "The innerText property of the HTMLElement interface represents the rendered text content of a node and its descendants.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "45"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.6"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: innerText property"
        }
    ],
    "handler-oninput": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "input_event",
            "slug": "API/HTMLElement/input_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event",
            "summary": "The input event fires when the value of an <input>, <select>, or <textarea> element has been changed.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9",
                    "partial_implementation": true,
                    "notes": "Only supports <code>input</code> of type <code>text</code> and <code>password</code>."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: input event"
        }
    ],
    "dom-inputmode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "inputMode",
            "slug": "API/HTMLElement/inputMode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inputMode",
            "summary": "The HTMLElement property inputMode reflects the value of the element's inputmode attribute.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "95"
                },
                "firefox_android": {
                    "version_added": "79"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "12.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: inputMode property"
        }
    ],
    "dom-iscontenteditable-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "isContentEditable",
            "slug": "API/HTMLElement/isContentEditable",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/isContentEditable",
            "summary": "The HTMLElement.isContentEditable read-only property returns a boolean value that is true if the contents of the element are editable; otherwise it returns false.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: isContentEditable property"
        }
    ],
    "dom-lang": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "lang",
            "slug": "API/HTMLElement/lang",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/lang",
            "summary": "The HTMLElement.lang property gets or sets the base language of an element's attribute values and text content.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: lang property"
        }
    ],
    "dom-noncedelement-nonce": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "partial": [
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "nonce",
            "slug": "API/HTMLElement/nonce",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/nonce",
            "summary": "The nonce property of the HTMLElement interface returns the cryptographic number used once that is used by Content Security Policy to determine whether a given fetch will be allowed to proceed.",
            "support": {
                "chrome": {
                    "version_added": "61"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "75"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10",
                    "partial_implementation": true,
                    "notes": "The property is defined only for its useful elements: <code>&lt;link&gt;</code>, <code>&lt;script&gt;</code>, and <code>&lt;style&gt;</code>; it is undefined for all other elements."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: nonce property"
        }
    ],
    "dom-outertext": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "outerText",
            "slug": "API/HTMLElement/outerText",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/outerText",
            "summary": "The outerText property of the HTMLElement interface returns the same value as HTMLElement.innerText. When used as a setter it replaces the whole current node with the given text (this differs from innerText, which replaces the content inside the current node).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "98"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: outerText property"
        }
    ],
    "dom-popover": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/HTMLElement.json",
            "name": "popover",
            "slug": "API/HTMLElement/popover",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/popover",
            "summary": "The popover property of the HTMLElement interface gets and sets an element's popover state via JavaScript (\"auto\" or \"manual\"), and can be used for feature detection.",
            "support": {
                "chrome": {
                    "version_added": "114"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "114",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.element.popover.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "17"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "114"
                }
            },
            "title": "HTMLElement: popover property"
        }
    ],
    "dom-showpopover": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/HTMLElement.json",
            "name": "showPopover",
            "slug": "API/HTMLElement/showPopover",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/showPopover",
            "summary": "The showPopover() method of the HTMLElement interface shows a popover element (i.e. one that has a valid popover attribute) by adding it to the top layer.",
            "support": {
                "chrome": {
                    "version_added": "114"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "114",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.element.popover.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "17"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "114"
                }
            },
            "title": "HTMLElement: showPopover() method"
        }
    ],
    "dom-tabindex": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "tabIndex",
            "slug": "API/HTMLElement/tabIndex",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/tabIndex",
            "summary": "The tabIndex property of the HTMLElement interface represents the tab order of the current element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5",
                    "partial_implementation": true,
                    "notes": "Returns incorrect value for elements without an explicit tabindex attribute. See <a href='https://developer.microsoft.com/microsoft-edge/platform/issues/4365703/'>issue 4365703</a> for details."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: tabIndex property"
        }
    ],
    "dom-title": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "title",
            "slug": "API/HTMLElement/title",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/title",
            "summary": "The HTMLElement.title property represents the title of the element: the text usually displayed in a 'tooltip' popup when the mouse is over the node.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement: title property"
        }
    ],
    "dom-togglepopover": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/HTMLElement.json",
            "name": "togglePopover",
            "slug": "API/HTMLElement/togglePopover",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/togglePopover",
            "summary": "The togglePopover() method of the HTMLElement interface toggles a popover element (i.e. one that has a valid popover attribute) between the hidden and showing states.",
            "support": {
                "chrome": {
                    "version_added": "114"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "114",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.element.popover.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "17"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "114"
                }
            },
            "title": "HTMLElement: togglePopover() method"
        }
    ],
    "htmlelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLElement.json",
            "name": "HTMLElement",
            "slug": "API/HTMLElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement",
            "summary": "The HTMLElement interface represents any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLElement"
        }
    ],
    "htmlembedelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLEmbedElement.json",
            "name": "HTMLEmbedElement",
            "slug": "API/HTMLEmbedElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLEmbedElement",
            "summary": "The HTMLEmbedElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <embed> elements.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Starting with Chrome 58, this interface can no longer be called as a function."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1",
                    "notes": "Starting with Opera 45, this interface can no longer be called as a function."
                },
                "opera_android": {
                    "version_added": "12.1",
                    "notes": "Starting with Opera 45, this interface can no longer be called as a function."
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Starting with Chrome 58, this interface can no longer be called as a function."
                }
            },
            "title": "HTMLEmbedElement"
        }
    ],
    "htmlfieldsetelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFieldSetElement.json",
            "name": "HTMLFieldSetElement",
            "slug": "API/HTMLFieldSetElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFieldSetElement",
            "summary": "The HTMLFieldSetElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <fieldset> elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFieldSetElement"
        }
    ],
    "dom-htmlformcontrolscollection-nameditem-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormControlsCollection.json",
            "name": "namedItem",
            "slug": "API/HTMLFormControlsCollection/namedItem",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection/namedItem",
            "summary": "The HTMLFormControlsCollection.namedItem() method returns the RadioNodeList or the Element in the collection whose name or id match the specified name, or null if no node matches.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "33"
                    },
                    {
                        "version_added": "27",
                        "version_removed": "33",
                        "partial_implementation": true,
                        "notes": "Returned a <a href='https://developer.mozilla.org/docs/Web/API/NodeList'><code>NodeList</code></a> instead of a <a href='https://developer.mozilla.org/docs/Web/API/RadioNodeList'><code>RadioNodeList</code></a>."
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormControlsCollection: namedItem() method"
        }
    ],
    "htmlformcontrolscollection": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormControlsCollection.json",
            "name": "HTMLFormControlsCollection",
            "slug": "API/HTMLFormControlsCollection",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormControlsCollection",
            "summary": "The HTMLFormControlsCollection interface represents a collection of HTML form control elements, returned by the HTMLFormElement interface's elements property.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormControlsCollection"
        }
    ],
    "dom-form-acceptcharset": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "acceptCharset",
            "slug": "API/HTMLFormElement/acceptCharset",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/acceptCharset",
            "summary": "The HTMLFormElement.acceptCharset property represents a list of the supported character encodings for the given <form> element. This list can be comma-separated or space-separated.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement: acceptCharset property"
        }
    ],
    "dom-fs-action": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "action",
            "slug": "API/HTMLFormElement/action",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/action",
            "summary": "The HTMLFormElement.action property represents the action of the <form> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement: action property"
        }
    ],
    "dom-form-elements-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "elements",
            "slug": "API/HTMLFormElement/elements",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/elements",
            "summary": "The HTMLFormElement property elements returns an HTMLFormControlsCollection listing all the form controls contained in the <form> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement: elements property"
        }
    ],
    "dom-fs-encoding": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "encoding",
            "slug": "API/HTMLFormElement/encoding",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/encoding",
            "summary": "The HTMLFormElement.encoding property is an alternative name for the enctype element on the DOM HTMLFormElement object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement: encoding property"
        }
    ],
    "dom-fs-enctype": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "enctype",
            "slug": "API/HTMLFormElement/enctype",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/enctype",
            "summary": "The HTMLFormElement.enctype property is the MIME type of content that is used to submit the form to the server. Possible values are:",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement: enctype property"
        }
    ],
    "event-formdata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "formdata_event",
            "slug": "API/HTMLFormElement/formdata_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/formdata_event",
            "summary": "The formdata event fires after the entry list representing the form's data is constructed. This happens when the form is submitted, but can also be triggered by the invocation of a FormData() constructor.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "72"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement: formdata event"
        }
    ],
    "dom-form-length-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "length",
            "slug": "API/HTMLFormElement/length",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/length",
            "summary": "The HTMLFormElement.length read-only property returns the number of controls in the <form> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement: length property"
        }
    ],
    "dom-fs-method": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "method",
            "slug": "API/HTMLFormElement/method",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/method",
            "summary": "The HTMLFormElement.method property represents the HTTP method used to submit the <form>.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement: method property"
        }
    ],
    "dom-form-name": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "name",
            "slug": "API/HTMLFormElement/name",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/name",
            "summary": "The HTMLFormElement.name property represents the name of the current <form> element as a string.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement: name property"
        }
    ],
    "dom-cva-reportvalidity-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "reportValidity",
            "slug": "API/HTMLFormElement/reportValidity",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reportValidity",
            "summary": "The HTMLFormElement.reportValidity() method returns true if the element's child controls satisfy their validation constraints. When false is returned, cancelable invalid events are fired for each invalid child and validation problems are reported to the user.",
            "support": {
                "chrome": {
                    "version_added": "40"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement: reportValidity() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "reportValidity",
            "slug": "API/HTMLInputElement/reportValidity",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/reportValidity",
            "summary": "The reportValidity() method of the HTMLInputElement interface performs the same validity checking steps as the checkValidity() method. If the value is invalid, this method also fires the invalid event on the element, and (if the event isn't canceled) reports the problem to the user.",
            "support": {
                "chrome": {
                    "version_added": "40"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": {
                    "version_added": "64"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLInputElement: reportValidity() method"
        }
    ],
    "dom-form-requestsubmit-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "requestSubmit",
            "slug": "API/HTMLFormElement/requestSubmit",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/requestSubmit",
            "summary": "The HTMLFormElement method requestSubmit() requests that the form be submitted using a specific submit button.",
            "support": {
                "chrome": {
                    "version_added": "76"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "75"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement: requestSubmit() method"
        }
    ],
    "dom-form-reset-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "reset",
            "slug": "API/HTMLFormElement/reset",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reset",
            "summary": "The HTMLFormElement.reset() method restores a form element's default values. This method does the same thing as clicking the form's <input type=\"reset\"> control.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement: reset() method"
        }
    ],
    "event-reset": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "reset_event",
            "slug": "API/HTMLFormElement/reset_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reset_event",
            "summary": "The reset event fires when a <form> is reset.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement: reset event"
        }
    ],
    "dom-form-submit-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "submit",
            "slug": "API/HTMLFormElement/submit",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit",
            "summary": "The HTMLFormElement.submit() method submits a given <form>.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement: submit() method"
        }
    ],
    "event-submit": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "submit_event",
            "slug": "API/HTMLFormElement/submit_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit_event",
            "summary": "The submit event fires when a <form> is submitted.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement: submit event"
        }
    ],
    "handler-onsubmit": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "submit_event",
            "slug": "API/HTMLFormElement/submit_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit_event",
            "summary": "The submit event fires when a <form> is submitted.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement: submit event"
        }
    ],
    "dom-fs-target": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "target",
            "slug": "API/HTMLFormElement/target",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/target",
            "summary": "The target property of the HTMLFormElement interface represents the target of the form's action (i.e., the frame in which to render its output).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement: target property"
        }
    ],
    "htmlformelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLFormElement.json",
            "name": "HTMLFormElement",
            "slug": "API/HTMLFormElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement",
            "summary": "The HTMLFormElement interface represents a <form> element in the DOM. It allows access to—and, in some cases, modification of—aspects of the form, as well as access to its component elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLFormElement"
        }
    ],
    "htmlhrelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLHRElement.json",
            "name": "HTMLHRElement",
            "slug": "API/HTMLHRElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHRElement",
            "summary": "The HTMLHRElement interface provides special properties (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating <hr> elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLHRElement"
        }
    ],
    "htmlheadelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLHeadElement.json",
            "name": "HTMLHeadElement",
            "slug": "API/HTMLHeadElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadElement",
            "summary": "The HTMLHeadElement interface contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLHeadElement"
        }
    ],
    "htmlheadingelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLHeadingElement.json",
            "name": "HTMLHeadingElement",
            "slug": "API/HTMLHeadingElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHeadingElement",
            "summary": "The HTMLHeadingElement interface represents the different heading elements, <h1> through <h6>. It inherits methods and properties from the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLHeadingElement"
        }
    ],
    "htmlhtmlelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLHtmlElement.json",
            "name": "HTMLHtmlElement",
            "slug": "API/HTMLHtmlElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLHtmlElement",
            "summary": "The HTMLHtmlElement interface serves as the root node for a given HTML document. This object inherits the properties and methods described in the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLHtmlElement"
        }
    ],
    "dom-iframe-contentdocument": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLIFrameElement.json",
            "name": "contentDocument",
            "slug": "API/HTMLIFrameElement/contentDocument",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentDocument",
            "summary": "If the iframe and the iframe's parent document are Same Origin, returns a Document (that is, the active document in the inline frame's nested browsing context), else returns null.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLIFrameElement: contentDocument property"
        }
    ],
    "dom-iframe-contentwindow": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLIFrameElement.json",
            "name": "contentWindow",
            "slug": "API/HTMLIFrameElement/contentWindow",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentWindow",
            "summary": "The contentWindow property returns the Window object of an HTMLIFrameElement. You can use this Window object to access the iframe's document and its internal DOM. This attribute is read-only, but its properties can be manipulated like the global Window object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLIFrameElement: contentWindow property"
        }
    ],
    "dom-iframe-referrerpolicy": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLIFrameElement.json",
            "name": "referrerPolicy",
            "slug": "API/HTMLIFrameElement/referrerPolicy",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/referrerPolicy",
            "summary": "The HTMLIFrameElement.referrerPolicy property reflects the HTML referrerpolicy attribute of the <iframe> element defining which referrer is sent when fetching the resource.",
            "support": {
                "chrome": [
                    {
                        "version_added": "52"
                    },
                    {
                        "alternative_name": "referrerpolicy",
                        "version_added": "51",
                        "version_removed": "52"
                    }
                ],
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "alternative_name": "referrerpolicy",
                        "version_added": false,
                        "version_removed": "52"
                    }
                ]
            },
            "title": "HTMLIFrameElement: referrerPolicy property"
        }
    ],
    "dom-iframe-src": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLIFrameElement.json",
            "name": "src",
            "slug": "API/HTMLIFrameElement/src",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/src",
            "summary": "The HTMLIFrameElement.src property reflects the HTML referrerpolicy attribute of the <iframe> element defining which referrer is sent when fetching the resource.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLIFrameElement: src property"
        }
    ],
    "dom-iframe-srcdoc": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLIFrameElement.json",
            "name": "srcdoc",
            "slug": "API/HTMLIFrameElement/srcdoc",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/srcdoc",
            "summary": "The srcdoc property of the HTMLIFrameElement specifies the content of the page.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLIFrameElement: srcdoc property"
        }
    ],
    "htmliframeelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLIFrameElement.json",
            "name": "HTMLIFrameElement",
            "slug": "API/HTMLIFrameElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement",
            "summary": "The HTMLIFrameElement interface provides special properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLIFrameElement"
        }
    ],
    "dom-image-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "Image",
            "slug": "API/HTMLImageElement/Image",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/Image",
            "summary": "The Image() constructor creates a new HTMLImageElement instance. It is functionally equivalent to document.createElement('img').",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement: Image() constructor"
        }
    ],
    "dom-img-alt": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "alt",
            "slug": "API/HTMLImageElement/alt",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/alt",
            "summary": "The HTMLImageElement property alt provides fallback (alternate) text to display when the image specified by the <img> element is not loaded.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement: alt property"
        }
    ],
    "dom-img-complete-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "complete",
            "slug": "API/HTMLImageElement/complete",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/complete",
            "summary": "The read-only HTMLImageElement interface's complete attribute is a Boolean value which indicates whether or not the image has completely loaded.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5",
                    "notes": "IE reports <code>false</code> for broken images."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement: complete property"
        }
    ],
    "dom-img-crossorigin": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "crossOrigin",
            "slug": "API/HTMLImageElement/crossOrigin",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/crossOrigin",
            "summary": "The HTMLImageElement interface's crossOrigin attribute is a string which specifies the Cross-Origin Resource Sharing (CORS) setting to use when retrieving the image.",
            "support": {
                "chrome": {
                    "version_added": "13"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "8"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement: crossOrigin property"
        }
    ],
    "dom-img-currentsrc-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "currentSrc",
            "slug": "API/HTMLImageElement/currentSrc",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/currentSrc",
            "summary": "The read-only HTMLImageElement property currentSrc indicates the URL of the image which is currently presented in the <img> element it represents.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement: currentSrc property"
        }
    ],
    "dom-img-decode-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "decode",
            "slug": "API/HTMLImageElement/decode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decode",
            "summary": "The decode() method of the HTMLImageElement interface returns a Promise that resolves when the image is decoded and it is safe to append the image to the DOM.",
            "support": {
                "chrome": {
                    "version_added": "64"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "68"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement: decode() method"
        },
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/SVGImageElement.json",
            "name": "decode",
            "slug": "API/SVGImageElement/decode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement/decode",
            "summary": "The decode() method of the SVGImageElement interface initiates asynchronous decoding of an image, returning a Promise that resolves once the image data is ready for use.",
            "support": {
                "chrome": {
                    "version_added": "64"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "68"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SVGImageElement: decode() method"
        }
    ],
    "dom-img-decoding": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "decoding",
            "slug": "API/HTMLImageElement/decoding",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decoding",
            "summary": "The decoding property of the HTMLImageElement interface represents a hint given to the browser on how it should decode the image.",
            "support": {
                "chrome": {
                    "version_added": "65"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement: decoding property"
        },
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/SVGImageElement.json",
            "name": "decoding",
            "slug": "API/SVGImageElement/decoding",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/SVGImageElement/decoding",
            "summary": "The decoding property of the SVGImageElement interface represents a hint given to the browser on how it should decode the image.",
            "support": {
                "chrome": {
                    "version_added": "65"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SVGImageElement: decoding property"
        }
    ],
    "attr-img-fetchpriority": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "needsflag": [
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "fetchPriority",
            "slug": "API/HTMLImageElement/fetchPriority",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/fetchPriority",
            "summary": "The fetchPriority property of the HTMLImageElement interface represents a hint given to the browser on how it should prioritize the fetch of the image relative to other images.",
            "support": {
                "chrome": [
                    {
                        "version_added": "102"
                    },
                    {
                        "version_added": "101",
                        "version_removed": "102",
                        "alternative_name": "fetchpriority"
                    }
                ],
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "preview",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Fetch Priority"
                        }
                    ]
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "102"
                    },
                    {
                        "version_added": false,
                        "version_removed": "102",
                        "alternative_name": "fetchpriority"
                    }
                ]
            },
            "title": "HTMLImageElement: fetchPriority property"
        }
    ],
    "dom-img-height-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "height",
            "slug": "API/HTMLImageElement/height",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/height",
            "summary": "The height property of the HTMLImageElement interface indicates the height at which the image is drawn, in CSS pixels if the image is being drawn or rendered to any visual medium such as the screen or a printer; otherwise, it's the natural, pixel density corrected height of the image.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement: height property"
        }
    ],
    "dom-img-ismap": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "isMap",
            "slug": "API/HTMLImageElement/isMap",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/isMap",
            "summary": "The HTMLImageElement property isMap is a Boolean value which indicates that the image is to be used by a server-side image map. This may only be used on images located within an <a> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement: isMap property"
        }
    ],
    "dom-img-loading": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "loading",
            "slug": "API/HTMLImageElement/loading",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/loading",
            "summary": "The HTMLImageElement property loading is a string whose value provides a hint to the user agent on how to handle the loading of the image which is currently outside the window's visual viewport.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "75"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement: loading property"
        }
    ],
    "dom-img-naturalheight-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "naturalHeight",
            "slug": "API/HTMLImageElement/naturalHeight",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/naturalHeight",
            "summary": "The HTMLImageElement interface's naturalHeight property is a read-only value which returns the intrinsic (natural), density-corrected height of the image in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement: naturalHeight property"
        }
    ],
    "dom-img-naturalwidth-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "naturalWidth",
            "slug": "API/HTMLImageElement/naturalWidth",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/naturalWidth",
            "summary": "The HTMLImageElement interface's read-only naturalWidth property returns the intrinsic (natural), density-corrected width of the image in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement: naturalWidth property"
        }
    ],
    "dom-img-referrerpolicy": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "referrerPolicy",
            "slug": "API/HTMLImageElement/referrerPolicy",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/referrerPolicy",
            "summary": "The HTMLImageElement.referrerPolicy property reflects the HTML referrerpolicy attribute of the <img> element defining which referrer is sent when fetching the resource.",
            "support": {
                "chrome": [
                    {
                        "version_added": "52"
                    },
                    {
                        "alternative_name": "referrerpolicy",
                        "version_added": "51",
                        "version_removed": "52"
                    }
                ],
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "alternative_name": "referrerpolicy",
                        "version_added": false,
                        "version_removed": "52"
                    }
                ]
            },
            "title": "HTMLImageElement: referrerPolicy property"
        }
    ],
    "dom-img-sizes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "sizes",
            "slug": "API/HTMLImageElement/sizes",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/sizes",
            "summary": "The HTMLImageElement property sizes allows you to specify the layout width of the image for each of a list of media conditions. This provides the ability to automatically select among different images—even images of different orientations or aspect ratios—as the document state changes to match different media conditions.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement: sizes property"
        }
    ],
    "attr-img-src": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "src",
            "slug": "API/HTMLImageElement/src",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/src",
            "summary": "The HTMLImageElement property src, which reflects the HTML src attribute, specifies the image to display in the <img> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement: src property"
        }
    ],
    "dom-img-srcset": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "srcset",
            "slug": "API/HTMLImageElement/srcset",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/srcset",
            "summary": "The HTMLImageElement property srcset is a string which identifies one or more image candidate strings, separated using commas (,) each specifying image resources to use under given circumstances.",
            "support": {
                "chrome": {
                    "version_added": "34"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement: srcset property"
        }
    ],
    "dom-img-usemap": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "useMap",
            "slug": "API/HTMLImageElement/useMap",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/useMap",
            "summary": "The useMap property on the HTMLImageElement interface reflects the value of the HTML usemap attribute, which is a string providing the name of the client-side image map to apply to the image.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement: useMap property"
        }
    ],
    "dom-img-width-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "width",
            "slug": "API/HTMLImageElement/width",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/width",
            "summary": "The width property of the HTMLImageElement interface indicates the width at which an image is drawn in CSS pixels if it's being drawn or rendered to any visual medium such as a screen or printer. Otherwise, it's the natural, pixel density-corrected width of the image.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement: width property"
        }
    ],
    "htmlimageelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLImageElement.json",
            "name": "HTMLImageElement",
            "slug": "API/HTMLImageElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement",
            "summary": "The HTMLImageElement interface represents an HTML <img> element, providing the properties and methods used to manipulate image elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLImageElement"
        }
    ],
    "dom-cva-checkvalidity-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "checkValidity",
            "slug": "API/HTMLInputElement/checkValidity",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/checkValidity",
            "summary": "The HTMLInputElement.checkValidity() method returns a boolean value which indicates validity of the value of the element. If the value is invalid, this method also fires the invalid event on the element.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLInputElement: checkValidity() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "checkValidity",
            "slug": "API/HTMLObjectElement/checkValidity",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/checkValidity",
            "summary": "The checkValidity() method of the HTMLObjectElement interface returns a boolean value that always is true, because object objects are never candidates for constraint validation.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement: checkValidity() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "checkValidity",
            "slug": "API/HTMLSelectElement/checkValidity",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/checkValidity",
            "summary": "The HTMLSelectElement.checkValidity() method checks whether the element has any constraints and whether it satisfies them. If the element fails its constraints, the browser fires a cancelable invalid event at the element, and then returns false.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSelectElement: checkValidity() method"
        }
    ],
    "event-invalid": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "invalid_event",
            "slug": "API/HTMLInputElement/invalid_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/invalid_event",
            "summary": "The invalid event fires when a submittable element has been checked for validity and doesn't satisfy its constraints.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "64"
                },
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLInputElement: invalid event"
        }
    ],
    "dom-input-multiple": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "multiple",
            "slug": "API/HTMLInputElement/multiple",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/multiple",
            "summary": "The HTMLInputElement.multiple property indicates if an input can have more than one value. Firefox currently only supports multiple for <input type=\"file\">.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLInputElement: multiple property"
        }
    ],
    "dom-textarea/input-select": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "select",
            "slug": "API/HTMLInputElement/select",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select",
            "summary": "The HTMLInputElement.select() method selects all the text in a <textarea> element or in an <input> element that includes a text field.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLInputElement: select() method"
        },
        {
            "engines": [],
            "filename": null,
            "name": "select",
            "slug": "API/HTMLInputElement/select",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select",
            "summary": "The HTMLInputElement.select() method selects all the text in a <textarea> element or in an <input> element that includes a text field.",
            "support": null,
            "title": "HTMLInputElement: select() method"
        }
    ],
    "event-select": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "select_event",
            "slug": "API/HTMLInputElement/select_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select_event",
            "summary": "The select event fires when some text has been selected.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLInputElement: select event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTextAreaElement.json",
            "name": "select_event",
            "slug": "API/HTMLTextAreaElement/select_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/select_event",
            "summary": "The select event fires when some text has been selected.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTextAreaElement: select event"
        }
    ],
    "handler-onselect": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "select_event",
            "slug": "API/HTMLInputElement/select_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/select_event",
            "summary": "The select event fires when some text has been selected.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLInputElement: select event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTextAreaElement.json",
            "name": "select_event",
            "slug": "API/HTMLTextAreaElement/select_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement/select_event",
            "summary": "The select event fires when some text has been selected.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTextAreaElement: select event"
        }
    ],
    "dom-cva-setcustomvalidity": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "setCustomValidity",
            "slug": "API/HTMLInputElement/setCustomValidity",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setCustomValidity",
            "summary": "The HTMLInputElement.setCustomValidity() method sets a custom validity message for the element.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLInputElement: setCustomValidity() method"
        }
    ],
    "dom-textarea/input-setrangetext-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "setRangeText",
            "slug": "API/HTMLInputElement/setRangeText",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setRangeText",
            "summary": "The HTMLInputElement.setRangeText() method replaces a range of text in an <input> or <textarea> element with a new string.",
            "support": {
                "chrome": {
                    "version_added": "24"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "27"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLInputElement: setRangeText() method"
        }
    ],
    "dom-textarea/input-setselectionrange-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "setSelectionRange",
            "slug": "API/HTMLInputElement/setSelectionRange",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange",
            "summary": "The HTMLInputElement.setSelectionRange() method sets the start and end positions of the current text selection in an <input> or <textarea> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLInputElement: setSelectionRange() method"
        }
    ],
    "dom-input-showpicker": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "showPicker",
            "slug": "API/HTMLInputElement/showPicker",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/showPicker",
            "summary": "The HTMLInputElement.showPicker() method displays the browser picker for an input element.",
            "support": {
                "chrome": {
                    "version_added": "99"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "101"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "99"
                }
            },
            "title": "HTMLInputElement: showPicker() method"
        }
    ],
    "dom-input-stepdown-dev": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "partial": [
                "gecko"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "stepDown",
            "slug": "API/HTMLInputElement/stepDown",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/stepDown",
            "summary": "The HTMLInputElement.stepDown([n]) method decrements the value of a numeric type of <input> element by the value of the step attribute or up to n multiples of the step attribute if a number is passed as the parameter.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "16",
                    "partial_implementation": true,
                    "notes": "Does not have a specific UI. There are still differences with the latest spec; see <a href='https://bugzil.la/835773'>bug 835773</a>."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLInputElement: stepDown() method"
        }
    ],
    "dom-input-stepup-dev": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "partial": [
                "gecko"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "stepUp",
            "slug": "API/HTMLInputElement/stepUp",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/stepUp",
            "summary": "The HTMLInputElement.stepUp() method increments the value of a numeric type of <input> element by the value of the step attribute, or the default step value if the step attribute is not explicitly set. The method, when invoked, increments the value by (step * n), where n defaults to 1 if not specified, and step defaults to the default value for step if not specified.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "16",
                    "partial_implementation": true,
                    "notes": "Does not have a specific UI. There are still differences with the latest spec; see <a href='https://bugzil.la/835773'>bug 835773</a>."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLInputElement: stepUp() method"
        }
    ],
    "htmlinputelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLInputElement.json",
            "name": "HTMLInputElement",
            "slug": "API/HTMLInputElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement",
            "summary": "The HTMLInputElement interface provides special properties and methods for manipulating the options, layout, and presentation of <input> elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLInputElement"
        }
    ],
    "htmllielement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLLIElement.json",
            "name": "HTMLLIElement",
            "slug": "API/HTMLLIElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLIElement",
            "summary": "The HTMLLIElement interface exposes specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating list elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 10, Gecko incorrectly reflected negative value attributes to 0."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLLIElement"
        }
    ],
    "dom-label-control-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLLabelElement.json",
            "name": "control",
            "slug": "API/HTMLLabelElement/control",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/control",
            "summary": "The read-only HTMLLabelElement.control property returns a reference to the control (in the form of an object of type HTMLElement or one of its derivatives) with which the <label> element is associated, or null if the label isn't associated with a control.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLLabelElement: control property"
        }
    ],
    "dom-label-form-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLLabelElement.json",
            "name": "form",
            "slug": "API/HTMLLabelElement/form",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/form",
            "summary": "The read-only HTMLLabelElement.form property returns an HTMLFormElement object which represents the form of which the label's associated control is a part, or null if there is either no associated control, or if that control isn't in a form.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLLabelElement: form property"
        }
    ],
    "dom-label-htmlfor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLLabelElement.json",
            "name": "htmlFor",
            "slug": "API/HTMLLabelElement/htmlFor",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor",
            "summary": "The HTMLLabelElement.htmlFor property reflects the value of the for content property. That means that this script-accessible property is used to set and read the value of the content property for, which is the ID of the label's associated control element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLLabelElement: htmlFor property"
        }
    ],
    "htmllabelelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLLabelElement.json",
            "name": "HTMLLabelElement",
            "slug": "API/HTMLLabelElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement",
            "summary": "The HTMLLabelElement interface gives access to properties specific to <label> elements. It inherits methods and properties from the base HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLLabelElement"
        }
    ],
    "htmllegendelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLLegendElement.json",
            "name": "HTMLLegendElement",
            "slug": "API/HTMLLegendElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLegendElement",
            "summary": "The HTMLLegendElement is an interface allowing to access properties of the <legend> elements. It inherits properties and methods from the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLLegendElement"
        }
    ],
    "dom-link-as": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLLinkElement.json",
            "name": "as",
            "slug": "API/HTMLLinkElement/as",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/as",
            "summary": "The as property of the HTMLLinkElement interface returns a string representing the type of content to be preloaded by a link element.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "56"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLLinkElement: as property"
        }
    ],
    "attr-link-fetchpriority": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "needsflag": [
                "webkit"
            ],
            "filename": "api/HTMLLinkElement.json",
            "name": "fetchPriority",
            "slug": "API/HTMLLinkElement/fetchPriority",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/fetchPriority",
            "summary": "The fetchPriority property of the HTMLLinkElement interface represents a hint given to the browser on how it should prioritize the preload of the given resource relative to other resources of the same type.",
            "support": {
                "chrome": [
                    {
                        "version_added": "102"
                    },
                    {
                        "version_added": "101",
                        "version_removed": "102",
                        "alternative_name": "fetchpriority"
                    }
                ],
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "preview",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "Fetch Priority"
                        }
                    ]
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "102"
                    },
                    {
                        "version_added": false,
                        "version_removed": "102",
                        "alternative_name": "fetchpriority"
                    }
                ]
            },
            "title": "HTMLLinkElement: fetchPriority property"
        }
    ],
    "dom-link-referrerpolicy": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLLinkElement.json",
            "name": "referrerPolicy",
            "slug": "API/HTMLLinkElement/referrerPolicy",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/referrerPolicy",
            "summary": "The HTMLLinkElement.referrerPolicy property reflects the HTML referrerpolicy attribute of the <link> element defining which referrer is sent when fetching the resource.",
            "support": {
                "chrome": {
                    "version_added": "58"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLLinkElement: referrerPolicy property"
        }
    ],
    "dom-link-rel": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLLinkElement.json",
            "name": "rel",
            "slug": "API/HTMLLinkElement/rel",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/rel",
            "summary": "The HTMLLinkElement.rel property reflects the rel attribute. It is a string containing a space-separated list of link types indicating the relationship between the resource represented by the <link> element and the current document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLLinkElement: rel property"
        }
    ],
    "dom-link-rellist": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLLinkElement.json",
            "name": "relList",
            "slug": "API/HTMLLinkElement/relList",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement/relList",
            "summary": "The HTMLLinkElement.relList read-only property reflects the rel attribute. It is a live DOMTokenList containing the set of link types indicating the relationship between the resource represented by the <link> element and the current document.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "30"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLLinkElement: relList property"
        }
    ],
    "htmllinkelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLLinkElement.json",
            "name": "HTMLLinkElement",
            "slug": "API/HTMLLinkElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement",
            "summary": "The HTMLLinkElement interface represents reference information for external resources and the relationship of those resources to a document and vice versa (corresponds to <link> element; not to be confused with <a>, which is represented by HTMLAnchorElement). This object inherits all of the properties and methods of the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLLinkElement"
        }
    ],
    "htmlmapelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMapElement.json",
            "name": "HTMLMapElement",
            "slug": "API/HTMLMapElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMapElement",
            "summary": "The HTMLMapElement interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMapElement"
        }
    ],
    "event-media-abort": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "abort_event",
            "slug": "API/HTMLMediaElement/abort_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/abort_event",
            "summary": "The abort event is fired when the resource was not fully loaded, but not as the result of an error.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: abort event"
        }
    ],
    "handler-onabort": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "abort_event",
            "slug": "API/HTMLMediaElement/abort_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/abort_event",
            "summary": "The abort event is fired when the resource was not fully loaded, but not as the result of an error.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: abort event"
        }
    ],
    "dom-media-audiotracks-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "audioTracks",
            "slug": "API/HTMLMediaElement/audioTracks",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/audioTracks",
            "summary": "The read-only audioTracks property on HTMLMediaElement objects returns an AudioTrackList object listing all of the AudioTrack objects representing the media element's audio tracks.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "#enable-experimental-web-platform-features",
                            "value_to_set": "Enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "#enable-experimental-web-platform-features",
                            "value_to_set": "Enabled"
                        }
                    ]
                }
            },
            "title": "HTMLMediaElement: audioTracks property"
        }
    ],
    "dom-media-autoplay": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "autoplay",
            "slug": "API/HTMLMediaElement/autoplay",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/autoplay",
            "summary": "The HTMLMediaElement.autoplay property reflects the autoplay HTML attribute, indicating whether playback should automatically begin as soon as enough media is available to do so without interruption.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: autoplay property"
        }
    ],
    "dom-media-buffered-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "buffered",
            "slug": "API/HTMLMediaElement/buffered",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/buffered",
            "summary": "The buffered read-only property of HTMLMediaElement objects returns a new static normalized TimeRanges object that represents the ranges of the media resource, if any, that the user agent has buffered at the moment the buffered property is accessed.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: buffered property"
        }
    ],
    "event-media-canplay": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "canplay_event",
            "slug": "API/HTMLMediaElement/canplay_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplay_event",
            "summary": "The canplay event is fired when the user agent can play the media, but estimates that not enough data has been loaded to play the media up to its end without having to stop for further buffering of content.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: canplay event"
        }
    ],
    "handler-oncanplay": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "canplay_event",
            "slug": "API/HTMLMediaElement/canplay_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplay_event",
            "summary": "The canplay event is fired when the user agent can play the media, but estimates that not enough data has been loaded to play the media up to its end without having to stop for further buffering of content.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: canplay event"
        }
    ],
    "event-media-canplaythrough": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "canplaythrough_event",
            "slug": "API/HTMLMediaElement/canplaythrough_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplaythrough_event",
            "summary": "The canplaythrough event is fired when the user agent can play the media, and estimates that enough data has been loaded to play the media up to its end without having to stop for further buffering of content.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: canplaythrough event"
        }
    ],
    "handler-oncanplaythrough": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "canplaythrough_event",
            "slug": "API/HTMLMediaElement/canplaythrough_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplaythrough_event",
            "summary": "The canplaythrough event is fired when the user agent can play the media, and estimates that enough data has been loaded to play the media up to its end without having to stop for further buffering of content.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: canplaythrough event"
        }
    ],
    "dom-navigator-canplaytype-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "canPlayType",
            "slug": "API/HTMLMediaElement/canPlayType",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType",
            "summary": "The HTMLMediaElement method canPlayType() reports how likely it is that the current browser will be able to play media of a given MIME type.",
            "support": {
                "chrome": {
                    "version_added": "3",
                    "notes": [
                        "<code>codecs</code> string can contain any subset of optional parameters (should be all or none).",
                        "Errors if <code>codecs</code> string contains unexpected characters (should evaluate string up to character)."
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5",
                    "notes": [
                        "Before Firefox 28, <code>canPlayType()</code> returned <code>probably</code> when asked about WebM audio or video files without the <code>codecs</code> parameter. Since multiple codecs are supported, this is not enough information to determine if a file can be played, so <code>maybe</code> is now correctly returned.",
                        "Before Firefox 101, <code>canPlayType()</code> ignored <code>codecs</code> parameter options for <code>av01</code> codecs (treating them as <code>av1</code>)."
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1",
                    "notes": [
                        "<code>codecs</code> string can contain any subset of optional parameters (should be all or none).",
                        "Errors if <code>codecs</code> string contains unexpected characters (should evaluate string up to character)."
                    ]
                },
                "opera_android": {
                    "version_added": "12.1",
                    "notes": [
                        "<code>codecs</code> string can contain any subset of optional parameters (should be all or none).",
                        "Errors if <code>codecs</code> string contains unexpected characters (should evaluate string up to character)."
                    ]
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37",
                    "notes": [
                        "<code>codecs</code> string can contain any subset of optional parameters (should be all or none).",
                        "Errors if <code>codecs</code> string contains unexpected characters (should evaluate string up to character)."
                    ]
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": [
                        "<code>codecs</code> string can contain any subset of optional parameters (should be all or none).",
                        "Errors if <code>codecs</code> string contains unexpected characters (should evaluate string up to character)."
                    ]
                }
            },
            "title": "HTMLMediaElement: canPlayType() method"
        }
    ],
    "dom-media-controls": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "controls",
            "slug": "API/HTMLMediaElement/controls",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controls",
            "summary": "The HTMLMediaElement.controls property reflects the controls HTML attribute, which controls whether user interface controls for playing the media item will be displayed.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: controls property"
        }
    ],
    "dom-media-crossorigin": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "crossOrigin",
            "slug": "API/HTMLMediaElement/crossOrigin",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/crossOrigin",
            "summary": "The HTMLMediaElement.crossOrigin property is the CORS setting for this media element. See CORS settings attributes for details.",
            "support": {
                "chrome": {
                    "version_added": "33"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "13"
                },
                "firefox": [
                    {
                        "version_added": "22"
                    },
                    {
                        "version_added": "12",
                        "version_removed": "22",
                        "alternative_name": "crossorigin"
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: crossOrigin property"
        }
    ],
    "dom-media-currentsrc-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "currentSrc",
            "slug": "API/HTMLMediaElement/currentSrc",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentSrc",
            "summary": "The HTMLMediaElement.currentSrc property contains the absolute URL of the chosen media resource. This could happen, for example, if the web server selects a media file based on the resolution of the user's display. The value is an empty string if the networkState property is EMPTY.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: currentSrc property"
        }
    ],
    "dom-media-currenttime-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "currentTime",
            "slug": "API/HTMLMediaElement/currentTime",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentTime",
            "summary": "The HTMLMediaElement interface's currentTime property specifies the current playback time in seconds.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: currentTime property"
        }
    ],
    "dom-media-defaultmuted": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "defaultMuted",
            "slug": "API/HTMLMediaElement/defaultMuted",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultMuted",
            "summary": "The HTMLMediaElement.defaultMuted property reflects the muted HTML attribute, which indicates whether the media element's audio output should be muted by default. This property has no dynamic effect. To mute and unmute the audio output, use the muted property.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "11"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: defaultMuted property"
        }
    ],
    "dom-media-defaultplaybackrate-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "defaultPlaybackRate",
            "slug": "API/HTMLMediaElement/defaultPlaybackRate",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultPlaybackRate",
            "summary": "The HTMLMediaElement.defaultPlaybackRate property indicates the default playback rate for the media.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "20"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: defaultPlaybackRate property"
        }
    ],
    "dom-media-duration-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "duration",
            "slug": "API/HTMLMediaElement/duration",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/duration",
            "summary": "The read-only HTMLMediaElement property duration indicates the length of the element's media in seconds.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: duration property"
        }
    ],
    "event-media-durationchange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "durationchange_event",
            "slug": "API/HTMLMediaElement/durationchange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/durationchange_event",
            "summary": "The durationchange event is fired when the duration attribute has been updated.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: durationchange event"
        }
    ],
    "handler-ondurationchange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "durationchange_event",
            "slug": "API/HTMLMediaElement/durationchange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/durationchange_event",
            "summary": "The durationchange event is fired when the duration attribute has been updated.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: durationchange event"
        }
    ],
    "event-media-emptied": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "emptied_event",
            "slug": "API/HTMLMediaElement/emptied_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/emptied_event",
            "summary": "The emptied event is fired when the media has become empty; for example, this event is sent if the media has already been loaded (or partially loaded), and the load() method is called to reload it.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: emptied event"
        }
    ],
    "handler-onemptied": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "emptied_event",
            "slug": "API/HTMLMediaElement/emptied_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/emptied_event",
            "summary": "The emptied event is fired when the media has become empty; for example, this event is sent if the media has already been loaded (or partially loaded), and the load() method is called to reload it.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: emptied event"
        }
    ],
    "dom-media-ended-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "ended",
            "slug": "API/HTMLMediaElement/ended",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ended",
            "summary": "The HTMLMediaElement.ended property indicates whether the media element has ended playback.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: ended property"
        }
    ],
    "event-media-ended": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "ended_event",
            "slug": "API/HTMLMediaElement/ended_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ended_event",
            "summary": "The ended event is fired when playback or streaming has stopped because the end of the media was reached or because no further data is available.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: ended event"
        }
    ],
    "handler-onended": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "ended_event",
            "slug": "API/HTMLMediaElement/ended_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ended_event",
            "summary": "The ended event is fired when playback or streaming has stopped because the end of the media was reached or because no further data is available.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: ended event"
        }
    ],
    "dom-media-error-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "error",
            "slug": "API/HTMLMediaElement/error",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/error",
            "summary": "The HTMLMediaElement.error property is the MediaError object for the most recent error, or null if there has not been an error. When an error event is received by the element, you can determine details about what happened by examining this object.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: error property"
        }
    ],
    "event-media-error": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "error_event",
            "slug": "API/HTMLMediaElement/error_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/error_event",
            "summary": "The error event is fired when the resource could not be loaded due to an error (for example, a network connectivity problem).",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: error event"
        }
    ],
    "handler-window-onmessageerror": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "error_event",
            "slug": "API/HTMLMediaElement/error_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/error_event",
            "summary": "The error event is fired when the resource could not be loaded due to an error (for example, a network connectivity problem).",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: error event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "messageerror_event",
            "slug": "API/Window/messageerror_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/messageerror_event",
            "summary": "The messageerror event is fired on a Window object when it receives a message that can't be deserialized.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "16.4",
                    "notes": "See <a href='https://webkit.org/b/171216'>bug 171216</a>."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: messageerror event"
        }
    ],
    "dom-media-fastseek-dev": [
        {
            "engines": [
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "fastSeek",
            "slug": "API/HTMLMediaElement/fastSeek",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/fastSeek",
            "summary": "The HTMLMediaElement.fastSeek() method quickly seeks the media to the new time with precision tradeoff.",
            "support": {
                "chrome": {
                    "version_added": false,
                    "notes": "See <a href='https://crbug.com/648207'>bug 648207</a>."
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": false,
                    "notes": "See <a href='https://crbug.com/648207'>bug 648207</a>."
                }
            },
            "title": "HTMLMediaElement: fastSeek() method"
        }
    ],
    "dom-media-load-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "load",
            "slug": "API/HTMLMediaElement/load",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/load",
            "summary": "The HTMLMediaElement method load() resets the media element to its initial state and begins the process of selecting a media source and loading the media in preparation for playback to begin at the beginning.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: load() method"
        }
    ],
    "event-media-loadeddata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "loadeddata_event",
            "slug": "API/HTMLMediaElement/loadeddata_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadeddata_event",
            "summary": "The loadeddata event is fired when the frame at the current playback position of the media has finished loading; often the first frame.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: loadeddata event"
        }
    ],
    "handler-onloadeddata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "loadeddata_event",
            "slug": "API/HTMLMediaElement/loadeddata_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadeddata_event",
            "summary": "The loadeddata event is fired when the frame at the current playback position of the media has finished loading; often the first frame.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: loadeddata event"
        }
    ],
    "event-media-loadedmetadata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "loadedmetadata_event",
            "slug": "API/HTMLMediaElement/loadedmetadata_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadedmetadata_event",
            "summary": "The loadedmetadata event is fired when the metadata has been loaded.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: loadedmetadata event"
        }
    ],
    "handler-onloadedmetadata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "loadedmetadata_event",
            "slug": "API/HTMLMediaElement/loadedmetadata_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadedmetadata_event",
            "summary": "The loadedmetadata event is fired when the metadata has been loaded.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: loadedmetadata event"
        }
    ],
    "event-media-loadstart": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "loadstart_event",
            "slug": "API/HTMLMediaElement/loadstart_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadstart_event",
            "summary": "The loadstart event is fired when the browser has started to load a resource.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: loadstart event"
        }
    ],
    "handler-onloadstart": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "loadstart_event",
            "slug": "API/HTMLMediaElement/loadstart_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadstart_event",
            "summary": "The loadstart event is fired when the browser has started to load a resource.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: loadstart event"
        }
    ],
    "dom-media-loop": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "loop",
            "slug": "API/HTMLMediaElement/loop",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loop",
            "summary": "The HTMLMediaElement.loop property reflects the loop HTML attribute, which controls whether the media element should start over when it reaches the end.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "11"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: loop property"
        }
    ],
    "dom-media-muted-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "muted",
            "slug": "API/HTMLMediaElement/muted",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/muted",
            "summary": "The HTMLMediaElement.muted property indicates whether the media element is muted.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: muted property"
        }
    ],
    "dom-media-networkstate-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "networkState",
            "slug": "API/HTMLMediaElement/networkState",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/networkState",
            "summary": "The HTMLMediaElement.networkState property indicates the current state of the fetching of media over the network.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5",
                    "notes": "The <code>NETWORK_LOADED</code> state was removed to align with the HTML spec in Firefox 4."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: networkState property"
        }
    ],
    "dom-media-pause-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "pause",
            "slug": "API/HTMLMediaElement/pause",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause",
            "summary": "The HTMLMediaElement.pause() method will pause playback of the media, if the media is already in a paused state this method will have no effect.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: pause() method"
        }
    ],
    "event-media-pause": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "pause_event",
            "slug": "API/HTMLMediaElement/pause_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause_event",
            "summary": "The pause event is sent when a request to pause an activity is handled and the activity has entered its paused state, most commonly after the media has been paused through a call to the element's pause() method.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: pause event"
        }
    ],
    "handler-onpause": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "pause_event",
            "slug": "API/HTMLMediaElement/pause_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause_event",
            "summary": "The pause event is sent when a request to pause an activity is handled and the activity has entered its paused state, most commonly after the media has been paused through a call to the element's pause() method.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: pause event"
        }
    ],
    "dom-media-paused-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "paused",
            "slug": "API/HTMLMediaElement/paused",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/paused",
            "summary": "The read-only HTMLMediaElement.paused property tells whether the media element is paused.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: paused property"
        }
    ],
    "dom-media-play-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "play",
            "slug": "API/HTMLMediaElement/play",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play",
            "summary": "The HTMLMediaElement play() method attempts to begin playback of the media. It returns a Promise which is resolved when playback has been successfully started.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: play() method"
        }
    ],
    "event-media-play": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "play_event",
            "slug": "API/HTMLMediaElement/play_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play_event",
            "summary": "The play event is fired when the paused property is changed from true to false, as a result of the play method, or the autoplay attribute.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: play event"
        }
    ],
    "handler-onplay": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "play_event",
            "slug": "API/HTMLMediaElement/play_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play_event",
            "summary": "The play event is fired when the paused property is changed from true to false, as a result of the play method, or the autoplay attribute.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: play event"
        }
    ],
    "dom-media-playbackrate-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "playbackRate",
            "slug": "API/HTMLMediaElement/playbackRate",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate",
            "summary": "The HTMLMediaElement.playbackRate property sets the rate at which the media is being played back. This is used to implement user controls for fast forward, slow motion, and so forth. The normal playback rate is multiplied by this value to obtain the current rate, so a value of 1.0 indicates normal speed.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "20"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: playbackRate property"
        }
    ],
    "event-media-playing": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "playing_event",
            "slug": "API/HTMLMediaElement/playing_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playing_event",
            "summary": "The playing event is fired after playback is first started, and whenever it is restarted. For example it is fired when playback resumes after having been paused or delayed due to lack of data.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: playing event"
        }
    ],
    "handler-onplaying": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "playing_event",
            "slug": "API/HTMLMediaElement/playing_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playing_event",
            "summary": "The playing event is fired after playback is first started, and whenever it is restarted. For example it is fired when playback resumes after having been paused or delayed due to lack of data.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: playing event"
        }
    ],
    "dom-media-preservespitch-dev": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "prefixed": [
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "preservesPitch",
            "slug": "API/HTMLMediaElement/preservesPitch",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/preservesPitch",
            "summary": "The HTMLMediaElement.preservesPitch property determines whether or not the browser should adjust the pitch of the audio to compensate for changes to the playback rate made by setting HTMLMediaElement.playbackRate.",
            "support": {
                "chrome": {
                    "version_added": "86"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": [
                    {
                        "version_added": "101"
                    },
                    {
                        "prefix": "moz",
                        "version_added": "20",
                        "version_removed": "115",
                        "notes": "Disable by default in version 115 (behind preference <code>dom.media.mozPreservesPitch.enabled</code>). May be fully removed in a future release (see <a href='https://bugzil.la/1765201'>bug 1765201</a>)."
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "prefix": "webkit",
                    "version_added": "4",
                    "notes": "See <a href='https://webkit.org/b/214922'>bug 214922</a>."
                },
                "safari_ios": {
                    "prefix": "webkit",
                    "version_added": "4",
                    "notes": "See <a href='https://webkit.org/b/214922'>bug 214922</a>."
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "86"
                }
            },
            "title": "HTMLMediaElement: preservesPitch property"
        }
    ],
    "event-media-progress": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "progress_event",
            "slug": "API/HTMLMediaElement/progress_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/progress_event",
            "summary": "The progress event is fired periodically as the browser loads a resource.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: progress event"
        }
    ],
    "handler-onprogress": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "progress_event",
            "slug": "API/HTMLMediaElement/progress_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/progress_event",
            "summary": "The progress event is fired periodically as the browser loads a resource.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: progress event"
        }
    ],
    "event-media-ratechange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "ratechange_event",
            "slug": "API/HTMLMediaElement/ratechange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ratechange_event",
            "summary": "The ratechange event is fired when the playback rate has changed.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: ratechange event"
        }
    ],
    "handler-onratechange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "ratechange_event",
            "slug": "API/HTMLMediaElement/ratechange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ratechange_event",
            "summary": "The ratechange event is fired when the playback rate has changed.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: ratechange event"
        }
    ],
    "dom-media-readystate-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "readyState",
            "slug": "API/HTMLMediaElement/readyState",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/readyState",
            "summary": "The HTMLMediaElement.readyState property indicates the readiness state of the media.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: readyState property"
        }
    ],
    "dom-media-seekable-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "seekable",
            "slug": "API/HTMLMediaElement/seekable",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seekable",
            "summary": "The seekable read-only property of HTMLMediaElement objects returns a new static normalized TimeRanges object that represents the ranges of the media resource, if any, that the user agent is able to seek to at the time seekable property is accessed.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "8"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: seekable property"
        }
    ],
    "event-media-seeked": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "seeked_event",
            "slug": "API/HTMLMediaElement/seeked_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seeked_event",
            "summary": "The seeked event is fired when a seek operation completed, the current playback position has changed, and the Boolean seeking attribute is changed to false.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: seeked event"
        }
    ],
    "handler-onseeked": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "seeked_event",
            "slug": "API/HTMLMediaElement/seeked_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seeked_event",
            "summary": "The seeked event is fired when a seek operation completed, the current playback position has changed, and the Boolean seeking attribute is changed to false.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: seeked event"
        }
    ],
    "event-media-seeking": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "seeking_event",
            "slug": "API/HTMLMediaElement/seeking_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seeking_event",
            "summary": "The seeking event is fired when a seek operation starts, meaning the Boolean seeking attribute has changed to true and the media is seeking a new position.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: seeking event"
        }
    ],
    "handler-onseeking": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "seeking_event",
            "slug": "API/HTMLMediaElement/seeking_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seeking_event",
            "summary": "The seeking event is fired when a seek operation starts, meaning the Boolean seeking attribute has changed to true and the media is seeking a new position.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: seeking event"
        }
    ],
    "dom-media-src": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "src",
            "slug": "API/HTMLMediaElement/src",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/src",
            "summary": "The HTMLMediaElement.src property reflects the value of the HTML media element's src attribute, which indicates the URL of a media resource to use in the element.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: src property"
        }
    ],
    "dom-media-srcobject-dev": [
        {
            "engines": [
                "webkit"
            ],
            "partial": [
                "blink",
                "gecko"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "srcObject",
            "slug": "API/HTMLMediaElement/srcObject",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/srcObject",
            "summary": "The srcObject property of the HTMLMediaElement interface sets or returns the object which serves as the source of the media associated with the HTMLMediaElement.",
            "support": {
                "chrome": [
                    {
                        "version_added": "108",
                        "partial_implementation": true,
                        "notes": "Support added for <code>MediaSourceHandle</code> objects transferred from dedicated workers where they were obtained from <code>MediaSource.handle</code> (see <a href='https://crbug.com/878133'>bug 878133</a>)."
                    },
                    {
                        "version_added": "52",
                        "partial_implementation": true,
                        "notes": "Support added for <code>MediaStream</code> objects (see <a href='https://crbug.com/506273'>bug 506273</a>)."
                    }
                ],
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": [
                    {
                        "version_added": "42",
                        "partial_implementation": true,
                        "notes": "Only supports <code>MediaStream</code> objects (see <a href='https://bugzil.la/886194'>bug 886194</a>)."
                    },
                    {
                        "version_added": "18",
                        "version_removed": "58",
                        "prefix": "moz"
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "108",
                        "partial_implementation": true,
                        "notes": "Support added for <code>MediaSourceHandle</code> objects transferred from dedicated workers where they were obtained from <code>MediaSource.handle</code> (see <a href='https://crbug.com/878133'>bug 878133</a>)."
                    },
                    {
                        "version_added": "79",
                        "partial_implementation": true,
                        "notes": "Support added for <code>MediaStream</code> objects (see <a href='https://crbug.com/506273'>bug 506273</a>)."
                    }
                ]
            },
            "title": "HTMLMediaElement: srcObject property"
        }
    ],
    "event-media-stalled": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "stalled_event",
            "slug": "API/HTMLMediaElement/stalled_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/stalled_event",
            "summary": "The stalled event is fired when the user agent is trying to fetch media data, but data is unexpectedly not forthcoming.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: stalled event"
        }
    ],
    "handler-onstalled": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "stalled_event",
            "slug": "API/HTMLMediaElement/stalled_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/stalled_event",
            "summary": "The stalled event is fired when the user agent is trying to fetch media data, but data is unexpectedly not forthcoming.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: stalled event"
        }
    ],
    "event-media-suspend": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "suspend_event",
            "slug": "API/HTMLMediaElement/suspend_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/suspend_event",
            "summary": "The suspend event is fired when media data loading has been suspended.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: suspend event"
        }
    ],
    "handler-onsuspend": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "suspend_event",
            "slug": "API/HTMLMediaElement/suspend_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/suspend_event",
            "summary": "The suspend event is fired when media data loading has been suspended.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: suspend event"
        }
    ],
    "dom-media-texttracks-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "textTracks",
            "slug": "API/HTMLMediaElement/textTracks",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/textTracks",
            "summary": "The read-only textTracks property on HTMLMediaElement objects returns a TextTrackList object listing all of the TextTrack objects representing the media element's text tracks, in the same order as in the list of text tracks.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: textTracks property"
        }
    ],
    "event-media-timeupdate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "timeupdate_event",
            "slug": "API/HTMLMediaElement/timeupdate_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/timeupdate_event",
            "summary": "The timeupdate event is fired when the time indicated by the currentTime attribute has been updated.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: timeupdate event"
        }
    ],
    "handler-ontimeupdate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "timeupdate_event",
            "slug": "API/HTMLMediaElement/timeupdate_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/timeupdate_event",
            "summary": "The timeupdate event is fired when the time indicated by the currentTime attribute has been updated.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: timeupdate event"
        }
    ],
    "dom-media-videotracks-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "videoTracks",
            "slug": "API/HTMLMediaElement/videoTracks",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/videoTracks",
            "summary": "The read-only videoTracks property on HTMLMediaElement objects returns a VideoTrackList object listing all of the VideoTrack objects representing the media element's video tracks.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "#enable-experimental-web-platform-features",
                            "value_to_set": "Enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "#enable-experimental-web-platform-features",
                            "value_to_set": "Enabled"
                        }
                    ]
                }
            },
            "title": "HTMLMediaElement: videoTracks property"
        }
    ],
    "dom-media-volume-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "partial": [
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "volume",
            "slug": "API/HTMLMediaElement/volume",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volume",
            "summary": "The HTMLMediaElement.volume property sets the volume at which the media will be played.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3",
                    "partial_implementation": true,
                    "notes": "<code>volume</code> returns a value and is writable; however, the value is always 1, and setting a value has no effect on the volume of the media object."
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: volume property"
        }
    ],
    "event-media-volumechange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "volumechange_event",
            "slug": "API/HTMLMediaElement/volumechange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volumechange_event",
            "summary": "The volumechange event is fired when either the volume attribute or the muted attribute has changed.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: volumechange event"
        }
    ],
    "handler-onvolumechange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "volumechange_event",
            "slug": "API/HTMLMediaElement/volumechange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volumechange_event",
            "summary": "The volumechange event is fired when either the volume attribute or the muted attribute has changed.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: volumechange event"
        }
    ],
    "event-media-waiting": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "waiting_event",
            "slug": "API/HTMLMediaElement/waiting_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/waiting_event",
            "summary": "The waiting event is fired when playback has stopped because of a temporary lack of data.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: waiting event"
        }
    ],
    "handler-onwaiting": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "waiting_event",
            "slug": "API/HTMLMediaElement/waiting_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/waiting_event",
            "summary": "The waiting event is fired when playback has stopped because of a temporary lack of data.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement: waiting event"
        }
    ],
    "htmlmediaelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMediaElement.json",
            "name": "HTMLMediaElement",
            "slug": "API/HTMLMediaElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement",
            "summary": "The HTMLMediaElement interface adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMediaElement"
        }
    ],
    "htmlmenuelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMenuElement.json",
            "name": "HTMLMenuElement",
            "slug": "API/HTMLMenuElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMenuElement",
            "summary": "The HTMLMenuElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating <menu> elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMenuElement"
        }
    ],
    "htmlmetaelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMetaElement.json",
            "name": "HTMLMetaElement",
            "slug": "API/HTMLMetaElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMetaElement",
            "summary": "The HTMLMetaElement interface contains descriptive metadata about a document provided in HTML as <meta> elements. This interface inherits all of the properties and methods described in the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMetaElement"
        }
    ],
    "htmlmeterelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLMeterElement.json",
            "name": "HTMLMeterElement",
            "slug": "API/HTMLMeterElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLMeterElement",
            "summary": "The HTML <meter> elements expose the HTMLMeterElement interface, which provides special properties and methods (beyond the HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <meter> elements.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "16"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLMeterElement"
        }
    ],
    "htmlmodelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLModElement.json",
            "name": "HTMLModElement",
            "slug": "API/HTMLModElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLModElement",
            "summary": "The HTMLModElement interface provides special properties (beyond the regular methods and properties available through the HTMLElement interface they also have available to them by inheritance) for manipulating modification elements, that is <del> and <ins>.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLModElement"
        }
    ],
    "htmlolistelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLOListElement.json",
            "name": "HTMLOListElement",
            "slug": "API/HTMLOListElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOListElement",
            "summary": "The HTMLOListElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating ordered list elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLOListElement"
        }
    ],
    "dom-object-contentdocument": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "contentDocument",
            "slug": "API/HTMLObjectElement/contentDocument",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/contentDocument",
            "summary": "The contentDocument read-only property of the HTMLObjectElement interface Returns a Document representing the active document of the object element's nested browsing context, if any; otherwise null.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement: contentDocument property"
        }
    ],
    "dom-object-contentwindow": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "contentWindow",
            "slug": "API/HTMLObjectElement/contentWindow",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/contentWindow",
            "summary": "The contentWindow read-only property of the HTMLObjectElement interface returns a WindowProxy representing the window proxy of the object element's nested browsing context, if any; otherwise null.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "13"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement: contentWindow property"
        }
    ],
    "dom-object-data": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "data",
            "slug": "API/HTMLObjectElement/data",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/data",
            "summary": "The data property of the HTMLObjectElement interface returns a string that reflects the data HTML attribute, specifying the address of a resource's data.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement: data property"
        }
    ],
    "dom-fae-form-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "form",
            "slug": "API/HTMLObjectElement/form",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/form",
            "summary": "The form read-only property of the HTMLObjectElement interface returns a HTMLFormElement representing the object element's form owner, or null if there isn't one.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement: form property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "form",
            "slug": "API/HTMLSelectElement/form",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/form",
            "summary": "The HTMLSelectElement.form read-only property returns a HTMLFormElement representing the form that this element is associated with. If the element is not associated with a <form> element, then it returns null.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSelectElement: form property"
        }
    ],
    "dom-dim-height": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "height",
            "slug": "API/HTMLObjectElement/height",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/height",
            "summary": "The height property of the HTMLObjectElement interface Returns a string that reflects the height HTML attribute, specifying the displayed height of the resource in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement: height property"
        }
    ],
    "dom-object-name": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "name",
            "slug": "API/HTMLObjectElement/name",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/name",
            "summary": "The name property of the HTMLObjectElement interface returns a string that reflects the name HTML attribute, specifying the name of the browsing context.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement: name property"
        }
    ],
    "dom-cva-setcustomvalidity-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "setCustomValidity",
            "slug": "API/HTMLObjectElement/setCustomValidity",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/setCustomValidity",
            "summary": "The setCustomValidity() method of the HTMLObjectElement interface sets a custom validity message for the element.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement: setCustomValidity() method"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "setCustomValidity",
            "slug": "API/HTMLSelectElement/setCustomValidity",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/setCustomValidity",
            "summary": "The HTMLSelectElement.setCustomValidity() method sets the custom validity message for the selection element to the specified message. Use the empty string to indicate that the element does not have a custom validity error.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSelectElement: setCustomValidity() method"
        }
    ],
    "dom-object-type": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "type",
            "slug": "API/HTMLObjectElement/type",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/type",
            "summary": "The type property of the HTMLObjectElement interface returns a string that reflects the type HTML attribute, specifying the MIME type of the resource.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement: type property"
        }
    ],
    "dom-object-usemap": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "useMap",
            "slug": "API/HTMLObjectElement/useMap",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/useMap",
            "summary": "The useMap property of the HTMLObjectElement interface returns a string that reflects the usemap HTML attribute, specifying a <map> element to use.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement: useMap property"
        }
    ],
    "dom-cva-validationmessage-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "validationMessage",
            "slug": "API/HTMLObjectElement/validationMessage",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/validationMessage",
            "summary": "The validationMessage read-only property of the HTMLObjectElement interface returns a string representing a localized message that describes the validation constraints that the control does not satisfy (if any). This is the empty string if the control is not a candidate for constraint validation (willValidate is false), or it satisfies its constraints.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement: validationMessage property"
        }
    ],
    "dom-cva-validity": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "validity",
            "slug": "API/HTMLObjectElement/validity",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/validity",
            "summary": "The validity read-only property of the HTMLObjectElement interface returns a ValidityState with the validity states that this element is in.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement: validity property"
        }
    ],
    "dom-dim-width": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "width",
            "slug": "API/HTMLObjectElement/width",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/width",
            "summary": "The width property of the HTMLObjectElement interface returns a string that reflects the width HTML attribute, specifying the displayed width of the resource in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement: width property"
        }
    ],
    "dom-cva-willvalidate-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "willValidate",
            "slug": "API/HTMLObjectElement/willValidate",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement/willValidate",
            "summary": "The willValidate read-only property of the HTMLObjectElement interface returns a boolean value that indicates whether the element is a candidate for constraint validation. Always false for HTMLObjectElement objects.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement: willValidate property"
        }
    ],
    "htmlobjectelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLObjectElement.json",
            "name": "HTMLObjectElement",
            "slug": "API/HTMLObjectElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLObjectElement",
            "summary": "The HTMLObjectElement interface provides special properties and methods (beyond those on the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <object> element, representing external resources.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLObjectElement"
        }
    ],
    "htmloptgroupelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLOptGroupElement.json",
            "name": "HTMLOptGroupElement",
            "slug": "API/HTMLOptGroupElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptGroupElement",
            "summary": "The HTMLOptGroupElement interface provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of <optgroup> elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLOptGroupElement"
        }
    ],
    "dom-option-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLOptionElement.json",
            "name": "Option",
            "slug": "API/HTMLOptionElement/Option",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement/Option",
            "summary": "The Option() constructor creates a new HTMLOptionElement.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5",
                    "notes": "Before Internet Explorer 9, the <code>outerHTML</code> of elements lose their text when constructing with <code>new Option()</code>."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLOptionElement: Option() constructor"
        }
    ],
    "htmloptionelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLOptionElement.json",
            "name": "HTMLOptionElement",
            "slug": "API/HTMLOptionElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionElement",
            "summary": "The HTMLOptionElement interface represents <option> elements and inherits all properties and methods of the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLOptionElement"
        }
    ],
    "the-htmloptionscollection-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLOptionsCollection.json",
            "name": "HTMLOptionsCollection",
            "slug": "API/HTMLOptionsCollection",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOptionsCollection",
            "summary": "The HTMLOptionsCollection interface represents a collection of <option> HTML elements (in document order) and offers methods and properties for selecting from the list as well as optionally altering its items. This object is returned only by the options property of select.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLOptionsCollection"
        }
    ],
    "htmloutputelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLOutputElement.json",
            "name": "HTMLOutputElement",
            "slug": "API/HTMLOutputElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLOutputElement",
            "summary": "The HTMLOutputElement interface provides properties and methods (beyond those inherited from HTMLElement) for manipulating the layout and presentation of <output> elements.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLOutputElement"
        }
    ],
    "htmlparagraphelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLParagraphElement.json",
            "name": "HTMLParagraphElement",
            "slug": "API/HTMLParagraphElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLParagraphElement",
            "summary": "The HTMLParagraphElement interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating <p> elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLParagraphElement"
        }
    ],
    "htmlpictureelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLPictureElement.json",
            "name": "HTMLPictureElement",
            "slug": "API/HTMLPictureElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLPictureElement",
            "summary": "The HTMLPictureElement interface represents a <picture> HTML element. It doesn't implement specific properties or methods.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLPictureElement"
        }
    ],
    "htmlpreelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLPreElement.json",
            "name": "HTMLPreElement",
            "slug": "API/HTMLPreElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLPreElement",
            "summary": "The HTMLPreElement interface exposes specific properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating a block of preformatted text (<pre>).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLPreElement"
        }
    ],
    "htmlprogresselement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLProgressElement.json",
            "name": "HTMLProgressElement",
            "slug": "API/HTMLProgressElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLProgressElement",
            "summary": "The HTMLProgressElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of <progress> elements.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLProgressElement"
        }
    ],
    "htmlquoteelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLQuoteElement.json",
            "name": "HTMLQuoteElement",
            "slug": "API/HTMLQuoteElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLQuoteElement",
            "summary": "The HTMLQuoteElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating quoting elements, like <blockquote> and <q>, but not the <cite> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLQuoteElement"
        }
    ],
    "dom-script-referrerpolicy": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLScriptElement.json",
            "name": "referrerPolicy",
            "slug": "API/HTMLScriptElement/referrerPolicy",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/referrerPolicy",
            "summary": "The referrerPolicy property of the HTMLScriptElement interface reflects the HTML referrerpolicy of the <script> element, which defines how the referrer is set when fetching the script and any scripts it imports.",
            "support": {
                "chrome": {
                    "version_added": "70"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "65"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLScriptElement: referrerPolicy property"
        }
    ],
    "dom-script-supports": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLScriptElement.json",
            "name": "supports_static",
            "slug": "API/HTMLScriptElement/supports_static",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement/supports_static",
            "summary": "The supports() static method of the HTMLScriptElement interface provides a simple and consistent method to feature-detect what types of scripts are supported by the user agent.",
            "support": {
                "chrome": {
                    "version_added": "96"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "94"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "96"
                }
            },
            "title": "HTMLScriptElement: supports() static method"
        }
    ],
    "htmlscriptelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLScriptElement.json",
            "name": "HTMLScriptElement",
            "slug": "API/HTMLScriptElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLScriptElement",
            "summary": "HTML <script> elements expose the HTMLScriptElement interface, which provides special properties and methods for manipulating the behavior and execution of <script> elements (beyond the inherited HTMLElement interface).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLScriptElement"
        }
    ],
    "dom-select-add-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "add",
            "slug": "API/HTMLSelectElement/add",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/add",
            "summary": "The HTMLSelectElement.add() method adds an element to the collection of option elements for this select element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSelectElement: add() method"
        }
    ],
    "dom-select-item-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "item",
            "slug": "API/HTMLSelectElement/item",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/item",
            "summary": "The HTMLSelectElement.item() method returns the Element corresponding to the HTMLOptionElement whose position in the options list corresponds to the index given in the parameter, or null if there are none.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSelectElement: item() method"
        }
    ],
    "dom-select-nameditem-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "namedItem",
            "slug": "API/HTMLSelectElement/namedItem",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/namedItem",
            "summary": "The HTMLSelectElement.namedItem() method returns the HTMLOptionElement corresponding to the HTMLOptionElement whose name or id match the specified name, or null if no option matches.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6",
                    "notes": "<code>namedItem</code> does not appear to take the <code>name</code> attribute into account (only the <code>id</code> attribute) on Internet Explorer and Edge. There is a <a href='https://connect.microsoft.com/IE/feedbackdetail/view/2414092/'>bug report</a> to Microsoft about this."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSelectElement: namedItem() method"
        }
    ],
    "dom-select-options-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "options",
            "slug": "API/HTMLSelectElement/options",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/options",
            "summary": "The HTMLSelectElement.options read-only property returns a HTMLOptionsCollection of the <option> elements contained by the <select> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSelectElement: options property"
        }
    ],
    "dom-select-remove": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "remove",
            "slug": "API/HTMLSelectElement/remove",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/remove",
            "summary": "The HTMLSelectElement.remove() method removes the element at the specified index from the options collection for this select element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSelectElement: remove() method"
        }
    ],
    "dom-select-selectedindex-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "selectedIndex",
            "slug": "API/HTMLSelectElement/selectedIndex",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/selectedIndex",
            "summary": "The HTMLSelectElement.selectedIndex property is a long that reflects the index of the first or last selected <option> element, depending on the value of multiple. The value -1 indicates that no element is selected.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSelectElement: selectedIndex property"
        }
    ],
    "dom-select-selectedoptions-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "selectedOptions",
            "slug": "API/HTMLSelectElement/selectedOptions",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/selectedOptions",
            "summary": "The read-only HTMLSelectElement property selectedOptions contains a list of the <option> elements contained within the <select> element that are currently selected. The list of selected options is an HTMLCollection object with one entry per currently selected option.",
            "support": {
                "chrome": {
                    "version_added": "19"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "26"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSelectElement: selectedOptions property"
        }
    ],
    "dom-select-type-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "type",
            "slug": "API/HTMLSelectElement/type",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement/type",
            "summary": "The HTMLSelectElement.type read-only property returns the form control's type.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "1"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "2"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSelectElement: type property"
        }
    ],
    "htmlselectelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSelectElement.json",
            "name": "HTMLSelectElement",
            "slug": "API/HTMLSelectElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSelectElement",
            "summary": "The HTMLSelectElement interface represents a <select> HTML Element. These elements also share all of the properties and methods of other HTML elements via the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "You should watch for <a href='https://developer.mozilla.org/docs/Web/Events/change'>change</a> events on <a href='https://developer.mozilla.org/docs/Web/HTML/Element/select'><code>&lt;select&gt;</code></a> instead of watching <code>&lt;option&gt;</code> elements for events. See <a href='https://bugzil.la/1090602'>bug 1090602</a> and <a href='https://developer.mozilla.org/docs/Mozilla/Firefox/Multiprocess_Firefox/Web_content_compatibility'>Multiprocess Firefox Web content compatibility</a> for details."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "1"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "2"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSelectElement"
        }
    ],
    "dom-slot-assign": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSlotElement.json",
            "name": "assign",
            "slug": "API/HTMLSlotElement/assign",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assign",
            "summary": "The assign() method of the HTMLSlotElement interface sets the slot's manually assigned nodes to an ordered set of slottables. The manually assigned nodes set is initially empty until nodes are assigned using assign().",
            "support": {
                "chrome": {
                    "version_added": "86"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "92"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "86"
                }
            },
            "title": "HTMLSlotElement: assign() method"
        }
    ],
    "dom-slot-assignedelements-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSlotElement.json",
            "name": "assignedElements",
            "slug": "API/HTMLSlotElement/assignedElements",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements",
            "summary": "The assignedElements() method of the HTMLSlotElement interface returns a sequence of the elements assigned to this slot (and no other nodes).",
            "support": {
                "chrome": {
                    "version_added": "65"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "66"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "12.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSlotElement: assignedElements() method"
        }
    ],
    "dom-slot-assignednodes-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSlotElement.json",
            "name": "assignedNodes",
            "slug": "API/HTMLSlotElement/assignedNodes",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedNodes",
            "summary": "The assignedNodes() method of the HTMLSlotElement interface returns a sequence of the nodes assigned to this slot.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSlotElement: assignedNodes() method"
        }
    ],
    "dom-slot-name-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSlotElement.json",
            "name": "name",
            "slug": "API/HTMLSlotElement/name",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/name",
            "summary": "The name property of the HTMLSlotElement interface returns or sets the slot name. A slot is a placeholder inside a web component that users can fill with their own markup.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSlotElement: name property"
        }
    ],
    "handler-onslotchange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSlotElement.json",
            "name": "slotchange_event",
            "slug": "API/HTMLSlotElement/slotchange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/slotchange_event",
            "summary": "The slotchange event is fired on an HTMLSlotElement instance (<slot> element) when the node(s) contained in that slot change.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSlotElement: slotchange event"
        }
    ],
    "htmlslotelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSlotElement.json",
            "name": "HTMLSlotElement",
            "slug": "API/HTMLSlotElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement",
            "summary": "The HTMLSlotElement interface of the Shadow DOM API enables access to the name and assigned nodes of an HTML <slot> element.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSlotElement"
        }
    ],
    "htmlsourceelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSourceElement.json",
            "name": "HTMLSourceElement",
            "slug": "API/HTMLSourceElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSourceElement",
            "summary": "The HTMLSourceElement interface provides special properties (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating <source> elements.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSourceElement"
        }
    ],
    "htmlspanelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLSpanElement.json",
            "name": "HTMLSpanElement",
            "slug": "API/HTMLSpanElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLSpanElement",
            "summary": "The HTMLSpanElement interface represents a <span> element and derives from the HTMLElement interface, but without implementing any additional properties or methods.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLSpanElement"
        }
    ],
    "dom-style-disabled": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLStyleElement.json",
            "name": "disabled",
            "slug": "API/HTMLStyleElement/disabled",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/disabled",
            "summary": "The HTMLStyleElement.disabled property can be used to get and set whether the stylesheet is disabled (true) or not (false).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLStyleElement: disabled property"
        }
    ],
    "dom-style-media": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLStyleElement.json",
            "name": "media",
            "slug": "API/HTMLStyleElement/media",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/media",
            "summary": "The HTMLStyleElement.media property specifies the intended destination medium for style information.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLStyleElement: media property"
        }
    ],
    "htmlstyleelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLStyleElement.json",
            "name": "HTMLStyleElement",
            "slug": "API/HTMLStyleElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement",
            "summary": "The HTMLStyleElement interface represents a <style> element. It inherits properties and methods from its parent, HTMLElement.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLStyleElement"
        }
    ],
    "htmltablecaptionelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableCaptionElement.json",
            "name": "HTMLTableCaptionElement",
            "slug": "API/HTMLTableCaptionElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCaptionElement",
            "summary": "The HTMLTableCaptionElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating table <caption> elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTableCaptionElement"
        }
    ],
    "htmltablecellelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableCellElement.json",
            "name": "HTMLTableCellElement",
            "slug": "API/HTMLTableCellElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableCellElement",
            "summary": "The HTMLTableCellElement interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header cells (<th>)) or data cells (<td>), in an HTML document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTableCellElement"
        }
    ],
    "htmltablecolelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableColElement.json",
            "name": "HTMLTableColElement",
            "slug": "API/HTMLTableColElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableColElement",
            "summary": "The HTMLTableColElement interface provides properties for manipulating single or grouped table column elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTableColElement"
        }
    ],
    "dom-table-caption-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "caption",
            "slug": "API/HTMLTableElement/caption",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/caption",
            "summary": "The HTMLTableElement.caption property represents the table caption. If no caption element is associated with the table, this property is null.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTableElement: caption property"
        }
    ],
    "dom-table-createcaption-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "createCaption",
            "slug": "API/HTMLTableElement/createCaption",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createCaption",
            "summary": "The HTMLTableElement.createCaption() method returns the <caption> element associated with a given <table>. If no <caption> element exists on the table, this method creates it, and then returns it.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTableElement: createCaption() method"
        }
    ],
    "dom-table-createtbody-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "createTBody",
            "slug": "API/HTMLTableElement/createTBody",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createTBody",
            "summary": "The createTBody() method of HTMLTableElement objects creates and returns a new <tbody> element associated with a given <table>.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTableElement: createTBody() method"
        }
    ],
    "dom-table-createtfoot-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "createTFoot",
            "slug": "API/HTMLTableElement/createTFoot",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createTFoot",
            "summary": "The createTFoot() method of HTMLTableElement objects returns the <tfoot> element associated with a given <table>. If no footer exists in the table, this method creates it, and then returns it.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTableElement: createTFoot() method"
        }
    ],
    "dom-table-createthead-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "createTHead",
            "slug": "API/HTMLTableElement/createTHead",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/createTHead",
            "summary": "The createTHead() method of HTMLTableElement objects returns the <thead> element associated with a given <table>. If no header exists in the table, this method creates it, and then returns it.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTableElement: createTHead() method"
        }
    ],
    "dom-table-deletecaption-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "deleteCaption",
            "slug": "API/HTMLTableElement/deleteCaption",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteCaption",
            "summary": "The HTMLTableElement.deleteCaption() method removes the <caption> element from a given <table>. If there is no <caption> element associated with the table, this method does nothing.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTableElement: deleteCaption() method"
        }
    ],
    "dom-table-deleterow-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "deleteRow",
            "slug": "API/HTMLTableElement/deleteRow",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteRow",
            "summary": "The HTMLTableElement.deleteRow() method removes a specific row (<tr>) from a given <table>.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTableElement: deleteRow() method"
        }
    ],
    "dom-table-deletetfoot-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "deleteTFoot",
            "slug": "API/HTMLTableElement/deleteTFoot",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteTFoot",
            "summary": "The HTMLTableElement.deleteTFoot() method removes the <tfoot> element from a given <table>.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTableElement: deleteTFoot() method"
        }
    ],
    "dom-table-deletethead-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "deleteTHead",
            "slug": "API/HTMLTableElement/deleteTHead",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/deleteTHead",
            "summary": "The HTMLTableElement.deleteTHead() removes the <thead> element from a given <table>.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTableElement: deleteTHead() method"
        }
    ],
    "dom-table-insertrow-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "insertRow",
            "slug": "API/HTMLTableElement/insertRow",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/insertRow",
            "summary": "The HTMLTableElement.insertRow() method inserts a new row (<tr>) in a given <table>, and returns a reference to the new row.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Starting with Firefox 20, the <code>index</code> parameter has been made optional and defaults to -1 as per HTML specification."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTableElement: insertRow() method"
        }
    ],
    "dom-table-rows-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "rows",
            "slug": "API/HTMLTableElement/rows",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/rows",
            "summary": "The read-only HTMLTableElement property rows returns a live HTMLCollection of all the rows in the table, including the rows contained within any <thead>, <tfoot>, and <tbody> elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTableElement: rows property"
        }
    ],
    "dom-table-tbodies-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "tBodies",
            "slug": "API/HTMLTableElement/tBodies",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tBodies",
            "summary": "The HTMLTableElement.tBodies read-only property returns a live HTMLCollection of the bodies in a <table>.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTableElement: tBodies property"
        }
    ],
    "dom-table-tfoot-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "tFoot",
            "slug": "API/HTMLTableElement/tFoot",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tFoot",
            "summary": "The HTMLTableElement.tFoot property represents the <tfoot> element of a <table>. Its value will be null if there is no such element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTableElement: tFoot property"
        }
    ],
    "dom-table-thead-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "tHead",
            "slug": "API/HTMLTableElement/tHead",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement/tHead",
            "summary": "The HTMLTableElement.tHead represents the <thead> element of a <table>. Its value will be null if there is no such element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTableElement: tHead property"
        }
    ],
    "htmltableelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableElement.json",
            "name": "HTMLTableElement",
            "slug": "API/HTMLTableElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableElement",
            "summary": "The HTMLTableElement interface provides special properties and methods (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTableElement"
        }
    ],
    "dom-tr-insertcell-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableRowElement.json",
            "name": "insertCell",
            "slug": "API/HTMLTableRowElement/insertCell",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement/insertCell",
            "summary": "The HTMLTableRowElement.insertCell() method inserts a new cell (<td>) into a table row (<tr>) and returns a reference to the cell.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTableRowElement: insertCell() method"
        }
    ],
    "dom-tr-rowindex-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableRowElement.json",
            "name": "rowIndex",
            "slug": "API/HTMLTableRowElement/rowIndex",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement/rowIndex",
            "summary": "The HTMLTableRowElement.rowIndex read-only property represents the position of a row in relation to the whole <table>.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTableRowElement: rowIndex property"
        }
    ],
    "htmltablerowelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableRowElement.json",
            "name": "HTMLTableRowElement",
            "slug": "API/HTMLTableRowElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableRowElement",
            "summary": "The HTMLTableRowElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTableRowElement"
        }
    ],
    "htmltablesectionelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTableSectionElement.json",
            "name": "HTMLTableSectionElement",
            "slug": "API/HTMLTableSectionElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTableSectionElement",
            "summary": "The HTMLTableSectionElement interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies (<thead>, <tfoot>, and <tbody>, respectively) in an HTML table.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTableSectionElement"
        }
    ],
    "dom-template-content-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTemplateElement.json",
            "name": "content",
            "slug": "API/HTMLTemplateElement/content",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTemplateElement/content",
            "summary": "The HTMLTemplateElement.content property returns a <template> element's template contents (a DocumentFragment).",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTemplateElement: content property"
        }
    ],
    "htmltemplateelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTemplateElement.json",
            "name": "HTMLTemplateElement",
            "slug": "API/HTMLTemplateElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTemplateElement",
            "summary": "The HTMLTemplateElement interface enables access to the contents of an HTML <template> element.",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTemplateElement"
        }
    ],
    "htmltextareaelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTextAreaElement.json",
            "name": "HTMLTextAreaElement",
            "slug": "API/HTMLTextAreaElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTextAreaElement",
            "summary": "The HTMLTextAreaElement interface provides special properties and methods for manipulating the layout and presentation of <textarea> elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTextAreaElement"
        }
    ],
    "dom-time-datetime": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTimeElement.json",
            "name": "dateTime",
            "slug": "API/HTMLTimeElement/dateTime",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement/dateTime",
            "summary": "The HTMLTimeElement.dateTime property is a string that reflects the datetime HTML attribute, containing a machine-readable form of the element's date and time value.",
            "support": {
                "chrome": {
                    "version_added": "62"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "49"
                    },
                    {
                        "version_added": "11.5",
                        "version_removed": "15"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "46"
                    },
                    {
                        "version_added": "11.5",
                        "version_removed": "14"
                    }
                ],
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTimeElement: dateTime property"
        }
    ],
    "htmltimeelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTimeElement.json",
            "name": "HTMLTimeElement",
            "slug": "API/HTMLTimeElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTimeElement",
            "summary": "The HTMLTimeElement interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating <time> elements.",
            "support": {
                "chrome": {
                    "version_added": "62"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "49"
                    },
                    {
                        "version_added": "11.5",
                        "version_removed": "15"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "46"
                    },
                    {
                        "version_added": "11.5",
                        "version_removed": "14"
                    }
                ],
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTimeElement"
        }
    ],
    "htmltitleelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTitleElement.json",
            "name": "HTMLTitleElement",
            "slug": "API/HTMLTitleElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTitleElement",
            "summary": "The HTMLTitleElement interface is implemented by a document's <title>. This element inherits all of the properties and methods of the HTMLElement interface.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTitleElement"
        }
    ],
    "event-media-cuechange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTrackElement.json",
            "name": "cuechange_event",
            "slug": "API/HTMLTrackElement/cuechange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement/cuechange_event",
            "summary": "The cuechange event fires when a TextTrack has changed the currently displaying cues. The event is fired on both the TextTrack and the HTMLTrackElement in which it's being presented, if any.",
            "support": {
                "chrome": [
                    {
                        "version_added": "32"
                    },
                    {
                        "version_added": "23",
                        "partial_implementation": true,
                        "notes": "The <code>oncuechange</code> event handler property is not supported."
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "68"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "19"
                    },
                    {
                        "version_added": "15",
                        "partial_implementation": true,
                        "notes": "The <code>oncuechange</code> event handler property is not supported."
                    },
                    {
                        "version_added": "12",
                        "version_removed": "15"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "19"
                    },
                    {
                        "version_added": "14",
                        "partial_implementation": true,
                        "notes": "The <code>oncuechange</code> event handler property is not supported."
                    },
                    {
                        "version_added": "12",
                        "version_removed": "14"
                    }
                ],
                "safari": [
                    {
                        "version_added": "10"
                    },
                    {
                        "version_added": "6",
                        "partial_implementation": true,
                        "notes": "The <code>oncuechange</code> event handler property is not supported."
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": [
                    {
                        "version_added": "4.4.3"
                    },
                    {
                        "version_added": "37",
                        "partial_implementation": true,
                        "notes": "The <code>oncuechange</code> event handler property is not supported."
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": "79",
                        "partial_implementation": true,
                        "notes": "The <code>oncuechange</code> event handler property is not supported."
                    }
                ]
            },
            "title": "HTMLTrackElement: cuechange event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrack.json",
            "name": "cuechange_event",
            "slug": "API/TextTrack/cuechange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/cuechange_event",
            "summary": "The cuechange event fires when a TextTrack has changed the currently displaying cues. The event is fired on both the TextTrack and the HTMLTrackElement in which it's being presented, if any.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrack: cuechange event"
        }
    ],
    "handler-oncuechange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTrackElement.json",
            "name": "cuechange_event",
            "slug": "API/HTMLTrackElement/cuechange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement/cuechange_event",
            "summary": "The cuechange event fires when a TextTrack has changed the currently displaying cues. The event is fired on both the TextTrack and the HTMLTrackElement in which it's being presented, if any.",
            "support": {
                "chrome": [
                    {
                        "version_added": "32"
                    },
                    {
                        "version_added": "23",
                        "partial_implementation": true,
                        "notes": "The <code>oncuechange</code> event handler property is not supported."
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "68"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "19"
                    },
                    {
                        "version_added": "15",
                        "partial_implementation": true,
                        "notes": "The <code>oncuechange</code> event handler property is not supported."
                    },
                    {
                        "version_added": "12",
                        "version_removed": "15"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "19"
                    },
                    {
                        "version_added": "14",
                        "partial_implementation": true,
                        "notes": "The <code>oncuechange</code> event handler property is not supported."
                    },
                    {
                        "version_added": "12",
                        "version_removed": "14"
                    }
                ],
                "safari": [
                    {
                        "version_added": "10"
                    },
                    {
                        "version_added": "6",
                        "partial_implementation": true,
                        "notes": "The <code>oncuechange</code> event handler property is not supported."
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": [
                    {
                        "version_added": "4.4.3"
                    },
                    {
                        "version_added": "37",
                        "partial_implementation": true,
                        "notes": "The <code>oncuechange</code> event handler property is not supported."
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": "79",
                        "partial_implementation": true,
                        "notes": "The <code>oncuechange</code> event handler property is not supported."
                    }
                ]
            },
            "title": "HTMLTrackElement: cuechange event"
        }
    ],
    "dom-track-src": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTrackElement.json",
            "name": "src",
            "slug": "API/HTMLTrackElement/src",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement/src",
            "summary": "The HTMLTrackElement.src property reflects the value of the <track> element's src attribute, which indicates the URL of the text track's data.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31",
                    "notes": "Before Firefox 50, setting the <code>src</code> property did not work properly."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTrackElement: src property"
        }
    ],
    "htmltrackelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLTrackElement.json",
            "name": "HTMLTrackElement",
            "slug": "API/HTMLTrackElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLTrackElement",
            "summary": "The HTMLTrackElement interface represents an HTML <track> element within the DOM. This element can be used as a child of either <audio> or <video> to specify a text track containing information such as closed captions or subtitles.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31",
                    "notes": "Before Firefox 50, text tracks would only load if the <code>&lt;track&gt;</code> element is in a document."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLTrackElement"
        }
    ],
    "htmlulistelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLUListElement.json",
            "name": "HTMLUListElement",
            "slug": "API/HTMLUListElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLUListElement",
            "summary": "The HTMLUListElement interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating unordered list (<ul>) elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLUListElement"
        }
    ],
    "htmlunknownelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLUnknownElement.json",
            "name": "HTMLUnknownElement",
            "slug": "API/HTMLUnknownElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLUnknownElement",
            "summary": "The HTMLUnknownElement interface represents an invalid HTML element and derives from the HTMLElement interface, but without implementing any additional properties or methods.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLUnknownElement"
        }
    ],
    "dom-video-videoheight-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLVideoElement.json",
            "name": "videoHeight",
            "slug": "API/HTMLVideoElement/videoHeight",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/videoHeight",
            "summary": "The HTMLVideoElement interface's read-only videoHeight property indicates the intrinsic height of the video, expressed in CSS pixels. In simple terms, this is the height of the media in its natural size.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLVideoElement: videoHeight property"
        }
    ],
    "dom-video-videowidth-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLVideoElement.json",
            "name": "videoWidth",
            "slug": "API/HTMLVideoElement/videoWidth",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/videoWidth",
            "summary": "The HTMLVideoElement interface's read-only videoWidth property indicates the intrinsic width of the video, expressed in CSS pixels. In simple terms, this is the width of the media in its natural size.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLVideoElement: videoWidth property"
        }
    ],
    "htmlvideoelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HTMLVideoElement.json",
            "name": "HTMLVideoElement",
            "slug": "API/HTMLVideoElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement",
            "summary": "Implemented by the <video> element, the HTMLVideoElement interface provides special properties and methods for manipulating video objects. It also inherits properties and methods of HTMLMediaElement and HTMLElement.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLVideoElement"
        }
    ],
    "the-hashchangeevent-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HashChangeEvent.json",
            "name": "HashChangeEvent",
            "slug": "API/HashChangeEvent/HashChangeEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent/HashChangeEvent",
            "summary": "The HashChangeEvent() constructor creates a new HashChangeEvent object, that is used by the hashchange event fired at the window object when the fragment of the URL changes.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "11"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HashChangeEvent: HashChangeEvent() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HashChangeEvent.json",
            "name": "HashChangeEvent",
            "slug": "API/HashChangeEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent",
            "summary": "The HashChangeEvent interface represents events that fire when the fragment identifier of the URL has changed.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HashChangeEvent"
        }
    ],
    "dom-hashchangeevent-newurl-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HashChangeEvent.json",
            "name": "newURL",
            "slug": "API/HashChangeEvent/newURL",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent/newURL",
            "summary": "The newURL read-only property of the HashChangeEvent interface returns the new URL to which the window is navigating.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HashChangeEvent: newURL property"
        }
    ],
    "dom-hashchangeevent-oldurl-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/HashChangeEvent.json",
            "name": "oldURL",
            "slug": "API/HashChangeEvent/oldURL",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HashChangeEvent/oldURL",
            "summary": "The oldURL read-only property of the HashChangeEvent interface returns the previous URL from which the window was navigated.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HashChangeEvent: oldURL property"
        }
    ],
    "dom-history-back-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/History.json",
            "name": "back",
            "slug": "API/History/back",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/History/back",
            "summary": "The History.back() method causes the browser to move back one page in the session history.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "History: back() method"
        }
    ],
    "dom-history-forward-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/History.json",
            "name": "forward",
            "slug": "API/History/forward",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/History/forward",
            "summary": "The History.forward() method causes the browser to move forward one page in the session history. It has the same effect as calling history.go(1).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "History: forward() method"
        }
    ],
    "dom-history-go-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/History.json",
            "name": "go",
            "slug": "API/History/go",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/History/go",
            "summary": "The History.go() method loads a specific page from the session history. You can use it to move forwards and backwards through the history depending on the value of a parameter.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "History: go() method"
        }
    ],
    "dom-history-length-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/History.json",
            "name": "length",
            "slug": "API/History/length",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/History/length",
            "summary": "The History.length read-only property returns an integer representing the number of elements in the session history, including the currently loaded page.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "History: length property"
        }
    ],
    "dom-history-pushstate-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/History.json",
            "name": "pushState",
            "slug": "API/History/pushState",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/History/pushState",
            "summary": "In an HTML document, the history.pushState() method adds an entry to the browser's session history stack.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4",
                    "notes": "Until Firefox 5, the passed object is serialized using JSON. Starting in Firefox 6, the object is serialized using <a href='https://developer.mozilla.org/docs/DOM/The_structured_clone_algorithm'>the structured clone algorithm</a>. This allows a wider variety of objects to be safely passed."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "History: pushState() method"
        }
    ],
    "dom-history-replacestate-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/History.json",
            "name": "replaceState",
            "slug": "API/History/replaceState",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState",
            "summary": "The History.replaceState() method modifies the current history entry, replacing it with the state object and URL passed in the method parameters. This method is particularly useful when you want to update the state object or URL of the current history entry in response to some user action.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4",
                    "notes": "Until Firefox 5, the passed object is serialized using JSON. Starting in Firefox 6, the object is serialized using <a href='https://developer.mozilla.org/docs/DOM/The_structured_clone_algorithm'>the structured clone algorithm</a>. This allows a wider variety of objects to be safely passed."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "History: replaceState() method"
        }
    ],
    "dom-history-scroll-restoration-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/History.json",
            "name": "scrollRestoration",
            "slug": "API/History/scrollRestoration",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/History/scrollRestoration",
            "summary": "The scrollRestoration property of History interface allows web applications to explicitly set default scroll restoration behavior on history navigation.",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "46"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "History: scrollRestoration property"
        }
    ],
    "dom-history-state-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/History.json",
            "name": "state",
            "slug": "API/History/state",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/History/state",
            "summary": "The History.state property returns a value representing the state at the top of the history stack. This is a way to look at the state without having to wait for a popstate event.",
            "support": {
                "chrome": {
                    "version_added": "19"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "History: state property"
        }
    ],
    "the-history-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/History.json",
            "name": "History",
            "slug": "API/History",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/History",
            "summary": "The History interface allows manipulation of the browser session history, that is the pages visited in the tab or frame that the current page is loaded in.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "History"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "history",
            "slug": "API/Window/history",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/history",
            "summary": "The Window.history read-only property returns a reference to the History object, which provides an interface for manipulating the browser session history (pages visited in the tab or frame that the current page is loaded in).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: history property"
        }
    ],
    "dom-imagebitmap-close-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ImageBitmap.json",
            "name": "close",
            "slug": "API/ImageBitmap/close",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap/close",
            "summary": "The ImageBitmap.close() method disposes of all graphical resources associated with an ImageBitmap.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "46"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "37"
                },
                "opera_android": {
                    "version_added": "37"
                },
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ImageBitmap: close() method"
        }
    ],
    "dom-imagebitmap-height-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ImageBitmap.json",
            "name": "height",
            "slug": "API/ImageBitmap/height",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap/height",
            "summary": "The read-only ImageBitmap.height property returns the ImageBitmap object's height in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ImageBitmap: height property"
        }
    ],
    "dom-imagebitmap-width-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ImageBitmap.json",
            "name": "width",
            "slug": "API/ImageBitmap/width",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap/width",
            "summary": "The read-only ImageBitmap.width property returns the ImageBitmap object's width in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ImageBitmap: width property"
        }
    ],
    "imagebitmap": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ImageBitmap.json",
            "name": "ImageBitmap",
            "slug": "API/ImageBitmap",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmap",
            "summary": "The ImageBitmap interface represents a bitmap image which can be drawn to a <canvas> without undue latency. It can be created from a variety of source objects using the createImageBitmap() factory method. ImageBitmap provides an asynchronous and resource efficient pathway to prepare textures for rendering in WebGL.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ImageBitmap"
        }
    ],
    "dom-imagebitmaprenderingcontext-transferfromimagebitmap-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ImageBitmapRenderingContext.json",
            "name": "transferFromImageBitmap",
            "slug": "API/ImageBitmapRenderingContext/transferFromImageBitmap",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapRenderingContext/transferFromImageBitmap",
            "summary": "The ImageBitmapRenderingContext.transferFromImageBitmap() method displays the given ImageBitmap in the canvas associated with this rendering context. The ownership of the ImageBitmap is transferred to the canvas as well.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": [
                    {
                        "version_added": "50"
                    },
                    {
                        "version_added": "46",
                        "version_removed": "52",
                        "alternative_name": "transferImageBitmap"
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ImageBitmapRenderingContext: transferFromImageBitmap() method"
        }
    ],
    "the-imagebitmaprenderingcontext-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ImageBitmapRenderingContext.json",
            "name": "ImageBitmapRenderingContext",
            "slug": "API/ImageBitmapRenderingContext",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapRenderingContext",
            "summary": "The ImageBitmapRenderingContext interface is a canvas rendering context that provides the functionality to replace the canvas's contents with the given ImageBitmap. Its context id (the first argument to HTMLCanvasElement.getContext() or OffscreenCanvas.getContext()) is \"bitmaprenderer\".",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "46"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ImageBitmapRenderingContext"
        }
    ],
    "dom-imagedata-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ImageData.json",
            "name": "ImageData",
            "slug": "API/ImageData/ImageData",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ImageData/ImageData",
            "summary": "The ImageData() constructor returns a newly instantiated ImageData object built from the typed array given and having the specified width and height.",
            "support": {
                "chrome": {
                    "version_added": "36"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ImageData: ImageData() constructor"
        }
    ],
    "dom-imagedata-colorspace": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "api/ImageData.json",
            "name": "colorSpace",
            "slug": "API/ImageData/colorSpace",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ImageData/colorSpace",
            "summary": "The read-only ImageData.colorSpace property is a string indicating the color space of the image data.",
            "support": {
                "chrome": {
                    "version_added": "92"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "92"
                }
            },
            "title": "ImageData: colorSpace property"
        }
    ],
    "dom-imagedata-data-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ImageData.json",
            "name": "data",
            "slug": "API/ImageData/data",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ImageData/data",
            "summary": "The readonly ImageData.data property returns a Uint8ClampedArray that contains the ImageData object's pixel data. Data is stored as a one-dimensional array in the RGBA order, with integer values between 0 and 255 (inclusive).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ImageData: data property"
        }
    ],
    "dom-imagedata-height-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ImageData.json",
            "name": "height",
            "slug": "API/ImageData/height",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ImageData/height",
            "summary": "The readonly ImageData.height property returns the number of rows in the ImageData object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ImageData: height property"
        }
    ],
    "dom-imagedata-width-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ImageData.json",
            "name": "width",
            "slug": "API/ImageData/width",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ImageData/width",
            "summary": "The readonly ImageData.width property returns the number of pixels per row in the ImageData object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ImageData: width property"
        }
    ],
    "imagedata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ImageData.json",
            "name": "ImageData",
            "slug": "API/ImageData",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ImageData",
            "summary": "The ImageData interface represents the underlying pixel data of an area of a <canvas> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ImageData"
        }
    ],
    "dom-location-ancestororigins-dev": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "ancestorOrigins",
            "slug": "API/Location/ancestorOrigins",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Location/ancestorOrigins",
            "summary": "The ancestorOrigins read-only property of the Location interface is a static DOMStringList containing, in reverse order, the origins of all ancestor browsing contexts of the document associated with the given Location object.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "location: ancestorOrigins property"
        }
    ],
    "dom-location-assign-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "assign",
            "slug": "API/Location/assign",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Location/assign",
            "summary": "The Location.assign() method causes the window to load and display the document at the URL specified. After the navigation occurs, the user can navigate back to the page that called Location.assign() by pressing the \"back\" button.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "location: assign() method"
        }
    ],
    "dom-location-hash-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "hash",
            "slug": "API/Location/hash",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Location/hash",
            "summary": "The hash property of the Location interface returns a string containing a '#' followed by the fragment identifier of the URL — the ID on the page that the URL is trying to target.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "location: hash property"
        }
    ],
    "dom-location-host-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "host",
            "slug": "API/Location/host",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Location/host",
            "summary": "The host property of the Location interface is a string containing the host, that is the hostname, and then, if the port of the URL is nonempty, a ':', and the port of the URL.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "location: host property"
        }
    ],
    "dom-location-hostname-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "hostname",
            "slug": "API/Location/hostname",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Location/hostname",
            "summary": "The hostname property of the Location interface is a string containing the domain of the URL.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "location: hostname property"
        }
    ],
    "dom-location-href-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "href",
            "slug": "API/Location/href",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Location/href",
            "summary": "The href property of the Location interface is a stringifier that returns a string containing the whole URL, and allows the href to be updated.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "location: href property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "toString",
            "slug": "API/Location/toString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Location/toString",
            "summary": "The toString() stringifier method of the Location interface returns a string containing the whole URL. It is a read-only version of Location.href.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11",
                    "notes": "Intranet sites are set to Compatibility View, which will emulate IE7 and omit <code>window.location.toString</code>."
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "location: toString() method"
        }
    ],
    "dom-location-origin-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "origin",
            "slug": "API/Location/origin",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Location/origin",
            "summary": "The origin read-only property of the Location interface is a string containing the Unicode serialization of the origin of the represented URL.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "21",
                    "notes": "Before Firefox 49, results for URL using the blob scheme incorrectly returned null."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11",
                    "notes": "Intranet sites are set to Compatibility View, which will emulate IE7 and omit <code>window.location.origin</code>."
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "location: origin property"
        }
    ],
    "dom-location-pathname-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "pathname",
            "slug": "API/Location/pathname",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Location/pathname",
            "summary": "The pathname property of the Location interface is a string containing the path of the URL for the location. If there is no path, pathname will be empty: otherwise, pathname contains an initial '/' followed by the path of the URL, not including the query string or fragment.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 53, the <code>pathname</code> property returned wrong parts of the URL. For example, for a URL of http://z.com/x?a=true&amp;b=false, <code>pathname</code> would return \"/x?a=true&amp;b=false\" rather than \"/x\"."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3",
                    "notes": "Internet Explorer does not provide the leading slash character in the <code>pathname</code> (<code>docs/Web/API/Location</code> instead of <code>/docs/Web/API/Location</code>)."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "location: pathname property"
        }
    ],
    "dom-location-port-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "port",
            "slug": "API/Location/port",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Location/port",
            "summary": "The port property of the Location interface is a string containing the port number of the URL. If the URL does not contain an explicit port number, it will be set to ''.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "location: port property"
        }
    ],
    "dom-location-protocol-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "protocol",
            "slug": "API/Location/protocol",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Location/protocol",
            "summary": "The protocol property of the Location interface is a string representing the protocol scheme of the URL, including the final ':'.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "location: protocol property"
        }
    ],
    "dom-location-reload-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "reload",
            "slug": "API/Location/reload",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Location/reload",
            "summary": "The location.reload() method reloads the current URL, like the Refresh button.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5",
                    "notes": "If a page added to <em>Trusted Sites</em> contains a cross-origin iframe, then calling <code>reload()</code> from within the iframe reloads the trusted page (in other words, the top page reloads, not the iframe)."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "location: reload() method"
        }
    ],
    "dom-location-replace-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "replace",
            "slug": "API/Location/replace",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Location/replace",
            "summary": "The replace() method of the Location interface replaces the current resource with the one at the provided URL. The difference from the assign() method is that after using replace() the current page will not be saved in session History, meaning the user won't be able to use the back button to navigate to it.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "location: replace() method"
        }
    ],
    "dom-location-search-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Location.json",
            "name": "search",
            "slug": "API/Location/search",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Location/search",
            "summary": "The search property of the Location interface is a search string, also called a query string; that is, a string containing a '?' followed by the parameters of the URL.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 53, the <code>search</code> property returned wrong parts of the URL. For example, for a URL of http://z.com/x?a=true&amp;b=false, <code>search</code> would return \"\", rather than \"?a=true&amp;b=false\"."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "location: search property"
        }
    ],
    "dom-mediaerror-code-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MediaError.json",
            "name": "code",
            "slug": "API/MediaError/code",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaError/code",
            "summary": "The read-only property MediaError.code returns a numeric value which represents the kind of error that occurred on a media element. To get a text string with specific diagnostic information, see MediaError.message.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MediaError: code property"
        }
    ],
    "dom-mediaerror-message-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MediaError.json",
            "name": "message",
            "slug": "API/MediaError/message",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaError/message",
            "summary": "The read-only property MediaError.message returns a human-readable string offering specific diagnostic details related to the error described by the MediaError object, or an empty string (\"\") if no diagnostic information can be determined or provided.",
            "support": {
                "chrome": {
                    "version_added": "59"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MediaError: message property"
        }
    ],
    "error-codes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MediaError.json",
            "name": "MediaError",
            "slug": "API/MediaError",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaError",
            "summary": "The MediaError interface represents an error which occurred while handling media in an HTML media element based on HTMLMediaElement, such as <audio> or <video>.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "4"
                    },
                    {
                        "alternative_name": "HTMLMediaError",
                        "version_added": "3.5",
                        "version_removed": "4"
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MediaError"
        }
    ],
    "dom-messagechannel-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessageChannel.json",
            "name": "MessageChannel",
            "slug": "API/MessageChannel/MessageChannel",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel/MessageChannel",
            "summary": "The MessageChannel() constructor of the MessageChannel interface returns a new MessageChannel object with two new MessagePort objects.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.12"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": [
                    {
                        "version_added": "15.0.0"
                    },
                    {
                        "version_added": "10.5.0",
                        "version_removed": "15.0.0",
                        "partial_implementation": true,
                        "notes": "Must be imported from the <code>worker_threads</code> module."
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessageChannel: MessageChannel() constructor"
        }
    ],
    "dom-messagechannel-port1-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessageChannel.json",
            "name": "port1",
            "slug": "API/MessageChannel/port1",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel/port1",
            "summary": "The port1 read-only property of the MessageChannel interface returns the first port of the message channel — the port attached to the context that originated the channel.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.12"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "10.5.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessageChannel: port1 property"
        }
    ],
    "dom-messagechannel-port2-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessageChannel.json",
            "name": "port2",
            "slug": "API/MessageChannel/port2",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel/port2",
            "summary": "The port2 read-only property of the MessageChannel interface returns the second port of the message channel — the port attached to the context at the other end of the channel, which the message is initially sent to.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.12"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "10.5.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessageChannel: port2 property"
        }
    ],
    "message-channels": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessageChannel.json",
            "name": "MessageChannel",
            "slug": "API/MessageChannel",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel",
            "summary": "The MessageChannel interface of the Channel Messaging API allows us to create a new message channel and send data through it via its two MessagePort properties.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.12"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": [
                    {
                        "version_added": "15.0.0"
                    },
                    {
                        "version_added": "10.5.0",
                        "version_removed": "15.0.0",
                        "partial_implementation": true,
                        "notes": "Must be imported from the <code>worker_threads</code> module."
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessageChannel"
        }
    ],
    "the-messageevent-interface:dom-event-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessageEvent.json",
            "name": "MessageEvent",
            "slug": "API/MessageEvent/MessageEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/MessageEvent",
            "summary": "The MessageEvent() constructor creates a new MessageEvent object.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.4"
                },
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "26"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.0.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessageEvent: MessageEvent() constructor"
        }
    ],
    "dom-messageevent-data-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessageEvent.json",
            "name": "data",
            "slug": "API/MessageEvent/data",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/data",
            "summary": "The data read-only property of the MessageEvent interface represents the data sent by the message emitter.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.4"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "15.0.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessageEvent: data property"
        }
    ],
    "dom-messageevent-lasteventid-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessageEvent.json",
            "name": "lastEventId",
            "slug": "API/MessageEvent/lastEventId",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/lastEventId",
            "summary": "The lastEventId read-only property of the MessageEvent interface is a string representing a unique ID for the event.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.4"
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "15.0.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessageEvent: lastEventId property"
        }
    ],
    "dom-messageevent-origin-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessageEvent.json",
            "name": "origin",
            "slug": "API/MessageEvent/origin",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/origin",
            "summary": "The origin read-only property of the MessageEvent interface is a string representing the origin of the message emitter.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.4"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "15.0.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessageEvent: origin property"
        }
    ],
    "dom-messageevent-ports-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessageEvent.json",
            "name": "ports",
            "slug": "API/MessageEvent/ports",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/ports",
            "summary": "The ports read-only property of the MessageEvent interface is an array of MessagePort objects representing the ports associated with the channel the message is being sent through (where appropriate, e.g. in channel messaging or when sending a message to a shared worker).",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.12"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "15.0.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessageEvent: ports property"
        }
    ],
    "dom-messageevent-source-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessageEvent.json",
            "name": "source",
            "slug": "API/MessageEvent/source",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/source",
            "summary": "The source read-only property of the MessageEvent interface is a MessageEventSource (which can be a WindowProxy, MessagePort, or ServiceWorker object) representing the message emitter.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.11"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "15.0.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessageEvent: source property"
        }
    ],
    "the-messageevent-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessageEvent.json",
            "name": "MessageEvent",
            "slug": "API/MessageEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent",
            "summary": "The MessageEvent interface represents a message received by a target object.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.4"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "nodejs": {
                    "version_added": "15.0.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessageEvent"
        }
    ],
    "dom-messageport-close-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessagePort.json",
            "name": "close",
            "slug": "API/MessagePort/close",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/close",
            "summary": "The close() method of the MessagePort interface disconnects the port, so it is no longer active. This stops the flow of messages to that port.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.12"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": [
                    {
                        "version_added": "14.7.0"
                    },
                    {
                        "version_added": "10.5.0",
                        "version_removed": "14.7.0",
                        "partial_implementation": true,
                        "notes": "Supports the event, but only via Node <code>EventEmitter</code>."
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessagePort: close() method"
        }
    ],
    "handler-messageport-onmessage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessagePort.json",
            "name": "message_event",
            "slug": "API/MessagePort/message_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/message_event",
            "summary": "The message event is fired on a MessagePort object when a message arrives on that channel.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.12"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": [
                    {
                        "version_added": "14.7.0"
                    },
                    {
                        "version_added": "10.5.0",
                        "version_removed": "14.7.0",
                        "partial_implementation": true,
                        "notes": "Supports the event, but only via Node <code>EventEmitter</code>."
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessagePort: message event"
        }
    ],
    "handler-messageport-onmessageerror": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessagePort.json",
            "name": "messageerror_event",
            "slug": "API/MessagePort/messageerror_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/messageerror_event",
            "summary": "The messageerror event is fired on a MessagePort object when it receives a message that can't be deserialized.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.12"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": [
                    {
                        "version_added": "14.7.0"
                    },
                    {
                        "version_added": "14.5.0",
                        "version_removed": "14.7.0",
                        "partial_implementation": true,
                        "notes": "Supports the event, but only via Node <code>EventEmitter</code>."
                    }
                ],
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "16.4",
                    "notes": "See <a href='https://webkit.org/b/171216'>bug 171216</a>."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessagePort: messageerror event"
        }
    ],
    "dom-messageport-postmessage-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessagePort.json",
            "name": "postMessage",
            "slug": "API/MessagePort/postMessage",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/postMessage",
            "summary": "The postMessage() method of the MessagePort interface sends a message from the port, and optionally, transfers ownership of objects to other browsing contexts.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": [
                    {
                        "version_added": "1.14",
                        "notes": "The <code>message</code> parameter does not support cloning <code>Blob</code> values."
                    },
                    {
                        "version_added": "1.12",
                        "version_removed": "1.14",
                        "partial_implementation": true,
                        "notes": [
                            "The <code>message</code> parameter does not support cloning <code>Blob</code> values.",
                            "The <code>transfer</code> parameter does not accept <code>ArrayBuffer</code> items. Passing an <code>ArrayBuffer</code> results in an error being thrown."
                        ]
                    }
                ],
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "10.5.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessagePort: postMessage() method"
        }
    ],
    "dom-messageport-start-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessagePort.json",
            "name": "start",
            "slug": "API/MessagePort/start",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/start",
            "summary": "The start() method of the MessagePort interface starts the sending of messages queued on the port. This method is only needed when using EventTarget.addEventListener; it is implied when using onmessage.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.12"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "10.5.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessagePort: start() method"
        }
    ],
    "message-ports": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MessagePort.json",
            "name": "MessagePort",
            "slug": "API/MessagePort",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MessagePort",
            "summary": "The MessagePort interface of the Channel Messaging API represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.12"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": [
                    {
                        "version_added": "14.7.0"
                    },
                    {
                        "version_added": "10.5.0",
                        "version_removed": "14.7.0",
                        "notes": "Is a Node <code>EventEmitter</code> instead of DOM <code>EventTarget</code>."
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MessagePort"
        }
    ],
    "dom-navigator-cookieenabled-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Navigator.json",
            "name": "cookieEnabled",
            "slug": "API/Navigator/cookieEnabled",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/cookieEnabled",
            "summary": "navigator.cookieEnabled returns a Boolean value that indicates whether cookies are enabled or not.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 8, <code>navigator.cookieEnabled</code> would report the wrong result if a site exception was in place for the page on which the check was performed. This has been fixed."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4",
                    "notes": "<code>navigator.cookieEnabled</code> returns <code>true</code> even if the browser is set to block cookies (for example, if the page is in the <em>Restricted sites</em> security zone)."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Navigator: cookieEnabled property"
        }
    ],
    "dom-navigator-hardwareconcurrency-dev": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/Navigator.json",
            "name": "hardwareConcurrency",
            "slug": "API/Navigator/hardwareConcurrency",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/hardwareConcurrency",
            "summary": "The navigator.hardwareConcurrency read-only property returns the number of logical processors available to run threads on the user's computer.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.13"
                },
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1",
                    "version_removed": "11"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Navigator: hardwareConcurrency property"
        },
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/WorkerNavigator.json",
            "name": "hardwareConcurrency",
            "slug": "API/Navigator/hardwareConcurrency",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/hardwareConcurrency",
            "summary": "The navigator.hardwareConcurrency read-only property returns the number of logical processors available to run threads on the user's computer.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.13"
                },
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "48"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1",
                    "version_removed": "11"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Navigator: hardwareConcurrency property"
        }
    ],
    "dom-navigator-language-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Navigator.json",
            "name": "language",
            "slug": "API/Navigator/language",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/language",
            "summary": "The Navigator.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.27"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 4, this property's value was also part of the user agent string, as reported by <code>navigator.userAgent</code>. Starting in Firefox 5, this property's value is based on the value of the <code>Accept-Language</code> <a href='https://developer.mozilla.org/docs/Web/HTTP/Headers'>HTTP header</a>."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "11",
                    "notes": "Closest available (non-standard) properties are <code>userLanguage</code> and <code>browserLanguage</code>."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Navigator: language property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerNavigator.json",
            "name": "language",
            "slug": "API/WorkerNavigator/language",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/language",
            "summary": "The WorkerNavigator.language read-only property returns a string representing the preferred language of the user, usually the language of the browser UI.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5",
                    "notes": "Before Firefox 4, this property's value was also part of the user agent string, as reported by <code>navigator.userAgent</code>. Starting in Firefox 5, this property's value is based on the value of the <code>Accept-Language</code> <a href='https://developer.mozilla.org/docs/Web/HTTP/Headers'>HTTP header</a>."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "11",
                    "notes": "Closest available (non-standard) properties are <code>userLanguage</code> and <code>browserLanguage</code>."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerNavigator: language property"
        }
    ],
    "dom-navigator-languages-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Navigator.json",
            "name": "languages",
            "slug": "API/Navigator/languages",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/languages",
            "summary": "The Navigator.languages read-only property returns an array of strings representing the user's preferred languages. The language is described using language tags according to RFC 5646: Tags for Identifying Languages (also known as BCP 47). In the returned array they are ordered by preference with the most preferred language first.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "notes": "Before Chrome 65, <code>navigator.languages[0]</code> is not guaranteed to equal <code>navigator.language</code>."
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.27"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "32",
                    "notes": "In Firefox, the <code>navigator.languages</code> property's value is taken from the <code>intl.accept_languages</code> preference."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false,
                    "notes": "Closest available (non-standard) properties are <code>userLanguage</code> and <code>browserLanguage</code>."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "24"
                },
                "opera_android": {
                    "version_added": "24"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "3.0"
                },
                "webview_android": {
                    "version_added": "37",
                    "notes": "Before version 65, <code>navigator.languages[0]</code> is not guaranteed to equal <code>navigator.language</code>."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before Chrome 65, <code>navigator.languages[0]</code> is not guaranteed to equal <code>navigator.language</code>."
                }
            },
            "title": "Navigator: languages property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerNavigator.json",
            "name": "languages",
            "slug": "API/WorkerNavigator/languages",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/languages",
            "summary": "The WorkerNavigator.languages read-only property returns an array of strings representing the user's preferred languages. The language is described using language tags according to RFC 5646: Tags for Identifying Languages (also known as BCP 47). In the returned array they are ordered by preference with the most preferred language first.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "notes": "Before Chrome 65, <code>navigator.languages[0]</code> is not guaranteed to equal <code>navigator.language</code>."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "32",
                    "notes": "In Firefox, the <code>navigator.languages</code> property's value is taken from the <code>intl.accept_languages</code> preference."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false,
                    "notes": "Closest available (non-standard) properties are <code>userLanguage</code> and <code>browserLanguage</code>."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "24"
                },
                "opera_android": {
                    "version_added": "24"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "3.0"
                },
                "webview_android": {
                    "version_added": "37",
                    "notes": "Before version 65, <code>navigator.languages[0]</code> is not guaranteed to equal <code>navigator.language</code>."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before Chrome 65, <code>navigator.languages[0]</code> is not guaranteed to equal <code>navigator.language</code>."
                }
            },
            "title": "WorkerNavigator: languages property"
        }
    ],
    "dom-navigator-online-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Navigator.json",
            "name": "onLine",
            "slug": "API/Navigator/onLine",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/onLine",
            "summary": "Returns the online status of the browser. The property returns a boolean value, with true meaning online and false meaning offline. The property sends updates whenever the browser's ability to connect to the network changes. The update occurs when the user follows links or when a script requests a remote page. For example, the property should return false when users click links soon after they lose internet connection.",
            "support": {
                "chrome": {
                    "version_added": "2",
                    "notes": "Earlier versions of Chrome incorrectly return true when a tab is first opened, but it starts reporting the correct connectivity status after the first network event. Windows: 11, macOS: 14, Chrome OS: 13, Linux: Always returns <code>true</code>. For history, see <a href='https://crbug.com/7469'>crbug.com/7469</a>."
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5",
                    "notes": "Since Firefox 4 the browser returns <code>true</code> when 'Work Offline' mode is disabled and <code>false</code> when it is enabled, regardless of actual connectivity. Since Firefox 41, on OS X and Windows, the returned values follow the actual network connectivity, unless 'Work offline' mode is selected (where it will always return <code>false</code>)."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4",
                    "notes": "in Internet Explorer 8 'online' and 'offline' events are raised on the <code>document.body</code>; under IE 9 they are raised on both <code>document.body</code> and <code>window</code>."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3",
                    "notes": "From Opera 11.1 until Opera 12.1, the browser returns <code>true</code> when 'Work Offline' mode is disabled and <code>false</code> when it is enabled, regardless of actual connectivity."
                },
                "opera_android": {
                    "version_added": "10.1",
                    "notes": "From Opera 11.1 until Opera 12.1, the browser returns <code>true</code> when 'Work Offline' mode is disabled and <code>false</code> when it is enabled, regardless of actual connectivity."
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37",
                    "partial_implementation": true,
                    "notes": "Can incorrectly return true, see <a href='https://crbug.com/811122'>bug 811122</a>."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Earlier versions of Chrome incorrectly return true when a tab is first opened, but it starts reporting the correct connectivity status after the first network event. Windows: 11, macOS: 14, Chrome OS: 13, Linux: Always returns <code>true</code>. For history, see <a href='https://crbug.com/7469'>crbug.com/7469</a>."
                }
            },
            "title": "Navigator: onLine property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerNavigator.json",
            "name": "onLine",
            "slug": "API/WorkerNavigator/onLine",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/onLine",
            "summary": "Returns the online status of the browser. The property returns a boolean value, with true meaning online and false meaning offline. The property sends updates whenever the browser's ability to connect to the network changes. The update occurs when the user follows links or when a script requests a remote page.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5",
                    "notes": "Since Firefox 4 the browser returns <code>true</code> when 'Work Offline' mode is disabled and <code>false</code> when it is enabled, regardless of actual connectivity. Since Firefox 41, on OS X and Windows, the returned values follow the actual network connectivity, unless 'Work offline' mode is selected (where it will always return <code>false</code>)."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6",
                    "notes": "From Opera 11.1 until Opera 12.1, the browser returns <code>true</code> when 'Work Offline' mode is disabled and <code>false</code> when it is enabled, regardless of actual connectivity."
                },
                "opera_android": {
                    "version_added": "11",
                    "notes": "From Opera 11.1 until Opera 12.1, the browser returns <code>true</code> when 'Work Offline' mode is disabled and <code>false</code> when it is enabled, regardless of actual connectivity."
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4",
                    "partial_implementation": true,
                    "notes": "Can incorrectly return true, see <a href='https://crbug.com/811122'>bug 811122</a>."
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerNavigator: onLine property"
        }
    ],
    "dom-navigator-pdfviewerenabled": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Navigator.json",
            "name": "pdfViewerEnabled",
            "slug": "API/Navigator/pdfViewerEnabled",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/pdfViewerEnabled",
            "summary": "The pdfViewerEnabled property of the Navigator interface indicates whether the browser supports inline display of PDF files when navigating to them.",
            "support": {
                "chrome": {
                    "version_added": "94"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "99"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "94"
                }
            },
            "title": "Navigator: pdfViewerEnabled property"
        }
    ],
    "custom-handlers": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/Navigator.json",
            "name": "registerProtocolHandler",
            "slug": "API/Navigator/registerProtocolHandler",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerProtocolHandler",
            "summary": "The Navigator method registerProtocolHandler() lets websites register their ability to open or handle particular URL schemes (aka protocols).",
            "support": {
                "chrome": {
                    "version_added": "13",
                    "notes": "From Chrome 77, the URL parameter only accepts <code>http</code> or <code>https</code> URLs."
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "notes": "From Chrome 77, the URL parameter only accepts <code>http</code> or <code>https</code> URLs."
                }
            },
            "title": "Navigator: registerProtocolHandler() method"
        }
    ],
    "dom-navigator-unregisterprotocolhandler-dev": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/Navigator.json",
            "name": "unregisterProtocolHandler",
            "slug": "API/Navigator/unregisterProtocolHandler",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/unregisterProtocolHandler",
            "summary": "The Navigator method unregisterProtocolHandler() removes a protocol handler for a given URL scheme.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "25"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "15"
                    }
                ],
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Navigator: unregisterProtocolHandler() method"
        }
    ],
    "dom-navigator-useractivation": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "api/Navigator.json",
            "name": "userActivation",
            "slug": "API/Navigator/userActivation",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/userActivation",
            "summary": "The read-only userActivation property of the Navigator interface returns a UserActivation object which contains information about the current window's user activation state.",
            "support": {
                "chrome": {
                    "version_added": "72"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Navigator: userActivation property"
        }
    ],
    "dom-navigator-useragent-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Navigator.json",
            "name": "userAgent",
            "slug": "API/Navigator/userAgent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Navigator/userAgent",
            "summary": "The Navigator.userAgent read-only property returns the user agent string for the current browser.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.22"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Navigator: userAgent property"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerNavigator.json",
            "name": "userAgent",
            "slug": "API/WorkerNavigator/userAgent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/userAgent",
            "summary": "The WorkerNavigator.userAgent read-only property returns the user agent string for the current browser.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerNavigator: userAgent property"
        }
    ],
    "the-navigator-object": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Navigator.json",
            "name": "Navigator",
            "slug": "API/Navigator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Navigator",
            "summary": "The Navigator interface represents the state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.8"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Navigator"
        }
    ],
    "dom-offscreencanvas-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OffscreenCanvas.json",
            "name": "OffscreenCanvas",
            "slug": "API/OffscreenCanvas/OffscreenCanvas",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/OffscreenCanvas",
            "summary": "The OffscreenCanvas() constructor returns a newly instantiated OffscreenCanvas object.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "105"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OffscreenCanvas: OffscreenCanvas() constructor"
        }
    ],
    "dom-offscreencanvas-converttoblob-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OffscreenCanvas.json",
            "name": "convertToBlob",
            "slug": "API/OffscreenCanvas/convertToBlob",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/convertToBlob",
            "summary": "The OffscreenCanvas.convertToBlob() method creates a Blob object representing the image contained in the canvas.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": [
                    {
                        "version_added": "105"
                    },
                    {
                        "version_added": "105",
                        "alternative_name": "toBlob"
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OffscreenCanvas: convertToBlob() method"
        }
    ],
    "dom-offscreencanvas-getcontext-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OffscreenCanvas.json",
            "name": "getContext",
            "slug": "API/OffscreenCanvas/getContext",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/getContext",
            "summary": "The OffscreenCanvas.getContext() method returns a drawing context for an offscreen canvas, or null if the context identifier is not supported.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "105"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OffscreenCanvas: getContext() method"
        }
    ],
    "dom-offscreencanvas-height-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OffscreenCanvas.json",
            "name": "height",
            "slug": "API/OffscreenCanvas/height",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/height",
            "summary": "The height property returns and sets the height of an OffscreenCanvas object.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "105"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OffscreenCanvas: height property"
        }
    ],
    "dom-offscreencanvas-transfertoimagebitmap-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OffscreenCanvas.json",
            "name": "transferToImageBitmap",
            "slug": "API/OffscreenCanvas/transferToImageBitmap",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/transferToImageBitmap",
            "summary": "The OffscreenCanvas.transferToImageBitmap() method creates an ImageBitmap object from the most recently rendered image of the OffscreenCanvas. The OffscreenCanvas allocates a new image for its subsequent rendering.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "105"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OffscreenCanvas: transferToImageBitmap() method"
        }
    ],
    "dom-offscreencanvas-width-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OffscreenCanvas.json",
            "name": "width",
            "slug": "API/OffscreenCanvas/width",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/width",
            "summary": "The width property returns and sets the width of an OffscreenCanvas object.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "105"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OffscreenCanvas: width property"
        }
    ],
    "the-offscreencanvas-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OffscreenCanvas.json",
            "name": "OffscreenCanvas",
            "slug": "API/OffscreenCanvas",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas",
            "summary": "When using the <canvas> element or the Canvas API, rendering, animation, and user interaction usually happen on the main execution thread of a web application. The computation relating to canvas animations and rendering can have a significant impact on application performance.",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "105"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OffscreenCanvas"
        }
    ],
    "offscreencontext2d-commit": [
        {
            "engines": [
                "gecko",
                "webkit"
            ],
            "filename": "api/OffscreenCanvasRenderingContext2D.json",
            "name": "commit",
            "slug": "API/OffscreenCanvasRenderingContext2D/commit",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D/commit",
            "summary": "The OffscreenCanvasRenderingContext2D.commit() method of the Canvas 2D API copies the rendering context's bitmap to the bitmap of the placeholder <canvas> element of the associated OffscreenCanvas object. The copy operation is synchronous. Calling this method is not needed for the transfer, since it happens automatically during the event-loop execution.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "105"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": "OffscreenCanvasRenderingContext2D: commit() method"
        }
    ],
    "the-offscreen-2d-rendering-context": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OffscreenCanvasRenderingContext2D.json",
            "name": "OffscreenCanvasRenderingContext2D",
            "slug": "API/OffscreenCanvasRenderingContext2D",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvasRenderingContext2D",
            "summary": "The OffscreenCanvasRenderingContext2D interface is a CanvasRenderingContext2D rendering context for drawing to the bitmap of an OffscreenCanvas object. It is similar to the CanvasRenderingContext2D object, with the following differences:",
            "support": {
                "chrome": {
                    "version_added": "69"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "105"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OffscreenCanvasRenderingContext2D"
        }
    ],
    "the-pagetransitionevent-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PageTransitionEvent.json",
            "name": "PageTransitionEvent",
            "slug": "API/PageTransitionEvent/PageTransitionEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PageTransitionEvent/PageTransitionEvent",
            "summary": "The PageTransitionEvent() constructor creates a new PageTransitionEvent object, that is used by the pageshow or pagehide events, fired at the window object when a page is loaded or unloaded.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "11"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PageTransitionEvent: PageTransitionEvent() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PageTransitionEvent.json",
            "name": "PageTransitionEvent",
            "slug": "API/PageTransitionEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PageTransitionEvent",
            "summary": "The PageTransitionEvent event object is available inside handler functions for the pageshow and pagehide events, fired when a document is being loaded or unloaded.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PageTransitionEvent"
        }
    ],
    "dom-pagetransitionevent-persisted-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PageTransitionEvent.json",
            "name": "persisted",
            "slug": "API/PageTransitionEvent/persisted",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PageTransitionEvent/persisted",
            "summary": "The persisted read-only property indicates if a webpage is loading from a cache.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "11"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11",
                    "notes": "The <code>persisted</code> property is known to be buggy in Internet Explorer. It is advised to check if <code>window.performance.navigation.type == 2</code> as well."
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PageTransitionEvent: persisted property"
        }
    ],
    "dom-path2d-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Path2D.json",
            "name": "Path2D",
            "slug": "API/Path2D/Path2D",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Path2D/Path2D",
            "summary": "The Path2D() constructor returns a newly instantiated Path2D object, optionally with another path as an argument (creates a copy), or optionally with a string consisting of SVG path data.",
            "support": {
                "chrome": {
                    "version_added": "36"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Path2D: Path2D() constructor"
        }
    ],
    "dom-path2d-addpath-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Path2D.json",
            "name": "addPath",
            "slug": "API/Path2D/addPath",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Path2D/addPath",
            "summary": "The Path2D.addPath() method of the Canvas 2D API adds one Path2D object to another Path2D object.",
            "support": {
                "chrome": {
                    "version_added": "68"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "34"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Path2D: addPath() method"
        }
    ],
    "path2d-objects": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Path2D.json",
            "name": "Path2D",
            "slug": "API/Path2D",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Path2D",
            "summary": "The Path2D interface of the Canvas 2D API is used to declare a path that can then be used on a CanvasRenderingContext2D object. The path methods of the CanvasRenderingContext2D interface are also present on this interface, which gives you the convenience of being able to retain and replay your path whenever desired.",
            "support": {
                "chrome": {
                    "version_added": "36"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Path2D"
        }
    ],
    "the-popstateevent-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PopStateEvent.json",
            "name": "PopStateEvent",
            "slug": "API/PopStateEvent/PopStateEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PopStateEvent/PopStateEvent",
            "summary": "The PopStateEvent() constructor creates a new PopStateEvent object.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "11"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PopStateEvent: PopStateEvent() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PopStateEvent.json",
            "name": "PopStateEvent",
            "slug": "API/PopStateEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PopStateEvent",
            "summary": "PopStateEvent is an interface for the popstate event.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PopStateEvent"
        }
    ],
    "dom-popstateevent-state-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PopStateEvent.json",
            "name": "state",
            "slug": "API/PopStateEvent/state",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PopStateEvent/state",
            "summary": "The state read-only property of the PopStateEvent interface represents the state stored when the event was created.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PopStateEvent: state property"
        }
    ],
    "unhandled-promise-rejections:dom-event-constructor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PromiseRejectionEvent.json",
            "name": "PromiseRejectionEvent",
            "slug": "API/PromiseRejectionEvent/PromiseRejectionEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent/PromiseRejectionEvent",
            "summary": "The PromiseRejectionEvent() constructor returns a new PromiseRejectionEvent object, which represents events fired when a JavaScript Promise is rejected.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.24"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PromiseRejectionEvent: PromiseRejectionEvent() constructor"
        }
    ],
    "dom-promiserejectionevent-promise": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PromiseRejectionEvent.json",
            "name": "promise",
            "slug": "API/PromiseRejectionEvent/promise",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent/promise",
            "summary": "The PromiseRejectionEvent interface's promise read-only property indicates the JavaScript Promise which was rejected. You can examine the event's PromiseRejectionEvent.reason property to learn why the promise was rejected.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.24"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PromiseRejectionEvent: promise property"
        }
    ],
    "dom-promiserejectionevent-reason": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PromiseRejectionEvent.json",
            "name": "reason",
            "slug": "API/PromiseRejectionEvent/reason",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent/reason",
            "summary": "The PromiseRejectionEvent reason read-only property is any JavaScript value or Object which provides the reason passed into Promise.reject(). This in theory provides information about why the promise was rejected.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.24"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PromiseRejectionEvent: reason property"
        }
    ],
    "the-promiserejectionevent-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PromiseRejectionEvent.json",
            "name": "PromiseRejectionEvent",
            "slug": "API/PromiseRejectionEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent",
            "summary": "The PromiseRejectionEvent interface represents events which are sent to the global script context when JavaScript Promises are rejected. These events are particularly useful for telemetry and debugging purposes.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.24"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PromiseRejectionEvent"
        }
    ],
    "dom-radionodelist-value": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/RadioNodeList.json",
            "name": "value",
            "slug": "API/RadioNodeList/value",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList/value",
            "summary": "If the underlying element collection contains radio buttons, the RadioNodeList.value property represents the checked radio button. On retrieving the value property, the value of the currently checked radio button is returned as a string. If the collection does not contain any radio buttons or none of the radio buttons in the collection is in checked state, the empty string is returned. On setting the value property, the first radio button input element whose value property is equal to the new value will be set to checked.",
            "support": {
                "chrome": {
                    "version_added": "21"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "33"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RadioNodeList: value property"
        }
    ],
    "radionodelist": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/RadioNodeList.json",
            "name": "RadioNodeList",
            "slug": "API/RadioNodeList",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/RadioNodeList",
            "summary": "The RadioNodeList interface represents a collection of radio elements in a <form> or a <fieldset> element.",
            "support": {
                "chrome": {
                    "version_added": "21"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "33"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "RadioNodeList"
        }
    ],
    "handler-abstractworker-onerror": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ServiceWorker.json",
            "name": "error_event",
            "slug": "API/ServiceWorker/error_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/error_event",
            "summary": "The error event fires whenever an error occurs in the service worker.",
            "support": {
                "chrome": {
                    "version_added": "40"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "44"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ServiceWorker: error event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/SharedWorker.json",
            "name": "error_event",
            "slug": "API/SharedWorker/error_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker/error_event",
            "summary": "The error event of the SharedWorker interface fires when an error occurs in the worker.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "33"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11",
                    "version_removed": "14"
                },
                "safari": [
                    {
                        "version_added": "16"
                    },
                    {
                        "version_added": "5",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "16"
                    },
                    {
                        "version_added": "5",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": {
                    "version_added": "4.0",
                    "version_removed": "5.0"
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SharedWorker: error event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Worker.json",
            "name": "error_event",
            "slug": "API/Worker/error_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Worker/error_event",
            "summary": "The error event of the Worker interface fires when an error occurs in the worker.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Worker: error event"
        }
    ],
    "dom-sharedworker-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/SharedWorker.json",
            "name": "SharedWorker",
            "slug": "API/SharedWorker/SharedWorker",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker/SharedWorker",
            "summary": "The SharedWorker() constructor creates a SharedWorker object that executes the script at the specified URL. This script must obey the same-origin policy.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "33"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11",
                    "version_removed": "14"
                },
                "safari": [
                    {
                        "version_added": "16"
                    },
                    {
                        "version_added": "5",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "16"
                    },
                    {
                        "version_added": "5",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": {
                    "version_added": "4.0",
                    "version_removed": "5.0"
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SharedWorker: SharedWorker() constructor"
        }
    ],
    "dom-sharedworker-port-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/SharedWorker.json",
            "name": "port",
            "slug": "API/SharedWorker/port",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker/port",
            "summary": "The port property of the SharedWorker interface returns a MessagePort object used to communicate and control the shared worker.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "33"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11",
                    "version_removed": "14"
                },
                "safari": [
                    {
                        "version_added": "16"
                    },
                    {
                        "version_added": "5",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "16"
                    },
                    {
                        "version_added": "5",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": {
                    "version_added": "4.0",
                    "version_removed": "5.0"
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SharedWorker: port property"
        }
    ],
    "shared-workers-and-the-sharedworker-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/SharedWorker.json",
            "name": "SharedWorker",
            "slug": "API/SharedWorker",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker",
            "summary": "The SharedWorker interface represents a specific kind of worker that can be accessed from several browsing contexts, such as several windows, iframes or even workers. They implement an interface different than dedicated workers and have a different global scope, SharedWorkerGlobalScope.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": false,
                    "notes": "See <a href='https://crbug.com/154571'>bug 154571</a>."
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "33"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11",
                    "version_removed": "14"
                },
                "safari": [
                    {
                        "version_added": "16"
                    },
                    {
                        "version_added": "5",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "16"
                    },
                    {
                        "version_added": "5",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": {
                    "version_added": "4.0",
                    "version_removed": "5.0"
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SharedWorker"
        }
    ],
    "dom-sharedworkerglobalscope-close-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/SharedWorkerGlobalScope.json",
            "name": "close",
            "slug": "API/SharedWorkerGlobalScope/close",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope/close",
            "summary": "The close() method of the SharedWorkerGlobalScope interface discards any tasks queued in the SharedWorkerGlobalScope's event loop, effectively closing this particular scope.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": [
                    {
                        "version_added": "16"
                    },
                    {
                        "version_added": "5",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "16"
                    },
                    {
                        "version_added": "5",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SharedWorkerGlobalScope: close() method"
        }
    ],
    "event-workerglobalscope-connect": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/SharedWorkerGlobalScope.json",
            "name": "connect_event",
            "slug": "API/SharedWorkerGlobalScope/connect_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope/connect_event",
            "summary": "The connect event is fired in shared workers at their SharedWorkerGlobalScope when a new client connects.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "29",
                    "notes": "Before version 65 the <code>data</code> property of the event object was <code>null</code>; it is now initialized to an empty string, as per spec."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": [
                    {
                        "version_added": "16"
                    },
                    {
                        "version_added": "5",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "16"
                    },
                    {
                        "version_added": "5",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SharedWorkerGlobalScope: connect event"
        }
    ],
    "handler-sharedworkerglobalscope-onconnect": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/SharedWorkerGlobalScope.json",
            "name": "connect_event",
            "slug": "API/SharedWorkerGlobalScope/connect_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope/connect_event",
            "summary": "The connect event is fired in shared workers at their SharedWorkerGlobalScope when a new client connects.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "29",
                    "notes": "Before version 65 the <code>data</code> property of the event object was <code>null</code>; it is now initialized to an empty string, as per spec."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": [
                    {
                        "version_added": "16"
                    },
                    {
                        "version_added": "5",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "16"
                    },
                    {
                        "version_added": "5",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SharedWorkerGlobalScope: connect event"
        }
    ],
    "dom-sharedworkerglobalscope-name-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/SharedWorkerGlobalScope.json",
            "name": "name",
            "slug": "API/SharedWorkerGlobalScope/name",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope/name",
            "summary": "The name read-only property of the SharedWorkerGlobalScope interface returns the name that the SharedWorker was (optionally) given when it was created. This is the name that the SharedWorker() constructor can pass to get a reference to the SharedWorkerGlobalScope.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": [
                    {
                        "version_added": "16"
                    },
                    {
                        "version_added": "5",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "16"
                    },
                    {
                        "version_added": "5",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SharedWorkerGlobalScope: name property"
        }
    ],
    "shared-workers-and-the-sharedworkerglobalscope-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/SharedWorkerGlobalScope.json",
            "name": "SharedWorkerGlobalScope",
            "slug": "API/SharedWorkerGlobalScope",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/SharedWorkerGlobalScope",
            "summary": "The SharedWorkerGlobalScope object (the SharedWorker global scope) is accessible through the self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See the complete list of functions available to workers.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": [
                    {
                        "version_added": "16"
                    },
                    {
                        "version_added": "5",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "16"
                    },
                    {
                        "version_added": "5",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SharedWorkerGlobalScope"
        }
    ],
    "dom-storage-clear-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Storage.json",
            "name": "clear",
            "slug": "API/Storage/clear",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Storage/clear",
            "summary": "The clear() method of the Storage interface clears all keys stored in a given Storage object.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.10"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Storage: clear() method"
        }
    ],
    "dom-storage-getitem-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Storage.json",
            "name": "getItem",
            "slug": "API/Storage/getItem",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Storage/getItem",
            "summary": "The getItem() method of the Storage interface, when passed a key name, will return that key's value, or null if the key does not exist, in the given Storage object.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.10"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Storage: getItem() method"
        }
    ],
    "dom-storage-key-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Storage.json",
            "name": "key",
            "slug": "API/Storage/key",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Storage/key",
            "summary": "The key() method of the Storage interface, when passed a number n, returns the name of the nth key in a given Storage object. The order of keys is user-agent defined, so you should not rely on it.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.10"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Storage: key() method"
        }
    ],
    "dom-storage-length-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Storage.json",
            "name": "length",
            "slug": "API/Storage/length",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Storage/length",
            "summary": "The length read-only property of the Storage interface returns the number of data items stored in a given Storage object.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.10"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Storage: length property"
        }
    ],
    "dom-storage-removeitem-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Storage.json",
            "name": "removeItem",
            "slug": "API/Storage/removeItem",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Storage/removeItem",
            "summary": "The removeItem() method of the Storage interface, when passed a key name, will remove that key from the given Storage object if it exists. The Storage interface of the Web Storage API provides access to a particular domain's session or local storage.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.10"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Storage: removeItem() method"
        }
    ],
    "dom-storage-setitem-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Storage.json",
            "name": "setItem",
            "slug": "API/Storage/setItem",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem",
            "summary": "The setItem() method of the Storage interface, when passed a key name and value, will add that key to the given Storage object, or update that key's value if it already exists.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.10"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Storage: setItem() method"
        }
    ],
    "storage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Storage.json",
            "name": "Storage",
            "slug": "API/Storage",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Storage",
            "summary": "The Storage interface of the Web Storage API provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.10"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Storage"
        }
    ],
    "the-storageevent-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/StorageEvent.json",
            "name": "StorageEvent",
            "slug": "API/StorageEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent",
            "summary": "The StorageEvent interface is implemented by the storage event, which is sent to a window when a storage area the window has access to is changed within the context of another document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "13"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "StorageEvent"
        }
    ],
    "submitevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/SubmitEvent.json",
            "name": "SubmitEvent",
            "slug": "API/SubmitEvent/SubmitEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/SubmitEvent/SubmitEvent",
            "summary": "The SubmitEvent() constructor creates and returns a new SubmitEvent object, which is used to represent a submit event fired at an HTML form.",
            "support": {
                "chrome": {
                    "version_added": "81"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "75"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "81"
                }
            },
            "title": "SubmitEvent: SubmitEvent() constructor"
        }
    ],
    "the-submitevent-interface:dom-submitevent-submitter-2": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/SubmitEvent.json",
            "name": "submitter",
            "slug": "API/SubmitEvent/submitter",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/SubmitEvent/submitter",
            "summary": "The read-only submitter property found on the SubmitEvent interface specifies the submit button or other element that was invoked to cause the form to be submitted.",
            "support": {
                "chrome": {
                    "version_added": "81"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "75"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": [
                    {
                        "version_added": "15.4"
                    },
                    {
                        "version_added": "15",
                        "partial_implementation": true,
                        "notes": "Property is not set for <code>&lt;button&gt;</code> elements. See <a href='https://webkit.org/b/229660'>bug 229660</a>."
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "81"
                }
            },
            "title": "SubmitEvent: submitter property"
        }
    ],
    "the-submitevent-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/SubmitEvent.json",
            "name": "SubmitEvent",
            "slug": "API/SubmitEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/SubmitEvent",
            "summary": "The SubmitEvent interface defines the object used to represent an HTML form's submit event. This event is fired at the <form> when the form's submit action is invoked.",
            "support": {
                "chrome": {
                    "version_added": "81"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "75"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "81"
                }
            },
            "title": "SubmitEvent"
        }
    ],
    "dom-textmetrics-actualboundingboxascent-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextMetrics.json",
            "name": "actualBoundingBoxAscent",
            "slug": "API/TextMetrics/actualBoundingBoxAscent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/actualBoundingBoxAscent",
            "summary": "The read-only actualBoundingBoxAscent property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the top of the bounding rectangle used to render the text, in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "74"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextMetrics: actualBoundingBoxAscent property"
        }
    ],
    "dom-textmetrics-actualboundingboxdescent-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextMetrics.json",
            "name": "actualBoundingBoxDescent",
            "slug": "API/TextMetrics/actualBoundingBoxDescent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/actualBoundingBoxDescent",
            "summary": "The read-only actualBoundingBoxDescent property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the bottom of the bounding rectangle used to render the text, in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "74"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextMetrics: actualBoundingBoxDescent property"
        }
    ],
    "dom-textmetrics-actualboundingboxleft-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextMetrics.json",
            "name": "actualBoundingBoxLeft",
            "slug": "API/TextMetrics/actualBoundingBoxLeft",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/actualBoundingBoxLeft",
            "summary": "The read-only actualBoundingBoxLeft property of the TextMetrics interface is a double giving the distance parallel to the baseline from the alignment point given by the CanvasRenderingContext2D.textAlign property to the left side of the bounding rectangle of the given text, in CSS pixels; positive numbers indicating a distance going left from the given alignment point.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "74"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextMetrics: actualBoundingBoxLeft property"
        }
    ],
    "dom-textmetrics-actualboundingboxright-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextMetrics.json",
            "name": "actualBoundingBoxRight",
            "slug": "API/TextMetrics/actualBoundingBoxRight",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/actualBoundingBoxRight",
            "summary": "The read-only actualBoundingBoxRight property of the TextMetrics interface is a double giving the distance parallel to the baseline from the alignment point given by the CanvasRenderingContext2D.textAlign property to the right side of the bounding rectangle of the given text, in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "74"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextMetrics: actualBoundingBoxRight property"
        }
    ],
    "dom-textmetrics-alphabeticbaseline-dev": [
        {
            "engines": [
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/TextMetrics.json",
            "name": "alphabeticBaseline",
            "slug": "API/TextMetrics/alphabeticBaseline",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/alphabeticBaseline",
            "summary": "The read-only alphabeticBaseline property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the alphabetic baseline of the line box, in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "74",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.textMetrics.baselines.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": "TextMetrics: alphabeticBaseline property"
        }
    ],
    "dom-textmetrics-emheightascent-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/TextMetrics.json",
            "name": "emHeightAscent",
            "slug": "API/TextMetrics/emHeightAscent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/emHeightAscent",
            "summary": "The read-only emHeightAscent property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the top of the em square in the line box, in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "35",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "#enable-experimental-web-platform-features"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "74",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.textMetrics.emHeight.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "#enable-experimental-web-platform-features"
                        }
                    ]
                }
            },
            "title": "TextMetrics: emHeightAscent property"
        }
    ],
    "dom-textmetrics-emheightdescent-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/TextMetrics.json",
            "name": "emHeightDescent",
            "slug": "API/TextMetrics/emHeightDescent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/emHeightDescent",
            "summary": "The read-only emHeightDescent property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the bottom of the em square in the line box, in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "35",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "#enable-experimental-web-platform-features"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "74",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.textMetrics.emHeight.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "#enable-experimental-web-platform-features"
                        }
                    ]
                }
            },
            "title": "TextMetrics: emHeightDescent property"
        }
    ],
    "dom-textmetrics-fontboundingboxascent-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextMetrics.json",
            "name": "fontBoundingBoxAscent",
            "slug": "API/TextMetrics/fontBoundingBoxAscent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/fontBoundingBoxAscent",
            "summary": "The read-only fontBoundingBoxAscent property of the TextMetrics interface returns the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute, to the top of the highest bounding rectangle of all the fonts used to render the text, in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "87"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "116"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "87"
                }
            },
            "title": "TextMetrics: fontBoundingBoxAscent property"
        }
    ],
    "dom-textmetrics-fontboundingboxdescent-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextMetrics.json",
            "name": "fontBoundingBoxDescent",
            "slug": "API/TextMetrics/fontBoundingBoxDescent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/fontBoundingBoxDescent",
            "summary": "The read-only fontBoundingBoxDescent property of the TextMetrics interface returns the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline attribute to the bottom of the bounding rectangle of all the fonts used to render the text, in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "87"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "116"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "87"
                }
            },
            "title": "TextMetrics: fontBoundingBoxDescent property"
        }
    ],
    "dom-textmetrics-hangingbaseline-dev": [
        {
            "engines": [
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/TextMetrics.json",
            "name": "hangingBaseline",
            "slug": "API/TextMetrics/hangingBaseline",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/hangingBaseline",
            "summary": "The read-only hangingBaseline property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the hanging baseline of the line box, in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "74",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.textMetrics.baselines.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": "TextMetrics: hangingBaseline property"
        }
    ],
    "dom-textmetrics-ideographicbaseline-dev": [
        {
            "engines": [
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/TextMetrics.json",
            "name": "ideographicBaseline",
            "slug": "API/TextMetrics/ideographicBaseline",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/ideographicBaseline",
            "summary": "The read-only ideographicBaseline property of the TextMetrics interface is a double giving the distance from the horizontal line indicated by the CanvasRenderingContext2D.textBaseline property to the ideographic baseline of the line box, in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "74",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.textMetrics.baselines.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": "TextMetrics: ideographicBaseline property"
        }
    ],
    "dom-textmetrics-width-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextMetrics.json",
            "name": "width",
            "slug": "API/TextMetrics/width",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics/width",
            "summary": "The read-only width property of the TextMetrics interface contains the text's advance width (the width of that inline box) in CSS pixels.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "31"
                },
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextMetrics: width property"
        }
    ],
    "textmetrics": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextMetrics.json",
            "name": "TextMetrics",
            "slug": "API/TextMetrics",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics",
            "summary": "The TextMetrics interface represents the dimensions of a piece of text in the canvas; a TextMetrics instance can be retrieved using the CanvasRenderingContext2D.measureText() method.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": {
                    "version_added": "31"
                },
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextMetrics"
        }
    ],
    "dom-texttrack-activecues-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrack.json",
            "name": "activeCues",
            "slug": "API/TextTrack/activeCues",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/activeCues",
            "summary": "The activeCues read-only property of the TextTrack interface returns a TextTrackCueList object listing the currently active cues.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31",
                    "notes": "Starting in Firefox 69, cues are no longer incorrectly loaded when the <code>TextTrack</code>'s <code>mode</code> is <code>disabled</code>; if that's the case, the returned list is empty."
                },
                "firefox_android": {
                    "version_added": "31"
                },
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrack: activeCues property"
        }
    ],
    "dom-texttrack-addcue-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrack.json",
            "name": "addCue",
            "slug": "API/TextTrack/addCue",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/addCue",
            "summary": "The addCue() method of the TextTrack interface adds a new cue to the list of cues.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrack: addCue() method"
        }
    ],
    "handler-texttrack-oncuechange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrack.json",
            "name": "cuechange_event",
            "slug": "API/TextTrack/cuechange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/cuechange_event",
            "summary": "The cuechange event fires when a TextTrack has changed the currently displaying cues. The event is fired on both the TextTrack and the HTMLTrackElement in which it's being presented, if any.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrack: cuechange event"
        }
    ],
    "dom-texttrack-cues-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrack.json",
            "name": "cues",
            "slug": "API/TextTrack/cues",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/cues",
            "summary": "The cues read-only property of the TextTrack interface returns a TextTrackCueList object containing all of the track's cues.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31",
                    "notes": "Starting in Firefox 69, cues are no longer incorrectly loaded when the <code>TextTrack</code>'s <code>mode</code> is <code>disabled</code>; if that's the case, the returned list is empty."
                },
                "firefox_android": {
                    "version_added": "31"
                },
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrack: cues property"
        }
    ],
    "dom-texttrack-id-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrack.json",
            "name": "id",
            "slug": "API/TextTrack/id",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/id",
            "summary": "The id read-only property of the TextTrack interface returns the ID of the track if it has one.",
            "support": {
                "chrome": {
                    "version_added": "33"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrack: id property"
        }
    ],
    "dom-texttrack-inbandmetadatatrackdispatchtype-dev": [
        {
            "engines": [
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrack.json",
            "name": "inBandMetadataTrackDispatchType",
            "slug": "API/TextTrack/inBandMetadataTrackDispatchType",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/inBandMetadataTrackDispatchType",
            "summary": "The inBandMetadataTrackDispatchType read-only property of the TextTrack interface returns the text track's in-band metadata dispatch type of the text track represented by the TextTrack object.",
            "support": {
                "chrome": {
                    "version_added": false,
                    "notes": "See <a href='https://crbug.com/754093'>bug 754093</a>."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": false,
                    "notes": "See <a href='https://crbug.com/754093'>bug 754093</a>."
                }
            },
            "title": "TextTrack: inBandMetadataTrackDispatchType property"
        }
    ],
    "dom-texttrack-kind-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrack.json",
            "name": "kind",
            "slug": "API/TextTrack/kind",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/kind",
            "summary": "The kind read-only property of the TextTrack interface returns the kind of text track this object represents. This decides how the track will be handled by a user agent.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrack: kind property"
        }
    ],
    "dom-texttrack-label-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrack.json",
            "name": "label",
            "slug": "API/TextTrack/label",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/label",
            "summary": "The label read-only property of the TextTrack interface returns a human-readable label for the text track, if it is available.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrack: label property"
        }
    ],
    "dom-texttrack-language-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrack.json",
            "name": "language",
            "slug": "API/TextTrack/language",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/language",
            "summary": "The language read-only property of the TextTrack interface returns the language of the text track.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrack: language property"
        }
    ],
    "dom-texttrack-mode-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrack.json",
            "name": "mode",
            "slug": "API/TextTrack/mode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/mode",
            "summary": "The TextTrack interface's mode property is a string specifying and controlling the text track's mode: disabled, hidden, or showing. You can read this value to determine the current mode, and you can change this value to switch modes.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31",
                    "notes": "Before Firefox 52, using JavaScript to change the mode of a text track that's part of a media element would send one change event to the element's textTracks TextTrackList for each change, even if multiple changes are made in a single pass through the Firefox event loop. Starting in Firefox 52, these changes are reflected by a single event."
                },
                "firefox_android": {
                    "version_added": "31"
                },
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrack: mode property"
        }
    ],
    "dom-texttrack-removecue-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrack.json",
            "name": "removeCue",
            "slug": "API/TextTrack/removeCue",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrack/removeCue",
            "summary": "The removeCue() method of the TextTrack interface removes a cue from the list of cues.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrack: removeCue() method"
        }
    ],
    "texttrack": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrack.json",
            "name": "TextTrack",
            "slug": "API/TextTrack",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrack",
            "summary": "The TextTrack interface—part of the API for handling WebVTT (text tracks on media presentations)—describes and controls the text track associated with a particular <track> element.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31",
                    "notes": "Firefox versions before Firefox 50 didn't display captions when playing media without one or more video tracks being played."
                },
                "firefox_android": {
                    "version_added": "31"
                },
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrack"
        }
    ],
    "dom-texttrackcue-endtime": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackCue.json",
            "name": "endTime",
            "slug": "API/TextTrackCue/endTime",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/endTime",
            "summary": "The endTime property of the TextTrackCue interface returns and sets the end time of the cue.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackCue: endTime property"
        }
    ],
    "event-media-enter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackCue.json",
            "name": "enter_event",
            "slug": "API/TextTrackCue/enter_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/enter_event",
            "summary": "The enter event fires when a cue becomes active. In the case of subtitles or a caption this is when it displays over the media.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackCue: enter event"
        }
    ],
    "handler-texttrackcue-onenter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackCue.json",
            "name": "enter_event",
            "slug": "API/TextTrackCue/enter_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/enter_event",
            "summary": "The enter event fires when a cue becomes active. In the case of subtitles or a caption this is when it displays over the media.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackCue: enter event"
        }
    ],
    "event-media-exit": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackCue.json",
            "name": "exit_event",
            "slug": "API/TextTrackCue/exit_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/exit_event",
            "summary": "The exit event fires when a cue stops being active.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackCue: exit event"
        }
    ],
    "handler-texttrackcue-onexit": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackCue.json",
            "name": "exit_event",
            "slug": "API/TextTrackCue/exit_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/exit_event",
            "summary": "The exit event fires when a cue stops being active.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackCue: exit event"
        }
    ],
    "dom-texttrackcue-id": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackCue.json",
            "name": "id",
            "slug": "API/TextTrackCue/id",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/id",
            "summary": "The id property of the TextTrackCue interface returns and sets the identifier for this cue.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackCue: id property"
        }
    ],
    "dom-texttrackcue-pauseonexit": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackCue.json",
            "name": "pauseOnExit",
            "slug": "API/TextTrackCue/pauseOnExit",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/pauseOnExit",
            "summary": "The pauseOnExit property of the TextTrackCue interface returns or sets the flag indicating whether playback of the media should pause when the end of the range to which this cue applies is reached.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackCue: pauseOnExit property"
        }
    ],
    "dom-texttrackcue-starttime": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackCue.json",
            "name": "startTime",
            "slug": "API/TextTrackCue/startTime",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/startTime",
            "summary": "The startTime property of the TextTrackCue interface returns and sets the start time of the cue.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackCue: startTime property"
        }
    ],
    "dom-texttrackcue-track": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackCue.json",
            "name": "track",
            "slug": "API/TextTrackCue/track",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue/track",
            "summary": "The track read-only property of the TextTrackCue interface returns the TextTrack object that this cue belongs to.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackCue: track property"
        }
    ],
    "texttrackcue": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackCue.json",
            "name": "TextTrackCue",
            "slug": "API/TextTrackCue",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCue",
            "summary": "TextTrackCue is an abstract class which is used as the basis for the various derived cue types, such as VTTCue; you will instead work with those derived types. These cues represent strings of text presented for some duration of time during the performance of a TextTrack. The cue includes the start time (the time at which the text will be displayed) and the end time (the time at which it will be removed from the display), as well as other information.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackCue"
        }
    ],
    "dom-texttrackcuelist-getcuebyid": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackCueList.json",
            "name": "getCueById",
            "slug": "API/TextTrackCueList/getCueById",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCueList/getCueById",
            "summary": "The getCueById() method of the TextTrackCueList interface returns the first VTTCue in the list represented by the TextTrackCueList object whose identifier matches the value of id.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackCueList: getCueById() method"
        }
    ],
    "dom-texttrackcuelist-length": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackCueList.json",
            "name": "length",
            "slug": "API/TextTrackCueList/length",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCueList/length",
            "summary": "The length read-only property of the TextTrackCueList interface returns the number of cues in the list.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackCueList: length property"
        }
    ],
    "texttrackcuelist": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackCueList.json",
            "name": "TextTrackCueList",
            "slug": "API/TextTrackCueList",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackCueList",
            "summary": "The TextTrackCueList array-like object represents a dynamically updating list of TextTrackCue objects.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackCueList"
        }
    ],
    "dom-texttracklist-gettrackbyid-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackList.json",
            "name": "getTrackById",
            "slug": "API/TextTrackList/getTrackById",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/getTrackById",
            "summary": "The TextTrackList method getTrackById() returns the first TextTrack object from the track list whose id matches the specified string. This lets you find a specified track if you know its ID string.",
            "support": {
                "chrome": {
                    "version_added": "33"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackList: getTrackById() method"
        }
    ],
    "dom-texttracklist-length": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackList.json",
            "name": "length",
            "slug": "API/TextTrackList/length",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList/length",
            "summary": "The read-only TextTrackList property length returns the number of entries in the TextTrackList, each of which is a TextTrack representing one track in the media element.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackList: length property"
        }
    ],
    "text-track-api": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TextTrackList.json",
            "name": "TextTrackList",
            "slug": "API/TextTrackList",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TextTrackList",
            "summary": "The TextTrackList interface is used to represent a list of the text tracks defined by the <track> element, with each track represented by a separate textTrack object in the list.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TextTrackList"
        }
    ],
    "dom-timeranges-end-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TimeRanges.json",
            "name": "end",
            "slug": "API/TimeRanges/end",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges/end",
            "summary": "The end() method of the TimeRanges interface returns the time offset at which a specified time range ends.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TimeRanges: end() method"
        }
    ],
    "dom-timeranges-length-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TimeRanges.json",
            "name": "length",
            "slug": "API/TimeRanges/length",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges/length",
            "summary": "The TimeRanges.length read-only property returns the number of ranges in the object.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TimeRanges: length property"
        }
    ],
    "dom-timeranges-start-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TimeRanges.json",
            "name": "start",
            "slug": "API/TimeRanges/start",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges/start",
            "summary": "The start() method of the TimeRanges interface returns the time offset at which a specified time range begins.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TimeRanges: start() method"
        }
    ],
    "time-ranges": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TimeRanges.json",
            "name": "TimeRanges",
            "slug": "API/TimeRanges",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TimeRanges",
            "summary": "When loading a media resource for use by an <audio> or <video> element, the TimeRanges interface is used for representing the time ranges of the media resource that have been buffered, the time ranges that have been played, and the time ranges that are seekable.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TimeRanges"
        }
    ],
    "toggleevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/ToggleEvent.json",
            "name": "ToggleEvent",
            "slug": "API/ToggleEvent/ToggleEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ToggleEvent/ToggleEvent",
            "summary": "The ToggleEvent() constructor creates a new ToggleEvent object.",
            "support": {
                "chrome": {
                    "version_added": "114"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "114",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.element.popover.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "17"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "114"
                }
            },
            "title": "ToggleEvent: ToggleEvent() constructor"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/ToggleEvent.json",
            "name": "ToggleEvent",
            "slug": "API/ToggleEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ToggleEvent",
            "summary": "The ToggleEvent interface represents an event notifying the user when a popover element's state toggles between showing and hidden.",
            "support": {
                "chrome": {
                    "version_added": "114"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "114",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.element.popover.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "17"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "114"
                }
            },
            "title": "ToggleEvent"
        }
    ],
    "dom-toggleevent-newstate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/ToggleEvent.json",
            "name": "newState",
            "slug": "API/ToggleEvent/newState",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ToggleEvent/newState",
            "summary": "The newState read-only property of the ToggleEvent interface is a string representing the state the element is transitioning to.",
            "support": {
                "chrome": {
                    "version_added": "114"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "114",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.element.popover.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "17"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "114"
                }
            },
            "title": "ToggleEvent: newState property"
        }
    ],
    "dom-toggleevent-oldstate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "api/ToggleEvent.json",
            "name": "oldState",
            "slug": "API/ToggleEvent/oldState",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ToggleEvent/oldState",
            "summary": "The oldState read-only property of the ToggleEvent interface is a string representing the state the element is transitioning from.",
            "support": {
                "chrome": {
                    "version_added": "114"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "114",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.element.popover.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "17"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "114"
                }
            },
            "title": "ToggleEvent: oldState property"
        }
    ],
    "dom-trackevent-track-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TrackEvent.json",
            "name": "track",
            "slug": "API/TrackEvent/track",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TrackEvent/track",
            "summary": "The read-only track property of the TrackEvent interface specifies the media track object to which the event applies.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "27"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TrackEvent: track property"
        }
    ],
    "the-trackevent-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/TrackEvent.json",
            "name": "TrackEvent",
            "slug": "API/TrackEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/TrackEvent",
            "summary": "The TrackEvent interface, which is part of the HTML DOM specification, is used for events which represent changes to a set of available tracks on an HTML media element; these events are addtrack and removetrack.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "27"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "TrackEvent"
        }
    ],
    "dom-useractivation-hasbeenactive": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "api/UserActivation.json",
            "name": "hasBeenActive",
            "slug": "API/UserActivation/hasBeenActive",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/UserActivation/hasBeenActive",
            "summary": "The read-only hasBeenActive property of the UserActivation interface indicates whether the current window has sticky user activation (see sticky activation).",
            "support": {
                "chrome": {
                    "version_added": "72"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "UserActivation: hasBeenActive property"
        }
    ],
    "dom-useractivation-isactive": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "api/UserActivation.json",
            "name": "isActive",
            "slug": "API/UserActivation/hasBeenActive",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/UserActivation/hasBeenActive",
            "summary": "The read-only hasBeenActive property of the UserActivation interface indicates whether the current window has sticky user activation (see sticky activation).",
            "support": {
                "chrome": {
                    "version_added": "72"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "UserActivation: hasBeenActive property"
        }
    ],
    "the-useractivation-interface": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "api/UserActivation.json",
            "name": "UserActivation",
            "slug": "API/UserActivation",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/UserActivation",
            "summary": "The UserActivation interface allows querying information about a window's user activation state.",
            "support": {
                "chrome": {
                    "version_added": "72"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "UserActivation"
        }
    ],
    "dom-validitystate-badinput-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ValidityState.json",
            "name": "badInput",
            "slug": "API/ValidityState/badInput",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/badInput",
            "summary": "The read-only badInput property of a ValidityState object indicates if the user has provided input that the browser is unable to convert. For example, if you have a number input element whose content is a string.",
            "support": {
                "chrome": {
                    "version_added": "25"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "64"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ValidityState: badInput property"
        }
    ],
    "dom-validitystate-patternmismatch": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ValidityState.json",
            "name": "patternMismatch",
            "slug": "API/ValidityState/patternMismatch",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/patternMismatch",
            "summary": "The read-only patternMismatch property of a ValidityState object indicates if the value of an <input>, after having been edited by the user, does not conform to the constraints set by the element's pattern attribute.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ValidityState: patternMismatch property"
        }
    ],
    "dom-validitystate-rangeoverflow": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ValidityState.json",
            "name": "rangeOverflow",
            "slug": "API/ValidityState/rangeOverflow",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/rangeOverflow",
            "summary": "The read-only rangeOverflow property of a ValidityState object indicates if the value of an <input>, after having been edited by the user, does not conform to the constraints set by the element's max attribute.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ValidityState: rangeOverflow property"
        }
    ],
    "dom-validitystate-rangeunderflow": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ValidityState.json",
            "name": "rangeUnderflow",
            "slug": "API/ValidityState/rangeUnderflow",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/rangeUnderflow",
            "summary": "The read-only rangeUnderflow property of a ValidityState object indicates if the value of an <input>, after having been edited by the user, does not conform to the constraints set by the element's min attribute.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ValidityState: rangeUnderflow property"
        }
    ],
    "dom-validitystate-stepmismatch": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ValidityState.json",
            "name": "stepMismatch",
            "slug": "API/ValidityState/stepMismatch",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/stepMismatch",
            "summary": "The read-only stepMismatch property of a ValidityState object indicates if the value of an <input>, after having been edited by the user, does not conform to the constraints set by the element's step attribute.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ValidityState: stepMismatch property"
        }
    ],
    "dom-validitystate-toolong-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ValidityState.json",
            "name": "tooLong",
            "slug": "API/ValidityState/tooLong",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/tooLong",
            "summary": "The read-only tooLong property of a ValidityState object indicates if the value of an <input> or <textarea>, after having been edited by the user, exceeds the maximum code-unit length established by the element's maxlength attribute.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4",
                    "notes": "Not supported in the unlikely case of the value being initially set too long, and then changed by the user to a still incorrect state. Per caniuse.com."
                },
                "firefox_android": {
                    "version_added": "64"
                },
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "validityState: tooLong property"
        }
    ],
    "dom-validitystate-tooshort-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ValidityState.json",
            "name": "tooShort",
            "slug": "API/ValidityState/tooShort",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/tooShort",
            "summary": "The read-only tooShort property of a ValidityState object indicates if the value of an <input>, <button>, <select>, <output>, <fieldset> or <textarea>, after having been edited by the user, is less than the minimum code-unit length established by the element's minlength attribute.",
            "support": {
                "chrome": {
                    "version_added": "40"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "51"
                },
                "firefox_android": {
                    "version_added": "64"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "67"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ValidityState: tooShort property"
        }
    ],
    "dom-validitystate-typemismatch": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ValidityState.json",
            "name": "typeMismatch",
            "slug": "API/ValidityState/typeMismatch",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/typeMismatch",
            "summary": "The read-only typeMismatch property of a ValidityState object indicates if the value of an <input>, after having been edited by the user, does not conform to the constraints set by the element's type attribute.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ValidityState: typeMismatch property"
        }
    ],
    "dom-validitystate-valuemissing-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ValidityState.json",
            "name": "valueMissing",
            "slug": "API/ValidityState/valueMissing",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/valueMissing",
            "summary": "The read-only valueMissing property of a ValidityState object indicates if a required control, such as an <input>, <select>, or <textarea>, has an empty value.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ValidityState: valueMissing property"
        }
    ],
    "the-constraint-validation-api:validitystate-3": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ValidityState.json",
            "name": "ValidityState",
            "slug": "API/ValidityState",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ValidityState",
            "summary": "The ValidityState interface represents the validity states that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ValidityState"
        }
    ],
    "dom-videotrack-id-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrack.json",
            "name": "id",
            "slug": "API/VideoTrack/id",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/id",
            "summary": "The id property contains a string which uniquely identifies the track represented by the VideoTrack.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrack: id property"
        }
    ],
    "dom-videotrack-kind-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrack.json",
            "name": "kind",
            "slug": "API/VideoTrack/kind",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/kind",
            "summary": "The kind property contains a string indicating the category of video contained in the VideoTrack.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrack: kind property"
        }
    ],
    "dom-videotrack-label-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrack.json",
            "name": "label",
            "slug": "API/VideoTrack/label",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/label",
            "summary": "The read-only VideoTrack property label returns a string specifying the video track's human-readable label, if one is available; otherwise, it returns an empty string.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrack: label property"
        }
    ],
    "dom-videotrack-language-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrack.json",
            "name": "language",
            "slug": "API/VideoTrack/language",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/language",
            "summary": "The read-only VideoTrack property language returns a string identifying the language used in the video track.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrack: language property"
        }
    ],
    "dom-videotrack-selected-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrack.json",
            "name": "selected",
            "slug": "API/VideoTrack/selected",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack/selected",
            "summary": "The VideoTrack property selected controls whether or not a particular video track is active.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrack: selected property"
        }
    ],
    "videotrack": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrack.json",
            "name": "VideoTrack",
            "slug": "API/VideoTrack",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrack",
            "summary": "The VideoTrack interface represents a single video track from a <video> element.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrack"
        }
    ],
    "dom-videotracklist-gettrackbyid-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrackList.json",
            "name": "getTrackById",
            "slug": "API/VideoTrackList/getTrackById",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/getTrackById",
            "summary": "The VideoTrackList method getTrackById() returns the first VideoTrack object from the track list whose id matches the specified string.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrackList: getTrackById() method"
        }
    ],
    "dom-videotracklist-length-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrackList.json",
            "name": "length",
            "slug": "API/VideoTrackList/length",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/length",
            "summary": "The read-only VideoTrackList property length returns the number of entries in the VideoTrackList, each of which is a VideoTrack representing one video track in the media element.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrackList: length property"
        }
    ],
    "dom-videotracklist-selectedindex-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "blink",
                "gecko"
            ],
            "filename": "api/VideoTrackList.json",
            "name": "selectedIndex",
            "slug": "API/VideoTrackList/selectedIndex",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/VideoTrackList/selectedIndex",
            "summary": "The read-only VideoTrackList property selectedIndex returns the index of the currently selected track, if any, or -1 otherwise.",
            "support": {
                "chrome": {
                    "version_added": "37",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "33",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "media.track.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "enable-experimental-web-platform-features",
                            "value_to_set": "enabled"
                        }
                    ]
                }
            },
            "title": "VideoTrackList: selectedIndex property"
        }
    ],
    "the-visibilitystateentry-interface": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/VisibilityStateEntry.json",
            "name": "VisibilityStateEntry",
            "slug": "API/VisibilityStateEntry",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/VisibilityStateEntry",
            "summary": "The VisibilityStateEntry interface provides timings of page visibility state changes, i.e., when a tab changes from the foreground to the background or vice versa.",
            "support": {
                "chrome": {
                    "version_added": "115"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "115"
                }
            },
            "title": "VisibilityStateEntry"
        }
    ],
    "event-domcontentloaded": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "DOMContentLoaded_event",
            "slug": "API/Window/DOMContentLoaded_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event",
            "summary": "The DOMContentLoaded event fires when the HTML document has been completely parsed, and all deferred scripts (<script defer src=\"…\"> and <script type=\"module\">) have downloaded and executed. It doesn't wait for other things like images, subframes, and async scripts to finish loading.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: DOMContentLoaded event"
        }
    ],
    "event-afterprint": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "afterprint_event",
            "slug": "API/Window/afterprint_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/afterprint_event",
            "summary": "The afterprint event is fired after the associated document has started printing or the print preview has been closed.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "13"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: afterprint event"
        }
    ],
    "handler-window-onafterprint": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "afterprint_event",
            "slug": "API/Window/afterprint_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/afterprint_event",
            "summary": "The afterprint event is fired after the associated document has started printing or the print preview has been closed.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "13"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: afterprint event"
        }
    ],
    "dom-alert-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "alert",
            "slug": "API/Window/alert",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/alert",
            "summary": "window.alert() instructs the browser to display a dialog with an optional message, and to wait until the user dismisses the dialog.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.5"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3",
                    "notes": "Starting with Opera 33, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "opera_android": {
                    "version_added": "10.1",
                    "notes": "Starting with Opera 33, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                }
            },
            "title": "Window: alert() method"
        }
    ],
    "event-beforeprint": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "beforeprint_event",
            "slug": "API/Window/beforeprint_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeprint_event",
            "summary": "The beforeprint event is fired when the associated document is about to be printed or previewed for printing.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "13"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: beforeprint event"
        }
    ],
    "handler-window-onbeforeprint": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "beforeprint_event",
            "slug": "API/Window/beforeprint_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeprint_event",
            "summary": "The beforeprint event is fired when the associated document is about to be printed or previewed for printing.",
            "support": {
                "chrome": {
                    "version_added": "63"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "13"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: beforeprint event"
        }
    ],
    "event-beforeunload": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "beforeunload_event",
            "slug": "API/Window/beforeunload_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event",
            "summary": "The beforeunload event is fired when the window, the document and its resources are about to be unloaded. The document is still visible and the event is still cancelable at this point.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: beforeunload event"
        }
    ],
    "handler-window-onbeforeunload": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "beforeunload_event",
            "slug": "API/Window/beforeunload_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event",
            "summary": "The beforeunload event is fired when the window, the document and its resources are about to be unloaded. The document is still visible and the event is still cancelable at this point.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: beforeunload event"
        }
    ],
    "dom-window-blur": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "blur",
            "slug": "API/Window/blur",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/blur",
            "summary": "Shifts focus away from the window.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.24"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: blur() method"
        }
    ],
    "animationframeprovider-cancelanimationframe": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "cancelAnimationFrame",
            "slug": "API/Window/cancelAnimationFrame",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame",
            "summary": "The window.cancelAnimationFrame() method cancels an animation frame request previously scheduled through a call to window.requestAnimationFrame().",
            "support": {
                "chrome": {
                    "version_added": "24"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "23"
                    },
                    {
                        "version_added": "11",
                        "version_removed": "23",
                        "prefix": "moz"
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "version_added": "6",
                        "version_removed": "7",
                        "prefix": "webkit"
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: cancelAnimationFrame() method"
        }
    ],
    "dom-window-close-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "close",
            "slug": "API/Window/close",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/close",
            "summary": "The Window.close() method closes the current window, or the window on which it was called.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 46, scripts can close windows that weren't opened by the same script."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: close() method"
        }
    ],
    "dom-window-closed-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "closed",
            "slug": "API/Window/closed",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/closed",
            "summary": "The Window.closed read-only property indicates whether the referenced window is closed or not.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: closed property"
        }
    ],
    "dom-confirm-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "confirm",
            "slug": "API/Window/confirm",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm",
            "summary": "window.confirm() instructs the browser to display a dialog with an optional message, and to wait until the user either confirms or cancels the dialog.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.5"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3",
                    "notes": "Starting with Opera 33, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "opera_android": {
                    "version_added": "10.1",
                    "notes": "Starting with Opera 33, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "1",
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                }
            },
            "title": "Window: confirm() method"
        }
    ],
    "dom-window-customelements": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "customElements",
            "slug": "API/Window/customElements",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/customElements",
            "summary": "The customElements read-only property of the Window interface returns a reference to the CustomElementRegistry object, which can be used to register new custom elements and get information about previously registered custom elements.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: customElements property"
        }
    ],
    "dom-document-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "document",
            "slug": "API/Window/document",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/document",
            "summary": "window.document returns a reference to the document contained in the window.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: document property"
        }
    ],
    "handler-onerror": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "error_event",
            "slug": "API/Window/error_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/error_event",
            "summary": "The error event is fired on a Window object when a resource failed to load or couldn't be used — for example if a script has an execution error.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: error event"
        }
    ],
    "dom-window-focus-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "focus",
            "slug": "API/Window/focus",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/focus",
            "summary": "Makes a request to bring the window to the front. It may fail due to user settings and the window isn't guaranteed to be frontmost before this method returns.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Starting in Chrome 66, opening a popup in fullscreen mode and calling this function will end fullscreen mode."
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Starting in Chrome 66, opening a popup in fullscreen mode and calling this function will end fullscreen mode."
                }
            },
            "title": "Window: focus() method"
        }
    ],
    "dom-frameelement-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "frameElement",
            "slug": "API/Window/frameElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/frameElement",
            "summary": "The Window.frameElement property returns the element (such as <iframe> or <object>) in which the window is embedded.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: frameElement property"
        }
    ],
    "dom-frames-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "frames",
            "slug": "API/Window/frames",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/frames",
            "summary": "Returns the window itself, which is an array-like object, listing the direct sub-frames of the current window.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: frames property"
        }
    ],
    "event-hashchange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "hashchange_event",
            "slug": "API/Window/hashchange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/hashchange_event",
            "summary": "The hashchange event is fired when the fragment identifier of the URL has changed (the part of the URL beginning with and following the # symbol).",
            "support": {
                "chrome": [
                    {
                        "version_added": "8"
                    },
                    {
                        "version_added": "4",
                        "version_removed": "8",
                        "notes": "A regular <code>Event</code> object is fired, rather than a <code>HashChangeEvent</code> object."
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "8",
                        "notes": "A regular <code>Event</code> object is fired, rather than a <code>HashChangeEvent</code> object."
                    }
                ]
            },
            "title": "Window: hashchange event"
        }
    ],
    "handler-window-onhashchange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "hashchange_event",
            "slug": "API/Window/hashchange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/hashchange_event",
            "summary": "The hashchange event is fired when the fragment identifier of the URL has changed (the part of the URL beginning with and following the # symbol).",
            "support": {
                "chrome": [
                    {
                        "version_added": "8"
                    },
                    {
                        "version_added": "4",
                        "version_removed": "8",
                        "notes": "A regular <code>Event</code> object is fired, rather than a <code>HashChangeEvent</code> object."
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "8",
                        "notes": "A regular <code>Event</code> object is fired, rather than a <code>HashChangeEvent</code> object."
                    }
                ]
            },
            "title": "Window: hashchange event"
        }
    ],
    "event-languagechange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "languagechange_event",
            "slug": "API/Window/languagechange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/languagechange_event",
            "summary": "The languagechange event is fired at the global scope object when the user's preferred language changes.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "32"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: languagechange event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerGlobalScope.json",
            "name": "languagechange_event",
            "slug": "API/WorkerGlobalScope/languagechange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/languagechange_event",
            "summary": "The languagechange event is fired at the global scope object when the user's preferred language changes.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "74"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerGlobalScope: languagechange event"
        }
    ],
    "handler-window-onlanguagechange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "languagechange_event",
            "slug": "API/Window/languagechange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/languagechange_event",
            "summary": "The languagechange event is fired at the global scope object when the user's preferred language changes.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "32"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: languagechange event"
        }
    ],
    "dom-length-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "length",
            "slug": "API/Window/length",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/length",
            "summary": "Returns the number of frames (either <frame> or <iframe> elements) in the window.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: length property"
        }
    ],
    "delay-the-load-event": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "load_event",
            "slug": "API/Window/load_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event",
            "summary": "The load event is fired when the whole page has loaded, including all dependent resources such as stylesheets, scripts, iframes, and images. This is in contrast to DOMContentLoaded, which is fired as soon as the page DOM has been loaded, without waiting for resources to finish loading.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: load event"
        }
    ],
    "dom-localstorage-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "localStorage",
            "slug": "API/Window/localStorage",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage",
            "summary": "The localStorage read-only property of the window interface allows you to access a Storage object for the Document's origin; the stored data is saved across browser sessions.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": [
                    {
                        "version_added": "1.16",
                        "notes": "The key used for the Web Storage bucket is based on various factors. See <a href='https://deno.land/manual/runtime/web_storage_api'>the Deno manual</a>."
                    },
                    {
                        "version_added": "1.10",
                        "version_removed": "1.16",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--location",
                                "value_to_set": "<desired origin>"
                            }
                        ]
                    }
                ],
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: localStorage property"
        }
    ],
    "dom-window-locationbar-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "locationbar",
            "slug": "API/Window/locationbar",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/locationbar",
            "summary": "Returns the locationbar object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: locationbar property"
        }
    ],
    "dom-window-menubar-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "menubar",
            "slug": "API/Window/menubar",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/menubar",
            "summary": "Returns the menubar object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: menubar property"
        }
    ],
    "handler-window-onmessage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "message_event",
            "slug": "API/Window/message_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/message_event",
            "summary": "The message event is fired on a Window object when the window receives a message, for example from a call to Window.postMessage() from another browsing context.",
            "support": {
                "chrome": {
                    "version_added": "60"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: message event"
        }
    ],
    "dom-name-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "name",
            "slug": "API/Window/name",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/name",
            "summary": "The Window.name property gets/sets the name of the window's browsing context.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 86, if a new page from another domain is loaded into a tab, then <code>window.name</code> is not set to an empty string, which can allow some cross-site attacks. See <a href='https://bugzil.la/1685089'>bug 1685089</a> and <a href='https://bugzil.la/444222'>bug 444222</a>."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: name property"
        }
    ],
    "dom-navigator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "navigator",
            "slug": "API/Window/navigator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/navigator",
            "summary": "The Window.navigator read-only property returns a reference to the Navigator object, which has methods and properties about the application running the script.",
            "support": {
                "chrome": [
                    {
                        "version_added": "1"
                    },
                    {
                        "version_added": "1",
                        "alternative_name": "clientInformation"
                    }
                ],
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.8"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "1"
                    },
                    {
                        "version_added": "91",
                        "alternative_name": "clientInformation"
                    }
                ],
                "firefox_android": "mirror",
                "ie": [
                    {
                        "version_added": "4"
                    },
                    {
                        "version_added": "6",
                        "alternative_name": "clientInformation"
                    }
                ],
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "3"
                    },
                    {
                        "version_added": "15",
                        "alternative_name": "clientInformation"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "10.1"
                    },
                    {
                        "version_added": "14",
                        "alternative_name": "clientInformation"
                    }
                ],
                "safari": [
                    {
                        "version_added": "1"
                    },
                    {
                        "version_added": "1",
                        "alternative_name": "clientInformation"
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": "79",
                        "alternative_name": "clientInformation"
                    }
                ]
            },
            "title": "Window: navigator property"
        }
    ],
    "event-offline": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "offline_event",
            "slug": "API/Window/offline_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/offline_event",
            "summary": "The offline event of the Window interface is fired when the browser has lost access to the network and the value of Navigator.onLine switches to false.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: offline event"
        }
    ],
    "handler-window-onoffline": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "offline_event",
            "slug": "API/Window/offline_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/offline_event",
            "summary": "The offline event of the Window interface is fired when the browser has lost access to the network and the value of Navigator.onLine switches to false.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: offline event"
        }
    ],
    "event-online": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "online_event",
            "slug": "API/Window/online_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/online_event",
            "summary": "The online event of the Window interface is fired when the browser has gained access to the network and the value of Navigator.onLine switches to true.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: online event"
        }
    ],
    "handler-window-ononline": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "online_event",
            "slug": "API/Window/online_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/online_event",
            "summary": "The online event of the Window interface is fired when the browser has gained access to the network and the value of Navigator.onLine switches to true.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "9"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: online event"
        }
    ],
    "dom-open-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "open",
            "slug": "API/Window/open",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/open",
            "summary": "The open() method of the Window interface loads a specified resource into a new or existing browsing context (that is, a tab, a window, or an iframe) under a specified name.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: open() method"
        }
    ],
    "dom-opener-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "opener",
            "slug": "API/Window/opener",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/opener",
            "summary": "The Window interface's opener property returns a reference to the window that opened the window, either with open(), or by navigating a link with a target attribute.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: opener property"
        }
    ],
    "event-pagehide": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "pagehide_event",
            "slug": "API/Window/pagehide_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/pagehide_event",
            "summary": "The pagehide event is sent to a Window when the browser hides the current page in the process of presenting a different page from the session's history.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: pagehide event"
        }
    ],
    "event-pageshow": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "pageshow_event",
            "slug": "API/Window/pageshow_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/pageshow_event",
            "summary": "The pageshow event is sent to a Window when the browser displays the window's document due to navigation.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: pageshow event"
        }
    ],
    "dom-parent-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "parent",
            "slug": "API/Window/parent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/parent",
            "summary": "The Window.parent property is a reference to the parent of the current window or subframe.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: parent property"
        }
    ],
    "dom-window-personalbar-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "personalbar",
            "slug": "API/Window/personalbar",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/personalbar",
            "summary": "Returns the personalbar object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: personalbar property"
        }
    ],
    "event-popstate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "popstate_event",
            "slug": "API/Window/popstate_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/popstate_event",
            "summary": "The popstate event of the Window interface is fired when the active history entry changes while the user navigates the session history. It changes the current history entry to that of the last page the user visited or, if history.pushState() has been used to add a history entry to the history stack, that history entry is used instead.",
            "support": {
                "chrome": {
                    "version_added": "5",
                    "notes": "Before version 34, Chrome would fire a <code>popstate</code> event on page load."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5",
                    "notes": "Before version 10, Safari would fire a <code>popstate</code> event on page load."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37",
                    "notes": "Before version 37, WebView would fire a <code>popstate</code> event on page load."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before version 34, Chrome would fire a <code>popstate</code> event on page load."
                }
            },
            "title": "Window: popstate event"
        }
    ],
    "handler-window-onpopstate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "popstate_event",
            "slug": "API/Window/popstate_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/popstate_event",
            "summary": "The popstate event of the Window interface is fired when the active history entry changes while the user navigates the session history. It changes the current history entry to that of the last page the user visited or, if history.pushState() has been used to add a history entry to the history stack, that history entry is used instead.",
            "support": {
                "chrome": {
                    "version_added": "5",
                    "notes": "Before version 34, Chrome would fire a <code>popstate</code> event on page load."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": {
                    "version_added": "11.5"
                },
                "safari": {
                    "version_added": "5",
                    "notes": "Before version 10, Safari would fire a <code>popstate</code> event on page load."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37",
                    "notes": "Before version 37, WebView would fire a <code>popstate</code> event on page load."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before version 34, Chrome would fire a <code>popstate</code> event on page load."
                }
            },
            "title": "Window: popstate event"
        }
    ],
    "dom-window-postmessage-options-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "postMessage",
            "slug": "API/Window/postMessage",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage",
            "summary": "The window.postMessage() method safely enables cross-origin communication between Window objects; e.g., between a page and a pop-up that it spawned, or between a page and an iframe embedded within it.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3",
                    "notes": [
                        "Firefox 8 and up supports sending <code>File</code> and <code>FileList</code> objects between windows. This is only allowed if the recipient's principal is contained within the sender's principal for security reasons.",
                        "Before Firefox 6, the <code>message</code> parameter must be a string. Since Firefox 6, the <code>message</code> parameter is serialized using the <a href='https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Structured_clone_algorithm'>structured clone algorithm</a>. This means you can pass a broad variety of data objects safely to the destination window without having to serialize them yourself."
                    ]
                },
                "firefox_android": "mirror",
                "ie": [
                    {
                        "version_added": "10",
                        "notes": "IE10 had an important limitation: see this <a href='https://stackoverflow.com/questions/16226924/is-cross-origin-postmessage-broken-in-ie10'>article</a> for details."
                    },
                    {
                        "version_added": "8",
                        "version_removed": "10",
                        "partial_implementation": true,
                        "notes": "Support only for <code>&lt;frame&gt;</code> and <code>&lt;iframe&gt;</code>."
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: postMessage() method"
        }
    ],
    "printing": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "print",
            "slug": "API/Window/print",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/print",
            "summary": "Opens the print dialog to print the current document.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": {
                    "version_added": "114"
                },
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "6",
                    "notes": "Starting with Opera 33, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "opera_android": {
                    "version_added": "10.1",
                    "notes": "Starting with Opera 33, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "safari": {
                    "version_added": "1.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                }
            },
            "title": "Window: print() method"
        }
    ],
    "dom-prompt-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "prompt",
            "slug": "API/Window/prompt",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt",
            "summary": "window.prompt() instructs the browser to display a dialog with an optional message prompting the user to input some text, and to wait until the user either submits the text or cancels the dialog.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.5"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Firefox strips newline characters from the prompt response; see <a href='https://bugzil.la/1716229'>bug 1716229</a>."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4",
                    "notes": "This function has no effect in the Modern UI/Metro version of Internet Explorer for Windows 8. It does not display a prompt to the user, and always returns <code>undefined</code>. It is not clear whether this is a bug or intended behavior. Desktop versions of IE do implement this function."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3",
                    "notes": "Starting with Opera 33, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "opera_android": {
                    "version_added": "10.1",
                    "notes": "Starting with Opera 33, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Starting with Chrome 46, this method is blocked inside an <code>&lt;iframe&gt;</code> unless its sandbox attribute has the value <code>allow-modals</code>."
                }
            },
            "title": "Window: prompt() method"
        }
    ],
    "unhandled-promise-rejections": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "rejectionhandled_event",
            "slug": "API/Window/rejectionhandled_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/rejectionhandled_event",
            "summary": "The rejectionhandled event is sent to the script's global scope (usually window but also Worker) whenever a rejected JavaScript Promise is handled late, i.e. when a handler is attached to the promise after its rejection had caused an unhandledrejection event.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: rejectionhandled event"
        }
    ],
    "handler-window-onrejectionhandled": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "rejectionhandled_event",
            "slug": "API/Window/rejectionhandled_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/rejectionhandled_event",
            "summary": "The rejectionhandled event is sent to the script's global scope (usually window but also Worker) whenever a rejected JavaScript Promise is handled late, i.e. when a handler is attached to the promise after its rejection had caused an unhandledrejection event.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: rejectionhandled event"
        }
    ],
    "dom-animationframeprovider-requestanimationframe": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "requestAnimationFrame",
            "slug": "API/Window/requestAnimationFrame",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame",
            "summary": "The window.requestAnimationFrame() method tells the browser that you wish to perform an animation and requests that the browser calls a specified function to update an animation right before the next repaint. The method takes a callback as an argument to be invoked before the repaint.",
            "support": {
                "chrome": [
                    {
                        "version_added": "24"
                    },
                    {
                        "version_added": "10",
                        "prefix": "webkit"
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "23",
                        "notes": "Callback parameter is a <code>DOMHighResTimestamp</code>. This means ten microsecond precision and zero time as <code>performance.now()</code>."
                    },
                    {
                        "version_added": "11",
                        "version_removed": "42",
                        "prefix": "moz",
                        "notes": "Callback parameter is a <code>DOMTimestamp</code>. This means millisecond precision and zero time as <code>Date.now()</code>."
                    },
                    {
                        "version_added": "4",
                        "version_removed": "11",
                        "prefix": "moz",
                        "notes": "Could be called with no input parameters."
                    }
                ],
                "firefox_android": [
                    {
                        "version_added": "23"
                    },
                    {
                        "version_added": "14",
                        "version_removed": "42",
                        "prefix": "moz"
                    }
                ],
                "ie": {
                    "version_added": "10",
                    "notes": "Internet Explorer does not reliably fire <code>requestAnimationFrame</code> before the paint cycle."
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": [
                    {
                        "version_added": "7"
                    },
                    {
                        "version_added": "6",
                        "prefix": "webkit"
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": [
                    {
                        "version_added": "4.4"
                    },
                    {
                        "version_added": "37",
                        "prefix": "webkit"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": "79",
                        "prefix": "webkit"
                    }
                ]
            },
            "title": "Window: requestAnimationFrame() method"
        }
    ],
    "dom-window-scrollbars-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "scrollbars",
            "slug": "API/Window/scrollbars",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollbars",
            "summary": "Returns the scrollbars object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: scrollbars property"
        }
    ],
    "dom-self-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "self",
            "slug": "API/Window/self",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/self",
            "summary": "The Window.self read-only property returns the window itself, as a WindowProxy. It can be used with dot notation on a window object (that is, window.self) or standalone (self). The advantage of the standalone notation is that a similar notation exists for non-window contexts, such as in Web Workers. By using self, you can refer to the global scope in a way that will work not only in a window context (self will resolve to window.self) but also in a worker context (self will then resolve to WorkerGlobalScope.self).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: self property"
        }
    ],
    "dom-sessionstorage-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "sessionStorage",
            "slug": "API/Window/sessionStorage",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage",
            "summary": "The read-only sessionStorage property accesses a session Storage object for the current origin. sessionStorage is similar to localStorage; the difference is that while data in localStorage doesn't expire, data in sessionStorage is cleared when the page session ends.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.10"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: sessionStorage property"
        }
    ],
    "dom-window-statusbar-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "statusbar",
            "slug": "API/Window/statusbar",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/statusbar",
            "summary": "Returns the statusbar object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: statusbar property"
        }
    ],
    "dom-window-stop-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "stop",
            "slug": "API/Window/stop",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/stop",
            "summary": "The window.stop() stops further resource loading in the current browsing context, equivalent to the stop button in the browser.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: stop() method"
        }
    ],
    "event-storage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "storage_event",
            "slug": "API/Window/storage_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/storage_event",
            "summary": "The storage event of the Window interface fires when a storage area (localStorage) has been modified in the context of another document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "45"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: storage event"
        }
    ],
    "handler-window-onstorage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "storage_event",
            "slug": "API/Window/storage_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/storage_event",
            "summary": "The storage event of the Window interface fires when a storage area (localStorage) has been modified in the context of another document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "45"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: storage event"
        }
    ],
    "dom-window-toolbar-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "toolbar",
            "slug": "API/Window/toolbar",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/toolbar",
            "summary": "Returns the toolbar object.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: toolbar property"
        }
    ],
    "dom-top-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "top",
            "slug": "API/Window/top",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/top",
            "summary": "Returns a reference to the topmost window in the window hierarchy.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Starting in Firefox 6, this property is read only, as defined by the standard."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: top property"
        }
    ],
    "event-unhandledrejection": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "unhandledrejection_event",
            "slug": "API/Window/unhandledrejection_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/unhandledrejection_event",
            "summary": "The unhandledrejection event is sent to the global scope of a script when a JavaScript Promise that has no rejection handler is rejected; typically, this is the window, but may also be a Worker.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.24"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: unhandledrejection event"
        }
    ],
    "handler-window-onunhandledrejection": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "unhandledrejection_event",
            "slug": "API/Window/unhandledrejection_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/unhandledrejection_event",
            "summary": "The unhandledrejection event is sent to the global scope of a script when a JavaScript Promise that has no rejection handler is rejected; typically, this is the window, but may also be a Worker.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.24"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: unhandledrejection event"
        }
    ],
    "event-unload": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "unload_event",
            "slug": "API/Window/unload_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/unload_event",
            "summary": "The unload event is fired when the document or a child resource is being unloaded.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: unload event"
        }
    ],
    "handler-window-onunload": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "unload_event",
            "slug": "API/Window/unload_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/unload_event",
            "summary": "The unload event is fired when the document or a child resource is being unloaded.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: unload event"
        }
    ],
    "dom-window-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "window",
            "slug": "API/Window/window",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/window",
            "summary": "The window property of a Window object points to the window object itself.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: window property"
        }
    ],
    "the-window-object": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Window.json",
            "name": "Window",
            "slug": "API/Window",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window",
            "summary": "The Window interface represents a window containing a DOM document; the document property points to the DOM document loaded in that window.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window"
        }
    ],
    "dom-worker-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Worker.json",
            "name": "Worker",
            "slug": "API/Worker/Worker",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker",
            "summary": "The Worker() constructor creates a Worker object that executes the script at the specified URL. This script must obey the same-origin policy.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": [
                    {
                        "version_added": "12.17.0",
                        "partial_implementation": true,
                        "notes": "Takes entirely different options."
                    },
                    {
                        "version_added": "11.7.0",
                        "partial_implementation": true,
                        "notes": "Takes entirely different options."
                    },
                    {
                        "version_added": "10.5.0",
                        "partial_implementation": true,
                        "notes": "Takes entirely different options.",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--experimental-worker"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Worker: Worker() constructor"
        }
    ],
    "dom-worker-postmessage-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Worker.json",
            "name": "postMessage",
            "slug": "API/Worker/postMessage",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage",
            "summary": "The postMessage() method of the Worker interface sends a message to the worker. The first parameter is the data to send to the worker. The data may be any JavaScript object that can be handled by the structured clone algorithm.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": [
                    {
                        "version_added": "1.14",
                        "notes": "The <code>message</code> parameter does not support cloning <code>Blob</code> values."
                    },
                    {
                        "version_added": "1.12",
                        "version_removed": "1.14",
                        "partial_implementation": true,
                        "notes": [
                            "The <code>message</code> parameter does not support cloning <code>Blob</code> values.",
                            "The <code>transfer</code> parameter does not accept <code>ArrayBuffer</code> items. Passing an <code>ArrayBuffer</code> results in an error being thrown."
                        ]
                    },
                    {
                        "version_added": "1.10",
                        "version_removed": "1.12",
                        "partial_implementation": true,
                        "notes": [
                            "The <code>message</code> parameter does not support <code>SharedArrayBuffer</code>.",
                            "The <code>transfer</code> parameter is not supported, and results in an error being thrown."
                        ]
                    },
                    {
                        "version_added": "1.0",
                        "version_removed": "1.10",
                        "partial_implementation": true,
                        "notes": [
                            "Data passed in the <code>message</code> parameter is serialized with JSON, not the structured clone algorithm.",
                            "The <code>transfer</code> parameter is not supported, and results in an error being thrown."
                        ]
                    }
                ],
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10",
                    "notes": "Internet Explorer does not support <code>Transferable</code> objects."
                },
                "nodejs": [
                    {
                        "version_added": "12.17.0",
                        "notes": "Supports <code>transferList</code> argument for transferring <code>ArrayBuffer</code> and <code>MessagePort</code> objects",
                        "partial_implementation": true
                    },
                    {
                        "version_added": "11.7.0",
                        "notes": "Supports <code>transferList</code> argument for transferring <code>ArrayBuffer</code> and <code>MessagePort</code> objects",
                        "partial_implementation": true
                    },
                    {
                        "version_added": "10.5.0",
                        "notes": "Supports <code>transferList</code> argument for transferring <code>ArrayBuffer</code> and <code>MessagePort</code> objects",
                        "partial_implementation": true,
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--experimental-worker"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Worker: postMessage() method"
        }
    ],
    "dom-worker-terminate-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Worker.json",
            "name": "terminate",
            "slug": "API/Worker/terminate",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Worker/terminate",
            "summary": "The terminate() method of the Worker interface immediately terminates the Worker. This does not offer the worker an opportunity to finish its operations; it is stopped at once.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": [
                    {
                        "version_added": "12.17.0",
                        "partial_implementation": true,
                        "notes": "Also takes an optional callback to be executed when the worker has terminated."
                    },
                    {
                        "version_added": "11.7.0",
                        "partial_implementation": true,
                        "notes": "Also takes an optional callback to be executed when the worker has terminated."
                    },
                    {
                        "version_added": "10.5.0",
                        "partial_implementation": true,
                        "notes": "Also takes an optional callback to be executed when the worker has terminated.",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--experimental-worker"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Worker: terminate() method"
        }
    ],
    "dedicated-workers-and-the-worker-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Worker.json",
            "name": "Worker",
            "slug": "API/Worker",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Worker",
            "summary": "The Worker interface of the Web Workers API represents a background task that can be created via script, which can send messages back to its creator.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": [
                    {
                        "version_added": "12.17.0",
                        "partial_implementation": true,
                        "notes": [
                            "Is a Node <code>EventEmitter</code> instead of DOM <code>EventTarget</code>.",
                            "Worker script environment expects CommonJS modules or ECMAScript modules.",
                            "Must be imported from the <code>worker_threads</code> module."
                        ]
                    },
                    {
                        "version_added": "11.7.0",
                        "partial_implementation": true,
                        "notes": [
                            "Is a Node <code>EventEmitter</code> instead of DOM <code>EventTarget</code>.",
                            "Worker script environment expects CommonJS modules.",
                            "Must be imported from the <code>worker_threads</code> module."
                        ]
                    },
                    {
                        "version_added": "10.5.0",
                        "partial_implementation": true,
                        "notes": [
                            "Is a Node <code>EventEmitter</code> instead of DOM <code>EventTarget</code>.",
                            "Worker script environment expects CommonJS modules.",
                            "Must be imported from the <code>worker_threads</code> module."
                        ],
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--experimental-worker"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Worker"
        }
    ],
    "handler-workerglobalscope-onerror": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerGlobalScope.json",
            "name": "error_event",
            "slug": "API/WorkerGlobalScope/error_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/error_event",
            "summary": "The error event of the WorkerGlobalScope interface fires when an error occurs in the worker.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerGlobalScope: error event"
        }
    ],
    "dom-workerglobalscope-importscripts-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerGlobalScope.json",
            "name": "importScripts",
            "slug": "API/WorkerGlobalScope/importScripts",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/importScripts",
            "summary": "The importScripts() method of the WorkerGlobalScope interface synchronously imports one or more scripts into the worker's scope.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerGlobalScope: importScripts() method"
        }
    ],
    "handler-workerglobalscope-onlanguagechange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerGlobalScope.json",
            "name": "languagechange_event",
            "slug": "API/WorkerGlobalScope/languagechange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/languagechange_event",
            "summary": "The languagechange event is fired at the global scope object when the user's preferred language changes.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "74"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerGlobalScope: languagechange event"
        }
    ],
    "dom-workerglobalscope-location-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerGlobalScope.json",
            "name": "location",
            "slug": "API/WorkerGlobalScope/location",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/location",
            "summary": "The location read-only property of the WorkerGlobalScope interface returns the WorkerLocation associated with the worker. It is a specific location object, mostly a subset of the Location for browsing scopes, but adapted to workers.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerGlobalScope: location property"
        }
    ],
    "dom-worker-navigator-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerGlobalScope.json",
            "name": "navigator",
            "slug": "API/WorkerGlobalScope/navigator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/navigator",
            "summary": "The navigator read-only property of the WorkerGlobalScope interface returns the WorkerNavigator associated with the worker. It is a specific navigator object, mostly a subset of the Navigator for browsing scopes, but adapted to workers.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.8"
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerGlobalScope: navigator property"
        }
    ],
    "handler-workerglobalscope-onoffline": [
        {
            "engines": [
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerGlobalScope.json",
            "name": "offline_event",
            "slug": "API/WorkerGlobalScope/offline_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/offline_event",
            "summary": "The offline event of the WorkerGlobalScope fires when the device loses connection to the internet.",
            "support": {
                "chrome": {
                    "version_added": false,
                    "notes": "See <a href='https://crbug.com/114475'>bug 114475</a>."
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": false,
                    "notes": "See <a href='https://crbug.com/114475'>bug 114475</a>."
                }
            },
            "title": "WorkerGlobalScope: offline event"
        }
    ],
    "handler-workerglobalscope-ononline": [
        {
            "engines": [
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerGlobalScope.json",
            "name": "online_event",
            "slug": "API/WorkerGlobalScope/online_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/online_event",
            "summary": "The online event of the WorkerGlobalScope fires when the device reconnects to the internet.",
            "support": {
                "chrome": {
                    "version_added": false,
                    "notes": "See <a href='https://crbug.com/114475'>bug 114475</a>."
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": false,
                    "notes": "See <a href='https://crbug.com/114475'>bug 114475</a>."
                }
            },
            "title": "WorkerGlobalScope: online event"
        }
    ],
    "dom-workerglobalscope-self-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerGlobalScope.json",
            "name": "self",
            "slug": "API/WorkerGlobalScope/self",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/self",
            "summary": "The self read-only property of the WorkerGlobalScope interface returns a reference to the WorkerGlobalScope itself. Most of the time it is a specific scope like DedicatedWorkerGlobalScope, SharedWorkerGlobalScope, or ServiceWorkerGlobalScope.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "34"
                },
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.5"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerGlobalScope: self property"
        }
    ],
    "the-workerglobalscope-common-interface": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerGlobalScope.json",
            "name": "WorkerGlobalScope",
            "slug": "API/WorkerGlobalScope",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope",
            "summary": "The WorkerGlobalScope interface of the Web Workers API is an interface representing the scope of any worker. Workers have no browsing context; this scope contains the information usually conveyed by Window objects — in this case event handlers, the console or the associated WorkerNavigator object. Each WorkerGlobalScope has its own event loop.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerGlobalScope"
        }
    ],
    "dom-workerlocation-hash": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerLocation.json",
            "name": "hash",
            "slug": "API/WorkerLocation/hash",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation/hash",
            "summary": "The hash property of a WorkerLocation object returns the hash part of the worker's location.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerLocation: hash property"
        }
    ],
    "dom-workerlocation-host": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerLocation.json",
            "name": "host",
            "slug": "API/WorkerLocation/host",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation/host",
            "summary": "The host property of a WorkerLocation object returns the host part of the worker's location.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerLocation: host property"
        }
    ],
    "dom-workerlocation-hostname": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerLocation.json",
            "name": "hostname",
            "slug": "API/WorkerLocation/hostname",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation/hostname",
            "summary": "The hostname property of a WorkerLocation object returns the hostname part of the worker's location.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerLocation: hostname property"
        }
    ],
    "dom-workerlocation-href": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerLocation.json",
            "name": "href",
            "slug": "API/WorkerLocation/href",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation/href",
            "summary": "The href property of a WorkerLocation object returns a string containing the serialized URL for the worker's location.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerLocation: href property"
        }
    ],
    "dom-workerlocation-origin": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerLocation.json",
            "name": "origin",
            "slug": "API/WorkerLocation/origin",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation/origin",
            "summary": "The origin property of a WorkerLocation object returns the worker's origin.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7"
                },
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerLocation: origin property"
        }
    ],
    "dom-workerlocation-pathname": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerLocation.json",
            "name": "pathname",
            "slug": "API/WorkerLocation/pathname",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation/pathname",
            "summary": "The pathname property of a WorkerLocation object returns the pathname part of the worker's location.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerLocation: pathname property"
        }
    ],
    "dom-workerlocation-port": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerLocation.json",
            "name": "port",
            "slug": "API/WorkerLocation/port",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation/port",
            "summary": "The port property of a WorkerLocation object returns the port part of the worker's location.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerLocation: port property"
        }
    ],
    "dom-workerlocation-protocol": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerLocation.json",
            "name": "protocol",
            "slug": "API/WorkerLocation/protocol",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation/protocol",
            "summary": "The protocol property of a WorkerLocation object returns the protocol part of the worker's location.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerLocation: protocol property"
        }
    ],
    "dom-workerlocation-search": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerLocation.json",
            "name": "search",
            "slug": "API/WorkerLocation/search",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation/search",
            "summary": "The search property of a WorkerLocation object returns the search part of the worker's location.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerLocation: search property"
        }
    ],
    "workerlocation": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerLocation.json",
            "name": "toString",
            "slug": "API/WorkerLocation/toString",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation/toString",
            "summary": "The toString() stringifier method of a WorkerLocation object returns a string containing the serialized URL for the worker's location. It is a synonym for WorkerLocation.href.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerLocation: toString() method"
        }
    ],
    "worker-locations": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerLocation.json",
            "name": "WorkerLocation",
            "slug": "API/WorkerLocation",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation",
            "summary": "The WorkerLocation interface defines the absolute location of the script executed by the Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.location property obtained by calling self.location.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.7"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerLocation"
        }
    ],
    "the-workernavigator-object": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WorkerNavigator.json",
            "name": "WorkerNavigator",
            "slug": "API/WorkerNavigator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator",
            "summary": "The WorkerNavigator interface represents a subset of the Navigator interface allowed to be accessed from a Worker. Such an object is initialized for each worker and is available via the self.navigator property.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.8"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WorkerNavigator"
        }
    ],
    "dom-worklet-addmodule-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Worklet.json",
            "name": "addModule",
            "slug": "API/Worklet/addModule",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Worklet/addModule",
            "summary": "The addModule() method of the Worklet interface loads the module in the given JavaScript file and adds it to the current Worklet.",
            "support": {
                "chrome": {
                    "version_added": "65"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "76"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Worklet: addModule() method"
        }
    ],
    "worklets-worklet": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/Worklet.json",
            "name": "Worklet",
            "slug": "API/Worklet",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Worklet",
            "summary": "The Worklet interface is a lightweight version of Web Workers and gives developers access to low-level parts of the rendering pipeline.",
            "support": {
                "chrome": {
                    "version_added": "65"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "76"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Worklet"
        }
    ],
    "dom-atob-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/_globals/atob.json",
            "name": "atob",
            "slug": "API/atob",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/atob",
            "summary": "The atob() function decodes a string of data which has been encoded using Base64 encoding. You can use the btoa() method to encode and transmit data which may otherwise cause communication problems, then transmit it and use the atob() method to decode the data again. For example, you can encode, transmit, and decode control characters such as ASCII values 0 through 31.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "16.0.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "atob() global function"
        }
    ],
    "dom-btoa-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/_globals/btoa.json",
            "name": "btoa",
            "slug": "API/btoa",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/btoa",
            "summary": "The btoa() method creates a Base64-encoded ASCII string from a binary string (i.e., a string in which each character in the string is treated as a byte of binary data).",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "16.0.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "btoa() global function"
        }
    ],
    "dom-clearinterval-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/_globals/clearInterval.json",
            "name": "clearInterval",
            "slug": "API/clearInterval",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/clearInterval",
            "summary": "The global clearInterval() method cancels a timed, repeating action which was previously established by a call to setInterval(). If the parameter provided does not identify a previously established action, this method does nothing.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4",
                    "notes": "From Internet Explorer 4 through 8, <code>clearInterval</code> is an Object rather than a Function. This behavior was fixed in Internet Explorer 9."
                },
                "nodejs": {
                    "version_added": "0.10.0",
                    "partial_implementation": true,
                    "notes": "Takes a <code>Timeout</code> object instead of the <code>intervalID</code>."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "clearInterval() global function"
        }
    ],
    "dom-cleartimeout-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/_globals/clearTimeout.json",
            "name": "clearTimeout",
            "slug": "API/clearTimeout",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/clearTimeout",
            "summary": "The global clearTimeout() method cancels a timeout previously established by calling setTimeout().",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4",
                    "notes": "From Internet Explorer 4 through 8, <code>clearTimeout</code> is an Object rather than a Function. This behavior was fixed in Internet Explorer 9."
                },
                "nodejs": {
                    "version_added": "0.10.0",
                    "partial_implementation": true,
                    "notes": "Takes a <code>Timeout</code> object instead of the <code>timeoutID</code>."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "clearTimeout() global function"
        }
    ],
    "dom-createimagebitmap-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/_globals/createImageBitmap.json",
            "name": "createImageBitmap",
            "slug": "API/createImageBitmap",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/createImageBitmap",
            "summary": "The createImageBitmap() method creates a bitmap from a given source, optionally cropped to contain only a portion of that source. The method exists on the global scope in both windows and workers. It accepts a variety of different image sources, and returns a Promise which resolves to an ImageBitmap.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "42"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15",
                    "notes": "See <a href='https://webkit.org/b/182424'>bug 182424</a>."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "createImageBitmap() global function"
        }
    ],
    "dom-crossoriginisolated-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/_globals/crossOriginIsolated.json",
            "name": "crossOriginIsolated",
            "slug": "API/crossOriginIsolated",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/crossOriginIsolated",
            "summary": "The global crossOriginIsolated read-only property returns a boolean value that indicates whether the website is in a cross-origin isolation state. That state mitigates the risk of side-channel attacks and unlocks a few capabilities:",
            "support": {
                "chrome": {
                    "version_added": "87"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "72"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "87"
                }
            },
            "title": "crossOriginIsolated global property"
        }
    ],
    "dom-issecurecontext-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/_globals/isSecureContext.json",
            "name": "isSecureContext",
            "slug": "API/isSecureContext",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/isSecureContext",
            "summary": "The global isSecureContext read-only property returns a boolean indicating whether the current context is secure (true) or not (false).",
            "support": {
                "chrome": {
                    "version_added": "47"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "15"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "isSecureContext global property"
        }
    ],
    "dom-origin-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/_globals/origin.json",
            "name": "origin",
            "slug": "API/origin",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/origin",
            "summary": "The global origin read-only property returns the origin of the global scope, serialized as a string.",
            "support": {
                "chrome": {
                    "version_added": "59"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "54"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "origin global property"
        }
    ],
    "microtask-queuing": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/_globals/queueMicrotask.json",
            "name": "queueMicrotask",
            "slug": "API/queueMicrotask",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/queueMicrotask",
            "summary": "The queueMicrotask() method, which is exposed on the Window or Worker interface, queues a microtask to be executed at a safe time prior to control returning to the browser's event loop.",
            "support": {
                "chrome": {
                    "version_added": "71"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "69"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "11.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "12.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "queueMicrotask() global function"
        }
    ],
    "runtime-script-errors": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/_globals/reportError.json",
            "name": "reportError",
            "slug": "API/reportError",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/reportError",
            "summary": "The reportError() global method may be used to report errors to the console or global event handlers, emulating an uncaught JavaScript exception.",
            "support": {
                "chrome": {
                    "version_added": "95"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "93"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "95"
                }
            },
            "title": "reportError() global function"
        }
    ],
    "dom-setinterval-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/_globals/setInterval.json",
            "name": "setInterval",
            "slug": "API/setInterval",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/setInterval",
            "summary": "The setInterval() method, offered on the Window and Worker interfaces, repeatedly calls a function or executes a code snippet, with a fixed time delay between each call.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0",
                    "partial_implementation": true,
                    "notes": [
                        "Returns a <code>Timeout</code> object instead of the <code>intervalID</code>.",
                        "Does not support passing a <code>code</code> string and throws when the first parameter is not a function."
                    ]
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "setInterval() global function"
        }
    ],
    "dom-settimeout-dev": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/_globals/setTimeout.json",
            "name": "setTimeout",
            "slug": "API/setTimeout",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/setTimeout",
            "summary": "The global setTimeout() method sets a timer which executes a function or specified piece of code once the timer expires.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "nodejs": {
                    "version_added": "0.10.0",
                    "partial_implementation": true,
                    "notes": [
                        "Returns a <code>Timeout</code> object instead of the <code>timeoutID</code>.",
                        "Does not support passing a <code>code</code> string and throws when the first parameter is not a function."
                    ]
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "setTimeout() global function"
        }
    ],
    "dom-structuredclone": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/_globals/structuredClone.json",
            "name": "structuredClone",
            "slug": "API/structuredClone",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/structuredClone",
            "summary": "The global structuredClone() method creates a deep clone of a given value using the structured clone algorithm.",
            "support": {
                "chrome": {
                    "version_added": "98"
                },
                "chrome_android": "mirror",
                "deno": [
                    {
                        "version_added": "1.14",
                        "notes": "The <code>message</code> parameter does not support cloning <code>Blob</code> values."
                    },
                    {
                        "version_added": "1.13",
                        "version_removed": "1.14",
                        "partial_implementation": true,
                        "notes": [
                            "The <code>message</code> parameter does not support cloning <code>Blob</code> values.",
                            "The <code>transfer</code> parameter does not accept <code>ArrayBuffer</code> items. Passing an <code>ArrayBuffer</code> results in an error being thrown."
                        ]
                    }
                ],
                "edge": "mirror",
                "firefox": {
                    "version_added": "94"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "17.0.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "98"
                }
            },
            "title": "structuredClone() global function"
        }
    ],
    "selector-active": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/active.json",
            "name": "active",
            "slug": "CSS/:active",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/:active",
            "summary": "The :active CSS pseudo-class represents an element (such as a button) that is being activated by the user. When using a mouse, \"activation\" typically starts when the user presses down the primary mouse button.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":active"
        }
    ],
    "selector-autofill": [
        {
            "engines": [
                "gecko",
                "webkit"
            ],
            "prefixed": [
                "blink"
            ],
            "filename": "css/selectors/autofill.json",
            "name": "autofill",
            "slug": "CSS/:autofill",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/:autofill",
            "summary": "The :autofill CSS pseudo-class matches when an <input> element has its value autofilled by the browser. The class stops matching if the user edits the field.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "prefix": "-webkit-"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": [
                    {
                        "version_added": "86"
                    },
                    {
                        "prefix": "-webkit-",
                        "version_added": "86"
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": [
                    {
                        "version_added": "15"
                    },
                    {
                        "version_added": "3",
                        "prefix": "-webkit-"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "15"
                    },
                    {
                        "version_added": "1",
                        "prefix": "-webkit-"
                    }
                ],
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "prefix": "-webkit-"
                }
            },
            "title": ":autofill"
        }
    ],
    "selector-checked": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/checked.json",
            "name": "checked",
            "slug": "CSS/:checked",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/:checked",
            "summary": "The :checked CSS pseudo-class selector represents any radio (<input type=\"radio\">), checkbox (<input type=\"checkbox\">), or option (<option> in a <select>) element that is checked or toggled to an on state.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "On macOS, styling <code>&lt;option&gt;</code> elements has no effect."
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": [
                        "From Firefox 56, <code>&lt;option&gt;</code> elements cannot be styled.",
                        "On macOS, styling <code>&lt;option&gt;</code> elements has no effect."
                    ]
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "From Firefox 56, <code>&lt;option&gt;</code> elements cannot be styled."
                },
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9",
                    "notes": "On macOS, styling <code>&lt;option&gt;</code> elements has no effect."
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1",
                    "notes": "Styling <code>&lt;option&gt;</code> elements has no effect."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "2"
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "On macOS, styling <code>&lt;option&gt;</code> elements has no effect."
                }
            },
            "title": ":checked"
        }
    ],
    "selector-default": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/default.json",
            "name": "default",
            "slug": "CSS/:default",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/:default",
            "summary": "The :default CSS pseudo-class selects form elements that are the default in a group of related elements.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":default"
        }
    ],
    "selector-defined": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/defined.json",
            "name": "defined",
            "slug": "CSS/:defined",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/:defined",
            "summary": "The :defined CSS pseudo-class represents any element that has been defined. This includes any standard element built in to the browser, and custom elements that have been successfully defined (i.e. with the CustomElementRegistry.define() method).",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":defined"
        }
    ],
    "selector-ltr": [
        {
            "engines": [
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/dir.json",
            "name": "dir",
            "slug": "CSS/:dir",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/:dir",
            "summary": "The :dir() CSS pseudo-class matches elements based on the directionality of the text contained in them.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": [
                    {
                        "version_added": "49"
                    },
                    {
                        "prefix": "-moz-",
                        "version_added": "17",
                        "version_removed": "53"
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": ":dir()"
        }
    ],
    "selector-disabled": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/disabled.json",
            "name": "disabled",
            "slug": "CSS/:disabled",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/:disabled",
            "summary": "The :disabled CSS pseudo-class represents any disabled element. An element is disabled if it can't be activated (selected, clicked on, typed into, etc.) or accept focus. The element also has an enabled state, in which it can be activated or accept focus.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9",
                    "notes": "Internet Explorer does not recognize <code>:disabled</code> on the <a href='https://developer.mozilla.org/docs/Web/HTML/Element/fieldset'><code>&lt;fieldset&gt;</code></a> element."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "2"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":disabled"
        }
    ],
    "selector-enabled": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/enabled.json",
            "name": "enabled",
            "slug": "CSS/:enabled",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/:enabled",
            "summary": "The :enabled CSS pseudo-class represents any enabled element. An element is enabled if it can be activated (selected, clicked on, typed into, etc.) or accept focus. The element also has a disabled state, in which it can't be activated or accept focus.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "2"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":enabled"
        }
    ],
    "selector-focus": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/focus.json",
            "name": "focus",
            "slug": "CSS/:focus",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/:focus",
            "summary": "The :focus CSS pseudo-class represents an element (such as a form input) that has received focus. It is generally triggered when the user clicks or taps on an element or selects it with the keyboard's Tab key.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "7"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":focus"
        }
    ],
    "selector-hover": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/hover.json",
            "name": "hover",
            "slug": "CSS/:hover",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/:hover",
            "summary": "The :hover CSS pseudo-class matches when the user interacts with an element with a pointing device, but does not necessarily activate it. It is generally triggered when the user hovers over an element with the cursor (mouse pointer).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "4"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": {
                    "version_added": "1",
                    "notes": "As of Safari for iOS 7.1.2, tapping a <a href='https://developer.mozilla.org/docs/Web/Events/click#Safari_Mobile'>clickable element</a> causes the element to enter the <code>:hover</code> state. The element will remain in the <code>:hover</code> state until a different element has entered the <code>:hover</code> state."
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":hover"
        }
    ],
    "selector-in-range": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/in-range.json",
            "name": "in-range",
            "slug": "CSS/:in-range",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/:in-range",
            "summary": "The :in-range CSS pseudo-class represents an <input> element whose current value is within the range limits specified by the min and max attributes.",
            "support": {
                "chrome": {
                    "version_added": "10",
                    "notes": "Before Chrome 52, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://crbug.com/602568'>Chromium bug 602568</a>). In Chrome 52, it was changed to only match enabled read-write inputs."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "29",
                    "notes": "Before Firefox 50, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://bugzil.la/1264157'>bug 1264157</a>). In Firefox 50, it was changed to only match enabled read-write inputs."
                },
                "firefox_android": {
                    "version_added": "16"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11",
                    "notes": "Before Opera 39, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://crbug.com/602568'>Chromium bug 602568</a>). In Opera 39, it was changed to only match enabled read-write inputs."
                },
                "opera_android": {
                    "version_added": "11",
                    "notes": "Before Opera 39, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://crbug.com/602568'>Chromium bug 602568</a>). In Opera 39, it was changed to only match enabled read-write inputs."
                },
                "safari": {
                    "version_added": "5.1",
                    "notes": "In Safari, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://webkit.org/b/156530'>bug 156530</a>). It was later changed to only match enabled read-write inputs."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "1.0",
                    "notes": "Before version 6.0, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://crbug.com/602568'>Chromium bug 602568</a>). In version 6.0, it was changed to only match enabled read-write inputs."
                },
                "webview_android": {
                    "version_added": "2.2",
                    "notes": "Before version 52, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://crbug.com/602568'>Chromium bug 602568</a>). In version 52, it was changed to only match enabled read-write inputs."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before Chrome 52, <code>:in-range</code> matched disabled and read-only inputs (see <a href='https://crbug.com/602568'>Chromium bug 602568</a>). In Chrome 52, it was changed to only match enabled read-write inputs."
                }
            },
            "title": ":in-range"
        }
    ],
    "selector-indeterminate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/indeterminate.json",
            "name": "indeterminate",
            "slug": "CSS/:indeterminate",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/:indeterminate",
            "summary": "The :indeterminate CSS pseudo-class represents any form element whose state is indeterminate, such as checkboxes which have their HTML indeterminate attribute set to true, radio buttons which are members of a group in which all radio buttons are unchecked, and indeterminate <progress> elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":indeterminate"
        }
    ],
    "selector-invalid": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/invalid.json",
            "name": "invalid",
            "slug": "CSS/:invalid",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/:invalid",
            "summary": "The :invalid CSS pseudo-class represents any <form>, <fieldset>, <input> or other <form> element whose contents fail to validate.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":invalid"
        }
    ],
    "selector-link": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/link.json",
            "name": "link",
            "slug": "CSS/:link",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/:link",
            "summary": "The :link CSS pseudo-class represents an element that has not yet been visited. It matches every unvisited <a> or <area> element that has an href attribute.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3.5"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "1.5"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":link"
        }
    ],
    "selector-optional": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/optional.json",
            "name": "optional",
            "slug": "CSS/:optional",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/:optional",
            "summary": "The :optional CSS pseudo-class represents any <input>, <select>, or <textarea> element that does not have the required attribute set on it.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":optional"
        }
    ],
    "selector-out-of-range": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/out-of-range.json",
            "name": "out-of-range",
            "slug": "CSS/:out-of-range",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/:out-of-range",
            "summary": "The :out-of-range CSS pseudo-class represents an <input> element whose current value is outside the range limits specified by the min and max attributes.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "16"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "2.2"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":out-of-range"
        }
    ],
    "selector-popover-open": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "css/selectors/popover-open.json",
            "name": "popover-open",
            "slug": "CSS/:popover-open",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/:popover-open",
            "summary": "The :popover-open CSS pseudo-class represents a popover element (i.e. one with a popover attribute) that is in the showing state. You can use this to apply style to popover elements only when they are shown.",
            "support": {
                "chrome": {
                    "version_added": "114"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "114",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.element.popover.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "preview"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "114"
                }
            },
            "title": ":popover-open"
        }
    ],
    "selector-read-only": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "prefixed": [
                "gecko"
            ],
            "filename": "css/selectors/read-only.json",
            "name": "read-only",
            "slug": "CSS/:read-only",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/:read-only",
            "summary": "The :read-only CSS pseudo-class represents an element (such as input or textarea) that is not editable by the user.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "13"
                },
                "firefox": [
                    {
                        "version_added": "78"
                    },
                    {
                        "prefix": "-moz-",
                        "version_added": "1.5"
                    }
                ],
                "firefox_android": {
                    "prefix": "-moz-",
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":read-only"
        }
    ],
    "selector-read-write": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "prefixed": [
                "gecko"
            ],
            "filename": "css/selectors/read-write.json",
            "name": "read-write",
            "slug": "CSS/:read-write",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/:read-write",
            "summary": "The :read-write CSS pseudo-class represents an element (such as input or textarea) that is editable by the user.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "13"
                },
                "firefox": [
                    {
                        "version_added": "78"
                    },
                    {
                        "prefix": "-moz-",
                        "version_added": "1.5"
                    }
                ],
                "firefox_android": {
                    "prefix": "-moz-",
                    "version_added": "4"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":read-write"
        }
    ],
    "selector-required": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/required.json",
            "name": "required",
            "slug": "CSS/:required",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/:required",
            "summary": "The :required CSS pseudo-class represents any <input>, <select>, or <textarea> element that has the required attribute set on it.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":required"
        }
    ],
    "selector-target": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/target.json",
            "name": "target",
            "slug": "CSS/:target",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/:target",
            "summary": "The :target CSS pseudo-class represents a unique element (the target element) with an id matching the URL's fragment.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": {
                    "version_added": "2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "2"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":target"
        }
    ],
    "selector-valid": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/valid.json",
            "name": "valid",
            "slug": "CSS/:valid",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/:valid",
            "summary": "The :valid CSS pseudo-class represents any <input> or other <form> element whose contents validate successfully. This allows to easily make valid fields adopt an appearance that helps the user confirm that their data is formatted properly.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":valid"
        }
    ],
    "selector-visited": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "css/selectors/visited.json",
            "name": "visited",
            "slug": "CSS/:visited",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/:visited",
            "summary": "The :visited CSS pseudo-class applies once the link has been visited by the user. For privacy reasons, the styles that can be modified using this selector are very limited. The :visited pseudo-class applies only <a> and <area> elements that have an href attribute.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "4"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": ":visited"
        }
    ],
    "link-type-noopener": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/a.json",
            "name": "noopener",
            "slug": "HTML/Link_types/noopener",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/noopener",
            "summary": "The noopener keyword for the rel attribute of the <a>, <area>, and <form> elements instructs the browser to navigate to the target resource without granting the new browsing context access to the document that opened it — by not setting the Window.opener property on the opened window (it returns null).",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "52",
                    "notes": "Before Firefox 63, <code>rel=\"noopener\"</code> created windows with all features disabled by default. Starting with Firefox 63, these windows have the same features enabled by default as any other window."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "rel=noopener"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/area.json",
            "name": "noopener",
            "slug": "HTML/Link_types/noopener",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/noopener",
            "summary": "The noopener keyword for the rel attribute of the <a>, <area>, and <form> elements instructs the browser to navigate to the target resource without granting the new browsing context access to the document that opened it — by not setting the Window.opener property on the opened window (it returns null).",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "52",
                    "notes": "Before Firefox 63, <code>rel=\"noopener\"</code> created windows with all features disabled by default. Starting with Firefox 63, these windows have the same features enabled by default as any other window."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "rel=noopener"
        }
    ],
    "link-type-noreferrer": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/a.json",
            "name": "noreferrer",
            "slug": "HTML/Link_types/noreferrer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/noreferrer",
            "summary": "The noreferrer keyword for the rel attribute of the <a>, <area>, and <form> elements instructs the browser, when navigating to the target resource, to omit the Referer header and otherwise leak no referrer information — and additionally to behave as if the noopener keyword were also specified.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "33"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11",
                    "partial_implementation": true,
                    "notes": "Only supported in IE11 in later versions of Windows 10 (creators update). (Per caniuse.com.)"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "rel=noreferrer"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/area.json",
            "name": "noreferrer",
            "slug": "HTML/Link_types/noreferrer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/noreferrer",
            "summary": "The noreferrer keyword for the rel attribute of the <a>, <area>, and <form> elements instructs the browser, when navigating to the target resource, to omit the Referer header and otherwise leak no referrer information — and additionally to behave as if the noopener keyword were also specified.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "33"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11",
                    "partial_implementation": true,
                    "notes": "Only supported in IE11 in later versions of Windows 10 (creators update). (Per caniuse.com.)"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "rel=noreferrer"
        }
    ],
    "the-a-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/a.json",
            "name": "a",
            "slug": "HTML/Element/a",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a",
            "summary": "The <a> HTML element (or anchor element), with its href attribute, creates a hyperlink to web pages, files, email addresses, locations in the same page, or anything else a URL can address.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Starting with Firefox 41, &lt;a&gt; without <code>href</code> attribute is no longer classified as interactive content: clicking it inside &lt;label&gt; will activate labelled content (<a href='https://bugzil.la/1167816'>bug 1167816</a>)."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<a>: The Anchor element"
        }
    ],
    "the-abbr-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/abbr.json",
            "name": "abbr",
            "slug": "HTML/Element/abbr",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr",
            "summary": "The <abbr> HTML element represents an abbreviation or acronym.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 4, this element implemented the <code>HTMLSpanElement</code> interface instead of the standard <code>HTMLElement</code> interface."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "7"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<abbr>: The Abbreviation element"
        }
    ],
    "the-address-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/address.json",
            "name": "address",
            "slug": "HTML/Element/address",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/address",
            "summary": "The <address> HTML element indicates that the enclosed HTML provides contact information for a person or people, or for an organization.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<address>: The Contact Address element"
        }
    ],
    "the-area-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/area.json",
            "name": "area",
            "slug": "HTML/Element/area",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/area",
            "summary": "The <area> HTML element defines an area inside an image map that has predefined clickable areas. An image map allows geometric areas on an image to be associated with hypertext links.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<area>: The Image Map Area element"
        }
    ],
    "the-article-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/article.json",
            "name": "article",
            "slug": "HTML/Element/article",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article",
            "summary": "The <article> HTML element represents a self-contained composition in a document, page, application, or site, which is intended to be independently distributable or reusable (e.g., in syndication). Examples include: a forum post, a magazine or newspaper article, or a blog entry, a product card, a user-submitted comment, an interactive widget or gadget, or any other independent item of content.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<article>: The Article Contents element"
        }
    ],
    "the-aside-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/aside.json",
            "name": "aside",
            "slug": "HTML/Element/aside",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside",
            "summary": "The <aside> HTML element represents a portion of a document whose content is only indirectly related to the document's main content. Asides are frequently presented as sidebars or call-out boxes.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<aside>: The Aside element"
        }
    ],
    "the-audio-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/audio.json",
            "name": "audio",
            "slug": "HTML/Element/audio",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio",
            "summary": "The <audio> HTML element is used to embed sound content in documents. It may contain one or more audio sources, represented using the src attribute or the <source> element: the browser will choose the most suitable one. It can also be the destination for streamed media, using a MediaStream.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5",
                    "notes": "For Firefox to play audio, the server must serve the file using the correct MIME type."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<audio>: The Embed Audio element"
        }
    ],
    "the-b-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/b.json",
            "name": "b",
            "slug": "HTML/Element/b",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b",
            "summary": "The <b> HTML element is used to draw the reader's attention to the element's contents, which are not otherwise granted special importance. This was formerly known as the Boldface element, and most browsers still draw the text in boldface. However, you should not use <b> for styling text or granting importance. If you wish to create boldface text, you should use the CSS font-weight property. If you wish to indicate an element is of special importance, you should use the <strong> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 4, this element implemented the <code>HTMLSpanElement</code> interface instead of the standard <code>HTMLElement</code> interface."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<b>: The Bring Attention To element"
        }
    ],
    "the-base-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/base.json",
            "name": "base",
            "slug": "HTML/Element/base",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base",
            "summary": "The <base> HTML element specifies the base URL to use for all relative URLs in a document. There can be only one <base> element in a document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true,
                    "notes": "Before Internet Explorer 7, <code>&lt;base&gt;</code> can be positioned anywhere in the document and the nearest value of <code>&lt;base&gt;</code> is used."
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<base>: The Document Base URL element"
        }
    ],
    "the-bdi-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/bdi.json",
            "name": "bdi",
            "slug": "HTML/Element/bdi",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdi",
            "summary": "The <bdi> HTML element tells the browser's bidirectional algorithm to treat the text it contains in isolation from its surrounding text. It's particularly useful when a website dynamically inserts some text and doesn't know the directionality of the text being inserted.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "10"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<bdi>: The Bidirectional Isolate element"
        }
    ],
    "the-bdo-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/bdo.json",
            "name": "bdo",
            "slug": "HTML/Element/bdo",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/bdo",
            "summary": "The <bdo> HTML element overrides the current directionality of text, so that the text within is rendered in a different direction.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "10"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<bdo>: The Bidirectional Text Override element"
        }
    ],
    "the-blockquote-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/blockquote.json",
            "name": "blockquote",
            "slug": "HTML/Element/blockquote",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blockquote",
            "summary": "The <blockquote> HTML element indicates that the enclosed text is an extended quotation. Usually, this is rendered visually by indentation (see Notes for how to change it). A URL for the source of the quotation may be given using the cite attribute, while a text representation of the source can be given using the <cite> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<blockquote>: The Block Quotation element"
        }
    ],
    "the-body-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/body.json",
            "name": "body",
            "slug": "HTML/Element/body",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body",
            "summary": "The <body> HTML element represents the content of an HTML document. There can be only one <body> element in a document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<body>: The Document Body element"
        }
    ],
    "the-br-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/br.json",
            "name": "br",
            "slug": "HTML/Element/br",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br",
            "summary": "The <br> HTML element produces a line break in text (carriage-return). It is useful for writing a poem or an address, where the division of lines is significant.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<br>: The Line Break element"
        }
    ],
    "attr-fe-disabled": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/button.json",
            "name": "disabled",
            "slug": "HTML/Attributes/disabled",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled",
            "summary": "The Boolean disabled attribute, when present, makes the element not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: disabled"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/fieldset.json",
            "name": "disabled",
            "slug": "HTML/Attributes/disabled",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled",
            "summary": "The Boolean disabled attribute, when present, makes the element not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true,
                    "notes": "Not all form control descendants of a disabled fieldset are properly disabled in IE11; see IE <a href='https://connect.microsoft.com/IE/feedbackdetail/view/817488'>bug 817488: input[type='file'] not disabled inside disabled fieldset</a> and IE <a href='https://connect.microsoft.com/IE/feedbackdetail/view/962368/can-still-edit-input-type-text-within-fieldset-disabled'>bug 962368: Can still edit input[type='text'] within fieldset[disabled]</a>."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: disabled"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "disabled",
            "slug": "HTML/Attributes/disabled",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled",
            "summary": "The Boolean disabled attribute, when present, makes the element not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: disabled"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/select.json",
            "name": "disabled",
            "slug": "HTML/Attributes/disabled",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled",
            "summary": "The Boolean disabled attribute, when present, makes the element not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: disabled"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/textarea.json",
            "name": "disabled",
            "slug": "HTML/Attributes/disabled",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled",
            "summary": "The Boolean disabled attribute, when present, makes the element not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: disabled"
        }
    ],
    "the-button-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/button.json",
            "name": "button",
            "slug": "HTML/Element/button",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button",
            "summary": "The <button> HTML element is an interactive element activated by a user with a mouse, keyboard, finger, voice command, or other assistive technology. Once activated, it then performs an action, such as submitting a form or opening a dialog.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<button>: The Button element"
        }
    ],
    "the-canvas-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/canvas.json",
            "name": "canvas",
            "slug": "HTML/Element/canvas",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas",
            "summary": "Use the HTML <canvas> element with either the canvas scripting API or the WebGL API to draw graphics and animations.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5",
                    "notes": [
                        "Before Firefox 5, the canvas width and height were signed integers instead of unsigned integers.",
                        "Before Firefox 6, a &lt;canvas&gt; element with a zero width or height would be rendered as if it had default dimensions.",
                        "Before Firefox 12, if JavaScript is disabled, the &lt;canvas&gt; element was being rendered instead of showing the fallback content as per the specification. Since then, the fallback content is rendered instead."
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "2",
                    "notes": "Although early versions of Apple's Safari browser don't require the closing tag, the specification indicates that it is required, so you should be sure to include it for broadest compatibility. Before version 2, Safari will render the content of the fallback in addition to the canvas itself unless you use CSS tricks to mask it."
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<canvas>: The Graphics Canvas element"
        }
    ],
    "the-caption-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/caption.json",
            "name": "caption",
            "slug": "HTML/Element/caption",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption",
            "summary": "The <caption> HTML element specifies the caption (or title) of a table.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<caption>: The Table Caption element"
        }
    ],
    "the-cite-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/cite.json",
            "name": "cite",
            "slug": "HTML/Element/cite",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/cite",
            "summary": "The <cite> HTML element is used to mark up the title of a cited creative work. The reference may be in an abbreviated form according to context-appropriate conventions related to citation metadata.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<cite>: The Citation element"
        }
    ],
    "the-code-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/code.json",
            "name": "code",
            "slug": "HTML/Element/code",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/code",
            "summary": "The <code> HTML element displays its contents styled in a fashion intended to indicate that the text is a short fragment of computer code. By default, the content text is displayed using the user agent's default monospace font.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<code>: The Inline Code element"
        }
    ],
    "the-col-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/col.json",
            "name": "col",
            "slug": "HTML/Element/col",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/col",
            "summary": "The <col> HTML element defines a column within a table and is used for defining common semantics on all common cells. It is generally found within a <colgroup> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<col>: The Table Column element"
        }
    ],
    "the-colgroup-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/colgroup.json",
            "name": "colgroup",
            "slug": "HTML/Element/colgroup",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup",
            "summary": "The <colgroup> HTML element defines a group of columns within a table.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<colgroup>: The Table Column Group element"
        }
    ],
    "the-data-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/data.json",
            "name": "data",
            "slug": "HTML/Element/data",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data",
            "summary": "The <data> HTML element links a given piece of content with a machine-readable translation. If the content is time- or date-related, the <time> element must be used.",
            "support": {
                "chrome": {
                    "version_added": "62"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<data>: The Data element"
        }
    ],
    "the-datalist-element": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "partial": [
                "gecko"
            ],
            "filename": "html/elements/datalist.json",
            "name": "datalist",
            "slug": "HTML/Element/datalist",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist",
            "summary": "The <datalist> HTML element contains a set of <option> elements that represent the permissible or recommended options available to choose from within other controls.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": {
                    "version_added": "33"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4",
                    "partial_implementation": true,
                    "notes": "The <code>&lt;datalist&gt;</code> element will only create a dropdown for textual types, such as <code>text</code>, <code>search</code>, <code>url</code>, <code>tel</code>, <code>email</code> and <code>number</code>. The <code>date</code>, <code>time</code>, <code>range</code> and <code>color</code> types are not supported."
                },
                "firefox_android": [
                    {
                        "version_added": "79",
                        "partial_implementation": true,
                        "notes": "The dropdown menu containing available options does not appear. See <a href='https://bugzil.la/1535985'>bug 1535985</a>."
                    },
                    {
                        "version_added": "4",
                        "version_removed": "79"
                    }
                ],
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "12.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<datalist>: The HTML Data List element"
        }
    ],
    "the-dd-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/dd.json",
            "name": "dd",
            "slug": "HTML/Element/dd",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dd",
            "summary": "The <dd> HTML element provides the description, definition, or value for the preceding term (<dt>) in a description list (<dl>).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 4, this element was implemented using the <code>HTMLSpanElement</code> interface instead of <code>HTMLElement</code>."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<dd>: The Description Details element"
        }
    ],
    "the-del-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/del.json",
            "name": "del",
            "slug": "HTML/Element/del",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/del",
            "summary": "The <del> HTML element represents a range of text that has been deleted from a document. This can be used when rendering \"track changes\" or source code diff information, for example. The <ins> element can be used for the opposite purpose: to indicate text that has been added to the document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<del>: The Deleted Text element"
        }
    ],
    "the-details-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/details.json",
            "name": "details",
            "slug": "HTML/Element/details",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details",
            "summary": "The <details> HTML element creates a disclosure widget in which information is visible only when the widget is toggled into an \"open\" state. A summary or label must be provided using the <summary> element.",
            "support": {
                "chrome": {
                    "version_added": "12"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "49",
                    "notes": "Before Firefox 57, there was a bug meaning that <code>&lt;details&gt;</code> elements can't be made open by default using the <code>open</code> attribute if they have a CSS <code>animation</code> active on them."
                },
                "firefox_android": {
                    "version_added": "49",
                    "notes": "There is a bug meaning that <code>&lt;details&gt;</code> elements can't be made open by default using the <code>open</code> attribute if they have a CSS <code>animation</code> active on them."
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<details>: The Details disclosure element"
        }
    ],
    "the-dfn-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/dfn.json",
            "name": "dfn",
            "slug": "HTML/Element/dfn",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dfn",
            "summary": "The <dfn> HTML element is used to indicate the term being defined within the context of a definition phrase or sentence. The ancestor <p> element, the <dt>/<dd> pairing, or the nearest <section> ancestor of the <dfn> element, is considered to be the definition of the term.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<dfn>: The Definition element"
        }
    ],
    "the-dialog-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/dialog.json",
            "name": "dialog",
            "slug": "HTML/Element/dialog",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dialog",
            "summary": "The <dialog> HTML element represents a dialog box or other interactive component, such as a dismissible alert, inspector, or subwindow.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "98"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<dialog>: The Dialog element"
        }
    ],
    "the-div-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/div.json",
            "name": "div",
            "slug": "HTML/Element/div",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div",
            "summary": "The <div> HTML element is the generic container for flow content. It has no effect on the content or layout until styled in some way using CSS (e.g. styling is directly applied to it, or some kind of layout model like Flexbox is applied to its parent element).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<div>: The Content Division element"
        }
    ],
    "the-dl-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/dl.json",
            "name": "dl",
            "slug": "HTML/Element/dl",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dl",
            "summary": "The <dl> HTML element represents a description list. The element encloses a list of groups of terms (specified using the <dt> element) and descriptions (provided by <dd> elements). Common uses for this element are to implement a glossary or to display metadata (a list of key-value pairs).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<dl>: The Description List element"
        }
    ],
    "the-dt-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/dt.json",
            "name": "dt",
            "slug": "HTML/Element/dt",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/dt",
            "summary": "The <dt> HTML element specifies a term in a description or definition list, and as such must be used inside a <dl> element. It is usually followed by a <dd> element; however, multiple <dt> elements in a row indicate several terms that are all defined by the immediate next <dd> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<dt>: The Description Term element"
        }
    ],
    "the-em-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/em.json",
            "name": "em",
            "slug": "HTML/Element/em",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em",
            "summary": "The <em> HTML element marks text that has stress emphasis. The <em> element can be nested, with each level of nesting indicating a greater degree of emphasis.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<em>: The Emphasis element"
        }
    ],
    "the-embed-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/embed.json",
            "name": "embed",
            "slug": "HTML/Element/embed",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/embed",
            "summary": "The <embed> HTML element embeds external content at the specified point in the document. This content is provided by an external application or other source of interactive content such as a browser plug-in.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<embed>: The Embed External Content element"
        }
    ],
    "the-fieldset-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/fieldset.json",
            "name": "fieldset",
            "slug": "HTML/Element/fieldset",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset",
            "summary": "The <fieldset> HTML element is used to group several controls as well as labels (<label>) within a web form.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Before version 86, this element did not support <code>flexbox</code> and <code>grid</code> layouts within this element. See <a href='https://crbug.com/262679'>bug 262679</a>."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before version 86, this element did not support <code>flexbox</code> and <code>grid</code> layouts within this element. See <a href='https://crbug.com/262679'>bug 262679</a>."
                }
            },
            "title": "<fieldset>: The Field Set element"
        }
    ],
    "the-figcaption-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/figcaption.json",
            "name": "figcaption",
            "slug": "HTML/Element/figcaption",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figcaption",
            "summary": "The <figcaption> HTML element represents a caption or legend describing the rest of the contents of its parent <figure> element.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<figcaption>: The Figure Caption element"
        }
    ],
    "the-figure-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/figure.json",
            "name": "figure",
            "slug": "HTML/Element/figure",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure",
            "summary": "The <figure> HTML element represents self-contained content, potentially with an optional caption, which is specified using the <figcaption> element. The figure, its caption, and its contents are referenced as a single unit.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<figure>: The Figure with Optional Caption element"
        }
    ],
    "the-footer-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/footer.json",
            "name": "footer",
            "slug": "HTML/Element/footer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer",
            "summary": "The <footer> HTML element represents a footer for its nearest ancestor sectioning content or sectioning root element. A <footer> typically contains information about the author of the section, copyright data or links to related documents.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<footer>"
        }
    ],
    "the-form-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/form.json",
            "name": "form",
            "slug": "HTML/Element/form",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form",
            "summary": "The <form> HTML element represents a document section containing interactive controls for submitting information.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<form>: The Form element"
        }
    ],
    "the-h1,-h2,-h3,-h4,-h5,-and-h6-elements": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/h1.json",
            "name": "h1",
            "slug": "HTML/Element/Heading_Elements",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements",
            "summary": "The <h1> to <h6> HTML elements represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<h1>–<h6>: The HTML Section Heading elements"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/h2.json",
            "name": "h2",
            "slug": "HTML/Element/Heading_Elements",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements",
            "summary": "The <h1> to <h6> HTML elements represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<h1>–<h6>: The HTML Section Heading elements"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/h3.json",
            "name": "h3",
            "slug": "HTML/Element/Heading_Elements",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements",
            "summary": "The <h1> to <h6> HTML elements represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<h1>–<h6>: The HTML Section Heading elements"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/h4.json",
            "name": "h4",
            "slug": "HTML/Element/Heading_Elements",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements",
            "summary": "The <h1> to <h6> HTML elements represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<h1>–<h6>: The HTML Section Heading elements"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/h5.json",
            "name": "h5",
            "slug": "HTML/Element/Heading_Elements",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements",
            "summary": "The <h1> to <h6> HTML elements represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<h1>–<h6>: The HTML Section Heading elements"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/h6.json",
            "name": "h6",
            "slug": "HTML/Element/Heading_Elements",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements",
            "summary": "The <h1> to <h6> HTML elements represent six levels of section headings. <h1> is the highest section level and <h6> is the lowest.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<h1>–<h6>: The HTML Section Heading elements"
        }
    ],
    "the-head-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/head.json",
            "name": "head",
            "slug": "HTML/Element/head",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head",
            "summary": "The <head> HTML element contains machine-readable information (metadata) about the document, like its title, scripts, and style sheets.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<head>: The Document Metadata (Header) element"
        }
    ],
    "the-header-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/header.json",
            "name": "header",
            "slug": "HTML/Element/header",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header",
            "summary": "The <header> HTML element represents introductory content, typically a group of introductory or navigational aids. It may contain some heading elements but also a logo, a search form, an author name, and other elements.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<header>"
        }
    ],
    "the-hgroup-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/hgroup.json",
            "name": "hgroup",
            "slug": "HTML/Element/hgroup",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hgroup",
            "summary": "The <hgroup> HTML element represents a heading and related content. It groups a single <h1>–<h6> element with one or more <p>.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "2.2"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<hgroup>"
        }
    ],
    "the-hr-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/hr.json",
            "name": "hr",
            "slug": "HTML/Element/hr",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr",
            "summary": "The <hr> HTML element represents a thematic break between paragraph-level elements: for example, a change of scene in a story, or a shift of topic within a section.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<hr>: The Thematic Break (Horizontal Rule) element"
        }
    ],
    "the-html-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/html.json",
            "name": "html",
            "slug": "HTML/Element/html",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html",
            "summary": "The <html> HTML element represents the root (top-level element) of an HTML document, so it is also referred to as the root element. All other elements must be descendants of this element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<html>: The HTML Document / Root element"
        }
    ],
    "the-i-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/i.json",
            "name": "i",
            "slug": "HTML/Element/i",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/i",
            "summary": "The <i> HTML element represents a range of text that is set off from the normal text for some reason, such as idiomatic text, technical terms, taxonomical designations, among others. Historically, these have been presented using italicized type, which is the original source of the <i> naming of this element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<i>: The Idiomatic Text element"
        }
    ],
    "the-iframe-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/iframe.json",
            "name": "iframe",
            "slug": "HTML/Element/iframe",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe",
            "summary": "The <iframe> HTML element represents a nested browsing context, embedding another HTML page into the current one.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "The <code>resize</code> CSS property doesn't have any effect on this element due to <a href='https://bugzil.la/680823'>bug 680823</a>."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "4",
                    "notes": "Safari has a <a href='https://www.quirksmode.org/bugreports/archives/2005/02/hidden_iframes.html'>bug</a> that prevents iframes from loading if the <code>iframe</code> element was hidden when added to the page. <code>iframeElement.src = iframeElement.src</code> should cause it to load the iframe."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<iframe>: The Inline Frame element"
        }
    ],
    "lazy-loading-attributes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/img.json",
            "name": "loading",
            "slug": "Performance/Lazy_loading",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/Performance/Lazy_loading",
            "summary": "Lazy loading is a strategy to identify resources as non-blocking (non-critical) and load these only when needed. It's a way to shorten the length of the critical rendering path, which translates into reduced page load times.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "75"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Lazy loading"
        }
    ],
    "the-img-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/img.json",
            "name": "img",
            "slug": "HTML/Element/img",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img",
            "summary": "The <img> HTML element embeds an image into the document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<img>: The Image Embed element"
        }
    ],
    "button-state-(type=button)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/button.json",
            "name": "type_button",
            "slug": "HTML/Element/input/button",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/button",
            "summary": "<input> elements of type button are rendered as simple push buttons, which can be programmed to control custom functionality anywhere on a webpage as required when assigned an event handler function (typically for the click event).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"button\">"
        }
    ],
    "checkbox-state-(type=checkbox)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/checkbox.json",
            "name": "type_checkbox",
            "slug": "HTML/Element/input/checkbox",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox",
            "summary": "<input> elements of type checkbox are rendered by default as boxes that are checked (ticked) when activated, like you might see in an official government paper form. The exact appearance depends upon the operating system configuration under which the browser is running. Generally this is a square but it may have rounded corners. A checkbox allows you to select single values for submission in a form (or not).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"checkbox\">"
        }
    ],
    "color-state-(type=color)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "partial": [
                "gecko"
            ],
            "filename": "html/elements/input/color.json",
            "name": "type_color",
            "slug": "HTML/Element/input/color",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/color",
            "summary": "<input> elements of type color provide a user interface element that lets a user specify a color, either by using a visual color picker interface or by entering the color into a text field in #rrggbb hexadecimal format.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "27",
                    "partial_implementation": true,
                    "notes": "Firefox for Android doesn't allow the user to choose a custom color, only one of the predefined ones."
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "12.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"color\">"
        }
    ],
    "date-state-(type=date)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/date.json",
            "name": "type_date",
            "slug": "HTML/Element/input/date",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date",
            "summary": "<input> elements of type=\"date\" create input fields that let the user enter a date, either with a textbox that validates the input or a special date picker interface.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"date\">"
        }
    ],
    "local-date-and-time-state-(type=datetime-local)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/datetime-local.json",
            "name": "type_datetime-local",
            "slug": "HTML/Element/input/datetime-local",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/datetime-local",
            "summary": "<input> elements of type datetime-local create input controls that let the user easily enter both a date and a time, including the year, month, and day as well as the time in hours and minutes.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "93"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"datetime-local\">"
        }
    ],
    "email-state-(type=email)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/email.json",
            "name": "type_email",
            "slug": "HTML/Element/input/email",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/email",
            "summary": "<input> elements of type email are used to let the user enter and edit an email address, or, if the multiple attribute is specified, a list of email addresses.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "3",
                    "notes": [
                        "Doesn't do validation, but instead offers a custom 'email' keyboard, which is designed to make entering email addresses easier.",
                        "The custom 'email' keyboard does not provide a comma key, so users cannot enter multiple email addresses.",
                        "Automatically applies a default style of <code>opacity: 0.4</code> to disable textual <code>&lt;input&gt;</code> elements, including those of type 'email'. Other major browsers don't currently share this particular default style."
                    ]
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"email\">"
        }
    ],
    "file-upload-state-(type=file)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/file.json",
            "name": "type_file",
            "slug": "HTML/Element/input/file",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file",
            "summary": "<input> elements with type=\"file\" let the user choose one or more files from their device storage. Once chosen, the files can be uploaded to a server using form submission, or manipulated using JavaScript code and the File API.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "You can set as well as get the value of <code>HTMLInputElement.files</code> in all modern browsers; this was most recently added to Firefox, in version 57 (see <a href='https://bugzil.la/1384030'>bug 1384030</a>)."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"file\">"
        }
    ],
    "hidden-state-(type=hidden)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/hidden.json",
            "name": "type_hidden",
            "slug": "HTML/Element/input/hidden",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/hidden",
            "summary": "<input> elements of type hidden let web developers include data that cannot be seen or modified by users when a form is submitted. For example, the ID of the content that is currently being ordered or edited, or a unique security token. Hidden inputs are completely invisible in the rendered page, and there is no way to make it visible in the page's content.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "2"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"hidden\">"
        }
    ],
    "image-button-state-(type=image)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/image.json",
            "name": "type_image",
            "slug": "HTML/Element/input/image",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/image",
            "summary": "<input> elements of type image are used to create graphical submit buttons, i.e. submit buttons that take the form of an image rather than text.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"image\">"
        }
    ],
    "month-state-(type=month)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/month.json",
            "name": "type_month",
            "slug": "HTML/Element/input/month",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/month",
            "summary": "<input> elements of type month create input fields that let the user enter a month and year allowing a month and year to be easily entered. The value is a string whose value is in the format \"YYYY-MM\", where YYYY is the four-digit year and MM is the month number.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": false,
                    "notes": "See <a href='https://bugzil.la/888320'>bug 888320</a>."
                },
                "firefox_android": {
                    "version_added": "18"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": false,
                    "notes": "The input type is recognized, but there is no month-specific control. See <a href='https://webkit.org/b/200416'>bug 200416</a>."
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"month\">"
        }
    ],
    "number-state-(type=number)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/number.json",
            "name": "type_number",
            "slug": "HTML/Element/input/number",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/number",
            "summary": "<input> elements of type number are used to let the user enter a number. They include built-in validation to reject non-numerical entries.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"number\">"
        }
    ],
    "password-state-(type=password)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/password.json",
            "name": "type_password",
            "slug": "HTML/Element/input/password",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/password",
            "summary": "<input> elements of type password provide a way for the user to securely enter a password.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "2"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "2"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"password\">"
        }
    ],
    "radio-button-state-(type=radio)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/radio.json",
            "name": "type_radio",
            "slug": "HTML/Element/input/radio",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/radio",
            "summary": "<input> elements of type radio are generally used in radio groups—collections of radio buttons describing a set of related options.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"radio\">"
        }
    ],
    "range-state-(type=range)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/range.json",
            "name": "type_range",
            "slug": "HTML/Element/input/range",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range",
            "summary": "<input> elements of type range let the user specify a numeric value which must be no less than a given value, and no more than another given value. The precise value, however, is not considered important. This is typically represented using a slider or dial control rather than a text entry box like the number input type.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "57"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "23"
                },
                "firefox_android": {
                    "version_added": "52"
                },
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": [
                    {
                        "version_added": "4.4"
                    },
                    {
                        "version_added": "2",
                        "version_removed": "4.4",
                        "partial_implementation": true,
                        "notes": "Pre-Chromium Android WebView recognizes the <code>range</code> type, but doesn't implement a range-specific control."
                    }
                ],
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"range\">"
        }
    ],
    "reset-button-state-(type=reset)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/reset.json",
            "name": "type_reset",
            "slug": "HTML/Element/input/reset",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/reset",
            "summary": "<input> elements of type reset are rendered as buttons, with a default click event handler that resets all inputs in the form to their initial values.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Unlike other browsers, Firefox by default <a href='https://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing'>persists the dynamic disabled state</a> of a <code>&lt;button&gt;</code> across page loads. Use the <code><a href='https://developer.mozilla.org/docs/Web/HTML/Element/button#attr-autocomplete'>autocomplete</a></code> attribute to control this feature."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"reset\">"
        }
    ],
    "text-(type=text)-state-and-search-state-(type=search)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/search.json",
            "name": "type_search",
            "slug": "HTML/Element/input/search",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/search",
            "summary": "<input> elements of type search are text fields designed for the user to enter search queries into. These are functionally identical to text inputs, but may be styled differently by the user agent.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"search\">"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/text.json",
            "name": "type_text",
            "slug": "HTML/Element/input/text",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text",
            "summary": "<input> elements of type text create basic single-line text fields.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"text\">"
        }
    ],
    "submit-button-state-(type=submit)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/submit.json",
            "name": "type_submit",
            "slug": "HTML/Element/input/submit",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/submit",
            "summary": "<input> elements of type submit are rendered as buttons. When the click event occurs (typically because the user clicked the button), the user agent attempts to submit the form to the server.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Unlike other browsers, Firefox by default <a href='https://stackoverflow.com/questions/5985839/bug-with-firefox-disabled-attribute-of-input-not-resetting-when-refreshing'>persists the dynamic disabled state</a> of a <code>&lt;button&gt;</code> across page loads. Use the <code><a href='https://developer.mozilla.org/docs/Web/HTML/Element/button#attr-autocomplete'>autocomplete</a></code> attribute to control this feature."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"submit\">"
        }
    ],
    "telephone-state-(type=tel)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/tel.json",
            "name": "type_tel",
            "slug": "HTML/Element/input/tel",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/tel",
            "summary": "<input> elements of type tel are used to let the user enter and edit a telephone number. Unlike <input type=\"email\"> and <input type=\"url\">, the input value is not automatically validated to a particular format before the form can be submitted, because formats for telephone numbers vary so much around the world.",
            "support": {
                "chrome": {
                    "version_added": "3",
                    "notes": "The field type doesn't demonstrate any special behavior."
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4",
                    "notes": "The field type doesn't demonstrate any special behavior."
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "The field type doesn't demonstrate any special behavior."
                }
            },
            "title": "<input type=\"tel\">"
        }
    ],
    "time-state-(type=time)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/time.json",
            "name": "type_time",
            "slug": "HTML/Element/input/time",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/time",
            "summary": "<input> elements of type time create input fields designed to let the user easily enter a time (hours and minutes, and optionally seconds).",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "57"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"time\">"
        }
    ],
    "url-state-(type=url)": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input/url.json",
            "name": "type_url",
            "slug": "HTML/Element/input/url",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/url",
            "summary": "<input> elements of type url are used to let the user enter and edit a URL.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"url\">"
        }
    ],
    "week-state-(type=week)": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "html/elements/input/week.json",
            "name": "type_week",
            "slug": "HTML/Element/input/week",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/week",
            "summary": "<input> elements of type week create input fields allowing easy entry of a year plus the ISO 8601 week number during that year (i.e., week 1 to 52 or 53).",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": false,
                    "notes": "See <a href='https://bugzil.la/888320'>bug 888320</a>."
                },
                "firefox_android": {
                    "version_added": "18"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": false,
                    "notes": "See <a href='https://webkit.org/b/200416'>bug 200416</a>."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input type=\"week\">"
        }
    ],
    "attr-input-accept": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "accept",
            "slug": "HTML/Attributes/accept",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept",
            "summary": "The accept attribute takes as its value a comma-separated list of one or more file types, or unique file type specifiers, describing which file types to allow.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: accept"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "attr-input-accept#attr-accept",
            "slug": "HTML/Element/input#attr-accept",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-accept",
            "summary": "The <input> HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The <input> element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": {
                    "version_added": "26"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "37"
                },
                "firefox_android": {
                    "version_added": "37"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "attr-input-alt": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "alt",
            "slug": "HTML/Element/input#alt",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#alt",
            "summary": "The <input> HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The <input> element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "attr-input-checked": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "checked",
            "slug": "HTML/Element/input#checked",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#checked",
            "summary": "The <input> HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The <input> element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "attr-fe-dirname": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "dirname",
            "slug": "HTML/Element/input#dirname",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#dirname",
            "summary": "The <input> HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The <input> element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.",
            "support": {
                "chrome": {
                    "version_added": "17"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "116"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "attr-fae-form": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "form",
            "slug": "HTML/Element/input#form",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#form",
            "summary": "The <input> HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The <input> element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input>: The Input (Form Input) element"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "Attributes#attr-form",
            "slug": "HTML/Attributes#attr-form",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes#attr-form",
            "summary": "Elements in HTML have attributes; these are additional values that configure the elements or adjust their behavior in various ways to meet the criteria the users want.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "≤6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "≤12.1"
                },
                "opera_android": {
                    "version_added": "≤12.1"
                },
                "safari": {
                    "version_added": "≤4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute reference"
        }
    ],
    "attr-fs-formaction": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "formaction",
            "slug": "HTML/Element/input#formaction",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formaction",
            "summary": "The <input> HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The <input> element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "attr-fs-formenctype": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "formenctype",
            "slug": "HTML/Element/input#formenctype",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formenctype",
            "summary": "The <input> HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The <input> element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "attr-fs-formmethod": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "formmethod",
            "slug": "HTML/Element/input#formmethod",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formmethod",
            "summary": "The <input> HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The <input> element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "attr-fs-formnovalidate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "formnovalidate",
            "slug": "HTML/Element/input#formnovalidate",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formnovalidate",
            "summary": "The <input> HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The <input> element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "attr-fs-formtarget": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "formtarget",
            "slug": "HTML/Element/input#formtarget",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#formtarget",
            "summary": "The <input> HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The <input> element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "attr-input-list": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "list",
            "slug": "HTML/Element/input#list",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#list",
            "summary": "The <input> HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The <input> element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "12.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "the-min-and-max-attributes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "max",
            "slug": "HTML/Attributes/max",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/max",
            "summary": "The max attribute defines the maximum value that is acceptable and valid for the input containing the attribute. If the value of the element is greater than this, the element fails validation. This value must be greater than or equal to the value of the min attribute. If the max attribute is present but is not specified or is invalid, no max value is applied. If the max attribute is valid and a non-empty value is greater than the maximum allowed by the max attribute, constraint validation will prevent form submission.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "16"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: max"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "min",
            "slug": "HTML/Attributes/min",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/min",
            "summary": "The min attribute defines the minimum value that is acceptable and valid for the input containing the attribute. If the value of the element is less than this, the element fails validation. This value must be less than or equal to the value of the max attribute.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "16"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: min"
        }
    ],
    "the-maxlength-and-minlength-attributes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "maxlength",
            "slug": "HTML/Attributes/maxlength",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength",
            "summary": "The maxlength attribute defines the maximum string length that the user can enter into an <input> or <textarea>. The attribute must have an integer value of 0 or higher.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: maxlength"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "minlength",
            "slug": "HTML/Attributes/minlength",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/minlength",
            "summary": "The minlength attribute defines the minimum string length that the user can enter into an <input> or <textarea>. The attribute must have an integer value of 0 or higher.",
            "support": {
                "chrome": {
                    "version_added": "40"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "51"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: minlength"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/textarea.json",
            "name": "maxlength",
            "slug": "HTML/Attributes/maxlength",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/maxlength",
            "summary": "The maxlength attribute defines the maximum string length that the user can enter into an <input> or <textarea>. The attribute must have an integer value of 0 or higher.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: maxlength"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/textarea.json",
            "name": "minlength",
            "slug": "HTML/Attributes/minlength",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/minlength",
            "summary": "The minlength attribute defines the minimum string length that the user can enter into an <input> or <textarea>. The attribute must have an integer value of 0 or higher.",
            "support": {
                "chrome": {
                    "version_added": "40"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "51"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: minlength"
        }
    ],
    "attr-input-multiple": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "multiple",
            "slug": "HTML/Attributes/multiple",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/multiple",
            "summary": "The Boolean multiple attribute, if set, means the form control accepts one or more values. Valid for the email and file input types and the <select>, the manner by which the user opts for multiple values depends on the form control.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: multiple"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "input#attr-multiple",
            "slug": "HTML/Element/input#attr-multiple",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-multiple",
            "summary": "The <input> HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The <input> element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "≤12.1"
                },
                "opera_android": {
                    "version_added": "≤12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "≤37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "attr-fe-name": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "name",
            "slug": "HTML/Element/input#name",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#name",
            "summary": "The <input> HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The <input> element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "attr-input-pattern": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "pattern",
            "slug": "HTML/Attributes/pattern",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern",
            "summary": "The pattern attribute specifies a regular expression the form control's value should match. If a non-null value doesn't conform to the constraints set by the pattern value, the ValidityState object's read-only patternMismatch property will be true.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: pattern"
        }
    ],
    "attr-input-placeholder": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "placeholder",
            "slug": "HTML/Element/input#placeholder",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#placeholder",
            "summary": "The <input> HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The <input> element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input>: The Input (Form Input) element"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "input#attr-placeholder",
            "slug": "HTML/Element/input#attr-placeholder",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder",
            "summary": "The <input> HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The <input> element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "≤12.1"
                },
                "opera_android": {
                    "version_added": "≤12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "≤37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "the-readonly-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "readonly",
            "slug": "HTML/Attributes/readonly",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly",
            "summary": "The Boolean readonly attribute, when present, makes the element not mutable, meaning the user can not edit the control.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: readonly"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/textarea.json",
            "name": "readonly",
            "slug": "HTML/Attributes/readonly",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly",
            "summary": "The Boolean readonly attribute, when present, makes the element not mutable, meaning the user can not edit the control.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: readonly"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "readonly",
            "slug": "HTML/Attributes/readonly",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly",
            "summary": "The Boolean readonly attribute, when present, makes the element not mutable, meaning the user can not edit the control.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "≤6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "≤12.1"
                },
                "opera_android": {
                    "version_added": "≤12.1"
                },
                "safari": {
                    "version_added": "≤4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: readonly"
        }
    ],
    "attr-input-src": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "src",
            "slug": "HTML/Element/input#src",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#src",
            "summary": "The <input> HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The <input> element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "attr-input-step": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "step",
            "slug": "HTML/Attributes/step",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/step",
            "summary": "The step attribute is a number that specifies the granularity that the value must adhere to or the keyword any. It is valid for the numeric input types, including the date, month, week, time, datetime-local, number and range types.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "16"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: step"
        }
    ],
    "the-input-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/input.json",
            "name": "input",
            "slug": "HTML/Element/input",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input",
            "summary": "The <input> HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The <input> element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 89, manipulating the content of <code>&lt;input&gt;</code> elements using <code>Document.execCommand()</code> commands requires workarounds (see <a href='https://bugzil.la/1220696'>bug 1220696</a>)."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "1"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<input>: The Input (Form Input) element"
        },
        {
            "engines": [],
            "filename": null,
            "name": "input",
            "slug": "HTML/Element/input",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input",
            "summary": "The <input> HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The <input> element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.",
            "support": null,
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "the-ins-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/ins.json",
            "name": "ins",
            "slug": "HTML/Element/ins",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ins",
            "summary": "The <ins> HTML element represents a range of text that has been added to a document. You can use the <del> element to similarly represent a range of text that has been deleted from the document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<ins>"
        }
    ],
    "the-kbd-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/kbd.json",
            "name": "kbd",
            "slug": "HTML/Element/kbd",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/kbd",
            "summary": "The <kbd> HTML element represents a span of inline text denoting textual user input from a keyboard, voice input, or any other text entry device. By convention, the user agent defaults to rendering the contents of a <kbd> element using its default monospace font, although this is not mandated by the HTML standard.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 4, creating a &lt;kbd&gt; element incorrectly resulted in an <code>HTMLSpanElement</code> object, instead of the expected <code>HTMLElement</code>."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<kbd>: The Keyboard Input element"
        }
    ],
    "attr-label-for": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/label.json",
            "name": "for",
            "slug": "HTML/Attributes/for",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/for",
            "summary": "The for attribute is an allowed attribute for <label> and <output>. When used on a <label> element it indicates the form element that this label describes. When used on an <output> element it allows for an explicit relationship between the elements that represent values which are used in the output.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: for"
        }
    ],
    "the-label-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/label.json",
            "name": "label",
            "slug": "HTML/Element/label",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label",
            "summary": "The <label> HTML element represents a caption for an item in a user interface.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<label>: The Label element"
        }
    ],
    "the-legend-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/legend.json",
            "name": "legend",
            "slug": "HTML/Element/legend",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/legend",
            "summary": "The <legend> HTML element represents a caption for the content of its parent <fieldset>.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<legend>: The Field Set Legend element"
        }
    ],
    "the-li-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/li.json",
            "name": "li",
            "slug": "HTML/Element/li",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li",
            "summary": "The <li> HTML element is used to represent an item in a list. It must be contained in a parent element: an ordered list (<ol>), an unordered list (<ul>), or a menu (<menu>). In menus and unordered lists, list items are usually displayed using bullet points. In ordered lists, they are usually displayed with an ascending counter on the left, such as a number or letter.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<li>: The List Item element"
        }
    ],
    "attr-link-integrity": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/link.json",
            "name": "integrity",
            "slug": "Security/Subresource_Integrity",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity",
            "summary": "Subresource Integrity (SRI) is a security feature that enables browsers to verify that resources they fetch (for example, from a CDN) are delivered without unexpected manipulation. It works by allowing you to provide a cryptographic hash that a fetched resource must match.",
            "support": {
                "chrome": {
                    "version_added": "45"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "43"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Subresource Integrity"
        }
    ],
    "rel-alternate": [
        {
            "engines": [
                "gecko"
            ],
            "filename": "html/elements/link.json",
            "name": "alternate_stylesheet",
            "slug": "CSS/Alternative_style_sheets",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/Alternative_style_sheets",
            "summary": "Specifying alternative style sheets in a web page provides a way for users to see multiple versions of a page, based on their needs or preferences.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "version_removed": "48"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": true
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": null
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": false,
                    "version_removed": "48"
                }
            },
            "title": "Alternative style sheets"
        }
    ],
    "the-link-is-an-alternative-stylesheet": [
        {
            "engines": [
                "gecko"
            ],
            "filename": "html/elements/link.json",
            "name": "alternate_stylesheet",
            "slug": "CSS/Alternative_style_sheets",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/Alternative_style_sheets",
            "summary": "Specifying alternative style sheets in a web page provides a way for users to see multiple versions of a page, based on their needs or preferences.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "version_removed": "48"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": true
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": null
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": false,
                    "version_removed": "48"
                }
            },
            "title": "Alternative style sheets"
        }
    ],
    "attr-style-title": [
        {
            "engines": [
                "gecko"
            ],
            "filename": "html/elements/link.json",
            "name": "alternate_stylesheet",
            "slug": "CSS/Alternative_style_sheets",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/Alternative_style_sheets",
            "summary": "Specifying alternative style sheets in a web page provides a way for users to see multiple versions of a page, based on their needs or preferences.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "version_removed": "48"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": true
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": null
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": false,
                    "version_removed": "48"
                }
            },
            "title": "Alternative style sheets"
        }
    ],
    "attr-meta-http-equiv-default-style": [
        {
            "engines": [
                "gecko"
            ],
            "filename": "html/elements/link.json",
            "name": "alternate_stylesheet",
            "slug": "CSS/Alternative_style_sheets",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/Alternative_style_sheets",
            "summary": "Specifying alternative style sheets in a web page provides a way for users to see multiple versions of a page, based on their needs or preferences.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "version_removed": "48"
                },
                "chrome_android": {
                    "version_added": null
                },
                "edge": {
                    "version_added": null
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": true
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": null
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": false,
                    "version_removed": "48"
                }
            },
            "title": "Alternative style sheets"
        }
    ],
    "link-type-dns-prefetch": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "html/elements/link.json",
            "name": "dns-prefetch",
            "slug": "HTML/Link_types/dns-prefetch",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/dns-prefetch",
            "summary": "The dns-prefetch keyword for the rel attribute of the <link> element is a hint to browsers that the user is likely to need resources from the target resource's origin, and therefore the browser can likely improve the user experience by preemptively performing DNS resolution for that origin.",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": null
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "46"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "rel=dns-prefetch"
        }
    ],
    "link-type-manifest": [
        {
            "engines": [
                "blink"
            ],
            "filename": "html/elements/link.json",
            "name": "manifest",
            "slug": "HTML/Link_types/manifest",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/manifest",
            "summary": "The manifest keyword for the rel attribute of the <link> element indicates that the target resource is a Web app manifest.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": {
                    "version_added": "39"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": null
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": null
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": "rel=manifest"
        }
    ],
    "link-type-modulepreload": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "html/elements/link.json",
            "name": "modulepreload",
            "slug": "HTML/Link_types/modulepreload",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/modulepreload",
            "summary": "The modulepreload keyword, for the rel attribute of the <link> element, provides a declarative way to preemptively fetch a module script, parse and compile it, and store it in the document's module map for later execution.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "115"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": null
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": null
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "rel=modulepreload"
        }
    ],
    "link-type-preconnect": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/link.json",
            "name": "preconnect",
            "slug": "HTML/Link_types/preconnect",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preconnect",
            "summary": "The preconnect keyword for the rel attribute of the <link> element is a hint to browsers that the user is likely to need resources from the target resource's origin, and therefore the browser can likely improve the user experience by preemptively initiating a connection to that origin. Preconnecting speeds up future loads from a given origin by preemptively performing part or all of the handshake (DNS+TCP for HTTP, and DNS+TCP+TLS for HTTPS origins).",
            "support": {
                "chrome": {
                    "version_added": "46"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "39",
                    "notes": "Before Firefox 41, it doesn't obey the <code>crossorigin</code> attribute."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "rel=preconnect"
        }
    ],
    "link-type-prefetch": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "html/elements/link.json",
            "name": "prefetch",
            "slug": "HTML/Link_types/prefetch",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/prefetch",
            "summary": "The prefetch keyword for the rel attribute of the <link> element is a hint to browsers that the user is likely to need the target resource for future navigations, and therefore the browser can likely improve the user experience by preemptively fetching and caching the resource.",
            "support": {
                "chrome": {
                    "version_added": "8"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "rel=prefetch"
        }
    ],
    "link-type-preload": [
        {
            "engines": [
                "gecko"
            ],
            "partial": [
                "blink"
            ],
            "filename": "html/elements/link.json",
            "name": "preload",
            "slug": "HTML/Link_types/preload",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types/preload",
            "summary": "The preload value of the <link> element's rel attribute lets you declare fetch requests in the HTML's <head>, specifying resources that your page will need very soon, which you want to start loading early in the page lifecycle, before browsers' main rendering machinery kicks in. This ensures they are available earlier and are less likely to block the page's render, improving performance. Even though the name contains the term load, it doesn't load and execute the script but only schedules it to be downloaded and cached with a higher priority.",
            "support": {
                "chrome": {
                    "version_added": "50",
                    "partial_implementation": true,
                    "notes": "Doesn’t support <code>as=\"audio\"</code>, <code>as=\"audioworklet\"</code>, <code>as=\"document\"</code>, <code>as=\"embed\"</code>, <code>as=\"manifest\"</code>, <code>as=\"object\"</code>, <code>as=\"paintworklet\"</code>, <code>as=\"report\"</code>, <code>as=\"sharedworker\"</code>, <code>as=\"video\"</code>, <code>as=\"worker\"</code>, or <code>as=\"xslt\"</code>."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "85"
                    },
                    {
                        "partial_implementation": true,
                        "version_added": "56",
                        "version_removed": "57",
                        "notes": "Disabled due to various web compatibility issues (e.g. <a href='https://bugzil.la/1405761'>bug 1405761</a>)."
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": null
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "37"
                },
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": null
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "5.0",
                    "notes": "<code>as=\"document\"</code> is unsupported. See <a href='https://crbug.com/593267'>bug 593267</a>."
                },
                "webview_android": {
                    "version_added": "50",
                    "notes": "<code>as=\"document\"</code> is unsupported. See <a href='https://crbug.com/593267'>bug 593267</a>."
                },
                "edge_blink": {
                    "version_added": "79",
                    "partial_implementation": true,
                    "notes": "Doesn’t support <code>as=\"audio\"</code>, <code>as=\"audioworklet\"</code>, <code>as=\"document\"</code>, <code>as=\"embed\"</code>, <code>as=\"manifest\"</code>, <code>as=\"object\"</code>, <code>as=\"paintworklet\"</code>, <code>as=\"report\"</code>, <code>as=\"sharedworker\"</code>, <code>as=\"video\"</code>, <code>as=\"worker\"</code>, or <code>as=\"xslt\"</code>."
                }
            },
            "title": "rel=preload"
        }
    ],
    "linkTypes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/link.json",
            "name": "rel",
            "slug": "HTML/Link_types",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types",
            "summary": "The rel attribute defines the relationship between a linked resource and the current document. Valid on <link>, <a>, <area>, and <form>, the supported values depend on the element on which the attribute is found.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: rel"
        },
        {
            "engines": [],
            "filename": null,
            "name": "Link_types",
            "slug": "HTML/Link_types",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types",
            "summary": "The rel attribute defines the relationship between a linked resource and the current document. Valid on <link>, <a>, <area>, and <form>, the supported values depend on the element on which the attribute is found.",
            "support": null,
            "title": "HTML attribute: rel"
        }
    ],
    "the-link-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/link.json",
            "name": "link",
            "slug": "HTML/Element/link",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link",
            "summary": "The <link> HTML element specifies relationships between the current document and an external resource. This element is most commonly used to link to stylesheets, but is also used to establish site icons (both \"favicon\" style icons and icons for the home screen and apps on mobile devices) among other things.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<link>: The External Resource Link element"
        }
    ],
    "the-main-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/main.json",
            "name": "main",
            "slug": "HTML/Element/main",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main",
            "summary": "The <main> HTML element represents the dominant content of the <body> of a document. The main content area consists of content that is directly related to or expands upon the central topic of a document, or the central functionality of an application.",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "21"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "16"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<main>"
        }
    ],
    "the-map-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/map.json",
            "name": "map",
            "slug": "HTML/Element/map",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/map",
            "summary": "The <map> HTML element is used with <area> elements to define an image map (a clickable link area).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": [
                        "Before Firefox 5, in Quirks Mode, empty maps were no longer skipped over in favor of non-empty ones when matching.",
                        "Before Firefox 17, the default styling of the <code>&lt;map&gt;</code> HTML element was <code>display: block;</code>. This is now <code>display: inline;</code> and matches the behavior of the other browsers. It was already the case in Quirks Mode."
                    ]
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<map>: The Image Map element"
        }
    ],
    "the-mark-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/mark.json",
            "name": "mark",
            "slug": "HTML/Element/mark",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/mark",
            "summary": "The <mark> HTML element represents text which is marked or highlighted for reference or notation purposes due to the marked passage's relevance in the enclosing context.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<mark>: The Mark Text element"
        }
    ],
    "the-menu-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/menu.json",
            "name": "menu",
            "slug": "HTML/Element/menu",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/menu",
            "summary": "The <menu> HTML element is described in the HTML specification as a semantic alternative to <ul>, but treated by browsers (and exposed through the accessibility tree) as no different than <ul>. It represents an unordered list of items (which are represented by <li> elements).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<menu>: The Menu element"
        }
    ],
    "meta-theme-color": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "partial": [
                "blink"
            ],
            "filename": "html/elements/meta.json",
            "name": "theme-color",
            "slug": "HTML/Element/meta/name/theme-color",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta/name/theme-color",
            "summary": "The theme-color value for the name attribute of the <meta> element indicates a suggested color that user agents should use to customize the display of the page or of the surrounding user interface. If specified, the content attribute must contain a valid CSS <color>.",
            "support": {
                "chrome": [
                    {
                        "version_added": "73",
                        "partial_implementation": true,
                        "notes": "Chrome uses the color only on installed progressive web apps."
                    },
                    {
                        "version_added": "39",
                        "version_removed": "72",
                        "partial_implementation": true,
                        "notes": "Chrome reports support, but does not actually use the color anywhere."
                    }
                ],
                "chrome_android": {
                    "version_added": "80",
                    "notes": "Chrome for Android does not use the color on devices with native dark mode enabled."
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "15"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "6.2"
                },
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": [
                    {
                        "version_added": "79",
                        "partial_implementation": true,
                        "notes": "Chrome uses the color only on installed progressive web apps."
                    },
                    {
                        "version_added": false,
                        "version_removed": "72",
                        "partial_implementation": true,
                        "notes": "Chrome reports support, but does not actually use the color anywhere."
                    }
                ]
            },
            "title": "theme-color"
        }
    ],
    "standard-metadata-names": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/meta.json",
            "name": "name",
            "slug": "HTML/Element/meta/name",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta/name",
            "summary": "The <meta> element can be used to provide document metadata in terms of name-value pairs, with the name attribute giving the metadata name, and the content attribute giving the value.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "6"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Standard metadata names"
        }
    ],
    "the-meta-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/meta.json",
            "name": "meta",
            "slug": "HTML/Element/meta",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta",
            "summary": "The <meta> HTML element represents metadata that cannot be represented by other HTML meta-related elements, like <base>, <link>, <script>, <style> or <title>.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<meta>: The metadata element"
        }
    ],
    "attr-meter-max": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/meter.json",
            "name": "max",
            "slug": "HTML/Attributes/max",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/max",
            "summary": "The max attribute defines the maximum value that is acceptable and valid for the input containing the attribute. If the value of the element is greater than this, the element fails validation. This value must be greater than or equal to the value of the min attribute. If the max attribute is present but is not specified or is invalid, no max value is applied. If the max attribute is valid and a non-empty value is greater than the maximum allowed by the max attribute, constraint validation will prevent form submission.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "16"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: max"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/meter.json",
            "name": "min",
            "slug": "HTML/Attributes/min",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/min",
            "summary": "The min attribute defines the minimum value that is acceptable and valid for the input containing the attribute. If the value of the element is less than this, the element fails validation. This value must be less than or equal to the value of the max attribute.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "16"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: min"
        }
    ],
    "the-meter-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/meter.json",
            "name": "meter",
            "slug": "HTML/Element/meter",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meter",
            "summary": "The <meter> HTML element represents either a scalar value within a known range or a fractional value.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "16"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<meter>: The HTML Meter element"
        }
    ],
    "the-nav-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/nav.json",
            "name": "nav",
            "slug": "HTML/Element/nav",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav",
            "summary": "The <nav> HTML element represents a section of a page whose purpose is to provide navigation links, either within the current document or to other documents. Common examples of navigation sections are menus, tables of contents, and indexes.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<nav>: The Navigation Section element"
        }
    ],
    "the-noscript-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/noscript.json",
            "name": "noscript",
            "slug": "HTML/Element/noscript",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript",
            "summary": "The <noscript> HTML element defines a section of HTML to be inserted if a script type on the page is unsupported or if scripting is currently turned off in the browser.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<noscript>: The Noscript element"
        }
    ],
    "the-object-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/object.json",
            "name": "object",
            "slug": "HTML/Element/object",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/object",
            "summary": "The <object> HTML element represents an external resource, which can be treated as an image, a nested browsing context, or a resource to be handled by a plugin.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<object>: The External Object element"
        }
    ],
    "the-ol-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/ol.json",
            "name": "ol",
            "slug": "HTML/Element/ol",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol",
            "summary": "The <ol> HTML element represents an ordered list of items — typically rendered as a numbered list.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<ol>: The Ordered List element"
        }
    ],
    "attr-optgroup-disabled": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/optgroup.json",
            "name": "disabled",
            "slug": "HTML/Attributes/disabled",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled",
            "summary": "The Boolean disabled attribute, when present, makes the element not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: disabled"
        }
    ],
    "the-optgroup-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/optgroup.json",
            "name": "optgroup",
            "slug": "HTML/Element/optgroup",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/optgroup",
            "summary": "The <optgroup> HTML element creates a grouping of options within a <select> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<optgroup>: The Option Group element"
        }
    ],
    "attr-option-disabled": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/option.json",
            "name": "disabled",
            "slug": "HTML/Attributes/disabled",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled",
            "summary": "The Boolean disabled attribute, when present, makes the element not mutable, focusable, or even submitted with the form. The user can neither edit nor focus on the control, nor its form control descendants.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: disabled"
        }
    ],
    "the-option-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/option.json",
            "name": "option",
            "slug": "HTML/Element/option",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option",
            "summary": "The <option> HTML element is used to define an item contained in a <select>, an <optgroup>, or a <datalist> element. As such, <option> can represent menu items in popups and other lists of items in an HTML document.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<option>: The HTML Option element"
        }
    ],
    "attr-output-for": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/output.json",
            "name": "for",
            "slug": "HTML/Attributes/for",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/for",
            "summary": "The for attribute is an allowed attribute for <label> and <output>. When used on a <label> element it indicates the form element that this label describes. When used on an <output> element it allows for an explicit relationship between the elements that represent values which are used in the output.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: for"
        }
    ],
    "the-output-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/output.json",
            "name": "output",
            "slug": "HTML/Element/output",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/output",
            "summary": "The <output> HTML element is a container element into which a site or app can inject the results of a calculation or the outcome of a user action.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<output>: The Output element"
        }
    ],
    "the-p-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/p.json",
            "name": "p",
            "slug": "HTML/Element/p",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p",
            "summary": "The <p> HTML element represents a paragraph. Paragraphs are usually represented in visual media as blocks of text separated from adjacent blocks by blank lines and/or first-line indentation, but HTML paragraphs can be any structural grouping of related content, such as images or form fields.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<p>: The Paragraph element"
        }
    ],
    "the-picture-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/picture.json",
            "name": "picture",
            "slug": "HTML/Element/picture",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/picture",
            "summary": "The <picture> HTML element contains zero or more <source> elements and one <img> element to offer alternative versions of an image for different display/device scenarios.",
            "support": {
                "chrome": {
                    "version_added": "38"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<picture>: The Picture element"
        }
    ],
    "the-pre-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/pre.json",
            "name": "pre",
            "slug": "HTML/Element/pre",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/pre",
            "summary": "The <pre> HTML element represents preformatted text which is to be presented exactly as written in the HTML file. The text is typically rendered using a non-proportional, or monospaced, font. Whitespace inside this element is displayed as written.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<pre>: The Preformatted Text element"
        }
    ],
    "attr-progress-max": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/progress.json",
            "name": "max",
            "slug": "HTML/Attributes/max",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/max",
            "summary": "The max attribute defines the maximum value that is acceptable and valid for the input containing the attribute. If the value of the element is greater than this, the element fails validation. This value must be greater than or equal to the value of the min attribute. If the max attribute is present but is not specified or is invalid, no max value is applied. If the max attribute is valid and a non-empty value is greater than the maximum allowed by the max attribute, constraint validation will prevent form submission.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: max"
        }
    ],
    "the-progress-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/progress.json",
            "name": "progress",
            "slug": "HTML/Element/progress",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/progress",
            "summary": "The <progress> HTML element displays an indicator showing the completion progress of a task, typically displayed as a progress bar.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6",
                    "notes": [
                        "Before Firefox 14, the <code>&lt;progress&gt;</code> element was incorrectly classified as a form element, and therefore had a <code>form</code> attribute. This has been fixed.",
                        "Firefox provides the <code>::-moz-progress-bar</code> pseudo-element, which lets you style the part of the interior of the progress bar representing the amount of work completed so far."
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": "7",
                    "notes": "Safari on iOS does not support indeterminate progress bars (they are rendered like 0%-completed progress bars)."
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<progress>: The Progress Indicator element"
        }
    ],
    "the-q-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/q.json",
            "name": "q",
            "slug": "HTML/Element/q",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/q",
            "summary": "The <q> HTML element indicates that the enclosed text is a short inline quotation. Most modern browsers implement this by surrounding the text in quotation marks. This element is intended for short quotations that don't require paragraph breaks; for long quotations use the <blockquote> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<q>: The Inline Quotation element"
        }
    ],
    "the-rp-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/rp.json",
            "name": "rp",
            "slug": "HTML/Element/rp",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rp",
            "summary": "The <rp> HTML element is used to provide fall-back parentheses for browsers that do not support display of ruby annotations using the <ruby> element. One <rp> element should enclose each of the opening and closing parentheses that wrap the <rt> element that contains the annotation's text.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<rp>: The Ruby Fallback Parenthesis element"
        }
    ],
    "the-rt-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/rt.json",
            "name": "rt",
            "slug": "HTML/Element/rt",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/rt",
            "summary": "The <rt> HTML element specifies the ruby text component of a ruby annotation, which is used to provide pronunciation, translation, or transliteration information for East Asian typography. The <rt> element must always be contained within a <ruby> element.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<rt>: The Ruby Text element"
        }
    ],
    "the-ruby-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/ruby.json",
            "name": "ruby",
            "slug": "HTML/Element/ruby",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ruby",
            "summary": "The <ruby> HTML element represents small annotations that are rendered above, below, or next to base text, usually used for showing the pronunciation of East Asian characters. It can also be used for annotating other kinds of text, but this usage is less common.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<ruby>: The Ruby Annotation element"
        }
    ],
    "the-s-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/s.json",
            "name": "s",
            "slug": "HTML/Element/s",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s",
            "summary": "The <s> HTML element renders text with a strikethrough, or a line through it. Use the <s> element to represent things that are no longer relevant or no longer accurate. However, <s> is not appropriate when indicating document edits; for that, use the <del> and <ins> elements, as appropriate.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 4, this element implemented the <code>HTMLSpanElement</code> interface instead of the standard <code>HTMLElement</code> interface."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<s>: The Strikethrough element"
        }
    ],
    "the-samp-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/samp.json",
            "name": "samp",
            "slug": "HTML/Element/samp",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/samp",
            "summary": "The <samp> HTML element is used to enclose inline text which represents sample (or quoted) output from a computer program. Its contents are typically rendered using the browser's default monospaced font (such as Courier or Lucida Console).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<samp>: The Sample Output element"
        }
    ],
    "the-script-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/script.json",
            "name": "script",
            "slug": "HTML/Element/script",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script",
            "summary": "The <script> HTML element is used to embed executable code or data; this is typically used to embed or refer to JavaScript code. The <script> element can also be used with other languages, such as WebGL's GLSL shader programming language and JSON.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Starting in Firefox 4, inserting &lt;script&gt; elements that have been created by calling <code>document.createElement(\"script\")</code> no longer enforces execution in insertion order. This change lets Firefox properly abide by the specification. To make script-inserted external scripts execute in their insertion order, set <code>.async=false</code> on them."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<script>: The Script element"
        }
    ],
    "the-search-element": [
        {
            "engines": [],
            "filename": "html/elements/search.json",
            "name": "search",
            "slug": "HTML/Element/search",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/search",
            "summary": "The <search> HTML element is a container representing the parts of the document or application with form controls or other content related to performing a search or filtering operation. The <search> element semantically identifies the purpose of the element's contents as having search or filtering capabilities. The search or filtering functionality can be for the website or application, the current web page or document, or the entire Internet or subsection thereof.",
            "support": {
                "chrome": {
                    "version_added": false,
                    "notes": "See <a href='https://crbug.com/937101'>bug 1294294</a> and <a href='https://crbug.com/1277435'>bug 1277435</a>."
                },
                "chrome_android": {
                    "version_added": false
                },
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": false,
                    "notes": "See <a href='https://bugzil.la/1824121'>bug 1824121</a>."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": false
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": false,
                    "notes": "See <a href=' https://webkit.org/b/254327'>bug 254327</a>."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": false,
                    "notes": "See <a href='https://crbug.com/937101'>bug 1294294</a> and <a href='https://crbug.com/1277435'>bug 1277435</a>."
                }
            },
            "title": "<search>: The generic search element"
        }
    ],
    "the-section-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/section.json",
            "name": "section",
            "slug": "HTML/Element/section",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section",
            "summary": "The <section> HTML element represents a generic standalone section of a document, which doesn't have a more specific semantic element to represent it. Sections should always have a heading, with very few exceptions.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<section>: The Generic Section element"
        }
    ],
    "attr-select-multiple": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/select.json",
            "name": "multiple",
            "slug": "HTML/Attributes/multiple",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/multiple",
            "summary": "The Boolean multiple attribute, if set, means the form control accepts one or more values. Valid for the email and file input types and the <select>, the manner by which the user opts for multiple values depends on the form control.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: multiple"
        }
    ],
    "attr-select-required": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/select.json",
            "name": "required",
            "slug": "HTML/Attributes/required",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/required",
            "summary": "The Boolean required attribute, if present, indicates that the user must specify a value for the input before the owning form can be submitted.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: required"
        }
    ],
    "attr-select-size": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/select.json",
            "name": "size",
            "slug": "HTML/Attributes/size",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/size",
            "summary": "The size attribute defines the width of the <input> and the height of the <select> element. For the input, if the type attribute is text or password then it's the number of characters. This must be an integer value of 0 or higher. If no size is specified, or an invalid value is specified, the input has no size declared, and the form control will be the default width based on the user agent. If CSS targets the element with properties impacting the width, CSS takes precedence.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: size"
        }
    ],
    "the-select-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/select.json",
            "name": "select",
            "slug": "HTML/Element/select",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select",
            "summary": "The <select> HTML element represents a control that provides a menu of options.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "<code>border-radius</code> on <code>&lt;select&gt;</code> elements is ignored unless <code>-webkit-appearance</code> is overridden to an appropriate value."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Historically, Firefox has allowed keyboard and mouse events to bubble up from the <code>&lt;option&gt;</code> element to the parent <code>&lt;select&gt;</code> element, although this behavior is inconsistent across many browsers. For better Web compatibility (and for technical reasons), when Firefox is in multi-process mode the <code>&lt;select&gt;</code> element is displayed as a drop-down list. The behavior is unchanged if the <code>&lt;select&gt;</code> is presented inline and it has either the multiple attribute defined or a size attribute set to more than 1. Rather than watching <code>&lt;option&gt;</code> elements for events, you should watch for change events on <code>&lt;select&gt;</code>. See <a href='https://bugzil.la/1090602'>bug 1090602</a> for details."
                },
                "firefox_android": {
                    "version_added": "4",
                    "notes": "Firefox for Android, by default, sets a <code>background-image</code> gradient on all <code>&lt;select multiple&gt;</code> elements. This can be disabled using <code>background-image: none</code>."
                },
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "2"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1",
                    "notes": "<code>border-radius</code> on <code>&lt;select&gt;</code> elements is ignored unless <code>-webkit-appearance</code> is overridden to an appropriate value."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37",
                    "notes": [
                        "In the Browser app for Android 4.1 (and possibly later versions), there is a bug where the menu indicator triangle on the side of a <code>&lt;select&gt;</code> will not be displayed if a <code>background</code>, <code>border</code>, or <code>border-radius</code> style is applied to the <code>&lt;select&gt;</code>.",
                        "<code>border-radius</code> on <code>&lt;select&gt;</code> elements is ignored unless <code>-webkit-appearance</code> is overridden to an appropriate value."
                    ]
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "<code>border-radius</code> on <code>&lt;select&gt;</code> elements is ignored unless <code>-webkit-appearance</code> is overridden to an appropriate value."
                }
            },
            "title": "<select>: The HTML Select element"
        }
    ],
    "the-slot-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/slot.json",
            "name": "slot",
            "slug": "HTML/Element/slot",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/slot",
            "summary": "The <slot> HTML element—part of the Web Components technology suite—is a placeholder inside a web component that you can fill with your own markup, which lets you create separate DOM trees and present them together.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<slot>: The Web Component Slot element"
        }
    ],
    "the-small-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/small.json",
            "name": "small",
            "slug": "HTML/Element/small",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small",
            "summary": "The <small> HTML element represents side-comments and small print, like copyright and legal text, independent of its styled presentation. By default, it renders text within it one font-size smaller, such as from small to x-small.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<small>: the side comment element"
        }
    ],
    "the-source-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/source.json",
            "name": "source",
            "slug": "HTML/Element/source",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source",
            "summary": "The <source> HTML element specifies multiple media resources for the <picture>, the <audio> element, or the <video> element. It is a void element, meaning that it has no content and does not have a closing tag. It is commonly used to offer the same media content in multiple file formats in order to provide compatibility with a broad range of browsers given their differing support for image file formats and media file formats.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5",
                    "notes": "Until Firefox 15, Firefox picked the first source element that has a type matching the MIME-type of a supported media format; see <a href='https://bugzil.la/449363'>bug 449363</a> for details."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<source>: The Media or Image Source element"
        }
    ],
    "the-span-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/span.json",
            "name": "span",
            "slug": "HTML/Element/span",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span",
            "summary": "The <span> HTML element is a generic inline container for phrasing content, which does not inherently represent anything. It can be used to group elements for styling purposes (using the class or id attributes), or because they share attribute values, such as lang. It should be used only when no other semantic element is appropriate. <span> is very much like a <div> element, but <div> is a block-level element whereas a <span> is an inline-level element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<span>: The Content Span element"
        }
    ],
    "the-strong-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/strong.json",
            "name": "strong",
            "slug": "HTML/Element/strong",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/strong",
            "summary": "The <strong> HTML element indicates that its contents have strong importance, seriousness, or urgency. Browsers typically render the contents in bold type.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 4, creating a <code>&lt;strong&gt;</code> element incorrectly resulted in an <code>HTMLSpanElement</code> object, instead of the expected <code>HTMLElement</code>."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<strong>: The Strong Importance element"
        }
    ],
    "the-style-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/style.json",
            "name": "style",
            "slug": "HTML/Element/style",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style",
            "summary": "The <style> HTML element contains style information for a document, or part of a document. It contains CSS, which is applied to the contents of the document containing the <style> element.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "3"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "3.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<style>: The Style Information element"
        }
    ],
    "the-sub-and-sup-elements": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/sub.json",
            "name": "sub",
            "slug": "HTML/Element/sub",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub",
            "summary": "The <sub> HTML element specifies inline text which should be displayed as subscript for solely typographical reasons. Subscripts are typically rendered with a lowered baseline using smaller text.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<sub>: The Subscript element"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/sup.json",
            "name": "sup",
            "slug": "HTML/Element/sup",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup",
            "summary": "The <sup> HTML element specifies inline text which is to be displayed as superscript for solely typographical reasons. Superscripts are usually rendered with a raised baseline using smaller text.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<sup>: The Superscript element"
        }
    ],
    "the-summary-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/summary.json",
            "name": "summary",
            "slug": "HTML/Element/summary",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/summary",
            "summary": "The <summary> HTML element specifies a summary, caption, or legend for a <details> element's disclosure box. Clicking the <summary> element toggles the state of the parent <details> element open and closed.",
            "support": {
                "chrome": {
                    "version_added": "12"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<summary>: The Disclosure Summary element"
        }
    ],
    "the-table-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/table.json",
            "name": "table",
            "slug": "HTML/Element/table",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table",
            "summary": "The <table> HTML element represents tabular data — that is, information presented in a two-dimensional table comprised of rows and columns of cells containing data.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<table>: The Table element"
        }
    ],
    "the-tbody-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/tbody.json",
            "name": "tbody",
            "slug": "HTML/Element/tbody",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tbody",
            "summary": "The <tbody> HTML element encapsulates a set of table rows (<tr> elements), indicating that they comprise the body of the table (<table>).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<tbody>: The Table Body element"
        }
    ],
    "the-td-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/td.json",
            "name": "td",
            "slug": "HTML/Element/td",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td",
            "summary": "The <td> HTML element defines a cell of a table that contains data. It participates in the table model.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<td>: The Table Data Cell element"
        }
    ],
    "the-template-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/template.json",
            "name": "template",
            "slug": "HTML/Element/template",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template",
            "summary": "The <template> HTML element is a mechanism for holding HTML that is not to be rendered immediately when a page is loaded but may be instantiated subsequently during runtime using JavaScript.",
            "support": {
                "chrome": {
                    "version_added": "26"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": true
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<template>: The Content Template element"
        }
    ],
    "the-textarea-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/textarea.json",
            "name": "textarea",
            "slug": "HTML/Element/textarea",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea",
            "summary": "The <textarea> HTML element represents a multi-line plain-text editing control, useful when you want to allow users to enter a sizeable amount of free-form text, for example a comment on a review or feedback form.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": [
                        "Before Firefox 6, when a <code>&lt;textarea&gt;</code> was focused, the insertion point was placed at the end of the text by default. Other major browsers place the insertion point at the beginning of the text.",
                        "A default background-image gradient is applied to all <code>&lt;textarea&gt;</code> elements, which can be disabled using <code>background-image: none</code>.",
                        "Before Firefox 89, manipulating the content of <code>&lt;textarea&gt;</code> elements using <code>Document.execCommand()</code> commands requires workarounds (see <a href='https://bugzil.la/1220696'>bug 1220696</a>)."
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3",
                    "notes": "Unlike other major browsers, a default style of <code>opacity: 0.4</code> is applied to disabled <code>&lt;textarea&gt;</code> elements."
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<textarea>: The Textarea element"
        }
    ],
    "the-tfoot-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/tfoot.json",
            "name": "tfoot",
            "slug": "HTML/Element/tfoot",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tfoot",
            "summary": "The <tfoot> HTML element defines a set of rows summarizing the columns of the table.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<tfoot>: The Table Foot element"
        }
    ],
    "the-th-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/th.json",
            "name": "th",
            "slug": "HTML/Element/th",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th",
            "summary": "The <th> HTML element defines a cell as the header of a group of table cells. The exact nature of this group is defined by the scope and headers attributes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<th>: The Table Header element"
        }
    ],
    "the-thead-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/thead.json",
            "name": "thead",
            "slug": "HTML/Element/thead",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/thead",
            "summary": "The <thead> HTML element defines a set of rows defining the head of the columns of the table.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1",
                    "notes": "Backgrounds applied to <code>&lt;thead&gt;</code> elements will be applied to each table cell, rather than the entire header. To mimic the behavior of other browsers, set the <code>background-attachment</code> CSS property to <code>fixed</code>."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<thead>: The Table Head element"
        }
    ],
    "the-time-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/time.json",
            "name": "time",
            "slug": "HTML/Element/time",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time",
            "summary": "The <time> HTML element represents a specific period in time. It may include the datetime attribute to translate dates into machine-readable format, allowing for better search engine results or custom features such as reminders.",
            "support": {
                "chrome": {
                    "version_added": "62"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "22"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "49"
                    },
                    {
                        "version_added": "11.5",
                        "version_removed": "12"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "46"
                    },
                    {
                        "version_added": "11.5",
                        "version_removed": "12"
                    }
                ],
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<time>: The (Date) Time element"
        }
    ],
    "the-title-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/title.json",
            "name": "title",
            "slug": "HTML/Element/title",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title",
            "summary": "The <title> HTML element defines the document's title that is shown in a browser's title bar or a page's tab. It only contains text; tags within the element are ignored.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "1"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<title>: The Document Title element"
        }
    ],
    "the-tr-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/tr.json",
            "name": "tr",
            "slug": "HTML/Element/tr",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/tr",
            "summary": "The <tr> HTML element defines a row of cells in a table. The row's cells can then be established using a mix of <td> (data cell) and <th> (header cell) elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<tr>: The Table Row element"
        }
    ],
    "the-track-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/track.json",
            "name": "track",
            "slug": "HTML/Element/track",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track",
            "summary": "The <track> HTML element is used as a child of the media elements, <audio> and <video>. It lets you specify timed text tracks (or time-based data), for example to automatically handle subtitles. The tracks are formatted in WebVTT format (.vtt files) — Web Video Text Tracks.",
            "support": {
                "chrome": {
                    "version_added": "23"
                },
                "chrome_android": {
                    "version_added": "25",
                    "notes": "Doesn't work for fullscreen video."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<track>: The Embed Text Track element"
        }
    ],
    "the-u-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/u.json",
            "name": "u",
            "slug": "HTML/Element/u",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u",
            "summary": "The <u> HTML element represents a span of inline text which should be rendered in a way that indicates that it has a non-textual annotation. This is rendered by default as a simple solid underline, but may be altered using CSS.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 4, this element implemented the <code>HTMLSpanElement</code> interface instead of the standard <code>HTMLElement</code> interface."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<u>: The Unarticulated Annotation (Underline) element"
        }
    ],
    "the-ul-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/ul.json",
            "name": "ul",
            "slug": "HTML/Element/ul",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul",
            "summary": "The <ul> HTML element represents an unordered list of items, typically rendered as a bulleted list.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<ul>: The Unordered List element"
        }
    ],
    "the-var-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/var.json",
            "name": "var",
            "slug": "HTML/Element/var",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/var",
            "summary": "The <var> HTML element represents the name of a variable in a mathematical expression or a programming context. It's typically presented using an italicized version of the current typeface, although that behavior is browser-dependent.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<var>: The Variable element"
        }
    ],
    "the-video-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/video.json",
            "name": "video",
            "slug": "HTML/Element/video",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video",
            "summary": "The <video> HTML element embeds a media player which supports video playback into the document. You can use <video> for audio content as well, but the <audio> element may provide a more appropriate user experience.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<video>: The Video Embed element"
        }
    ],
    "the-wbr-element": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/elements/wbr.json",
            "name": "wbr",
            "slug": "HTML/Element/wbr",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr",
            "summary": "The <wbr> HTML element represents a word break opportunity—a position within text where the browser may optionally break a line, though its line-breaking rules would not otherwise create a break at that location.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5",
                    "version_removed": "7"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<wbr>: The Line Break Opportunity element"
        }
    ],
    "the-accesskey-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "accesskey",
            "slug": "HTML/Global_attributes/accesskey",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey",
            "summary": "The accesskey global attribute provides a hint for generating a keyboard shortcut for the current element. The attribute value must consist of a single printable character (which includes accented and other characters that can be generated by the keyboard).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "accesskey"
        }
    ],
    "attr-autocapitalize": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "autocapitalize",
            "slug": "HTML/Global_attributes/autocapitalize",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autocapitalize",
            "summary": "The autocapitalize global attribute is an enumerated attribute that controls whether and how text input is automatically capitalized as it is entered/edited by the user.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "111"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": null
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "autocapitalize"
        }
    ],
    "attr-fe-autocomplete": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "autocomplete",
            "slug": "HTML/Attributes/autocomplete",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete",
            "summary": "The HTML autocomplete attribute lets web developers specify what if any permission the user agent has to provide automated assistance in filling out form field values, as well as guidance to the browser as to the type of information expected in the field.",
            "support": {
                "chrome": {
                    "version_added": "14",
                    "notes": [
                        "In Chrome 66, support was added for the <code>&lt;textarea&gt;</code> and <code>&lt;select&gt;</code> elements.",
                        "Originally only supported on the <code>&lt;input&gt;</code> element.",
                        "Chrome does not accept <code>off</code> as a value. See <a href='https://crbug.com/587466'>bug 587466</a>."
                    ]
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "notes": [
                        "In Chrome 66, support was added for the <code>&lt;textarea&gt;</code> and <code>&lt;select&gt;</code> elements.",
                        "Originally only supported on the <code>&lt;input&gt;</code> element.",
                        "Chrome does not accept <code>off</code> as a value. See <a href='https://crbug.com/587466'>bug 587466</a>."
                    ]
                }
            },
            "title": "HTML attribute: autocomplete"
        }
    ],
    "dom-fe-autofocus": [
        {
            "engines": [
                "blink"
            ],
            "partial": [
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "autofocus",
            "slug": "HTML/Global_attributes/autofocus",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus",
            "summary": "The autofocus global attribute is a Boolean attribute indicating that an element should be focused on page load, or when the <dialog> that it is part of is displayed.",
            "support": {
                "chrome": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "79",
                        "partial_implementation": true,
                        "notes": "Supported for the <code>&lt;button&gt;</code>, <code>&lt;input&gt;</code>, <code>&lt;select&gt;</code>, and <code>&lt;textarea&gt;</code> elements."
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "1",
                    "partial_implementation": true,
                    "notes": "Supported for the <code>&lt;button&gt;</code>, <code>&lt;input&gt;</code>, <code>&lt;select&gt;</code>, and <code>&lt;textarea&gt;</code> elements."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10",
                    "partial_implementation": true,
                    "notes": "Supported for the <code>&lt;button&gt;</code>, <code>&lt;input&gt;</code>, <code>&lt;select&gt;</code>, and <code>&lt;textarea&gt;</code> elements."
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "66"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "66",
                        "partial_implementation": true,
                        "notes": "Supported for the <code>&lt;button&gt;</code>, <code>&lt;input&gt;</code>, <code>&lt;select&gt;</code>, and <code>&lt;textarea&gt;</code> elements."
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "57"
                    },
                    {
                        "version_added": "12.1",
                        "version_removed": "57",
                        "partial_implementation": true,
                        "notes": "Supported for the <code>&lt;button&gt;</code>, <code>&lt;input&gt;</code>, <code>&lt;select&gt;</code>, and <code>&lt;textarea&gt;</code> elements."
                    }
                ],
                "safari": {
                    "version_added": "4",
                    "partial_implementation": true,
                    "notes": "Supported for the <code>&lt;button&gt;</code>, <code>&lt;input&gt;</code>, <code>&lt;select&gt;</code>, and <code>&lt;textarea&gt;</code> elements."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": "37",
                        "version_removed": "79",
                        "partial_implementation": true,
                        "notes": "Supported for the <code>&lt;button&gt;</code>, <code>&lt;input&gt;</code>, <code>&lt;select&gt;</code>, and <code>&lt;textarea&gt;</code> elements."
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "79",
                        "partial_implementation": true,
                        "notes": "Supported for the <code>&lt;button&gt;</code>, <code>&lt;input&gt;</code>, <code>&lt;select&gt;</code>, and <code>&lt;textarea&gt;</code> elements."
                    }
                ]
            },
            "title": "autofocus"
        }
    ],
    "global-attributes:classes-2": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "class",
            "slug": "HTML/Global_attributes/class",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class",
            "summary": "The class global attribute is a space-separated list of the case-sensitive classes of the element. Classes allow CSS and JavaScript to select and access specific elements via the class selectors or functions like the DOM method document.getElementsByClassName.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "class"
        }
    ],
    "attr-contenteditable": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "contenteditable",
            "slug": "HTML/Global_attributes/contenteditable",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/contenteditable",
            "summary": "The contenteditable global attribute is an enumerated attribute indicating if the element should be editable by the user. If so, the browser modifies its widget to allow editing.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "contenteditable"
        }
    ],
    "attr-data-*": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "data_attributes",
            "slug": "HTML/Global_attributes/data-*",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/data-*",
            "summary": "The data-* global attributes form a class of attributes called custom data attributes, that allow proprietary information to be exchanged between the HTML and its DOM representation by scripts.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "data-*"
        }
    ],
    "the-dir-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "dir",
            "slug": "HTML/Global_attributes/dir",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir",
            "summary": "The dir global attribute is an enumerated attribute that indicates the directionality of the element's text.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "dir"
        }
    ],
    "the-draggable-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "draggable",
            "slug": "HTML/Global_attributes/draggable",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/draggable",
            "summary": "The draggable global attribute is an enumerated attribute that indicates whether the element can be dragged, either with native browser behavior or the HTML Drag and Drop API.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "draggable"
        }
    ],
    "attr-enterkeyhint": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "enterkeyhint",
            "slug": "HTML/Global_attributes/enterkeyhint",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/enterkeyhint",
            "summary": "The enterkeyhint global attribute is an enumerated attribute defining what action label (or icon) to present for the enter key on virtual keyboards.",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "94"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "66"
                },
                "opera_android": {
                    "version_added": "57"
                },
                "safari": {
                    "version_added": "13.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "enterkeyhint"
        }
    ],
    "the-hidden-attribute": [
        {
            "engines": [
                "blink"
            ],
            "filename": "html/global_attributes.json",
            "name": "until-found_value",
            "slug": "HTML/Global_attributes/hidden",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden",
            "summary": "The hidden global attribute is an enumerated attribute indicating that the browser should not render the contents of the element. For example, it can be used to hide elements of the page that can't be used until the login process has been completed.",
            "support": {
                "chrome": {
                    "version_added": "102"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": false
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "102"
                }
            },
            "title": "hidden"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "hidden",
            "slug": "HTML/Global_attributes/hidden",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/hidden",
            "summary": "The hidden global attribute is an enumerated attribute indicating that the browser should not render the contents of the element. For example, it can be used to hide elements of the page that can't be used until the login process has been completed.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "hidden"
        }
    ],
    "global-attributes:the-id-attribute-2": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "id",
            "slug": "HTML/Global_attributes/id",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id",
            "summary": "The id global attribute defines an identifier (ID) which must be unique in the whole document. Its purpose is to identify the element when linking (using a fragment identifier), scripting, or styling (with CSS).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": [
                    {
                        "version_added": "32"
                    },
                    {
                        "version_added": "1",
                        "version_removed": "32",
                        "partial_implementation": true,
                        "notes": "<code>id</code> is a true global attribute only since Firefox 32."
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "id"
        }
    ],
    "the-inert-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "inert",
            "slug": "HTML/Global_attributes/inert",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inert",
            "summary": "The inert global attribute is a Boolean attribute indicating that the browser will ignore the element. With the inert attribute, all of the element's flat tree descendants (such as modal <dialog>s) that don't otherwise escape inertness are ignored. The inert attribute also makes the browser ignore input events sent by the user, including focus-related events and events from assistive technologies.",
            "support": {
                "chrome": {
                    "version_added": "102"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "112"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "102"
                }
            },
            "title": "inert"
        }
    ],
    "attr-inputmode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "inputmode",
            "slug": "HTML/Global_attributes/inputmode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode",
            "summary": "The inputmode global attribute is an enumerated attribute that hints at the type of data that might be entered by the user while editing the element or its contents. This allows a browser to display an appropriate virtual keyboard.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": [
                    {
                        "version_added": "95"
                    },
                    {
                        "version_added": "17",
                        "version_removed": "23"
                    }
                ],
                "firefox_android": {
                    "version_added": "79"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": {
                    "version_added": "12.2"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "inputmode"
        }
    ],
    "attr-is": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "html/global_attributes.json",
            "name": "is",
            "slug": "HTML/Global_attributes/is",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/is",
            "summary": "The is global attribute allows you to specify that a standard HTML element should behave like a defined custom built-in element (see Using custom elements for more details).",
            "support": {
                "chrome": {
                    "version_added": "67"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false,
                    "notes": "See <a href='https://webkit.org/b/182671'>bug 182671</a>."
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "is"
        }
    ],
    "attr-itemid": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "itemid",
            "slug": "HTML/Global_attributes/itemid",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemid",
            "summary": "The itemid global attribute provides microdata in the form of a unique, global identifier of an item.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": true
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "itemid"
        }
    ],
    "names:-the-itemprop-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "itemprop",
            "slug": "HTML/Global_attributes/itemprop",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemprop",
            "summary": "The itemprop global attribute is used to add properties to an item. Every HTML element can have an itemprop attribute specified, and an itemprop consists of a name-value pair. Each name-value pair is called a property, and a group of one or more properties forms an item. Property values are either a string or a URL and can be associated with a very wide range of elements including <audio>, <embed>, <iframe>, <img>, <link>, <object>, <source>, <track>, and <video>.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": true
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "itemprop"
        }
    ],
    "attr-itemref": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "itemref",
            "slug": "HTML/Global_attributes/itemref",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemref",
            "summary": "Properties that are not descendants of an element with the itemscope attribute can be associated with an item using the global attribute itemref.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": true
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "itemref"
        }
    ],
    "attr-itemscope": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "itemscope",
            "slug": "HTML/Global_attributes/itemscope",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemscope",
            "summary": "itemscope is a boolean global attribute that defines the scope of associated metadata. Specifying the itemscope attribute for an element creates a new item, which results in a number of name-value pairs that are associated with the element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": true
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "itemscope"
        }
    ],
    "attr-itemtype": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "itemtype",
            "slug": "HTML/Global_attributes/itemtype",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/itemtype",
            "summary": "The global attribute itemtype specifies the URL of the vocabulary that will be used to define itemprop's (item properties) in the data structure.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": true
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "itemtype"
        }
    ],
    "attr-lang": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "lang",
            "slug": "HTML/Global_attributes/lang",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/lang",
            "summary": "The lang global attribute helps define the language of an element: the language that non-editable elements are written in, or the language that the editable elements should be written in by the user. The attribute contains a single \"language tag\" in the format defined in RFC 5646: Tags for Identifying Languages (also known as BCP 47).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "lang"
        }
    ],
    "attr-nonce": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "nonce",
            "slug": "HTML/Global_attributes/nonce",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce",
            "summary": "The nonce global attribute is a content attribute defining a cryptographic nonce (\"number used once\") which can be used by Content Security Policy to determine whether or not a given fetch will be allowed to proceed for a given element.",
            "support": {
                "chrome": {
                    "version_added": true
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "31"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": true
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": true
                }
            },
            "title": "nonce"
        }
    ],
    "the-popover-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "html/global_attributes.json",
            "name": "popover",
            "slug": "HTML/Global_attributes/popover",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/popover",
            "summary": "The popover global attribute is used to designate an element as a popover element.",
            "support": {
                "chrome": {
                    "version_added": "114"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "114",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.element.popover.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "preview"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "114"
                }
            },
            "title": "popover"
        }
    ],
    "attr-slot": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "slot",
            "slug": "HTML/Global_attributes/slot",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/slot",
            "summary": "The slot global attribute assigns a slot in a shadow DOM shadow tree to an element: An element with a slot attribute is assigned to the slot created by the <slot> element whose name attribute's value matches that slot attribute's value.",
            "support": {
                "chrome": {
                    "version_added": "53"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": null
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "slot"
        }
    ],
    "attr-spellcheck": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "spellcheck",
            "slug": "HTML/Global_attributes/spellcheck",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/spellcheck",
            "summary": "The spellcheck global attribute is an enumerated attribute that defines whether the element may be checked for spelling errors.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": {
                    "version_added": "47"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": true
                },
                "firefox_android": {
                    "version_added": "57"
                },
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": true
                },
                "opera_android": {
                    "version_added": "37"
                },
                "safari": {
                    "version_added": true
                },
                "safari_ios": {
                    "version_added": "9.3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "spellcheck"
        }
    ],
    "the-style-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "style",
            "slug": "HTML/Global_attributes/style",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/style",
            "summary": "The style global attribute contains CSS styling declarations to be applied to the element. Note that it is recommended for styles to be defined in a separate file or files. This attribute and the <style> element have mainly the purpose of allowing for quick styling, for example for testing purposes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "style"
        }
    ],
    "attr-tabindex": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "tabindex",
            "slug": "HTML/Global_attributes/tabindex",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex",
            "summary": "The tabindex global attribute allows developers to make HTML elements focusable, allow or prevent them from being sequentially focusable (usually with the Tab key, hence the name) and determine their relative ordering for sequential focus navigation.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "tabindex"
        }
    ],
    "the-title-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "title",
            "slug": "HTML/Global_attributes/title",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/title",
            "summary": "The title global attribute contains text representing advisory information related to the element it belongs to.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "title"
        }
    ],
    "attr-translate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "html/global_attributes.json",
            "name": "translate",
            "slug": "HTML/Global_attributes/translate",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/translate",
            "summary": "The translate global attribute is an enumerated attribute that is used to specify whether an element's translatable attribute values and its Text node children should be translated when the page is localized, or whether to leave them unchanged.",
            "support": {
                "chrome": {
                    "version_added": "19"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "111"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "translate"
        }
    ],
    "coep": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "http/headers/Cross-Origin-Embedder-Policy.json",
            "name": "Cross-Origin-Embedder-Policy",
            "slug": "HTTP/Headers/Cross-Origin-Embedder-Policy",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Embedder-Policy",
            "summary": "The HTTP Cross-Origin-Embedder-Policy (COEP) response header configures embedding cross-origin resources into the document.",
            "support": {
                "chrome": {
                    "version_added": "83"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "79"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "15.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "86"
                },
                "edge_blink": {
                    "version_added": "83"
                }
            },
            "title": "Cross-Origin-Embedder-Policy"
        }
    ],
    "the-coop-headers": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "http/headers/Cross-Origin-Opener-Policy.json",
            "name": "Cross-Origin-Opener-Policy",
            "slug": "HTTP/Headers/Cross-Origin-Opener-Policy",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cross-Origin-Opener-Policy",
            "summary": "The HTTP Cross-Origin-Opener-Policy (COOP) response header allows you to ensure a top-level document does not share a browsing context group with cross-origin documents.",
            "support": {
                "chrome": {
                    "version_added": "83"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "79"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": false
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "15.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "83"
                }
            },
            "title": "Cross-Origin-Opener-Policy"
        }
    ],
    "autoplay-feature": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": "http/headers/Feature-Policy.json",
            "name": "autoplay",
            "slug": "HTTP/Headers/Feature-Policy/autoplay",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Feature-Policy/autoplay",
            "summary": "The HTTP Permissions-Policy header autoplay directive controls whether the current document is allowed to autoplay media requested through the HTMLMediaElement interface.",
            "support": {
                "chrome": {
                    "version_added": "64"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "74",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.security.featurePolicy.header.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Permissions-Policy: autoplay"
        },
        {
            "engines": [
                "blink"
            ],
            "altname": [
                "gecko"
            ],
            "filename": "http/headers/Permissions-Policy.json",
            "name": "autoplay",
            "slug": "HTTP/Headers/Permissions-Policy/autoplay",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy/autoplay",
            "summary": "The HTTP Permissions-Policy header autoplay directive controls whether the current document is allowed to autoplay media requested through the HTMLMediaElement interface.",
            "support": {
                "chrome": [
                    {
                        "version_added": "88"
                    },
                    {
                        "version_added": "64",
                        "alternative_name": "Feature-Policy"
                    }
                ],
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "74",
                    "alternative_name": "Feature-Policy: autoplay",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.security.featurePolicy.header.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "88"
                    },
                    {
                        "version_added": "79",
                        "alternative_name": "Feature-Policy"
                    }
                ]
            },
            "title": "Permissions-Policy: autoplay"
        }
    ],
    "policy-controlled-features": [
        {
            "engines": [
                "blink"
            ],
            "needsflag": [
                "blink"
            ],
            "altname": [
                "gecko"
            ],
            "filename": "http/headers/Permissions-Policy.json",
            "name": "document-domain",
            "slug": "HTTP/Headers/Permissions-Policy/document-domain",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Permissions-Policy/document-domain",
            "summary": "The HTTP Permissions-Policy header document-domain directive controls whether the current document is allowed to set document.domain.",
            "support": {
                "chrome": [
                    {
                        "version_added": "88",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--enable-blink-features=ExperimentalProductivityFeatures"
                            }
                        ]
                    },
                    {
                        "version_added": "64",
                        "alternative_name": "Feature-Policy",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--enable-blink-features=ExperimentalProductivityFeatures"
                            }
                        ]
                    }
                ],
                "chrome_android": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "74",
                    "alternative_name": "Feature-Policy: document-domain",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "dom.security.featurePolicy.header.enabled",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "88",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--enable-blink-features=ExperimentalProductivityFeatures"
                            }
                        ]
                    },
                    {
                        "version_added": "79",
                        "alternative_name": "Feature-Policy",
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--enable-blink-features=ExperimentalProductivityFeatures"
                            }
                        ]
                    }
                ]
            },
            "title": "Permissions-Policy: document-domain"
        }
    ],
    "the-x-frame-options-header": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "http/headers/X-Frame-Options.json",
            "name": "X-Frame-Options",
            "slug": "HTTP/Headers/X-Frame-Options",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
            "summary": "The X-Frame-Options HTTP response header can be used to indicate whether or not a browser should be allowed to render a page in a <frame>, <iframe>, <embed> or <object>. Sites can use this to avoid click-jacking attacks, by ensuring that their content is not embedded into other sites.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": true
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": true
                },
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": "mirror",
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": true
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "X-Frame-Options"
        }
    ],
    "early-hints": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "http/status.json",
            "name": "103",
            "slug": "HTTP/Status/103",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/103",
            "summary": "The HTTP 103 Early Hints information response may be sent by a server while it is still preparing a response, with hints about the resources that the server is expecting the final response will link. This allows a browser to start preloading resources even before the server has prepared and sent that final response.",
            "support": {
                "chrome": {
                    "version_added": "103",
                    "notes": "Supported in HTTP/2 and later (SPDY/QUIC)"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": [
                    {
                        "version_added": "preview",
                        "notes": "Supported in HTTP1.0 and later"
                    },
                    {
                        "version_added": "102",
                        "notes": "Supported in HTTP1.0 and later",
                        "flags": [
                            {
                                "type": "preference",
                                "name": "network.early-hints.enabled",
                                "value_to_set": "true"
                            },
                            {
                                "type": "preference",
                                "name": "network.early-hints.preconnect.enabled",
                                "value_to_set": "true"
                            }
                        ]
                    }
                ],
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": false
                },
                "safari": {
                    "version_added": false
                },
                "edge_blink": {
                    "version_added": "103",
                    "notes": "Supported in HTTP/2 and later (SPDY/QUIC)"
                }
            },
            "title": "103 Early Hints"
        }
    ],
    "serializable-objects": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "javascript/builtins/Error.json",
            "name": "serializable_object",
            "slug": "https://developer.mozilla.org/en-US/docs/Glossary/Serializable_object",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Glossary/Serializable_object",
            "summary": "Serializable objects are objects that can be serialized and later deserialized in any JavaScript environment (\"realm\"). This allows them to, for example, be stored on disk and later restored, or cloned with structuredClone(), or shared between workers using DedicatedWorkerGlobalScope.postMessage().",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "103",
                    "notes": [
                        "Version 103 serialized properties: <code>name</code>, <code>message</code>, <code>cause</code>, <code>fileName</code>, <code>lineNumber</code> and <code>columnNumber</code>.",
                        "Version 104 adds serialization of <code>stack</code> in the main thread (<a href='https://developer.mozilla.org/docs/Web/API/Window/postMessage'><code>window.postMessage()</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/structuredClone'><code>structuredClone()</code></a>).",
                        "Version 110 adds serialization of <code>stack</code> in workers (<a href='https://developer.mozilla.org/docs/Web/API/Worker/postMessage'><code>worker.postMessage()</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/structuredClone'><code>structuredClone()</code></a>)."
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Serializable object"
        },
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "javascript/builtins/EvalError.json",
            "name": "serializable_object",
            "slug": "https://developer.mozilla.org/en-US/docs/Glossary/Serializable_object",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Glossary/Serializable_object",
            "summary": "Serializable objects are objects that can be serialized and later deserialized in any JavaScript environment (\"realm\"). This allows them to, for example, be stored on disk and later restored, or cloned with structuredClone(), or shared between workers using DedicatedWorkerGlobalScope.postMessage().",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "103",
                    "notes": [
                        "Version 103 serializable properties: <code>name</code>, <code>message</code>, <code>cause</code>, <code>fileName</code>, <code>lineNumber</code> and <code>columnNumber</code>.",
                        "Version 104 also serializes <code>stack</code> in the main thread (<a href='https://developer.mozilla.org/docs/Web/API/Window/postMessage'><code>window.postMessage()</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/structuredClone'><code>structuredClone()</code></a>).",
                        "Version 110 also serializes <code>stack</code> in workers (<a href='https://developer.mozilla.org/docs/Web/API/Worker/postMessage'><code>worker.postMessage()</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/structuredClone'><code>structuredClone()</code></a>)."
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Serializable object"
        },
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "javascript/builtins/RangeError.json",
            "name": "serializable_object",
            "slug": "https://developer.mozilla.org/en-US/docs/Glossary/Serializable_object",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Glossary/Serializable_object",
            "summary": "Serializable objects are objects that can be serialized and later deserialized in any JavaScript environment (\"realm\"). This allows them to, for example, be stored on disk and later restored, or cloned with structuredClone(), or shared between workers using DedicatedWorkerGlobalScope.postMessage().",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "103",
                    "notes": [
                        "Version 103 serializable properties: <code>name</code>, <code>message</code>, <code>cause</code>, <code>fileName</code>, <code>lineNumber</code> and <code>columnNumber</code>.",
                        "Version 104 also serializes <code>stack</code> in the main thread (<a href='https://developer.mozilla.org/docs/Web/API/Window/postMessage'><code>window.postMessage()</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/structuredClone'><code>structuredClone()</code></a>).",
                        "Version 110 also serializes <code>stack</code> in workers (<a href='https://developer.mozilla.org/docs/Web/API/Worker/postMessage'><code>worker.postMessage()</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/structuredClone'><code>structuredClone()</code></a>)."
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Serializable object"
        },
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "javascript/builtins/ReferenceError.json",
            "name": "serializable_object",
            "slug": "https://developer.mozilla.org/en-US/docs/Glossary/Serializable_object",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Glossary/Serializable_object",
            "summary": "Serializable objects are objects that can be serialized and later deserialized in any JavaScript environment (\"realm\"). This allows them to, for example, be stored on disk and later restored, or cloned with structuredClone(), or shared between workers using DedicatedWorkerGlobalScope.postMessage().",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "103",
                    "notes": [
                        "Version 103 serializable properties: <code>name</code>, <code>message</code>, <code>cause</code>, <code>fileName</code>, <code>lineNumber</code> and <code>columnNumber</code>.",
                        "Version 104 also serializes <code>stack</code> in the main thread (<a href='https://developer.mozilla.org/docs/Web/API/Window/postMessage'><code>window.postMessage()</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/structuredClone'><code>structuredClone()</code></a>).",
                        "Version 110 also serializes <code>stack</code> in workers (<a href='https://developer.mozilla.org/docs/Web/API/Worker/postMessage'><code>worker.postMessage()</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/structuredClone'><code>structuredClone()</code></a>)."
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Serializable object"
        },
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "javascript/builtins/SyntaxError.json",
            "name": "serializable_object",
            "slug": "https://developer.mozilla.org/en-US/docs/Glossary/Serializable_object",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Glossary/Serializable_object",
            "summary": "Serializable objects are objects that can be serialized and later deserialized in any JavaScript environment (\"realm\"). This allows them to, for example, be stored on disk and later restored, or cloned with structuredClone(), or shared between workers using DedicatedWorkerGlobalScope.postMessage().",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "103",
                    "notes": [
                        "Version 103 serializable properties: <code>name</code>, <code>message</code>, <code>cause</code>, <code>fileName</code>, <code>lineNumber</code> and <code>columnNumber</code>.",
                        "Version 104 also serializes <code>stack</code> in the main thread (<a href='https://developer.mozilla.org/docs/Web/API/Window/postMessage'><code>window.postMessage()</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/structuredClone'><code>structuredClone()</code></a>).",
                        "Version 110 also serializes <code>stack</code> in workers (<a href='https://developer.mozilla.org/docs/Web/API/Worker/postMessage'><code>worker.postMessage()</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/structuredClone'><code>structuredClone()</code></a>)."
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Serializable object"
        },
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "javascript/builtins/TypeError.json",
            "name": "serializable_object",
            "slug": "https://developer.mozilla.org/en-US/docs/Glossary/Serializable_object",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Glossary/Serializable_object",
            "summary": "Serializable objects are objects that can be serialized and later deserialized in any JavaScript environment (\"realm\"). This allows them to, for example, be stored on disk and later restored, or cloned with structuredClone(), or shared between workers using DedicatedWorkerGlobalScope.postMessage().",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "103",
                    "notes": [
                        "Version 103 serializable properties: <code>name</code>, <code>message</code>, <code>cause</code>, <code>fileName</code>, <code>lineNumber</code> and <code>columnNumber</code>.",
                        "Version 104 also serializes <code>stack</code> in the main thread (<a href='https://developer.mozilla.org/docs/Web/API/Window/postMessage'><code>window.postMessage()</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/structuredClone'><code>structuredClone()</code></a>).",
                        "Version 110 also serializes <code>stack</code> in workers (<a href='https://developer.mozilla.org/docs/Web/API/Worker/postMessage'><code>worker.postMessage()</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/structuredClone'><code>structuredClone()</code></a>)."
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Serializable object"
        },
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "javascript/builtins/URIError.json",
            "name": "serializable_object",
            "slug": "https://developer.mozilla.org/en-US/docs/Glossary/Serializable_object",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Glossary/Serializable_object",
            "summary": "Serializable objects are objects that can be serialized and later deserialized in any JavaScript environment (\"realm\"). This allows them to, for example, be stored on disk and later restored, or cloned with structuredClone(), or shared between workers using DedicatedWorkerGlobalScope.postMessage().",
            "support": {
                "chrome": {
                    "version_added": "77"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "103",
                    "notes": [
                        "Version 103 serializable properties: <code>name</code>, <code>message</code>, <code>cause</code>, <code>fileName</code>, <code>lineNumber</code> and <code>columnNumber</code>.",
                        "Version 104 also serializes <code>stack</code> in the main thread (<a href='https://developer.mozilla.org/docs/Web/API/Window/postMessage'><code>window.postMessage()</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/structuredClone'><code>structuredClone()</code></a>).",
                        "Version 110 also serializes <code>stack</code> in workers (<a href='https://developer.mozilla.org/docs/Web/API/Worker/postMessage'><code>worker.postMessage()</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/structuredClone'><code>structuredClone()</code></a>)."
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Serializable object"
        }
    ],
    "incumbent-settings-object-tracking-in-promises": [
        {
            "engines": [
                "gecko"
            ],
            "filename": "javascript/builtins/Promise.json",
            "name": "incumbent_settings_object_tracking",
            "slug": "JavaScript/Reference/Global_Objects/Promise#Incumbent_settings_object_tracking",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise#Incumbent_settings_object_tracking",
            "summary": "The Promise object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": "Promise"
        }
    ],
    "hostgetimportmetaproperties": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/import_meta.json",
            "name": "resolve",
            "slug": "JavaScript/Reference/Operators/import.meta/resolve",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta/resolve",
            "summary": "import.meta.resolve() is a built-in function defined on the import.meta object of a JavaScript module that resolves a module specifier to a URL using the current module's URL as base.",
            "support": {
                "chrome": {
                    "version_added": "105"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.24"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "106"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "12.6.0",
                    "partial_implementation": true,
                    "flags": [
                        {
                            "type": "runtime_flag",
                            "name": "--experimental-import-meta-resolve"
                        }
                    ],
                    "notes": "Returns a Promise."
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "16.4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "105"
                }
            },
            "title": "import.meta.resolve()"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "javascript/operators/import_meta.json",
            "name": "import_meta",
            "slug": "JavaScript/Reference/Operators/import.meta",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta",
            "summary": "The import.meta meta-property exposes context-specific metadata to a JavaScript module. It contains information about the module, such as the module's URL.",
            "support": {
                "chrome": {
                    "version_added": "64"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "62"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "nodejs": {
                    "version_added": "10.4.0"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": "12"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "import.meta"
        }
    ],
    "attr-fieldset-disabled": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "fieldset#attr-disabled",
            "slug": "HTML/Element/fieldset#attr-disabled",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset#attr-disabled",
            "summary": "The <fieldset> HTML element is used to group several controls as well as labels (<label>) within a web form.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true,
                    "notes": "Not all form control descendants of a disabled fieldset are properly disabled in IE11; see IE <a href='https://connect.microsoft.com/IE/feedbackdetail/view/817488'>bug 817488: input[type='file'] not disabled inside disabled fieldset</a> and IE <a href='https://connect.microsoft.com/IE/feedbackdetail/view/962368/can-still-edit-input-type-text-within-fieldset-disabled'>bug 962368: Can still edit input[type='text'] within fieldset[disabled]</a>."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<fieldset>: The Field Set element"
        }
    ],
    "attr-iframe-sandbox": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "iframe#attr-sandbox",
            "slug": "HTML/Element/iframe#attr-sandbox",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox",
            "summary": "The <iframe> HTML element represents a nested browsing context, embedding another HTML page into the current one.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "17"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<iframe>: The Inline Frame element"
        }
    ],
    "attr-iframe-srcdoc": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "iframe#attr-srcdoc",
            "slug": "HTML/Element/iframe#attr-srcdoc",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-srcdoc",
            "summary": "The <iframe> HTML element represents a nested browsing context, embedding another HTML page into the current one.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": {
                    "version_added": null
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": {
                    "version_added": null
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<iframe>: The Inline Frame element"
        }
    ],
    "attr-img-crossorigin": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "crossorigin",
            "slug": "HTML/Attributes/crossorigin",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin",
            "summary": "The crossorigin attribute, valid on the <audio>, <img>, <link>, <script>, and <video> elements, provides support for CORS, defining how the element handles cross-origin requests, thereby enabling the configuration of the CORS requests for the element's fetched data. Depending on the element, the attribute can be a CORS settings attribute.",
            "support": {
                "chrome": {
                    "version_added": "13"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "8"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: crossorigin"
        }
    ],
    "attr-img-srcset": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "img#attr-srcset",
            "slug": "HTML/Element/img#attr-srcset",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-srcset",
            "summary": "The <img> HTML element embeds an image into the document.",
            "support": {
                "chrome": {
                    "version_added": "34"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "≤18"
                },
                "firefox": {
                    "version_added": "38"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<img>: The Image Embed element"
        }
    ],
    "attr-input-maxlength": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "attr-input-maxlength#attr-maxlength",
            "slug": "HTML/Element/input#attr-maxlength",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-maxlength",
            "summary": "The <input> HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The <input> element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "5"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "9"
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "maxlength",
                "title": "maxlength attribute for input and textarea elements"
            },
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "attr-input-minlength": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "attr-input-minlength#attr-minlength",
            "slug": "HTML/Element/input#attr-minlength",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-minlength",
            "summary": "The <input> HTML element is used to create interactive controls for web-based forms in order to accept data from the user; a wide variety of types of input data and control widgets are available, depending on the device and user agent. The <input> element is one of the most powerful and complex in all of HTML due to the sheer number of combinations of input types and attributes.",
            "support": {
                "chrome": {
                    "version_added": "40"
                },
                "chrome_android": {
                    "version_added": "40"
                },
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "51"
                },
                "firefox_android": {
                    "version_added": "51"
                },
                "ie": {
                    "version_added": false
                },
                "opera": {
                    "version_added": "27"
                },
                "opera_android": {
                    "version_added": "27"
                },
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": {
                    "version_added": "10.3"
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "40"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "input-minlength",
                "title": "Minimum length attribute for input fields"
            },
            "title": "<input>: The Input (Form Input) element"
        }
    ],
    "attr-ol-reversed": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "ol#attr-reversed",
            "slug": "HTML/Element/ol#attr-reversed",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol#attr-reversed",
            "summary": "The <ol> HTML element represents an ordered list of items — typically rendered as a numbered list.",
            "support": {
                "chrome": {
                    "version_added": "18"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "≤79"
                },
                "firefox": {
                    "version_added": "18"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<ol>: The Ordered List element"
        }
    ],
    "attr-script-async": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "script#attr-async",
            "slug": "HTML/Element/script#attr-async",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-async",
            "summary": "The <script> HTML element is used to embed executable code or data; this is typically used to embed or refer to JavaScript code. The <script> element can also be used with other languages, such as WebGL's GLSL shader programming language and JSON.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "≤4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<script>: The Script element"
        }
    ],
    "attr-script-defer": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "script#attr-defer",
            "slug": "HTML/Element/script#attr-defer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-defer",
            "summary": "The <script> HTML element is used to embed executable code or data; this is typically used to embed or refer to JavaScript code. The <script> element can also be used with other languages, such as WebGL's GLSL shader programming language and JSON.",
            "support": {
                "chrome": {
                    "version_added": "1",
                    "notes": "Chrome does not defer scripts with the <code>defer</code> attribute when the page is served as XHTML (<code>application/xhtml+xml</code>) - <a href='https://crbug.com/611136'>Chromium Issue #611136</a>, <a href='https://crbug.com/874749'>Chromium Issue #874749</a>"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5",
                    "notes": "Since Firefox 3.6, the <code>defer</code> attribute is ignored on scripts that don't have the <code>src</code> attribute. However, in Firefox 3.5 even inline scripts are deferred if the <code>defer</code> attribute is set."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "10",
                    "notes": "Before version 10, Internet Explorer implemented <code>defer</code> by a proprietary specification. Since version 10 it conforms to the W3C specification."
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Chrome does not defer scripts with the <code>defer</code> attribute when the page is served as XHTML (<code>application/xhtml+xml</code>) - <a href='https://crbug.com/611136'>Chromium Issue #611136</a>, <a href='https://crbug.com/874749'>Chromium Issue #874749</a>"
                }
            },
            "title": "<script>: The Script element"
        }
    ],
    "attr-script-type": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "script#attr-type",
            "slug": "HTML/Element/script#attr-type",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script#attr-type",
            "summary": "The <script> HTML element is used to embed executable code or data; this is typically used to embed or refer to JavaScript code. The <script> element can also be used with other languages, such as WebGL's GLSL shader programming language and JSON.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "≤4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<script>: The Script element"
        }
    ],
    "attributes-for-form-submission": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "form#Attributes_for_form_submission",
            "slug": "HTML/Element/form#Attributes_for_form_submission",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form#Attributes_for_form_submission",
            "summary": "The <form> HTML element represents a document section containing interactive controls for submitting information.",
            "support": {
                "chrome": {
                    "version_added": "10"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<form>: The Form element"
        }
    ],
    "canvasimagesource": [
        {
            "engines": [],
            "filename": null,
            "name": "CanvasImageSource",
            "slug": "API/CanvasImageSource",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasImageSource",
            "summary": "The CanvasRenderingContext2D interface, part of the Canvas API, provides the 2D rendering context for the drawing surface of a <canvas> element. It is used for drawing shapes, text, images, and other objects.",
            "support": null,
            "title": "CanvasRenderingContext2D"
        }
    ],
    "channel-messaging": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "Channel_Messaging_API",
            "slug": "API/Channel_Messaging_API",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API",
            "summary": "The Channel Messaging API allows two separate scripts running in different browsing contexts attached to the same document (e.g., two IFrames, or the main document and an IFrame, two documents via a SharedWorker, or two workers) to communicate directly, passing messages between one another through two-way channels (or pipes) with a port at each end.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.12"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": [
                    {
                        "version_added": "15.0.0"
                    },
                    {
                        "version_added": "10.5.0",
                        "version_removed": "15.0.0",
                        "partial_implementation": true,
                        "notes": "Must be imported from the <code>worker_threads</code> module."
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Channel Messaging API"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "Using_channel_messaging",
            "slug": "API/Channel_Messaging_API/Using_channel_messaging",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API/Using_channel_messaging",
            "summary": "The Channel Messaging API allows two separate scripts running in different browsing contexts attached to the same document (e.g., two <iframe> elements, the main document and a single <iframe>, or two documents via a SharedWorker) to communicate directly, passing messages between each other through two-way channels (or pipes) with a port at each end.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.12"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "41"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": [
                    {
                        "version_added": "15.0.0"
                    },
                    {
                        "version_added": "10.5.0",
                        "version_removed": "15.0.0",
                        "partial_implementation": true,
                        "notes": "Must be imported from the <code>worker_threads</code> module."
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Using channel messaging"
        }
    ],
    "client-side-form-validation": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "Form_validation",
            "slug": "Forms/Form_validation",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation",
            "summary": "Client-side form validation sometimes requires JavaScript if you want to customize styling and error messages, but it always requires you to think carefully about the user. Always remember to help your users correct the data they provide. To that end, be sure to:",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "≤12.1"
                },
                "opera_android": {
                    "version_added": "≤12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "≤37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Client-side form validation"
        }
    ],
    "cors-settings-attributes": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "crossorigin",
            "slug": "HTML/Attributes/crossorigin",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin",
            "summary": "The crossorigin attribute, valid on the <audio>, <img>, <link>, <script>, and <video> elements, provides support for CORS, defining how the element handles cross-origin requests, thereby enabling the configuration of the CORS requests for the element's fetched data. Depending on the element, the attribute can be a CORS settings attribute.",
            "support": {
                "chrome": {
                    "version_added": "13"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "8"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": true
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: crossorigin"
        }
    ],
    "crossDocumentMessages": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "postMessage",
            "slug": "API/Window/postMessage",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage",
            "summary": "The window.postMessage() method safely enables cross-origin communication between Window objects; e.g., between a page and a pop-up that it spawned, or between a page and an iframe embedded within it.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3",
                    "notes": [
                        "Firefox 8 and up supports sending <code>File</code> and <code>FileList</code> objects between windows. This is only allowed if the recipient's principal is contained within the sender's principal for security reasons.",
                        "Before Firefox 6, the <code>message</code> parameter must be a string. Since Firefox 6, the <code>message</code> parameter is serialized using the <a href='https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Structured_clone_algorithm'>structured clone algorithm</a>. This means you can pass a broad variety of data objects safely to the destination window without having to serialize them yourself."
                    ]
                },
                "firefox_android": "mirror",
                "ie": [
                    {
                        "version_added": "10",
                        "notes": "IE10 had an important limitation: see this <a href='https://stackoverflow.com/questions/16226924/is-cross-origin-postmessage-broken-in-ie10'>article</a> for details."
                    },
                    {
                        "version_added": "8",
                        "version_removed": "10",
                        "partial_implementation": true,
                        "notes": "Support only for <code>&lt;frame&gt;</code> and <code>&lt;iframe&gt;</code>."
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "9.5"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "≤37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Window: postMessage() method"
        }
    ],
    "custom-elements": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "Using_custom_elements",
            "slug": "Web_Components/Using_custom_elements",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements",
            "summary": "One of the key features of the Web Components standard is the ability to create custom elements that encapsulate your functionality on an HTML page, rather than having to make do with a long, nested batch of elements that together provide a custom page feature. This article introduces the use of the Custom Elements API.",
            "support": {
                "chrome": {
                    "version_added": "54"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "63"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Using custom elements"
        }
    ],
    "dnd": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "dnd#HTML_Drag_and_Drop_API",
            "slug": "API/HTML_Drag_and_Drop_API",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API",
            "summary": "HTML Drag and Drop interfaces enable applications to use drag-and-drop features in browsers.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "5.5"
                },
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "2"
                },
                "samsunginternet_android": {
                    "version_added": "1.5"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML Drag and Drop API"
        }
    ],
    "dom-input-indeterminate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "HTMLInputElement#indeterminate",
            "slug": "API/HTMLInputElement#indeterminate",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement#indeterminate",
            "summary": "The HTMLInputElement interface provides special properties and methods for manipulating the options, layout, and presentation of <input> elements.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5.5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "≤12.1"
                },
                "opera_android": {
                    "version_added": "≤12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "caniuse": {
                "feature": "indeterminate-checkbox",
                "title": "indeterminate checkbox"
            },
            "title": "HTMLInputElement"
        }
    ],
    "downloading-resources": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "download",
            "slug": "API/HTMLAnchorElement/download",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/HTMLAnchorElement/download",
            "summary": "The HTMLAnchorElement.download property is a string indicating that the linked resource is intended to be downloaded rather than displayed in the browser. The value, if any, specifies the default file name for use in labeling the resource in a local file system. If the name is not a valid file name in the underlying OS, the browser will adjust it.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "20"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "10.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTMLAnchorElement: download property"
        }
    ],
    "drawing-text-to-the-bitmap": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "CanvasRenderingContext2D",
            "slug": "API/CanvasRenderingContext2D",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
            "summary": "The CanvasRenderingContext2D interface, part of the Canvas API, provides the 2D rendering context for the drawing surface of a <canvas> element. It is used for drawing shapes, text, images, and other objects.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "CanvasRenderingContext2D"
        }
    ],
    "event-handler-attributes": [
        {
            "engines": [],
            "filename": null,
            "name": "Event_handlers",
            "slug": "Guide/Events/Event_handlers",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Event_handlers",
            "summary": "Events are signals fired inside the browser window that notify of changes in the browser or operating system environment. Programmers can create event handler code that will run when an event fires, allowing web pages to respond appropriately to change.",
            "support": null,
            "title": "Event handling (overview)"
        }
    ],
    "fakepath-srsly": [
        {
            "engines": [],
            "filename": null,
            "name": "file",
            "slug": "HTML/Element/input/file",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file",
            "summary": "<input> elements with type=\"file\" let the user choose one or more files from their device storage. Once chosen, the files can be uploaded to a server using form submission, or manipulated using JavaScript code and the File API.",
            "support": null,
            "title": "<input type=\"file\">"
        }
    ],
    "forms": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "forms#Forms",
            "slug": "HTML/Element#Forms",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element#Forms",
            "summary": "This page lists all the HTML elements, which are created using tags.",
            "support": {
                "chrome": {
                    "version_added": "61"
                },
                "chrome_android": {
                    "version_added": "61"
                },
                "edge": {
                    "version_added": "16"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "5"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "52"
                },
                "opera_android": {
                    "version_added": "47"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3.2"
                },
                "samsunginternet_android": {
                    "version_added": "8.0"
                },
                "webview_android": {
                    "version_added": "61"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML elements reference"
        }
    ],
    "global-attributes": [
        {
            "engines": [],
            "filename": null,
            "name": "Global_attributes",
            "slug": "HTML/Global_attributes",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes",
            "summary": "Global attributes are attributes common to all HTML elements; they can be used on all elements, though they may have no effect on some elements.",
            "support": null,
            "title": "Global attributes"
        }
    ],
    "mathml": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "mathml#Inline_SVG_and_MathML_support",
            "slug": "Guide/HTML/HTML5/HTML5_Parser#Inline_SVG_and_MathML_support",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/HTML5_Parser#Inline_SVG_and_MathML_support",
            "summary": "To build websites, you should know about HTML — the fundamental technology used to define the structure of a webpage. HTML is used to specify whether your web content should be recognized as a paragraph, list, heading, link, image, multimedia player, form, or one of many other available elements or even a new element that you define.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": {
                    "version_added": "5"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Structuring the web with HTML"
        }
    ],
    "ping": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "needsflag": [
                "gecko"
            ],
            "filename": null,
            "name": "a#attr-ping",
            "slug": "HTML/Element/a#attr-ping",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-ping",
            "summary": "The <a> HTML element (or anchor element), with its href attribute, creates a hyperlink to web pages, files, email addresses, locations in the same page, or anything else a URL can address.",
            "support": {
                "chrome": {
                    "version_added": "12"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "17"
                },
                "firefox": {
                    "version_added": "1",
                    "flags": [
                        {
                            "type": "preference",
                            "name": "browser.send_pings",
                            "value_to_set": "true"
                        }
                    ]
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "≤37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "<a>: The Anchor element"
        }
    ],
    "rel-icon": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "Link_types#icon",
            "slug": "HTML/Link_types#icon",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types#icon",
            "summary": "The rel attribute defines the relationship between a linked resource and the current document. Valid on <link>, <a>, <area>, and <form>, the supported values depend on the element on which the attribute is found.",
            "support": {
                "chrome": {
                    "version_added": "4",
                    "notes": "If both ICO and PNG are available, will use ICO over PNG if ICO has better matching sizes set. (Per caniuse.com.)."
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2",
                    "notes": "Before Firefox 83, the <code>crossorigin</code> attribute is not supported for <code>rel=\"icon\"</code>."
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "11"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9",
                    "notes": "In version 15 and later (Blink-based Opera), if both ICO and PNG are available, will use ICO over PNG if ICO has better matching sizes set. (Per caniuse.com.)"
                },
                "opera_android": {
                    "version_added": false
                },
                "safari": {
                    "version_added": "3.1",
                    "notes": "If both ICO and PNG are available, will ALWAYS use ICO file, regardless of sizes set. (Per caniuse.com.)"
                },
                "safari_ios": {
                    "version_added": false,
                    "notes": "Does not use favicons at all (but may have alternative for bookmarks, etc.). (Per caniuse.com.)"
                },
                "samsunginternet_android": {
                    "version_added": "4.0"
                },
                "webview_android": {
                    "version_added": "38"
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "If both ICO and PNG are available, will use ICO over PNG if ICO has better matching sizes set. (Per caniuse.com.)."
                }
            },
            "caniuse": {
                "feature": "link-icon-png",
                "title": "Favicons"
            },
            "title": "HTML attribute: rel"
        }
    ],
    "pseudo-classes": [
        {
            "engines": [],
            "filename": null,
            "name": "Pseudo-classes",
            "slug": "CSS/Pseudo-classes",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes",
            "summary": "A CSS pseudo-class is a keyword added to a selector that specifies a special state of the selected element(s). For example, the pseudo-class :hover can be used to select a button when a user's pointer hovers over the button and this selected button can then be styled.",
            "support": null,
            "title": "Pseudo-classes"
        }
    ],
    "sections": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "Document_and_website_structure#HTML_for_structuring_content",
            "slug": "HTML/Introduction_to_HTML/Document_and_website_structure#HTML_for_structuring_content",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Document_and_website_structure#HTML_for_structuring_content",
            "summary": "At this point, you should have a better idea about how to structure a web page/site. In the last article of this module, we'll learn how to debug HTML.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.1"
                },
                "opera_android": {
                    "version_added": "11.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Document and website structure"
        }
    ],
    "server-sent-events": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "Server-sent_events",
            "slug": "API/Server-sent_events",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events",
            "summary": "Traditionally, a web page has to send a request to the server to receive new data; that is, the page requests data from the server. With server-sent events, it's possible for a server to send new data to a web page at any time, by pushing messages to the web page. These incoming messages can be treated as Events + data inside the web page.",
            "support": {
                "chrome": {
                    "version_added": "6"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": false
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "45"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Server-sent events"
        }
    ],
    "shared-workers-introduction": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "SharedWorker",
            "slug": "API/SharedWorker",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker",
            "summary": "The SharedWorker interface represents a specific kind of worker that can be accessed from several browsing contexts, such as several windows, iframes or even workers. They implement an interface different than dedicated workers and have a different global scope, SharedWorkerGlobalScope.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": false,
                    "notes": "See <a href='https://crbug.com/154571'>bug 154571</a>."
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "33"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11",
                    "version_removed": "14"
                },
                "safari": [
                    {
                        "version_added": "16"
                    },
                    {
                        "version_added": "5",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "16"
                    },
                    {
                        "version_added": "5",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": {
                    "version_added": "4.0",
                    "version_removed": "5.0"
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SharedWorker"
        }
    ],
    "shared-workers": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "SharedWorker",
            "slug": "API/SharedWorker",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker",
            "summary": "The SharedWorker interface represents a specific kind of worker that can be accessed from several browsing contexts, such as several windows, iframes or even workers. They implement an interface different than dedicated workers and have a different global scope, SharedWorkerGlobalScope.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": {
                    "version_added": false,
                    "notes": "See <a href='https://crbug.com/154571'>bug 154571</a>."
                },
                "edge": "mirror",
                "firefox": {
                    "version_added": "29"
                },
                "firefox_android": {
                    "version_added": "33"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11",
                    "version_removed": "14"
                },
                "safari": [
                    {
                        "version_added": "16"
                    },
                    {
                        "version_added": "5",
                        "version_removed": "7"
                    }
                ],
                "safari_ios": [
                    {
                        "version_added": "16"
                    },
                    {
                        "version_added": "5",
                        "version_removed": "7"
                    }
                ],
                "samsunginternet_android": {
                    "version_added": "4.0",
                    "version_removed": "5.0"
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "SharedWorker"
        }
    ],
    "svg-0": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "svg-0#Inline_SVG_and_MathML_support",
            "slug": "Guide/HTML/HTML5/HTML5_Parser#Inline_SVG_and_MathML_support",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/HTML5_Parser#Inline_SVG_and_MathML_support",
            "summary": "To build websites, you should know about HTML — the fundamental technology used to define the structure of a webpage. HTML is used to specify whether your web content should be recognized as a paragraph, list, heading, link, image, multimedia player, form, or one of many other available elements or even a new element that you define.",
            "support": {
                "chrome": {
                    "version_added": "7"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "37"
                },
                "firefox_android": {
                    "version_added": "37"
                },
                "ie": {
                    "version_added": "10"
                },
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "15"
                },
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": {
                    "version_added": "11.3"
                },
                "samsunginternet_android": {
                    "version_added": "4"
                },
                "webview_android": {
                    "version_added": "4.4"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Structuring the web with HTML"
        }
    ],
    "the-pattern-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "pattern",
            "slug": "HTML/Attributes/pattern",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/pattern",
            "summary": "The pattern attribute specifies a regular expression the form control's value should match. If a non-null value doesn't conform to the constraints set by the pattern value, the ValidityState object's read-only patternMismatch property will be true.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "≤12.1"
                },
                "opera_android": {
                    "version_added": "≤12.1"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "4"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "≤37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "HTML attribute: pattern"
        }
    ],
    "the-xhtml-syntax": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "the-xhtml-syntax#XHTML",
            "slug": "Guide/HTML/XHTML",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/XHTML",
            "summary": "XHTML is a term that was historically used to describe HTML documents written to conform with XML syntax rules.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": {
                    "version_added": "18"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "2"
                },
                "firefox_android": {
                    "version_added": "4"
                },
                "ie": {
                    "version_added": "9"
                },
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": {
                    "version_added": "2"
                },
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "2"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XHTML"
        }
    ],
    "webstorage": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "Web_Storage_API",
            "slug": "API/Web_Storage_API",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API",
            "summary": "The Web Storage API provides mechanisms by which browsers can store key/value pairs, in a much more intuitive fashion than using cookies.",
            "support": {
                "chrome": {
                    "version_added": "4"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.10"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": {
                    "version_added": "6"
                },
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.5"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Web Storage API"
        },
        {
            "engines": [],
            "filename": null,
            "name": "Using_the_Web_Storage_API",
            "slug": "API/Web_Storage_API/Using_the_Web_Storage_API",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API",
            "summary": "The Web Storage API provides mechanisms by which browsers can securely store key/value pairs.",
            "support": null,
            "title": "Using the Web Storage API"
        }
    ],
    "workers": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": null,
            "name": "Web_Workers_API",
            "slug": "API/Web_Workers_API",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API",
            "summary": "Web Workers makes it possible to run a script operation in a background thread separate from the main execution thread of a web application. The advantage of this is that laborious processing can be performed in a separate thread, allowing the main (usually the UI) thread to run without being blocked/slowed down.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": [
                    {
                        "version_added": "12.17.0",
                        "partial_implementation": true,
                        "notes": [
                            "Is a Node <code>EventEmitter</code> instead of DOM <code>EventTarget</code>.",
                            "Worker script environment expects CommonJS modules or ECMAScript modules.",
                            "Must be imported from the <code>worker_threads</code> module."
                        ]
                    },
                    {
                        "version_added": "11.7.0",
                        "partial_implementation": true,
                        "notes": [
                            "Is a Node <code>EventEmitter</code> instead of DOM <code>EventTarget</code>.",
                            "Worker script environment expects CommonJS modules.",
                            "Must be imported from the <code>worker_threads</code> module."
                        ]
                    },
                    {
                        "version_added": "10.5.0",
                        "partial_implementation": true,
                        "notes": [
                            "Is a Node <code>EventEmitter</code> instead of DOM <code>EventTarget</code>.",
                            "Worker script environment expects CommonJS modules.",
                            "Must be imported from the <code>worker_threads</code> module."
                        ],
                        "flags": [
                            {
                                "type": "runtime_flag",
                                "name": "--experimental-worker"
                            }
                        ]
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "10.6"
                },
                "opera_android": {
                    "version_added": "11"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "Web Workers API"
        },
        {
            "engines": [],
            "filename": null,
            "name": "Using_web_workers",
            "slug": "API/Web_Workers_API/Using_web_workers",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers",
            "summary": "Web Workers are a simple means for web content to run scripts in background threads. The worker thread can perform tasks without interfering with the user interface. In addition, they can perform I/O using XMLHttpRequest (although the responseXML and channel attributes are always null) or fetch (with no such restrictions). Once created, a worker can send messages to the JavaScript code that created it by posting messages to an event handler specified by that code (and vice versa).",
            "support": null,
            "title": "Using Web Workers"
        }
    ]
}
