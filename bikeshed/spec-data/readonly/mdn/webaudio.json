{
    "dom-analysernode-analysernode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AnalyserNode.json",
            "name": "AnalyserNode",
            "slug": "API/AnalyserNode/AnalyserNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/AnalyserNode",
            "summary": "The AnalyserNode() constructor of the Web Audio API creates a new AnalyserNode object instance.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AnalyserNode: AnalyserNode() constructor"
        }
    ],
    "dom-analysernode-fftsize": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AnalyserNode.json",
            "name": "fftSize",
            "slug": "API/AnalyserNode/fftSize",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize",
            "summary": "The fftSize property of the AnalyserNode interface is an unsigned long value and represents the window size in samples that is used when performing a Fast Fourier Transform (FFT) to get frequency domain data.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AnalyserNode: fftSize property"
        }
    ],
    "dom-analysernode-frequencybincount": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AnalyserNode.json",
            "name": "frequencyBinCount",
            "slug": "API/AnalyserNode/frequencyBinCount",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/frequencyBinCount",
            "summary": "The frequencyBinCount read-only property of the AnalyserNode interface contains the total number of data points available to AudioContext sampleRate. This is half of the value of the AnalyserNode.fftSize. The two methods' indices have a linear relationship with the frequencies they represent, between 0 and the Nyquist frequency.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AnalyserNode: frequencyBinCount property"
        }
    ],
    "dom-analysernode-getbytefrequencydata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AnalyserNode.json",
            "name": "getByteFrequencyData",
            "slug": "API/AnalyserNode/getByteFrequencyData",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData",
            "summary": "The getByteFrequencyData() method of the AnalyserNode interface copies the current frequency data into a Uint8Array (unsigned byte array) passed into it.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AnalyserNode: getByteFrequencyData() method"
        }
    ],
    "dom-analysernode-getbytetimedomaindata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AnalyserNode.json",
            "name": "getByteTimeDomainData",
            "slug": "API/AnalyserNode/getByteTimeDomainData",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteTimeDomainData",
            "summary": "The getByteTimeDomainData() method of the AnalyserNode Interface copies the current waveform, or time-domain, data into a Uint8Array (unsigned byte array) passed into it.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AnalyserNode: getByteTimeDomainData() method"
        }
    ],
    "dom-analysernode-getfloatfrequencydata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AnalyserNode.json",
            "name": "getFloatFrequencyData",
            "slug": "API/AnalyserNode/getFloatFrequencyData",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getFloatFrequencyData",
            "summary": "The getFloatFrequencyData() method of the AnalyserNode Interface copies the current frequency data into a Float32Array array passed into it. Each array value is a sample, the magnitude of the signal at a particular time.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AnalyserNode: getFloatFrequencyData() method"
        }
    ],
    "dom-analysernode-getfloattimedomaindata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AnalyserNode.json",
            "name": "getFloatTimeDomainData",
            "slug": "API/AnalyserNode/getFloatTimeDomainData",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getFloatTimeDomainData",
            "summary": "The getFloatTimeDomainData() method of the AnalyserNode Interface copies the current waveform, or time-domain, data into a Float32Array array passed into it. Each array value is a sample, the magnitude of the signal at a particular time.",
            "support": {
                "chrome": {
                    "version_added": "35"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "30"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AnalyserNode: getFloatTimeDomainData() method"
        }
    ],
    "dom-analysernode-maxdecibels": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AnalyserNode.json",
            "name": "maxDecibels",
            "slug": "API/AnalyserNode/maxDecibels",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/maxDecibels",
            "summary": "The maxDecibels property of the AnalyserNode interface is a double value representing the maximum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values — basically, this specifies the maximum value for the range of results when using getByteFrequencyData().",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AnalyserNode: maxDecibels property"
        }
    ],
    "dom-analysernode-mindecibels": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AnalyserNode.json",
            "name": "minDecibels",
            "slug": "API/AnalyserNode/minDecibels",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/minDecibels",
            "summary": "The minDecibels property of the AnalyserNode interface is a double value representing the minimum power value in the scaling range for the FFT analysis data, for conversion to unsigned byte values — basically, this specifies the minimum value for the range of results when using getByteFrequencyData().",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AnalyserNode: minDecibels property"
        }
    ],
    "dom-analysernode-smoothingtimeconstant": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AnalyserNode.json",
            "name": "smoothingTimeConstant",
            "slug": "API/AnalyserNode/smoothingTimeConstant",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/smoothingTimeConstant",
            "summary": "The smoothingTimeConstant property of the AnalyserNode interface is a double value representing the averaging constant with the last analysis frame. It's basically an average between the current buffer and the last buffer the AnalyserNode processed, and results in a much smoother set of value changes over time.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AnalyserNode: smoothingTimeConstant property"
        }
    ],
    "AnalyserNode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AnalyserNode.json",
            "name": "AnalyserNode",
            "slug": "API/AnalyserNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode",
            "summary": "The AnalyserNode interface represents a node able to provide real-time frequency and time-domain analysis information. It is an AudioNode that passes the audio stream unchanged from the input to the output, but allows you to take the generated data, process it, and create audio visualizations.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AnalyserNode"
        }
    ],
    "dom-audiobuffer-audiobuffer": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioBuffer.json",
            "name": "AudioBuffer",
            "slug": "API/AudioBuffer/AudioBuffer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/AudioBuffer",
            "summary": "The AudioBuffer constructor of the Web Audio API creates a new AudioBuffer object.",
            "support": {
                "chrome": {
                    "version_added": "55",
                    "notes": "The <code>context</code> parameter was supported up until version 57, but has now been removed."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": {
                    "version_added": "42",
                    "notes": "The <code>context</code> parameter was supported up until version 44, but has now been removed."
                },
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "6.0",
                    "notes": "The <code>context</code> parameter was supported up until Samsung Internet 7.0, but has now been removed."
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79",
                    "notes": "The <code>context</code> parameter was supported up until version 57, but has now been removed."
                }
            },
            "title": "AudioBuffer: AudioBuffer() constructor"
        }
    ],
    "dom-audiobuffer-copyfromchannel": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioBuffer.json",
            "name": "copyFromChannel",
            "slug": "API/AudioBuffer/copyFromChannel",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/copyFromChannel",
            "summary": "The copyFromChannel() method of the AudioBuffer interface copies the audio sample data from the specified channel of the AudioBuffer to a specified Float32Array.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "27"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioBuffer: copyFromChannel() method"
        }
    ],
    "dom-audiobuffer-copytochannel": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioBuffer.json",
            "name": "copyToChannel",
            "slug": "API/AudioBuffer/copyToChannel",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/copyToChannel",
            "summary": "The copyToChannel() method of the AudioBuffer interface copies the samples to the specified channel of the AudioBuffer, from the source array.",
            "support": {
                "chrome": {
                    "version_added": "43"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "27"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioBuffer: copyToChannel() method"
        }
    ],
    "dom-audiobuffer-duration": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioBuffer.json",
            "name": "duration",
            "slug": "API/AudioBuffer/duration",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/duration",
            "summary": "The duration property of the AudioBuffer interface returns a double representing the duration, in seconds, of the PCM data stored in the buffer.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioBuffer: duration property"
        }
    ],
    "dom-audiobuffer-getchanneldata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioBuffer.json",
            "name": "getChannelData",
            "slug": "API/AudioBuffer/getChannelData",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/getChannelData",
            "summary": "The getChannelData() method of the AudioBuffer Interface returns a Float32Array containing the PCM data associated with the channel, defined by the channel parameter (with 0 representing the first channel).",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioBuffer: getChannelData() method"
        }
    ],
    "dom-audiobuffer-length": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioBuffer.json",
            "name": "length",
            "slug": "API/AudioBuffer/length",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/length",
            "summary": "The length property of the AudioBuffer interface returns an integer representing the length, in sample-frames, of the PCM data stored in the buffer.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioBuffer: length property"
        }
    ],
    "dom-audiobuffer-numberofchannels": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioBuffer.json",
            "name": "numberOfChannels",
            "slug": "API/AudioBuffer/numberOfChannels",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/numberOfChannels",
            "summary": "The numberOfChannels property of the AudioBuffer interface returns an integer representing the number of discrete audio channels described by the PCM data stored in the buffer.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioBuffer: numberOfChannels property"
        }
    ],
    "dom-audiobuffer-samplerate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioBuffer.json",
            "name": "sampleRate",
            "slug": "API/AudioBuffer/sampleRate",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer/sampleRate",
            "summary": "The sampleRate property of the AudioBuffer interface returns a float representing the sample rate, in samples per second, of the PCM data stored in the buffer.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioBuffer: sampleRate property"
        }
    ],
    "AudioBuffer": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioBuffer.json",
            "name": "AudioBuffer",
            "slug": "API/AudioBuffer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer",
            "summary": "The AudioBuffer interface represents a short audio asset residing in memory, created from an audio file using the AudioContext.decodeAudioData() method, or from raw data using AudioContext.createBuffer(). Once put into an AudioBuffer, the audio can then be played by being passed into an AudioBufferSourceNode.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioBuffer"
        }
    ],
    "dom-audiobuffersourcenode-constructor-audiobuffersourcenode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioBufferSourceNode.json",
            "name": "AudioBufferSourceNode",
            "slug": "API/AudioBufferSourceNode/AudioBufferSourceNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/AudioBufferSourceNode",
            "summary": "The AudioBufferSourceNode() constructor creates a new AudioBufferSourceNode object instance.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioBufferSourceNode: AudioBufferSourceNode() constructor"
        }
    ],
    "dom-audiobuffersourcenode-buffer": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioBufferSourceNode.json",
            "name": "buffer",
            "slug": "API/AudioBufferSourceNode/buffer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/buffer",
            "summary": "The buffer property of the AudioBufferSourceNode interface provides the ability to play back audio using an AudioBuffer as the source of the sound data.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25",
                    "notes": "Firefox currently handles the value <code>null</code> incorrectly. Instead of producing a node that generates a single channel of silence, the node becomes unusable and will be ignored if you attempt to connect it to anything."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioBufferSourceNode: buffer property"
        }
    ],
    "dom-audiobuffersourcenode-detune": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioBufferSourceNode.json",
            "name": "detune",
            "slug": "API/AudioBufferSourceNode/detune",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/detune",
            "summary": "The detune property of the AudioBufferSourceNode interface is a k-rate AudioParam representing detuning of oscillation in cents.",
            "support": {
                "chrome": {
                    "version_added": "44"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "13"
                },
                "firefox": {
                    "version_added": "40"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioBufferSourceNode: detune property"
        }
    ],
    "dom-audiobuffersourcenode-loop": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioBufferSourceNode.json",
            "name": "loop",
            "slug": "API/AudioBufferSourceNode/loop",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loop",
            "summary": "The loop property of the AudioBufferSourceNode interface is a Boolean indicating if the audio asset must be replayed when the end of the AudioBuffer is reached.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioBufferSourceNode: loop property"
        }
    ],
    "dom-audiobuffersourcenode-loopend": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioBufferSourceNode.json",
            "name": "loopEnd",
            "slug": "API/AudioBufferSourceNode/loopEnd",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopEnd",
            "summary": "The loopEnd property of the AudioBufferSourceNode interface specifies is a floating point number specifying, in seconds, at what offset into playing the AudioBuffer playback should loop back to the time indicated by the loopStart property. This is only used if the loop property is true.",
            "support": {
                "chrome": {
                    "version_added": "24"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioBufferSourceNode: loopEnd property"
        }
    ],
    "dom-audiobuffersourcenode-loopstart": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioBufferSourceNode.json",
            "name": "loopStart",
            "slug": "API/AudioBufferSourceNode/loopStart",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopStart",
            "summary": "The loopStart property of the AudioBufferSourceNode interface is a floating-point value indicating, in seconds, where in the AudioBuffer the restart of the play must happen.",
            "support": {
                "chrome": {
                    "version_added": "24"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioBufferSourceNode: loopStart property"
        }
    ],
    "dom-audiobuffersourcenode-playbackrate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioBufferSourceNode.json",
            "name": "playbackRate",
            "slug": "API/AudioBufferSourceNode/playbackRate",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/playbackRate",
            "summary": "The playbackRate property of the AudioBufferSourceNode interface Is a k-rate AudioParam that defines the speed at which the audio asset will be played.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioBufferSourceNode: playbackRate property"
        }
    ],
    "dom-audiobuffersourcenode-start": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioBufferSourceNode.json",
            "name": "start",
            "slug": "API/AudioBufferSourceNode/start",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/start",
            "summary": "The start() method of the AudioBufferSourceNode Interface is used to schedule playback of the audio data contained in the buffer, or to begin playback immediately.",
            "support": {
                "chrome": {
                    "version_added": "24"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioBufferSourceNode: start() method"
        }
    ],
    "AudioBufferSourceNode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioBufferSourceNode.json",
            "name": "AudioBufferSourceNode",
            "slug": "API/AudioBufferSourceNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode",
            "summary": "The AudioBufferSourceNode interface is an AudioScheduledSourceNode which represents an audio source consisting of in-memory audio data, stored in an AudioBuffer.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioBufferSourceNode"
        }
    ],
    "dom-audiocontext-audiocontext": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioContext.json",
            "name": "AudioContext",
            "slug": "API/AudioContext/AudioContext",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/AudioContext",
            "summary": "The AudioContext() constructor creates a new AudioContext object which represents an audio-processing graph, built from audio modules linked together, each represented by an AudioNode.",
            "support": {
                "chrome": [
                    {
                        "version_added": "35",
                        "notes": [
                            "Before Chrome 66, each tab is limited to 6 audio contexts in Chrome; attempting to create more will throw a <code>DOMException</code>. For details see <a href='https://developer.mozilla.org/docs/Web/API/AudioContext/AudioContext#Per-tab_audio_context_limitation_in_Chrome'>Per-tab audio context limitation in Chrome</a>.",
                            "If <code>latencyHint</code> isn't valid, Chrome throws a <code>TypeError</code> exception. See <a href='https://developer.mozilla.org/docs/Web/API/AudioContext/AudioContext#Non-standard_exceptions_in_Chrome'>Non-standard exceptions in Chrome</a> for details."
                        ]
                    },
                    {
                        "version_added": "14",
                        "version_removed": "57",
                        "prefix": "webkit"
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "22",
                        "notes": [
                            "Before Opera 53, each tab is limited to 6 audio contexts in Opera; attempting to create more will throw a <code>DOMException</code>. For details see <a href='https://developer.mozilla.org/docs/Web/API/AudioContext/AudioContext#Per-tab_audio_context_limitation_in_Chrome'>Per-tab audio context limitation in Chrome</a>.",
                            "If <code>latencyHint</code> isn't valid, Opera throws a <code>TypeError</code> exception. See <a href='https://developer.mozilla.org/docs/Web/API/AudioContext/AudioContext#Non-standard_exceptions_in_Chrome'>Non-standard exceptions in Chrome</a> for details."
                        ]
                    },
                    {
                        "version_added": "15",
                        "version_removed": "44",
                        "prefix": "webkit"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "22",
                        "notes": [
                            "Before Opera Android 47, each tab is limited to 6 audio contexts in Opera; attempting to create more will throw a <code>DOMException</code>. For details see <a href='https://developer.mozilla.org/docs/Web/API/AudioContext/AudioContext#Per-tab_audio_context_limitation_in_Chrome'>Per-tab audio context limitation in Chrome</a>.",
                            "If <code>latencyHint</code> isn't valid, Opera throws a <code>TypeError</code> exception. See <a href='https://developer.mozilla.org/docs/Web/API/AudioContext/AudioContext#Non-standard_exceptions_in_Chrome'>Non-standard exceptions in Chrome</a> for details."
                        ]
                    },
                    {
                        "version_added": "14",
                        "version_removed": "43",
                        "prefix": "webkit"
                    }
                ],
                "safari": [
                    {
                        "version_added": "14.1"
                    },
                    {
                        "version_added": "6",
                        "prefix": "webkit"
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": [
                    {
                        "version_added": "3.0",
                        "notes": [
                            "Before Samsung Internet 9.0, each tab is limited to 6 audio contexts in Samsung Internet; attempting to create more will throw a <code>DOMException</code>. For details see <a href='https://developer.mozilla.org/docs/Web/API/AudioContext/AudioContext#Per-tab_audio_context_limitation_in_Chrome'>Per-tab audio context limitation in Chrome</a>.",
                            "If <code>latencyHint</code> isn't valid, Samsung Internet throws a <code>TypeError</code> exception. See <a href='https://developer.mozilla.org/docs/Web/API/AudioContext/AudioContext#Non-standard_exceptions_in_Chrome'>Non-standard exceptions in Chrome</a> for details."
                        ]
                    },
                    {
                        "version_added": "1.0",
                        "version_removed": "7.0",
                        "prefix": "webkit"
                    }
                ],
                "webview_android": [
                    {
                        "version_added": "37",
                        "notes": [
                            "Before WebView 66, each tab is limited to 6 audio contexts in WebView; attempting to create more will throw a <code>DOMException</code>. For details see <a href='https://developer.mozilla.org/docs/Web/API/AudioContext/AudioContext#Per-tab_audio_context_limitation_in_Chrome'>Per-tab audio context limitation in Chrome</a>.",
                            "If <code>latencyHint</code> isn't valid, WebView throws a <code>TypeError</code> exception. See <a href='https://developer.mozilla.org/docs/Web/API/AudioContext/AudioContext#Non-standard_exceptions_in_Chrome'>Non-standard exceptions in Chrome</a> for details."
                        ]
                    },
                    {
                        "version_added": "37",
                        "version_removed": "57",
                        "prefix": "webkit"
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79",
                        "notes": [
                            "Before Chrome 66, each tab is limited to 6 audio contexts in Chrome; attempting to create more will throw a <code>DOMException</code>. For details see <a href='https://developer.mozilla.org/docs/Web/API/AudioContext/AudioContext#Per-tab_audio_context_limitation_in_Chrome'>Per-tab audio context limitation in Chrome</a>.",
                            "If <code>latencyHint</code> isn't valid, Chrome throws a <code>TypeError</code> exception. See <a href='https://developer.mozilla.org/docs/Web/API/AudioContext/AudioContext#Non-standard_exceptions_in_Chrome'>Non-standard exceptions in Chrome</a> for details."
                        ]
                    },
                    {
                        "version_added": false,
                        "version_removed": "57",
                        "prefix": "webkit"
                    }
                ]
            },
            "title": "AudioContext: AudioContext() constructor"
        }
    ],
    "dom-audiocontext-baselatency": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioContext.json",
            "name": "baseLatency",
            "slug": "API/AudioContext/baseLatency",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/baseLatency",
            "summary": "The baseLatency read-only property of the AudioContext interface returns a double that represents the number of seconds of processing latency incurred by the AudioContext passing an audio buffer from the AudioDestinationNode — i.e. the end of the audio graph — into the host system's audio subsystem ready for playing.",
            "support": {
                "chrome": {
                    "version_added": "58"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "70"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioContext: baseLatency property"
        }
    ],
    "dom-audiocontext-close": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioContext.json",
            "name": "close",
            "slug": "API/AudioContext/close",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/close",
            "summary": "The close() method of the AudioContext Interface closes the audio context, releasing any system audio resources that it uses.",
            "support": {
                "chrome": {
                    "version_added": "42"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "40"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioContext: close() method"
        }
    ],
    "dom-audiocontext-createmediaelementsource": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioContext.json",
            "name": "createMediaElementSource",
            "slug": "API/AudioContext/createMediaElementSource",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaElementSource",
            "summary": "The createMediaElementSource() method of the AudioContext Interface is used to create a new MediaElementAudioSourceNode object, given an existing HTML <audio> or <video> element, the audio from which can then be played and manipulated.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioContext: createMediaElementSource() method"
        }
    ],
    "dom-audiocontext-createmediastreamdestination": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioContext.json",
            "name": "createMediaStreamDestination",
            "slug": "API/AudioContext/createMediaStreamDestination",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamDestination",
            "summary": "The createMediaStreamDestination() method of the AudioContext Interface is used to create a new MediaStreamAudioDestinationNode object associated with a WebRTC MediaStream representing an audio stream, which may be stored in a local file or sent to another computer.",
            "support": {
                "chrome": {
                    "version_added": "25"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioContext: createMediaStreamDestination() method"
        }
    ],
    "dom-audiocontext-createmediastreamsource": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioContext.json",
            "name": "createMediaStreamSource",
            "slug": "API/AudioContext/createMediaStreamSource",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamSource",
            "summary": "The createMediaStreamSource() method of the AudioContext Interface is used to create a new MediaStreamAudioSourceNode object, given a media stream (say, from a MediaDevices.getUserMedia instance), the audio from which can then be played and manipulated.",
            "support": {
                "chrome": {
                    "version_added": "22"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioContext: createMediaStreamSource() method"
        }
    ],
    "dom-audiocontext-createmediastreamtracksource": [
        {
            "engines": [
                "gecko"
            ],
            "filename": "api/AudioContext.json",
            "name": "createMediaStreamTrackSource",
            "slug": "API/AudioContext/createMediaStreamTrackSource",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamTrackSource",
            "summary": "The createMediaStreamTrackSource() method of the AudioContext interface creates and returns a MediaStreamTrackAudioSourceNode which represents an audio source whose data comes from the specified MediaStreamTrack.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "68",
                    "notes": "Firefox 68 implements the updated standard's definition of the \"first\" audio track; now the first track is the one whose ID comes first lexicographically."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": "AudioContext: createMediaStreamTrackSource() method"
        }
    ],
    "dom-audiocontext-getoutputtimestamp": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioContext.json",
            "name": "getOutputTimestamp",
            "slug": "API/AudioContext/getOutputTimestamp",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/getOutputTimestamp",
            "summary": "The getOutputTimestamp() method of the AudioContext interface returns a new AudioTimestamp object containing two audio timestamp values relating to the current audio context.",
            "support": {
                "chrome": {
                    "version_added": "57"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "70"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioContext: getOutputTimestamp() method"
        }
    ],
    "dom-audiocontext-outputlatency": [
        {
            "engines": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioContext.json",
            "name": "outputLatency",
            "slug": "API/AudioContext/outputLatency",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/outputLatency",
            "summary": "The outputLatency read-only property of the AudioContext Interface provides an estimation of the output latency of the current audio context.",
            "support": {
                "chrome": {
                    "version_added": "102"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "70"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "102"
                }
            },
            "title": "AudioContext: outputLatency property"
        }
    ],
    "dom-audiocontext-resume": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioContext.json",
            "name": "resume",
            "slug": "API/AudioContext/resume",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/resume",
            "summary": "The resume() method of the AudioContext interface resumes the progression of time in an audio context that has previously been suspended.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "40"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioContext: resume() method"
        }
    ],
    "dom-audiocontext-setsinkid": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/AudioContext.json",
            "name": "setSinkId",
            "slug": "API/AudioContext/setSinkId",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/setSinkId",
            "summary": "The setSinkId() method of the AudioContext interface sets the output audio device for the AudioContext. If a sink ID is not explicitly set, the default system audio output device will be used.",
            "support": {
                "chrome": {
                    "version_added": "110"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "110"
                }
            },
            "title": "AudioContext: setSinkId() method"
        }
    ],
    "eventdef-audiocontext-sinkchange": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/AudioContext.json",
            "name": "sinkchange_event",
            "slug": "API/AudioContext/sinkchange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/sinkchange_event",
            "summary": "The sinkchange event of the AudioContext interface is fired when the output audio device (and therefore, the AudioContext.sinkId) has changed.",
            "support": {
                "chrome": {
                    "version_added": "110"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "110"
                }
            },
            "title": "AudioContext: sinkchange event"
        }
    ],
    "dom-audiocontext-sinkid": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/AudioContext.json",
            "name": "sinkId",
            "slug": "API/AudioContext/sinkId",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/sinkId",
            "summary": "The sinkId read-only property of the AudioContext interface returns the sink ID of the current output audio device.",
            "support": {
                "chrome": {
                    "version_added": "110"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "110"
                }
            },
            "title": "AudioContext: sinkId property"
        }
    ],
    "dom-audiocontext-suspend": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioContext.json",
            "name": "suspend",
            "slug": "API/AudioContext/suspend",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/suspend",
            "summary": "The suspend() method of the AudioContext Interface suspends the progression of time in the audio context, temporarily halting audio hardware access and reducing CPU/battery usage in the process — this is useful if you want an application to power down the audio hardware when it will not be using an audio context for a while.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "40"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioContext: suspend() method"
        }
    ],
    "AudioContext": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioContext.json",
            "name": "AudioContext",
            "slug": "API/AudioContext",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioContext",
            "summary": "The AudioContext interface represents an audio-processing graph built from audio modules linked together, each represented by an AudioNode.",
            "support": {
                "chrome": [
                    {
                        "version_added": "35"
                    },
                    {
                        "version_added": "14",
                        "version_removed": "57",
                        "prefix": "webkit"
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": [
                    {
                        "version_added": "14.1"
                    },
                    {
                        "version_added": "6",
                        "version_removed": "14.1",
                        "prefix": "webkit"
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "57",
                        "prefix": "webkit"
                    }
                ]
            },
            "title": "AudioContext"
        }
    ],
    "dom-audiodestinationnode-maxchannelcount": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioDestinationNode.json",
            "name": "maxChannelCount",
            "slug": "API/AudioDestinationNode/maxChannelCount",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode/maxChannelCount",
            "summary": "The maxchannelCount property of the AudioDestinationNode interface is an unsigned long defining the maximum amount of channels that the physical device can handle.",
            "support": {
                "chrome": {
                    "version_added": "27"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": [
                    {
                        "version_added": "14.1"
                    },
                    {
                        "version_added": "7",
                        "version_removed": "14.1",
                        "partial_implementation": true,
                        "notes": "This property always returns <code>0</code>."
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioDestinationNode: maxChannelCount property"
        }
    ],
    "AudioDestinationNode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioDestinationNode.json",
            "name": "AudioDestinationNode",
            "slug": "API/AudioDestinationNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioDestinationNode",
            "summary": "The AudioDestinationNode interface represents the end destination of an audio graph in a given context — usually the speakers of your device. It can also be the node that will \"record\" the audio data when used with an OfflineAudioContext.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioDestinationNode"
        }
    ],
    "dom-audiolistener-forwardx": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "api/AudioListener.json",
            "name": "forwardX",
            "slug": "API/AudioListener/forwardX",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/forwardX",
            "summary": "The forwardX read-only property of the AudioListener interface is an AudioParam representing the x value of the direction vector defining the forward direction the listener is pointing in.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false,
                    "notes": "Supports a deprecated way of setting orientation - the <code>setOrientation()</code> method."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioListener: forwardX property"
        }
    ],
    "dom-audiolistener-forwardy": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "api/AudioListener.json",
            "name": "forwardY",
            "slug": "API/AudioListener/forwardY",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/forwardY",
            "summary": "The forwardY read-only property of the AudioListener interface is an AudioParam representing the y value of the direction vector defining the forward direction the listener is pointing in.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false,
                    "notes": "Supports a deprecated way of setting orientation - the <code>setOrientation()</code> method."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioListener: forwardY property"
        }
    ],
    "dom-audiolistener-forwardz": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "api/AudioListener.json",
            "name": "forwardZ",
            "slug": "API/AudioListener/forwardZ",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/forwardZ",
            "summary": "The forwardZ read-only property of the AudioListener interface is an AudioParam representing the z value of the direction vector defining the forward direction the listener is pointing in.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false,
                    "notes": "Supports a deprecated way of setting orientation - the <code>setOrientation()</code> method."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioListener: forwardZ property"
        }
    ],
    "dom-audiolistener-positionx": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "api/AudioListener.json",
            "name": "positionX",
            "slug": "API/AudioListener/positionX",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/positionX",
            "summary": "The positionX read-only property of the AudioListener interface is an AudioParam representing the x position of the listener in 3D cartesian space.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false,
                    "notes": "Supports a deprecated way of setting orientation - the <code>setOrientation()</code> method."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioListener: positionX property"
        }
    ],
    "dom-audiolistener-positiony": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "api/AudioListener.json",
            "name": "positionY",
            "slug": "API/AudioListener/positionY",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/positionY",
            "summary": "The positionY read-only property of the AudioListener interface is an AudioParam representing the y position of the listener in 3D cartesian space.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false,
                    "notes": "Supports a deprecated way of setting orientation - the <code>setOrientation()</code> method."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioListener: positionY property"
        }
    ],
    "dom-audiolistener-positionz": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "api/AudioListener.json",
            "name": "positionZ",
            "slug": "API/AudioListener/positionZ",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/positionZ",
            "summary": "The positionZ read-only property of the AudioListener interface is an AudioParam representing the z position of the listener in 3D cartesian space.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false,
                    "notes": "Supports a deprecated way of setting orientation - the <code>setOrientation()</code> method."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioListener: positionZ property"
        }
    ],
    "dom-audiolistener-upx": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "api/AudioListener.json",
            "name": "upX",
            "slug": "API/AudioListener/upX",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/upX",
            "summary": "The upX read-only property of the AudioListener interface is an AudioParam representing the x value of the direction vector defining the up direction the listener is pointing in.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false,
                    "notes": "Supports a deprecated way of setting orientation - the <code>setOrientation()</code> method."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioListener: upX property"
        }
    ],
    "dom-audiolistener-upy": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "api/AudioListener.json",
            "name": "upY",
            "slug": "API/AudioListener/upY",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/upY",
            "summary": "The upY read-only property of the AudioListener interface is an AudioParam representing the y value of the direction vector defining the up direction the listener is pointing in.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false,
                    "notes": "Supports a deprecated way of setting orientation - the <code>setOrientation()</code> method."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioListener: upY property"
        }
    ],
    "dom-audiolistener-upz": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "api/AudioListener.json",
            "name": "upZ",
            "slug": "API/AudioListener/upZ",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioListener/upZ",
            "summary": "The upZ read-only property of the AudioListener interface is an AudioParam representing the z value of the direction vector defining the up direction the listener is pointing in.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false,
                    "notes": "Supports a deprecated way of setting orientation - the <code>setOrientation()</code> method."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioListener: upZ property"
        }
    ],
    "AudioListener": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioListener.json",
            "name": "AudioListener",
            "slug": "API/AudioListener",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioListener",
            "summary": "The AudioListener interface represents the position and orientation of the unique person listening to the audio scene, and is used in audio spatialization. All PannerNodes spatialize in relation to the AudioListener stored in the BaseAudioContext.listener attribute.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioListener"
        }
    ],
    "dom-audionode-channelcount": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioNode.json",
            "name": "channelCount",
            "slug": "API/AudioNode/channelCount",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelCount",
            "summary": "The channelCount property of the AudioNode interface represents an integer used to determine how many channels are used when up-mixing and down-mixing connections to any inputs to the node.",
            "support": {
                "chrome": {
                    "version_added": "27"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioNode: channelCount property"
        }
    ],
    "dom-audionode-channelcountmode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioNode.json",
            "name": "channelCountMode",
            "slug": "API/AudioNode/channelCountMode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelCountMode",
            "summary": "The channelCountMode property of the AudioNode interface represents an enumerated value describing the way channels must be matched between the node's inputs and outputs.",
            "support": {
                "chrome": {
                    "version_added": "27"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioNode: channelCountMode property"
        }
    ],
    "dom-audionode-channelinterpretation": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioNode.json",
            "name": "channelInterpretation",
            "slug": "API/AudioNode/channelInterpretation",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelInterpretation",
            "summary": "The channelInterpretation property of the AudioNode interface represents an enumerated value describing how input channels are mapped to output channels when the number of inputs/outputs is different. For example, this setting defines how a mono input will be up-mixed to a stereo or 5.1 channel output, or how a quad channel input will be down-mixed to a stereo or mono output.",
            "support": {
                "chrome": {
                    "version_added": "27"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioNode: channelInterpretation property"
        }
    ],
    "dom-audionode-connect": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioNode.json",
            "name": "connect",
            "slug": "API/AudioNode/connect",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/connect",
            "summary": "The connect() method of the AudioNode interface lets you connect one of the node's outputs to a target, which may be either another AudioNode (thereby directing the sound data to the specified node) or an AudioParam, so that the node's output data is automatically used to change the value of that parameter over time.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioNode: connect() method"
        }
    ],
    "dom-audionode-connect-destinationparam-output": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioNode.json",
            "name": "connect",
            "slug": "API/AudioNode/connect",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/connect",
            "summary": "The connect() method of the AudioNode interface lets you connect one of the node's outputs to a target, which may be either another AudioNode (thereby directing the sound data to the specified node) or an AudioParam, so that the node's output data is automatically used to change the value of that parameter over time.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioNode: connect() method"
        }
    ],
    "dom-audionode-context": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioNode.json",
            "name": "context",
            "slug": "API/AudioNode/context",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/context",
            "summary": "The read-only context property of the AudioNode interface returns the associated BaseAudioContext, that is the object representing the processing graph the node is participating in.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioNode: context property"
        }
    ],
    "dom-audionode-disconnect": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioNode.json",
            "name": "disconnect",
            "slug": "API/AudioNode/disconnect",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect",
            "summary": "The disconnect() method of the AudioNode interface lets you disconnect one or more nodes from the node on which the method is called.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioNode: disconnect() method"
        }
    ],
    "dom-audionode-numberofinputs": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioNode.json",
            "name": "numberOfInputs",
            "slug": "API/AudioNode/numberOfInputs",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/numberOfInputs",
            "summary": "The numberOfInputs property of the AudioNode interface returns the number of inputs feeding the node. Source nodes are defined as nodes having a numberOfInputs property with a value of 0.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioNode: numberOfInputs property"
        }
    ],
    "dom-audionode-numberofoutputs": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioNode.json",
            "name": "numberOfOutputs",
            "slug": "API/AudioNode/numberOfOutputs",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/numberOfOutputs",
            "summary": "The numberOfOutputs property of the AudioNode interface returns the number of outputs coming out of the node. Destination nodes — like AudioDestinationNode — have a value of 0 for this attribute.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioNode: numberOfOutputs property"
        }
    ],
    "AudioNode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioNode.json",
            "name": "AudioNode",
            "slug": "API/AudioNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioNode",
            "summary": "The AudioNode interface is a generic interface for representing an audio processing module.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioNode"
        }
    ],
    "dom-audioparam-cancelandholdattime": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "api/AudioParam.json",
            "name": "cancelAndHoldAtTime",
            "slug": "API/AudioParam/cancelAndHoldAtTime",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/cancelAndHoldAtTime",
            "summary": "The cancelAndHoldAtTime() property of the AudioParam interface cancels all scheduled future changes to the AudioParam but holds its value at a given time until further changes are made using other methods.",
            "support": {
                "chrome": {
                    "version_added": "57"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioParam: cancelAndHoldAtTime() method"
        }
    ],
    "dom-audioparam-cancelscheduledvalues": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioParam.json",
            "name": "cancelScheduledValues",
            "slug": "API/AudioParam/cancelScheduledValues",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/cancelScheduledValues",
            "summary": "The cancelScheduledValues() method of the AudioParam Interface cancels all scheduled future changes to the AudioParam.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioParam: cancelScheduledValues() method"
        }
    ],
    "dom-audioparam-defaultvalue": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioParam.json",
            "name": "defaultValue",
            "slug": "API/AudioParam/defaultValue",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/defaultValue",
            "summary": "The defaultValue read-only property of the AudioParam interface represents the initial value of the attributes as defined by the specific AudioNode creating the AudioParam.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioParam: defaultValue property"
        }
    ],
    "dom-audioparam-exponentialramptovalueattime": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "partial": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioParam.json",
            "name": "exponentialRampToValueAtTime",
            "slug": "API/AudioParam/exponentialRampToValueAtTime",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/exponentialRampToValueAtTime",
            "summary": "The exponentialRampToValueAtTime() method of the AudioParam Interface schedules a gradual exponential change in the value of the AudioParam. The change starts at the time specified for the previous event, follows an exponential ramp to the new value given in the value parameter, and reaches the new value at the time given in the endTime parameter.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18",
                    "partial_implementation": true,
                    "notes": "This sets the target volume at the specified time, but it doesn’t ramp to it, causing this function to behave like <code>setValueAtTime()</code>."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25",
                    "partial_implementation": true,
                    "notes": "Does not work (see <a href='https://bugzil.la/1171438'>bug 1171438</a> and <a href='https://bugzil.la/1567777'>bug 1567777</a>)."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioParam: exponentialRampToValueAtTime() method"
        }
    ],
    "dom-audioparam-linearramptovalueattime": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "partial": [
                "blink",
                "gecko"
            ],
            "filename": "api/AudioParam.json",
            "name": "linearRampToValueAtTime",
            "slug": "API/AudioParam/linearRampToValueAtTime",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/linearRampToValueAtTime",
            "summary": "The linearRampToValueAtTime() method of the AudioParam Interface schedules a gradual linear change in the value of the AudioParam. The change starts at the time specified for the previous event, follows a linear ramp to the new value given in the value parameter, and reaches the new value at the time given in the endTime parameter.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": {
                    "version_added": "18",
                    "partial_implementation": true,
                    "notes": "This sets the target volume at the specified time, but it doesn’t ramp to it, causing this function to behave like <code>setValueAtTime()</code>."
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25",
                    "partial_implementation": true,
                    "notes": "Does not work (see <a href='https://bugzil.la/1171438'>bug 1171438</a> and <a href='https://bugzil.la/1567777'>bug 1567777</a>)."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioParam: linearRampToValueAtTime() method"
        }
    ],
    "dom-audioparam-maxvalue": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioParam.json",
            "name": "maxValue",
            "slug": "API/AudioParam/maxValue",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/maxValue",
            "summary": "The maxValue read-only property of the AudioParam interface represents the maximum possible value for the parameter's nominal (effective) range.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioParam: maxValue property"
        }
    ],
    "dom-audioparam-minvalue": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioParam.json",
            "name": "minValue",
            "slug": "API/AudioParam/minValue",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/minValue",
            "summary": "The minValue read-only property of the AudioParam interface represents the minimum possible value for the parameter's nominal (effective) range.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioParam: minValue property"
        }
    ],
    "dom-audioparam-settargetattime": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioParam.json",
            "name": "setTargetAtTime",
            "slug": "API/AudioParam/setTargetAtTime",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/setTargetAtTime",
            "summary": "The setTargetAtTime() method of the AudioParam interface schedules the start of a gradual change to the AudioParam value. This is useful for decay or release portions of ADSR envelopes.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioParam: setTargetAtTime() method"
        }
    ],
    "dom-audioparam-setvalueattime": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioParam.json",
            "name": "setValueAtTime",
            "slug": "API/AudioParam/setValueAtTime",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/setValueAtTime",
            "summary": "The setValueAtTime() method of the AudioParam interface schedules an instant change to the AudioParam value at a precise time, as measured against AudioContext.currentTime. The new value is given in the value parameter.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioParam: setValueAtTime() method"
        }
    ],
    "dom-audioparam-setvaluecurveattime": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioParam.json",
            "name": "setValueCurveAtTime",
            "slug": "API/AudioParam/setValueCurveAtTime",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/setValueCurveAtTime",
            "summary": "The setValueCurveAtTime() method of the AudioParam interface schedules the parameter's value to change following a curve defined by a list of values.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioParam: setValueCurveAtTime() method"
        }
    ],
    "dom-audioparam-value": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioParam.json",
            "name": "value",
            "slug": "API/AudioParam/value",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam/value",
            "summary": "The Web Audio API's AudioParam interface property value gets or sets the value of this AudioParam at the current time. Initially, the value is set to AudioParam.defaultValue.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25",
                    "notes": "Before Firefox 69, <code>value</code> did not take into account scheduled or gradiated changes to the parameter's value; instead, only explicitly set values were returned."
                },
                "firefox_android": {
                    "version_added": "25",
                    "notes": "Firefox for Android does not currently take into account scheduled or gradiated changes to the parameter's value; only the initial value or the most recent explicitly set value is returned."
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioParam: value property"
        }
    ],
    "AudioParam": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioParam.json",
            "name": "AudioParam",
            "slug": "API/AudioParam",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParam",
            "summary": "The Web Audio API's AudioParam interface represents an audio-related parameter, usually a parameter of an AudioNode (such as GainNode.gain).",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioParam"
        }
    ],
    "audioparammap": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioParamMap.json",
            "name": "AudioParamMap",
            "slug": "API/AudioParamMap",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioParamMap",
            "summary": "The AudioParamMap interface of the Web Audio API represents an iterable and read-only set of multiple audio parameters.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "76"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioParamMap"
        }
    ],
    "dom-audioscheduledsourcenode-onended": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioScheduledSourceNode.json",
            "name": "ended_event",
            "slug": "API/AudioScheduledSourceNode/ended_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/ended_event",
            "summary": "The ended event of the AudioScheduledSourceNode interface is fired when the source node has stopped playing.",
            "support": {
                "chrome": {
                    "version_added": "30"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioScheduledSourceNode: ended event"
        }
    ],
    "dom-audioscheduledsourcenode-start": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioScheduledSourceNode.json",
            "name": "start",
            "slug": "API/AudioScheduledSourceNode/start",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/start",
            "summary": "The start() method on AudioScheduledSourceNode schedules a sound to begin playback at the specified time. If no time is specified, then the sound begins playing immediately.",
            "support": {
                "chrome": {
                    "version_added": "24"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioScheduledSourceNode: start() method"
        }
    ],
    "dom-audioscheduledsourcenode-stop": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioScheduledSourceNode.json",
            "name": "stop",
            "slug": "API/AudioScheduledSourceNode/stop",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/stop",
            "summary": "The stop() method on AudioScheduledSourceNode schedules a sound to cease playback at the specified time. If no time is specified, then the sound stops playing immediately.",
            "support": {
                "chrome": {
                    "version_added": "24"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioScheduledSourceNode: stop() method"
        }
    ],
    "AudioScheduledSourceNode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioScheduledSourceNode.json",
            "name": "AudioScheduledSourceNode",
            "slug": "API/AudioScheduledSourceNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode",
            "summary": "The AudioScheduledSourceNode interface—part of the Web Audio API—is a parent interface for several types of audio source node interfaces which share the ability to be started and stopped, optionally at specified times. Specifically, this interface defines the start() and stop() methods, as well as the ended event.",
            "support": {
                "chrome": [
                    {
                        "version_added": "57"
                    },
                    {
                        "version_added": "14",
                        "version_removed": "57",
                        "partial_implementation": true,
                        "notes": "The <code>AudioScheduledSourceNode</code> interface itself is not present, but some of its members are available on the <a href='https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode'><code>AudioBufferSourceNode</code></a>, <a href='https://developer.mozilla.org/docs/Web/API/ConstantSourceNode'><code>ConstantSourceNode</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/OscillatorNode'><code>OscillatorNode</code></a> interfaces."
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "53"
                    },
                    {
                        "version_added": "25",
                        "version_removed": "53",
                        "partial_implementation": true,
                        "notes": "The <code>AudioScheduledSourceNode</code> interface itself is not present, but some of its members are available on the <a href='https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode'><code>AudioBufferSourceNode</code></a>, <a href='https://developer.mozilla.org/docs/Web/API/ConstantSourceNode'><code>ConstantSourceNode</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/OscillatorNode'><code>OscillatorNode</code></a> interfaces."
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": [
                    {
                        "version_added": "14"
                    },
                    {
                        "version_added": "6",
                        "version_removed": "14",
                        "partial_implementation": true,
                        "notes": "The <code>AudioScheduledSourceNode</code> interface itself is not present, but some of its members are available on the <a href='https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode'><code>AudioBufferSourceNode</code></a>, <a href='https://developer.mozilla.org/docs/Web/API/ConstantSourceNode'><code>ConstantSourceNode</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/OscillatorNode'><code>OscillatorNode</code></a> interfaces."
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": [
                    {
                        "version_added": "57"
                    },
                    {
                        "version_added": "37",
                        "version_removed": "57",
                        "partial_implementation": true,
                        "notes": "The <code>AudioScheduledSourceNode</code> interface itself is not present, but some of its members are available on the <a href='https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode'><code>AudioBufferSourceNode</code></a>, <a href='https://developer.mozilla.org/docs/Web/API/ConstantSourceNode'><code>ConstantSourceNode</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/OscillatorNode'><code>OscillatorNode</code></a> interfaces."
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "57",
                        "partial_implementation": true,
                        "notes": "The <code>AudioScheduledSourceNode</code> interface itself is not present, but some of its members are available on the <a href='https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode'><code>AudioBufferSourceNode</code></a>, <a href='https://developer.mozilla.org/docs/Web/API/ConstantSourceNode'><code>ConstantSourceNode</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/OscillatorNode'><code>OscillatorNode</code></a> interfaces."
                    }
                ]
            },
            "title": "AudioScheduledSourceNode"
        }
    ],
    "dom-audiosinkinfo-type": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/AudioSinkInfo.json",
            "name": "type",
            "slug": "API/AudioSinkInfo/type",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioSinkInfo/type",
            "summary": "The type read-only property of the AudioSinkInfo interface returns the type of the audio output device.",
            "support": {
                "chrome": {
                    "version_added": "110"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "110"
                }
            },
            "title": "AudioSinkInfo: type property"
        }
    ],
    "AudioSinkInfo": [
        {
            "engines": [
                "blink"
            ],
            "filename": "api/AudioSinkInfo.json",
            "name": "AudioSinkInfo",
            "slug": "API/AudioSinkInfo",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioSinkInfo",
            "summary": "The AudioSinkInfo interface of the Web Audio API represents information describing an AudioContext's sink ID, retrieved via AudioContext.sinkId.",
            "support": {
                "chrome": {
                    "version_added": "110"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": false
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "110"
                }
            },
            "title": "AudioSinkInfo"
        }
    ],
    "AudioWorklet": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioWorklet.json",
            "name": "AudioWorklet",
            "slug": "API/AudioWorklet",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioWorklet",
            "summary": "The AudioWorklet interface of the Web Audio API is used to supply custom audio processing scripts that execute in a separate thread to provide very low latency audio processing.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "76"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioWorklet"
        }
    ],
    "dom-audioworkletglobalscope-currentframe": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioWorkletGlobalScope.json",
            "name": "currentFrame",
            "slug": "API/AudioWorkletGlobalScope/currentFrame",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletGlobalScope/currentFrame",
            "summary": "The read-only currentFrame property of the AudioWorkletGlobalScope interface returns an integer that represents the ever-increasing current sample-frame of the audio block being processed. It is incremented by 128 (the size of a render quantum) after the processing of each audio block.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "76"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioWorkletGlobalScope: currentFrame property"
        }
    ],
    "dom-audioworkletglobalscope-currenttime": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioWorkletGlobalScope.json",
            "name": "currentTime",
            "slug": "API/AudioWorkletGlobalScope/currentTime",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletGlobalScope/currentTime",
            "summary": "The read-only currentTime property of the AudioWorkletGlobalScope interface returns a double that represents the ever-increasing context time of the audio block being processed. It is equal to the currentTime property of the BaseAudioContext the worklet belongs to.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "76"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioWorkletGlobalScope: currentTime property"
        }
    ],
    "dom-audioworkletglobalscope-registerprocessor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioWorkletGlobalScope.json",
            "name": "registerProcessor",
            "slug": "API/AudioWorkletGlobalScope/registerProcessor",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletGlobalScope/registerProcessor",
            "summary": "The registerProcessor method of the AudioWorkletGlobalScope interface registers a class constructor derived from AudioWorkletProcessor interface under a specified name.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "76"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioWorkletGlobalScope: registerProcessor() method"
        }
    ],
    "dom-audioworkletglobalscope-samplerate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioWorkletGlobalScope.json",
            "name": "sampleRate",
            "slug": "API/AudioWorkletGlobalScope/sampleRate",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletGlobalScope/sampleRate",
            "summary": "The read-only sampleRate property of the AudioWorkletGlobalScope interface returns a float that represents the sample rate of the associated BaseAudioContext the worklet belongs to.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "76"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioWorkletGlobalScope: sampleRate property"
        }
    ],
    "AudioWorkletGlobalScope": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioWorkletGlobalScope.json",
            "name": "AudioWorkletGlobalScope",
            "slug": "API/AudioWorkletGlobalScope",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletGlobalScope",
            "summary": "The AudioWorkletGlobalScope interface of the Web Audio API represents a global execution context for user-supplied code, which defines custom AudioWorkletProcessor-derived classes.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "76"
                },
                "firefox_android": {
                    "version_added": false
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioWorkletGlobalScope"
        }
    ],
    "dom-audioworkletnode-audioworkletnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioWorkletNode.json",
            "name": "AudioWorkletNode",
            "slug": "API/AudioWorkletNode/AudioWorkletNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode/AudioWorkletNode",
            "summary": "The AudioWorkletNode() constructor creates a new AudioWorkletNode object, which represents an AudioNode that uses a JavaScript function to perform custom audio processing.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "76"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioWorkletNode: AudioWorkletNode() constructor"
        }
    ],
    "dom-audioworkletnode-parameters": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioWorkletNode.json",
            "name": "parameters",
            "slug": "API/AudioWorkletNode/parameters",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode/parameters",
            "summary": "The read-only parameters property of the AudioWorkletNode interface returns the associated AudioParamMap — that is, a Map-like collection of AudioParam objects. They are instantiated during creation of the underlying AudioWorkletProcessor according to its parameterDescriptors static getter.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "76"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioWorkletNode: parameters property"
        }
    ],
    "dom-audioworkletnode-port": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioWorkletNode.json",
            "name": "port",
            "slug": "API/AudioWorkletNode/port",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode/port",
            "summary": "The read-only port property of the AudioWorkletNode interface returns the associated MessagePort. It can be used to communicate between the node and its associated AudioWorkletProcessor.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "76"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioWorkletNode: port property"
        }
    ],
    "dom-audioworkletnode-onprocessorerror": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioWorkletNode.json",
            "name": "processorerror_event",
            "slug": "API/AudioWorkletNode/processorerror_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode/processorerror_event",
            "summary": "The processorerror event fires when the underlying AudioWorkletProcessor behind the node throws an exception in its constructor, the process method, or any user-defined class method.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "76"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioWorkletNode: processorerror event"
        }
    ],
    "AudioWorkletNode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioWorkletNode.json",
            "name": "AudioWorkletNode",
            "slug": "API/AudioWorkletNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode",
            "summary": "The AudioWorkletNode interface of the Web Audio API represents a base class for a user-defined AudioNode, which can be connected to an audio routing graph along with other nodes. It has an associated AudioWorkletProcessor, which does the actual audio processing in a Web Audio rendering thread.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "76"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioWorkletNode"
        }
    ],
    "dom-audioworkletprocessor-audioworkletprocessor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioWorkletProcessor.json",
            "name": "AudioWorkletProcessor",
            "slug": "API/AudioWorkletProcessor/AudioWorkletProcessor",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletProcessor/AudioWorkletProcessor",
            "summary": "The AudioWorkletProcessor() constructor creates a new AudioWorkletProcessor object, which represents an underlying audio processing mechanism of an AudioWorkletNode.",
            "support": {
                "chrome": {
                    "version_added": "64"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "76"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioWorkletProcessor: AudioWorkletProcessor() constructor"
        }
    ],
    "dom-audioworkletprocessor-port": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioWorkletProcessor.json",
            "name": "port",
            "slug": "API/AudioWorkletProcessor/port",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletProcessor/port",
            "summary": "The read-only port property of the AudioWorkletProcessor interface returns the associated MessagePort. It can be used to communicate between the processor and the AudioWorkletNode to which it belongs.",
            "support": {
                "chrome": {
                    "version_added": "64"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "76"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioWorkletProcessor: port property"
        }
    ],
    "AudioWorkletProcessor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/AudioWorkletProcessor.json",
            "name": "AudioWorkletProcessor",
            "slug": "API/AudioWorkletProcessor",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletProcessor",
            "summary": "The AudioWorkletProcessor interface of the Web Audio API represents an audio processing code behind a custom AudioWorkletNode. It lives in the AudioWorkletGlobalScope and runs on the Web Audio rendering thread. In turn, an AudioWorkletNode based on it runs on the main thread.",
            "support": {
                "chrome": {
                    "version_added": "64"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "76"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "AudioWorkletProcessor"
        }
    ],
    "dom-baseaudiocontext-audioworklet": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "audioWorklet",
            "slug": "API/BaseAudioContext/audioWorklet",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/audioWorklet",
            "summary": "The audioWorklet read-only property of the BaseAudioContext interface returns an instance of AudioWorklet that can be used for adding AudioWorkletProcessor-derived classes which implement custom audio processing.",
            "support": {
                "chrome": {
                    "version_added": "66"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "76"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: audioWorklet property"
        }
    ],
    "dom-baseaudiocontext-createanalyser": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "createAnalyser",
            "slug": "API/BaseAudioContext/createAnalyser",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createAnalyser",
            "summary": "The createAnalyser() method of the BaseAudioContext interface creates an AnalyserNode, which can be used to expose audio time and frequency data and create data visualizations.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: createAnalyser() method"
        }
    ],
    "dom-baseaudiocontext-createbiquadfilter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "createBiquadFilter",
            "slug": "API/BaseAudioContext/createBiquadFilter",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createBiquadFilter",
            "summary": "The createBiquadFilter() method of the BaseAudioContext interface creates a BiquadFilterNode, which represents a second order filter configurable as several different common filter types.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: createBiquadFilter() method"
        }
    ],
    "dom-baseaudiocontext-createbuffer": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "createBuffer",
            "slug": "API/BaseAudioContext/createBuffer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createBuffer",
            "summary": "The createBuffer() method of the BaseAudioContext Interface is used to create a new, empty AudioBuffer object, which can then be populated by data, and played via an AudioBufferSourceNode",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: createBuffer() method"
        }
    ],
    "dom-baseaudiocontext-createbuffersource": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "createBufferSource",
            "slug": "API/BaseAudioContext/createBufferSource",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createBufferSource",
            "summary": "The createBufferSource() method of the BaseAudioContext Interface is used to create a new AudioBufferSourceNode, which can be used to play audio data contained within an AudioBuffer object. AudioBuffers are created using BaseAudioContext.createBuffer or returned by BaseAudioContext.decodeAudioData when it successfully decodes an audio track.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: createBufferSource() method"
        }
    ],
    "dom-baseaudiocontext-createchannelmerger": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "createChannelMerger",
            "slug": "API/BaseAudioContext/createChannelMerger",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createChannelMerger",
            "summary": "The createChannelMerger() method of the BaseAudioContext interface creates a ChannelMergerNode, which combines channels from multiple audio streams into a single audio stream.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: createChannelMerger() method"
        }
    ],
    "dom-baseaudiocontext-createchannelsplitter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "createChannelSplitter",
            "slug": "API/BaseAudioContext/createChannelSplitter",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createChannelSplitter",
            "summary": "The createChannelSplitter() method of the BaseAudioContext Interface is used to create a ChannelSplitterNode, which is used to access the individual channels of an audio stream and process them separately.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: createChannelSplitter() method"
        }
    ],
    "dom-baseaudiocontext-createconstantsource": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "createConstantSource",
            "slug": "API/BaseAudioContext/createConstantSource",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createConstantSource",
            "summary": "The createConstantSource() property of the BaseAudioContext interface creates a ConstantSourceNode object, which is an audio source that continuously outputs a monaural (one-channel) sound signal whose samples all have the same value.",
            "support": {
                "chrome": {
                    "version_added": "56"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: createConstantSource() method"
        }
    ],
    "dom-baseaudiocontext-createconvolver": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "createConvolver",
            "slug": "API/BaseAudioContext/createConvolver",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createConvolver",
            "summary": "The createConvolver() method of the BaseAudioContext interface creates a ConvolverNode, which is commonly used to apply reverb effects to your audio. See the spec definition of Convolution for more information.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: createConvolver() method"
        }
    ],
    "dom-baseaudiocontext-createdelay": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "createDelay",
            "slug": "API/BaseAudioContext/createDelay",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createDelay",
            "summary": "The createDelay() method of the BaseAudioContext Interface is used to create a DelayNode, which is used to delay the incoming audio signal by a certain amount of time.",
            "support": {
                "chrome": {
                    "version_added": "24"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: createDelay() method"
        }
    ],
    "dom-baseaudiocontext-createdynamicscompressor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "createDynamicsCompressor",
            "slug": "API/BaseAudioContext/createDynamicsCompressor",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createDynamicsCompressor",
            "summary": "The createDynamicsCompressor() method of the BaseAudioContext Interface is used to create a DynamicsCompressorNode, which can be used to apply compression to an audio signal.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: createDynamicsCompressor() method"
        }
    ],
    "dom-baseaudiocontext-creategain": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "createGain",
            "slug": "API/BaseAudioContext/createGain",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createGain",
            "summary": "The createGain() method of the BaseAudioContext interface creates a GainNode, which can be used to control the overall gain (or volume) of the audio graph.",
            "support": {
                "chrome": {
                    "version_added": "24"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: createGain() method"
        }
    ],
    "dom-baseaudiocontext-createiirfilter": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "createIIRFilter",
            "slug": "API/BaseAudioContext/createIIRFilter",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createIIRFilter",
            "summary": "The createIIRFilter() method of the BaseAudioContext interface creates an IIRFilterNode, which represents a general infinite impulse response (IIR) filter which can be configured to serve as various types of filter.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: createIIRFilter() method"
        }
    ],
    "dom-baseaudiocontext-createoscillator": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "createOscillator",
            "slug": "API/BaseAudioContext/createOscillator",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createOscillator",
            "summary": "The createOscillator() method of the BaseAudioContext interface creates an OscillatorNode, a source representing a periodic waveform. It basically generates a constant tone.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: createOscillator() method"
        }
    ],
    "dom-baseaudiocontext-createpanner": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "createPanner",
            "slug": "API/BaseAudioContext/createPanner",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createPanner",
            "summary": "The createPanner() method of the BaseAudioContext Interface is used to create a new PannerNode, which is used to spatialize an incoming audio stream in 3D space.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: createPanner() method"
        }
    ],
    "dom-baseaudiocontext-createperiodicwave": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "createPeriodicWave",
            "slug": "API/BaseAudioContext/createPeriodicWave",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createPeriodicWave",
            "summary": "The createPeriodicWave() method of the BaseAudioContext Interface is used to create a PeriodicWave, which is used to define a periodic waveform that can be used to shape the output of an OscillatorNode.",
            "support": {
                "chrome": {
                    "version_added": "30"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: createPeriodicWave() method"
        }
    ],
    "dom-baseaudiocontext-createstereopanner": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "createStereoPanner",
            "slug": "API/BaseAudioContext/createStereoPanner",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createStereoPanner",
            "summary": "The createStereoPanner() method of the BaseAudioContext interface creates a StereoPannerNode, which can be used to apply stereo panning to an audio source. It positions an incoming audio stream in a stereo image using a low-cost panning algorithm.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "37"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: createStereoPanner() method"
        }
    ],
    "dom-baseaudiocontext-createwaveshaper": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "createWaveShaper",
            "slug": "API/BaseAudioContext/createWaveShaper",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createWaveShaper",
            "summary": "The createWaveShaper() method of the BaseAudioContext interface creates a WaveShaperNode, which represents a non-linear distortion. It is used to apply distortion effects to your audio.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: createWaveShaper() method"
        }
    ],
    "dom-baseaudiocontext-currenttime": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "currentTime",
            "slug": "API/BaseAudioContext/currentTime",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/currentTime",
            "summary": "The currentTime read-only property of the BaseAudioContext interface returns a double representing an ever-increasing hardware timestamp in seconds that can be used for scheduling audio playback, visualizing timelines, etc. It starts at 0.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: currentTime property"
        }
    ],
    "dom-baseaudiocontext-decodeaudiodata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "decodeAudioData",
            "slug": "API/BaseAudioContext/decodeAudioData",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/decodeAudioData",
            "summary": "The decodeAudioData() method of the BaseAudioContext Interface is used to asynchronously decode audio file data contained in an ArrayBuffer that is loaded from fetch(), XMLHttpRequest, or FileReader. The decoded AudioBuffer is resampled to the AudioContext's sampling rate, then passed to a callback or promise.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: decodeAudioData() method"
        }
    ],
    "dom-baseaudiocontext-destination": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "destination",
            "slug": "API/BaseAudioContext/destination",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/destination",
            "summary": "The destination property of the BaseAudioContext interface returns an AudioDestinationNode representing the final destination of all audio in the context. It often represents an actual audio-rendering device such as your device's speakers.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: destination property"
        }
    ],
    "dom-baseaudiocontext-listener": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "listener",
            "slug": "API/BaseAudioContext/listener",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/listener",
            "summary": "The listener property of the BaseAudioContext interface returns an AudioListener object that can then be used for implementing 3D audio spatialization.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: listener property"
        }
    ],
    "dom-baseaudiocontext-samplerate": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "sampleRate",
            "slug": "API/BaseAudioContext/sampleRate",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/sampleRate",
            "summary": "The sampleRate property of the BaseAudioContext interface returns a floating point number representing the sample rate, in samples per second, used by all nodes in this audio context. This limitation means that sample-rate converters are not supported.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: sampleRate property"
        }
    ],
    "dom-baseaudiocontext-state": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "state",
            "slug": "API/BaseAudioContext/state",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/state",
            "summary": "The state read-only property of the BaseAudioContext interface returns the current state of the AudioContext.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "40"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: state property"
        }
    ],
    "dom-baseaudiocontext-onstatechange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "statechange_event",
            "slug": "API/BaseAudioContext/statechange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/statechange_event",
            "summary": "A statechange event is fired at a BaseAudioContext object when its state member changes.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "40"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BaseAudioContext: statechange event"
        }
    ],
    "BaseAudioContext": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BaseAudioContext.json",
            "name": "BaseAudioContext",
            "slug": "API/BaseAudioContext",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext",
            "summary": "The BaseAudioContext interface of the Web Audio API acts as a base definition for online and offline audio-processing graphs, as represented by AudioContext and OfflineAudioContext respectively. You wouldn't use BaseAudioContext directly — you'd use its features via one of these two inheriting interfaces.",
            "support": {
                "chrome": [
                    {
                        "version_added": "56"
                    },
                    {
                        "version_added": "14",
                        "version_removed": "56",
                        "partial_implementation": true,
                        "notes": "The <code>BaseAudioContext</code> interface itself is not present, but many of the methods are available on the <a href='https://developer.mozilla.org/docs/Web/API/AudioContext'><code>AudioContext</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/OfflineAudioContext'><code>OfflineAudioContext</code></a> interfaces."
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": false
                },
                "firefox": [
                    {
                        "version_added": "53"
                    },
                    {
                        "version_added": "25",
                        "version_removed": "53",
                        "partial_implementation": true,
                        "notes": "The <code>BaseAudioContext</code> interface itself is not present, but many of the methods are available on the <a href='https://developer.mozilla.org/docs/Web/API/AudioContext'><code>AudioContext</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/OfflineAudioContext'><code>OfflineAudioContext</code></a> interfaces."
                    }
                ],
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": [
                    {
                        "version_added": "14.1"
                    },
                    {
                        "version_added": "6",
                        "version_removed": "14.1",
                        "partial_implementation": true,
                        "notes": "The <code>BaseAudioContext</code> interface itself is not present, but many of the methods are available on the <a href='https://developer.mozilla.org/docs/Web/API/AudioContext'><code>AudioContext</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/OfflineAudioContext'><code>OfflineAudioContext</code></a> interfaces."
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": [
                    {
                        "version_added": "56"
                    },
                    {
                        "version_added": "37",
                        "version_removed": "56",
                        "partial_implementation": true,
                        "notes": "The <code>BaseAudioContext</code> interface itself is not present, but many of the methods are available on the <a href='https://developer.mozilla.org/docs/Web/API/AudioContext'><code>AudioContext</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/OfflineAudioContext'><code>OfflineAudioContext</code></a> interfaces."
                    }
                ],
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "56",
                        "partial_implementation": true,
                        "notes": "The <code>BaseAudioContext</code> interface itself is not present, but many of the methods are available on the <a href='https://developer.mozilla.org/docs/Web/API/AudioContext'><code>AudioContext</code></a> and <a href='https://developer.mozilla.org/docs/Web/API/OfflineAudioContext'><code>OfflineAudioContext</code></a> interfaces."
                    }
                ]
            },
            "title": "BaseAudioContext"
        }
    ],
    "dom-biquadfilternode-biquadfilternode-context-options": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BiquadFilterNode.json",
            "name": "BiquadFilterNode",
            "slug": "API/BiquadFilterNode/BiquadFilterNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/BiquadFilterNode",
            "summary": "The BiquadFilterNode() constructor of the Web Audio API creates a new BiquadFilterNode object, which represents a simple low-order filter.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BiquadFilterNode: BiquadFilterNode() constructor"
        }
    ],
    "dom-biquadfilternode-q": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BiquadFilterNode.json",
            "name": "Q",
            "slug": "API/BiquadFilterNode/Q",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/Q",
            "summary": "The Q property of the BiquadFilterNode interface is an a-rate AudioParam, a double representing a Q factor, or quality factor.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BiquadFilterNode: Q property"
        }
    ],
    "dom-biquadfilternode-detune": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BiquadFilterNode.json",
            "name": "detune",
            "slug": "API/BiquadFilterNode/detune",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/detune",
            "summary": "The detune property of the BiquadFilterNode interface is an a-rate AudioParam representing detuning of the frequency in cents.",
            "support": {
                "chrome": {
                    "version_added": "25"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BiquadFilterNode: detune property"
        }
    ],
    "dom-biquadfilternode-frequency": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BiquadFilterNode.json",
            "name": "frequency",
            "slug": "API/BiquadFilterNode/frequency",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/frequency",
            "summary": "The frequency property of the BiquadFilterNode interface is an a-rate AudioParam — a double representing a frequency in the current filtering algorithm measured in hertz (Hz).",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BiquadFilterNode: frequency property"
        }
    ],
    "dom-biquadfilternode-gain": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BiquadFilterNode.json",
            "name": "gain",
            "slug": "API/BiquadFilterNode/gain",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/gain",
            "summary": "The gain property of the BiquadFilterNode interface is an a-rate AudioParam — a double representing the gain used in the current filtering algorithm.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BiquadFilterNode: gain property"
        }
    ],
    "dom-biquadfilternode-getfrequencyresponse": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BiquadFilterNode.json",
            "name": "getFrequencyResponse",
            "slug": "API/BiquadFilterNode/getFrequencyResponse",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/getFrequencyResponse",
            "summary": "The getFrequencyResponse() method of the BiquadFilterNode interface takes the current filtering algorithm's settings and calculates the frequency response for frequencies specified in a specified array of frequencies.",
            "support": {
                "chrome": {
                    "version_added": "17"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BiquadFilterNode: getFrequencyResponse() method"
        }
    ],
    "dom-biquadfilternode-type": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BiquadFilterNode.json",
            "name": "type",
            "slug": "API/BiquadFilterNode/type",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/type",
            "summary": "The type property of the BiquadFilterNode interface is a string (enum) value defining the kind of filtering algorithm the node is implementing.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BiquadFilterNode: type property"
        }
    ],
    "BiquadFilterNode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/BiquadFilterNode.json",
            "name": "BiquadFilterNode",
            "slug": "API/BiquadFilterNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode",
            "summary": "The BiquadFilterNode interface represents a simple low-order filter, and is created using the BaseAudioContext/createBiquadFilter method. It is an AudioNode that can represent different kinds of filters, tone control devices, and graphic equalizers. A BiquadFilterNode always has exactly one input and one output.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "BiquadFilterNode"
        }
    ],
    "dom-channelmergernode-constructor-channelmergernode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ChannelMergerNode.json",
            "name": "ChannelMergerNode",
            "slug": "API/ChannelMergerNode/ChannelMergerNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ChannelMergerNode/ChannelMergerNode",
            "summary": "The ChannelMergerNode() constructor creates a new ChannelMergerNode object instance.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ChannelMergerNode: ChannelMergerNode() constructor"
        }
    ],
    "ChannelMergerNode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ChannelMergerNode.json",
            "name": "ChannelMergerNode",
            "slug": "API/ChannelMergerNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ChannelMergerNode",
            "summary": "The ChannelMergerNode interface, often used in conjunction with its opposite, ChannelSplitterNode, reunites different mono inputs into a single output. Each input is used to fill a channel of the output. This is useful for accessing each channels separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ChannelMergerNode"
        }
    ],
    "dom-channelsplitternode-constructor-channelsplitternode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ChannelSplitterNode.json",
            "name": "ChannelSplitterNode",
            "slug": "API/ChannelSplitterNode/ChannelSplitterNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ChannelSplitterNode/ChannelSplitterNode",
            "summary": "The ChannelSplitterNode() constructor of the Web Audio API creates a new ChannelSplitterNode object instance, representing a node that splits the input into a separate output for each of the source node's audio channels.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ChannelSplitterNode: ChannelSplitterNode() constructor"
        }
    ],
    "ChannelSplitterNode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ChannelSplitterNode.json",
            "name": "ChannelSplitterNode",
            "slug": "API/ChannelSplitterNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ChannelSplitterNode",
            "summary": "The ChannelSplitterNode interface, often used in conjunction with its opposite, ChannelMergerNode, separates the different channels of an audio source into a set of mono outputs. This is useful for accessing each channel separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.",
            "support": {
                "chrome": {
                    "version_added": "14",
                    "notes": "Starting in Chrome 56, <code>channelCountMode</code> is set to <code>explicit</code> and <code>channelCount</code> is fixed to the number of outputs, as per the latest spec."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3",
                    "notes": "Starting in version 56, <code>channelCountMode</code> is set to <code>explicit</code> and <code>channelCount</code> is fixed to the number of outputs, as per the latest spec."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Starting in Chrome 56, <code>channelCountMode</code> is set to <code>explicit</code> and <code>channelCount</code> is fixed to the number of outputs, as per the latest spec."
                }
            },
            "title": "ChannelSplitterNode"
        }
    ],
    "dom-constantsourcenode-constructor-constantsourcenode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ConstantSourceNode.json",
            "name": "ConstantSourceNode",
            "slug": "API/ConstantSourceNode/ConstantSourceNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode/ConstantSourceNode",
            "summary": "The ConstantSourceNode() constructor creates a new ConstantSourceNode object instance, representing an audio source which constantly outputs samples whose values are always the same.",
            "support": {
                "chrome": {
                    "version_added": "56"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ConstantSourceNode: ConstantSourceNode() constructor"
        }
    ],
    "dom-constantsourcenode-offset": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ConstantSourceNode.json",
            "name": "offset",
            "slug": "API/ConstantSourceNode/offset",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode/offset",
            "summary": "The read-only offset property of the ConstantSourceNode interface returns a AudioParam object indicating the numeric a-rate value which is always returned by the source when asked for the next sample.",
            "support": {
                "chrome": {
                    "version_added": "56"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ConstantSourceNode: offset property"
        }
    ],
    "ConstantSourceNode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ConstantSourceNode.json",
            "name": "ConstantSourceNode",
            "slug": "API/ConstantSourceNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ConstantSourceNode",
            "summary": "The ConstantSourceNode interface—part of the Web Audio API—represents an audio source (based upon AudioScheduledSourceNode) whose output is single unchanging value. This makes it useful for cases in which you need a constant value coming in from an audio source. In addition, it can be used like a constructible AudioParam by automating the value of its offset or by connecting another node to it; see Controlling multiple parameters with ConstantSourceNode.",
            "support": {
                "chrome": {
                    "version_added": "56"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "52"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ConstantSourceNode"
        }
    ],
    "dom-convolvernode-constructor-convolvernode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ConvolverNode.json",
            "name": "ConvolverNode",
            "slug": "API/ConvolverNode/ConvolverNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode/ConvolverNode",
            "summary": "The ConvolverNode() constructor of the Web Audio API creates a new ConvolverNode object instance.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ConvolverNode: ConvolverNode() constructor"
        }
    ],
    "dom-convolvernode-buffer": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ConvolverNode.json",
            "name": "buffer",
            "slug": "API/ConvolverNode/buffer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode/buffer",
            "summary": "The buffer property of the ConvolverNode interface represents a mono, stereo, or 4-channel AudioBuffer containing the (possibly multichannel) impulse response used by the ConvolverNode to create the reverb effect.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ConvolverNode: buffer property"
        }
    ],
    "dom-convolvernode-normalize": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ConvolverNode.json",
            "name": "normalize",
            "slug": "API/ConvolverNode/normalize",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode/normalize",
            "summary": "The normalize property of the ConvolverNode interface is a boolean that controls whether the impulse response from the buffer will be scaled by an equal-power normalization when the buffer attribute is set, or not.",
            "support": {
                "chrome": {
                    "version_added": "18"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ConvolverNode: normalize property"
        }
    ],
    "ConvolverNode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ConvolverNode.json",
            "name": "ConvolverNode",
            "slug": "API/ConvolverNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode",
            "summary": "The ConvolverNode interface is an AudioNode that performs a Linear Convolution on a given AudioBuffer, often used to achieve a reverb effect. A ConvolverNode always has exactly one input and one output.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ConvolverNode"
        }
    ],
    "dom-delaynode-constructor-delaynode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DelayNode.json",
            "name": "DelayNode",
            "slug": "API/DelayNode/DelayNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DelayNode/DelayNode",
            "summary": "The DelayNode() constructor of the Web Audio API creates a new DelayNode object with a delay-line; an AudioNode audio-processing module that causes a delay between the arrival of an input data, and its propagation to the output.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DelayNode: DelayNode() constructor"
        }
    ],
    "dom-delaynode-delaytime": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DelayNode.json",
            "name": "delayTime",
            "slug": "API/DelayNode/delayTime",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DelayNode/delayTime",
            "summary": "The delayTime property of the DelayNode interface is an a-rate AudioParam representing the amount of delay to apply.",
            "support": {
                "chrome": {
                    "version_added": "24"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DelayNode: delayTime property"
        }
    ],
    "DelayNode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DelayNode.json",
            "name": "DelayNode",
            "slug": "API/DelayNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DelayNode",
            "summary": "The DelayNode interface represents a delay-line; an AudioNode audio-processing module that causes a delay between the arrival of an input data and its propagation to the output.",
            "support": {
                "chrome": {
                    "version_added": "24"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DelayNode"
        }
    ],
    "dom-dynamicscompressornode-constructor-dynamicscompressornode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DynamicsCompressorNode.json",
            "name": "DynamicsCompressorNode",
            "slug": "API/DynamicsCompressorNode/DynamicsCompressorNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/DynamicsCompressorNode",
            "summary": "The DynamicsCompressorNode() constructor creates a new DynamicsCompressorNode object which provides a compression effect, which lowers the volume of the loudest parts of the signal, in order to help prevent clipping and distortion. That can occur when multiple sounds are played and multiplexed together at once.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DynamicsCompressorNode: DynamicsCompressorNode() constructor"
        }
    ],
    "dom-dynamicscompressornode-attack": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DynamicsCompressorNode.json",
            "name": "attack",
            "slug": "API/DynamicsCompressorNode/attack",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/attack",
            "summary": "The attack property of the DynamicsCompressorNode interface is a k-rate AudioParam representing the amount of time, in seconds, required to reduce the gain by 10 dB. It defines how quickly the signal is adapted when its volume is increased.",
            "support": {
                "chrome": {
                    "version_added": "19"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DynamicsCompressorNode: attack property"
        }
    ],
    "dom-dynamicscompressornode-knee": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DynamicsCompressorNode.json",
            "name": "knee",
            "slug": "API/DynamicsCompressorNode/knee",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/knee",
            "summary": "The knee property of the DynamicsCompressorNode interface is a k-rate AudioParam containing a decibel value representing the range above the threshold where the curve smoothly transitions to the compressed portion.",
            "support": {
                "chrome": {
                    "version_added": "19"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DynamicsCompressorNode: knee property"
        }
    ],
    "dom-dynamicscompressornode-ratio": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DynamicsCompressorNode.json",
            "name": "ratio",
            "slug": "API/DynamicsCompressorNode/ratio",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/ratio",
            "summary": "The ratio property of the DynamicsCompressorNode interface Is a k-rate AudioParam representing the amount of change, in dB, needed in the input for a 1 dB change in the output.",
            "support": {
                "chrome": {
                    "version_added": "19"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DynamicsCompressorNode: ratio property"
        }
    ],
    "dom-dynamicscompressornode-reduction": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DynamicsCompressorNode.json",
            "name": "reduction",
            "slug": "API/DynamicsCompressorNode/reduction",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/reduction",
            "summary": "The reduction read-only property of the DynamicsCompressorNode interface is a float representing the amount of gain reduction currently applied by the compressor to the signal.",
            "support": {
                "chrome": {
                    "version_added": "19",
                    "notes": "Before version 52, this was an <code>AudioParam.</code>."
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "15"
                },
                "opera_android": {
                    "version_added": "14"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "1.0",
                    "notes": "Before Samsung Internet 6.0, this was an <code>AudioParam.</code>."
                },
                "webview_android": {
                    "version_added": "37",
                    "notes": "Before version 52, this was an <code>AudioParam.</code>."
                },
                "edge_blink": {
                    "version_added": "79",
                    "notes": "Before version 52, this was an <code>AudioParam.</code>."
                }
            },
            "title": "DynamicsCompressorNode: reduction property"
        }
    ],
    "dom-dynamicscompressornode-release": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DynamicsCompressorNode.json",
            "name": "release",
            "slug": "API/DynamicsCompressorNode/release",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/release",
            "summary": "The release property of the DynamicsCompressorNode interface Is a k-rate AudioParam representing the amount of time, in seconds, required to increase the gain by 10 dB. It defines how quick the signal is adapted when its volume is reduced.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DynamicsCompressorNode: release property"
        }
    ],
    "dom-dynamicscompressornode-threshold": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DynamicsCompressorNode.json",
            "name": "threshold",
            "slug": "API/DynamicsCompressorNode/threshold",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode/threshold",
            "summary": "The threshold property of the DynamicsCompressorNode interface is a k-rate AudioParam representing the decibel value above which the compression will start taking effect.",
            "support": {
                "chrome": {
                    "version_added": "19"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DynamicsCompressorNode: threshold property"
        }
    ],
    "DynamicsCompressorNode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/DynamicsCompressorNode.json",
            "name": "DynamicsCompressorNode",
            "slug": "API/DynamicsCompressorNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/DynamicsCompressorNode",
            "summary": "The DynamicsCompressorNode interface provides a compression effect, which lowers the volume of the loudest parts of the signal in order to help prevent clipping and distortion that can occur when multiple sounds are played and multiplexed together at once. This is often used in musical production and game audio. DynamicsCompressorNode is an AudioNode that has exactly one input and one output.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "DynamicsCompressorNode"
        }
    ],
    "dom-gainnode-constructor-gainnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GainNode.json",
            "name": "GainNode",
            "slug": "API/GainNode/GainNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/GainNode/GainNode",
            "summary": "The GainNode() constructor of the Web Audio API creates a new GainNode object which is an AudioNode that represents a change in volume.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "GainNode: GainNode() constructor"
        }
    ],
    "dom-gainnode-gain": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GainNode.json",
            "name": "gain",
            "slug": "API/GainNode/gain",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/GainNode/gain",
            "summary": "The gain property of the GainNode interface is an a-rate AudioParam representing the amount of gain to apply.",
            "support": {
                "chrome": {
                    "version_added": "24"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "GainNode: gain property"
        }
    ],
    "GainNode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/GainNode.json",
            "name": "GainNode",
            "slug": "API/GainNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/GainNode",
            "summary": "The GainNode interface represents a change in volume. It is an AudioNode audio-processing module that causes a given gain to be applied to the input data before its propagation to the output. A GainNode always has exactly one input and one output, both with the same number of channels.",
            "support": {
                "chrome": {
                    "version_added": "24"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "GainNode"
        }
    ],
    "dom-iirfilternode-constructor-iirfilternode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/IIRFilterNode.json",
            "name": "IIRFilterNode",
            "slug": "API/IIRFilterNode/IIRFilterNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/IIRFilterNode/IIRFilterNode",
            "summary": "The IIRFilterNode() constructor of the Web Audio API creates a new IIRFilterNode object which an AudioNode processor which implements a general infinite impulse response filter.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "IIRFilterNode: IIRFilterNode() constructor"
        }
    ],
    "dom-iirfilternode-getfrequencyresponse": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/IIRFilterNode.json",
            "name": "getFrequencyResponse",
            "slug": "API/IIRFilterNode/getFrequencyResponse",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/IIRFilterNode/getFrequencyResponse",
            "summary": "The getFrequencyResponse() method of the IIRFilterNode interface takes the current filtering algorithm's settings and calculates the frequency response for frequencies specified in a specified array of frequencies.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "IIRFilterNode: getFrequencyResponse() method"
        }
    ],
    "IIRFilterNode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/IIRFilterNode.json",
            "name": "IIRFilterNode",
            "slug": "API/IIRFilterNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/IIRFilterNode",
            "summary": "The IIRFilterNode interface of the Web Audio API is a AudioNode processor which implements a general infinite impulse response (IIR) filter; this type of filter can be used to implement tone control devices and graphic equalizers as well. It lets the parameters of the filter response be specified, so that it can be tuned as needed.",
            "support": {
                "chrome": {
                    "version_added": "49"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "IIRFilterNode"
        }
    ],
    "dom-mediaelementaudiosourcenode-mediaelementaudiosourcenode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MediaElementAudioSourceNode.json",
            "name": "MediaElementAudioSourceNode",
            "slug": "API/MediaElementAudioSourceNode/MediaElementAudioSourceNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode/MediaElementAudioSourceNode",
            "summary": "The MediaElementAudioSourceNode() constructor creates a new MediaElementAudioSourceNode object instance.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MediaElementAudioSourceNode: MediaElementAudioSourceNode() constructor"
        }
    ],
    "dom-mediaelementaudiosourcenode-mediaelement": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MediaElementAudioSourceNode.json",
            "name": "mediaElement",
            "slug": "API/MediaElementAudioSourceNode/mediaElement",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode/mediaElement",
            "summary": "The MediaElementAudioSourceNode interface's read-only mediaElement property indicates the HTMLMediaElement that contains the audio track from which the node is receiving audio.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "70"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MediaElementAudioSourceNode: mediaElement property"
        }
    ],
    "MediaElementAudioSourceNode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MediaElementAudioSourceNode.json",
            "name": "MediaElementAudioSourceNode",
            "slug": "API/MediaElementAudioSourceNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaElementAudioSourceNode",
            "summary": "The MediaElementAudioSourceNode interface represents an audio source consisting of an HTML <audio> or <video> element. It is an AudioNode that acts as an audio source.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MediaElementAudioSourceNode"
        }
    ],
    "dom-mediastreamaudiodestinationnode-mediastreamaudiodestinationnode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MediaStreamAudioDestinationNode.json",
            "name": "MediaStreamAudioDestinationNode",
            "slug": "API/MediaStreamAudioDestinationNode/MediaStreamAudioDestinationNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode/MediaStreamAudioDestinationNode",
            "summary": "The MediaStreamAudioDestinationNode() constructor of the Web Audio API creates a new MediaStreamAudioDestinationNode object instance.",
            "support": {
                "chrome": {
                    "version_added": "57"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MediaStreamAudioDestinationNode: MediaStreamAudioDestinationNode() constructor"
        }
    ],
    "dom-mediastreamaudiodestinationnode-stream": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MediaStreamAudioDestinationNode.json",
            "name": "stream",
            "slug": "API/MediaStreamAudioDestinationNode/stream",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode/stream",
            "summary": "The stream property of the AudioContext interface represents a MediaStream containing a single audio MediaStreamTrack with the same number of channels as the node itself.",
            "support": {
                "chrome": {
                    "version_added": "25"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MediaStreamAudioDestinationNode: stream property"
        }
    ],
    "MediaStreamAudioDestinationNode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MediaStreamAudioDestinationNode.json",
            "name": "MediaStreamAudioDestinationNode",
            "slug": "API/MediaStreamAudioDestinationNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioDestinationNode",
            "summary": "The MediaStreamAudioDestinationNode interface represents an audio destination consisting of a WebRTC MediaStream with a single AudioMediaStreamTrack, which can be used in a similar way to a MediaStream obtained from navigator.mediaDevices.getUserMedia().",
            "support": {
                "chrome": {
                    "version_added": "25"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MediaStreamAudioDestinationNode"
        }
    ],
    "dom-mediastreamaudiosourcenode-mediastreamaudiosourcenode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MediaStreamAudioSourceNode.json",
            "name": "MediaStreamAudioSourceNode",
            "slug": "API/MediaStreamAudioSourceNode/MediaStreamAudioSourceNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode/MediaStreamAudioSourceNode",
            "summary": "The Web Audio API's MediaStreamAudioSourceNode() constructor creates and returns a new MediaStreamAudioSourceNode object which uses the first audio track of a given MediaStream as its source.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MediaStreamAudioSourceNode: MediaStreamAudioSourceNode() constructor"
        }
    ],
    "dom-mediastreamaudiosourcenode-mediastream": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MediaStreamAudioSourceNode.json",
            "name": "mediaStream",
            "slug": "API/MediaStreamAudioSourceNode/mediaStream",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode/mediaStream",
            "summary": "The MediaStreamAudioSourceNode interface's read-only mediaStream property indicates the MediaStream that contains the audio track from which the node is receiving audio.",
            "support": {
                "chrome": {
                    "version_added": "22"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "70"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MediaStreamAudioSourceNode: mediaStream property"
        }
    ],
    "MediaStreamAudioSourceNode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/MediaStreamAudioSourceNode.json",
            "name": "MediaStreamAudioSourceNode",
            "slug": "API/MediaStreamAudioSourceNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamAudioSourceNode",
            "summary": "The MediaStreamAudioSourceNode interface is a type of AudioNode which operates as an audio source whose media is received from a MediaStream obtained using the WebRTC or Media Capture and Streams APIs.",
            "support": {
                "chrome": {
                    "version_added": "22"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "MediaStreamAudioSourceNode"
        }
    ],
    "dom-mediastreamtrackaudiosourcenode-mediastreamtrackaudiosourcenode": [
        {
            "engines": [
                "gecko"
            ],
            "filename": "api/MediaStreamTrackAudioSourceNode.json",
            "name": "MediaStreamTrackAudioSourceNode",
            "slug": "API/MediaStreamTrackAudioSourceNode/MediaStreamTrackAudioSourceNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackAudioSourceNode/MediaStreamTrackAudioSourceNode",
            "summary": "The Web Audio API's MediaStreamTrackAudioSourceNode() constructor creates and returns a new MediaStreamTrackAudioSourceNode object whose audio is taken from the MediaStreamTrack specified in the given options object.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "68",
                    "notes": "Firefox 68 implements the updated standard's definition of the \"first\" audio track; now the first track is the one whose ID comes first lexicographically."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": "MediaStreamTrackAudioSourceNode: MediaStreamTrackAudioSourceNode() constructor"
        }
    ],
    "MediaStreamTrackAudioSourceNode": [
        {
            "engines": [
                "gecko"
            ],
            "filename": "api/MediaStreamTrackAudioSourceNode.json",
            "name": "MediaStreamTrackAudioSourceNode",
            "slug": "API/MediaStreamTrackAudioSourceNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrackAudioSourceNode",
            "summary": "The MediaStreamTrackAudioSourceNode interface is a type of AudioNode which represents a source of audio data taken from a specific MediaStreamTrack obtained through the WebRTC or Media Capture and Streams APIs.",
            "support": {
                "chrome": {
                    "version_added": false
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "68"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": false
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": false
                }
            },
            "title": "MediaStreamTrackAudioSourceNode"
        }
    ],
    "dom-offlineaudiocompletionevent-offlineaudiocompletionevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OfflineAudioCompletionEvent.json",
            "name": "OfflineAudioCompletionEvent",
            "slug": "API/OfflineAudioCompletionEvent/OfflineAudioCompletionEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioCompletionEvent/OfflineAudioCompletionEvent",
            "summary": "The OfflineAudioCompletionEvent() constructor of the Web Audio API creates a new OfflineAudioCompletionEvent object.",
            "support": {
                "chrome": {
                    "version_added": "57"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OfflineAudioCompletionEvent: OfflineAudioCompletionEvent() constructor"
        }
    ],
    "dom-offlineaudiocompletionevent-renderedbuffer": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OfflineAudioCompletionEvent.json",
            "name": "renderedBuffer",
            "slug": "API/OfflineAudioCompletionEvent/renderedBuffer",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioCompletionEvent/renderedBuffer",
            "summary": "The renderedBuffer read-only property of the OfflineAudioCompletionEvent interface is an AudioBuffer containing the result of processing an OfflineAudioContext.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OfflineAudioCompletionEvent: renderedBuffer property"
        }
    ],
    "OfflineAudioCompletionEvent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OfflineAudioCompletionEvent.json",
            "name": "OfflineAudioCompletionEvent",
            "slug": "API/OfflineAudioCompletionEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioCompletionEvent",
            "summary": "The Web Audio API OfflineAudioCompletionEvent interface represents events that occur when the processing of an OfflineAudioContext is terminated. The complete event uses this interface.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OfflineAudioCompletionEvent"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OfflineAudioContext.json",
            "name": "complete_event",
            "slug": "API/OfflineAudioContext/complete_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/complete_event",
            "summary": "The complete event of the OfflineAudioContext interface is fired when the rendering of an offline audio context is complete.",
            "support": {
                "chrome": {
                    "version_added": "25"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OfflineAudioContext: complete event"
        }
    ],
    "dom-offlineaudiocontext-offlineaudiocontext": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OfflineAudioContext.json",
            "name": "OfflineAudioContext",
            "slug": "API/OfflineAudioContext/OfflineAudioContext",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/OfflineAudioContext",
            "summary": "The OfflineAudioContext() constructor—part of the Web Audio API—creates and returns a new OfflineAudioContext object instance, which can then be used to render audio to an AudioBuffer rather than to an audio output device.",
            "support": {
                "chrome": [
                    {
                        "version_added": "35"
                    },
                    {
                        "version_added": "25",
                        "version_removed": "57",
                        "prefix": "webkit"
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": [
                    {
                        "version_added": "14.1"
                    },
                    {
                        "version_added": "7",
                        "version_removed": "14.1",
                        "prefix": "webkit"
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "57",
                        "prefix": "webkit"
                    }
                ]
            },
            "title": "OfflineAudioContext: OfflineAudioContext() constructor"
        }
    ],
    "dom-offlineaudiocontext-oncomplete": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OfflineAudioContext.json",
            "name": "complete_event",
            "slug": "API/OfflineAudioContext/complete_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/complete_event",
            "summary": "The complete event of the OfflineAudioContext interface is fired when the rendering of an offline audio context is complete.",
            "support": {
                "chrome": {
                    "version_added": "25"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OfflineAudioContext: complete event"
        }
    ],
    "dom-offlineaudiocontext-length": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OfflineAudioContext.json",
            "name": "length",
            "slug": "API/OfflineAudioContext/length",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/length",
            "summary": "The length property of the OfflineAudioContext interface returns an integer representing the size of the buffer in sample-frames.",
            "support": {
                "chrome": {
                    "version_added": "51"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "49"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OfflineAudioContext: length property"
        }
    ],
    "dom-offlineaudiocontext-resume": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OfflineAudioContext.json",
            "name": "resume",
            "slug": "API/OfflineAudioContext/resume",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/resume",
            "summary": "The resume() method of the OfflineAudioContext interface resumes the progression of time in an audio context that has been suspended. The promise resolves immediately because the OfflineAudioContext does not require the audio hardware.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "40"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OfflineAudioContext: resume() method"
        }
    ],
    "dom-offlineaudiocontext-startrendering": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OfflineAudioContext.json",
            "name": "startRendering",
            "slug": "API/OfflineAudioContext/startRendering",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/startRendering",
            "summary": "The startRendering() method of the OfflineAudioContext Interface starts rendering the audio graph, taking into account the current connections and the current scheduled changes.",
            "support": {
                "chrome": {
                    "version_added": "25"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OfflineAudioContext: startRendering() method"
        }
    ],
    "dom-offlineaudiocontext-suspend": [
        {
            "engines": [
                "blink",
                "webkit"
            ],
            "filename": "api/OfflineAudioContext.json",
            "name": "suspend",
            "slug": "API/OfflineAudioContext/suspend",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/suspend",
            "summary": "The suspend() method of the OfflineAudioContext interface schedules a suspension of the time progression in the audio context at the specified time and returns a promise. This is generally useful at the time of manipulating the audio graph synchronously on OfflineAudioContext.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": false,
                    "notes": "See <a href='https://bugzil.la/1265406'>bug 1265406</a>."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "9"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OfflineAudioContext: suspend() method"
        }
    ],
    "OfflineAudioContext": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OfflineAudioContext.json",
            "name": "OfflineAudioContext",
            "slug": "API/OfflineAudioContext",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext",
            "summary": "The OfflineAudioContext interface is an AudioContext interface representing an audio-processing graph built from linked together AudioNodes. In contrast with a standard AudioContext, an OfflineAudioContext doesn't render the audio to the device hardware; instead, it generates it, as fast as it can, and outputs the result to an AudioBuffer.",
            "support": {
                "chrome": [
                    {
                        "version_added": "35"
                    },
                    {
                        "version_added": "25",
                        "version_removed": "57",
                        "prefix": "webkit"
                    }
                ],
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": [
                    {
                        "version_added": "14.1"
                    },
                    {
                        "version_added": "7",
                        "version_removed": "14.1",
                        "prefix": "webkit"
                    }
                ],
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": [
                    {
                        "version_added": "79"
                    },
                    {
                        "version_added": false,
                        "version_removed": "57",
                        "prefix": "webkit"
                    }
                ]
            },
            "title": "OfflineAudioContext"
        }
    ],
    "dom-oscillatornode-oscillatornode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OscillatorNode.json",
            "name": "OscillatorNode",
            "slug": "API/OscillatorNode/OscillatorNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/OscillatorNode",
            "summary": "The OscillatorNode() constructor of the Web Audio API creates a new OscillatorNode object which is an AudioNode that represents a periodic waveform, like a sine wave, optionally setting the node's properties' values to match values in a specified object.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OscillatorNode: OscillatorNode() constructor"
        }
    ],
    "dom-oscillatornode-detune": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OscillatorNode.json",
            "name": "detune",
            "slug": "API/OscillatorNode/detune",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/detune",
            "summary": "The detune property of the OscillatorNode interface is an a-rate AudioParam representing detuning of oscillation in cents.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OscillatorNode: detune property"
        }
    ],
    "dom-oscillatornode-frequency": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OscillatorNode.json",
            "name": "frequency",
            "slug": "API/OscillatorNode/frequency",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/frequency",
            "summary": "The frequency property of the OscillatorNode interface is an a-rate AudioParam representing the frequency of oscillation in hertz.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OscillatorNode: frequency property"
        }
    ],
    "dom-oscillatornode-setperiodicwave": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OscillatorNode.json",
            "name": "setPeriodicWave",
            "slug": "API/OscillatorNode/setPeriodicWave",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/setPeriodicWave",
            "summary": "The setPeriodicWave() method of the OscillatorNode interface is used to point to a PeriodicWave defining a periodic waveform that can be used to shape the oscillator's output, when type is custom.",
            "support": {
                "chrome": {
                    "version_added": "30"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OscillatorNode: setPeriodicWave() method"
        }
    ],
    "dom-oscillatornode-type": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OscillatorNode.json",
            "name": "type",
            "slug": "API/OscillatorNode/type",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/type",
            "summary": "The type property of the OscillatorNode interface specifies what shape of waveform the oscillator will output. There are several common waveforms available, as well as an option to specify a custom waveform shape. The shape of the waveform will affect the tone that is produced.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OscillatorNode: type property"
        }
    ],
    "OscillatorNode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/OscillatorNode.json",
            "name": "OscillatorNode",
            "slug": "API/OscillatorNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode",
            "summary": "The OscillatorNode interface represents a periodic waveform, such as a sine wave. It is an AudioScheduledSourceNode audio-processing module that causes a specified frequency of a given wave to be created—in effect, a constant tone.",
            "support": {
                "chrome": {
                    "version_added": "20"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "OscillatorNode"
        }
    ],
    "dom-pannernode-pannernode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PannerNode.json",
            "name": "PannerNode",
            "slug": "API/PannerNode/PannerNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/PannerNode",
            "summary": "The PannerNode() constructor of the Web Audio API creates a new PannerNode object instance.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PannerNode: PannerNode() constructor"
        }
    ],
    "dom-pannernode-coneinnerangle": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PannerNode.json",
            "name": "coneInnerAngle",
            "slug": "API/PannerNode/coneInnerAngle",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneInnerAngle",
            "summary": "The coneInnerAngle property of the PannerNode interface is a double value describing the angle, in degrees, of a cone inside of which there will be no volume reduction.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PannerNode: coneInnerAngle property"
        }
    ],
    "dom-pannernode-coneouterangle": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PannerNode.json",
            "name": "coneOuterAngle",
            "slug": "API/PannerNode/coneOuterAngle",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneOuterAngle",
            "summary": "The coneOuterAngle property of the PannerNode interface is a double value describing the angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the coneOuterGain property.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PannerNode: coneOuterAngle property"
        }
    ],
    "dom-pannernode-coneoutergain": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PannerNode.json",
            "name": "coneOuterGain",
            "slug": "API/PannerNode/coneOuterGain",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneOuterGain",
            "summary": "The coneOuterGain property of the PannerNode interface is a double value, describing the amount of volume reduction outside the cone, defined by the coneOuterAngle attribute.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PannerNode: coneOuterGain property"
        }
    ],
    "dom-pannernode-distancemodel": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PannerNode.json",
            "name": "distanceModel",
            "slug": "API/PannerNode/distanceModel",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/distanceModel",
            "summary": "The distanceModel property of the PannerNode interface is an enumerated value determining which algorithm to use to reduce the volume of the audio source as it moves away from the listener.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PannerNode: distanceModel property"
        }
    ],
    "dom-pannernode-maxdistance": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PannerNode.json",
            "name": "maxDistance",
            "slug": "API/PannerNode/maxDistance",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/maxDistance",
            "summary": "The maxDistance property of the PannerNode interface is a double value representing the maximum distance between the audio source and the listener, after which the volume is not reduced any further. This value is used only by the linear distance model.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PannerNode: maxDistance property"
        }
    ],
    "dom-pannernode-orientationx": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PannerNode.json",
            "name": "orientationX",
            "slug": "API/PannerNode/orientationX",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationX",
            "summary": "The orientationX property of the PannerNode interface indicates the X (horizontal) component of the direction in which the audio source is facing, in a 3D Cartesian coordinate space.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PannerNode: orientationX property"
        }
    ],
    "dom-pannernode-orientationy": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PannerNode.json",
            "name": "orientationY",
            "slug": "API/PannerNode/orientationY",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationY",
            "summary": "The orientationY property of the PannerNode interface indicates the Y (vertical) component of the direction the audio source is facing, in 3D Cartesian coordinate space.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PannerNode: orientationY property"
        }
    ],
    "dom-pannernode-orientationz": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PannerNode.json",
            "name": "orientationZ",
            "slug": "API/PannerNode/orientationZ",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationZ",
            "summary": "The orientationZ property of the PannerNode interface indicates the Z (depth) component of the direction the audio source is facing, in 3D Cartesian coordinate space.",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PannerNode: orientationZ property"
        }
    ],
    "dom-pannernode-panningmodel": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PannerNode.json",
            "name": "panningModel",
            "slug": "API/PannerNode/panningModel",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/panningModel",
            "summary": "The panningModel property of the PannerNode interface is an enumerated value determining which spatialization algorithm to use to position the audio in 3D space.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PannerNode: panningModel property"
        }
    ],
    "dom-pannernode-positionx": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PannerNode.json",
            "name": "positionX",
            "slug": "API/PannerNode/positionX",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionX",
            "summary": "The positionX property of the PannerNode interface specifies the X coordinate of the audio source's position in 3D Cartesian coordinates, corresponding to the horizontal axis (left-right).",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PannerNode: positionX property"
        }
    ],
    "dom-pannernode-positiony": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PannerNode.json",
            "name": "positionY",
            "slug": "API/PannerNode/positionY",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionY",
            "summary": "The positionY property of the PannerNode interface specifies the Y coordinate of the audio source's position in 3D Cartesian coordinates, corresponding to the vertical axis (top-bottom). The complete vector is defined by the position of the audio source, given as (positionX, positionY, positionZ), and the orientation of the audio source (that is, the direction in which it's facing), given as (orientationX, orientationY, orientationZ).",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PannerNode: positionY property"
        }
    ],
    "dom-pannernode-positionz": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PannerNode.json",
            "name": "positionZ",
            "slug": "API/PannerNode/positionZ",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionZ",
            "summary": "The positionZ property of the PannerNode interface specifies the Z coordinate of the audio source's position in 3D Cartesian coordinates, corresponding to the depth axis (behind-in front of the listener). The complete vector is defined by the position of the audio source, given as (positionX, positionY, positionZ), and the orientation of the audio source (that is, the direction in which it's facing), given as (orientationX, orientationY, orientationZ).",
            "support": {
                "chrome": {
                    "version_added": "52"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "50"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PannerNode: positionZ property"
        }
    ],
    "dom-pannernode-refdistance": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PannerNode.json",
            "name": "refDistance",
            "slug": "API/PannerNode/refDistance",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/refDistance",
            "summary": "The refDistance property of the PannerNode interface is a double value representing the reference distance for reducing volume as the audio source moves further from the listener – i.e. the distance at which the volume reduction starts taking effect. This value is used by all distance models.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PannerNode: refDistance property"
        }
    ],
    "dom-pannernode-rollofffactor": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PannerNode.json",
            "name": "rolloffFactor",
            "slug": "API/PannerNode/rolloffFactor",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/rolloffFactor",
            "summary": "The rolloffFactor property of the PannerNode interface is a double value describing how quickly the volume is reduced as the source moves away from the listener. This value is used by all distance models. The rolloffFactor property's default value is 1.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PannerNode: rolloffFactor property"
        }
    ],
    "PannerNode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PannerNode.json",
            "name": "PannerNode",
            "slug": "API/PannerNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PannerNode",
            "summary": "The PannerNode interface defines an audio-processing object that represents the location, direction, and behavior of an audio source signal in a simulated physical space. This AudioNode uses right-hand Cartesian coordinates to describe the source's position as a vector and its orientation as a 3D directional cone.",
            "support": {
                "chrome": {
                    "version_added": "14"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PannerNode"
        }
    ],
    "dom-periodicwave-periodicwave": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PeriodicWave.json",
            "name": "PeriodicWave",
            "slug": "API/PeriodicWave/PeriodicWave",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PeriodicWave/PeriodicWave",
            "summary": "The PeriodicWave() constructor of the Web Audio API creates a new PeriodicWave object instance.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PeriodicWave: PeriodicWave() constructor"
        }
    ],
    "PeriodicWave": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/PeriodicWave.json",
            "name": "PeriodicWave",
            "slug": "API/PeriodicWave",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/PeriodicWave",
            "summary": "The PeriodicWave interface defines a periodic waveform that can be used to shape the output of an OscillatorNode.",
            "support": {
                "chrome": {
                    "version_added": "30"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": {
                    "version_added": "26"
                },
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "PeriodicWave"
        }
    ],
    "dom-stereopannernode-stereopannernode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/StereoPannerNode.json",
            "name": "StereoPannerNode",
            "slug": "API/StereoPannerNode/StereoPannerNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode/StereoPannerNode",
            "summary": "The StereoPannerNode() constructor of the Web Audio API creates a new StereoPannerNode object which is an AudioNode that represents a simple stereo panner node that can be used to pan an audio stream left or right.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "StereoPannerNode: StereoPannerNode() constructor"
        }
    ],
    "dom-stereopannernode-pan": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/StereoPannerNode.json",
            "name": "pan",
            "slug": "API/StereoPannerNode/pan",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode/pan",
            "summary": "The pan property of the StereoPannerNode interface is an a-rate AudioParam representing the amount of panning to apply. The value can range between -1 (full left pan) and 1 (full right pan).",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "37"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "StereoPannerNode: pan property"
        }
    ],
    "stereopannernode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/StereoPannerNode.json",
            "name": "StereoPannerNode",
            "slug": "API/StereoPannerNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/StereoPannerNode",
            "summary": "The StereoPannerNode interface of the Web Audio API represents a simple stereo panner node that can be used to pan an audio stream left or right. It is an AudioNode audio-processing module that positions an incoming audio stream in a stereo image using a low-cost equal-power panning algorithm.",
            "support": {
                "chrome": {
                    "version_added": "41"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "37"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "StereoPannerNode"
        }
    ],
    "dom-waveshapernode-waveshapernode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WaveShaperNode.json",
            "name": "WaveShaperNode",
            "slug": "API/WaveShaperNode/WaveShaperNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode/WaveShaperNode",
            "summary": "The WaveShaperNode() constructor of the Web Audio API creates a new WaveShaperNode object which is an AudioNode that represents a non-linear distorter.",
            "support": {
                "chrome": {
                    "version_added": "55"
                },
                "chrome_android": "mirror",
                "edge": "mirror",
                "firefox": {
                    "version_added": "53"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "14.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WaveShaperNode: WaveShaperNode() constructor"
        }
    ],
    "dom-waveshapernode-curve": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WaveShaperNode.json",
            "name": "curve",
            "slug": "API/WaveShaperNode/curve",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode/curve",
            "summary": "The curve property of the WaveShaperNode interface is a Float32Array of numbers describing the distortion to apply.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WaveShaperNode: curve property"
        }
    ],
    "dom-waveshapernode-oversample": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WaveShaperNode.json",
            "name": "oversample",
            "slug": "API/WaveShaperNode/oversample",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode/oversample",
            "summary": "The oversample property of the WaveShaperNode interface is an enumerated value indicating if oversampling must be used. Oversampling is a technique for creating more samples (up-sampling) before applying a distortion effect to the audio signal.",
            "support": {
                "chrome": {
                    "version_added": "29"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "26"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WaveShaperNode: oversample property"
        }
    ],
    "WaveShaperNode": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/WaveShaperNode.json",
            "name": "WaveShaperNode",
            "slug": "API/WaveShaperNode",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode",
            "summary": "The WaveShaperNode interface represents a non-linear distorter.",
            "support": {
                "chrome": {
                    "version_added": "15"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "25"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "4.4.3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "WaveShaperNode"
        }
    ]
}
