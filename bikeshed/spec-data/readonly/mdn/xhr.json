{
    "dom-formdata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/FormData.json",
            "name": "FormData",
            "slug": "API/FormData/FormData",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/FormData/FormData",
            "summary": "The FormData() constructor creates a new FormData object.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "FormData: FormData() constructor"
        }
    ],
    "dom-formdata-append": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/FormData.json",
            "name": "append",
            "slug": "API/FormData/append",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/FormData/append",
            "summary": "The append() method of the FormData interface appends a new value onto an existing key inside a FormData object, or adds the key if it does not already exist.",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4",
                    "notes": "Before Firefox 7, specifying a <a href='https://developer.mozilla.org/docs/Web/API/Blob'><code>Blob</code></a> as the data to append to the object, the filename reported in the <code>Content-Disposition</code> HTTP header was an empty string, resulting in errors on some servers. Starting with Firefox 7, the filename <code>blob</code> is sent."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10",
                    "notes": "With the \"Include local directory pass when uploading files to a server\" option enabled, IE will change the filename inside the <a href='https://developer.mozilla.org/docs/Web/API/Blob'><code>Blob</code></a> on the fly. To have direct control of the sent filename, the developer should send the filename as the third parameter value, i.e. <code>formData.append(name, value, filename)</code>."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3",
                    "notes": "XHR in Android 4.0 sends empty content for <code>FormData</code> with <code>blob</code>."
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "FormData: append() method"
        }
    ],
    "dom-formdata-delete": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/FormData.json",
            "name": "delete",
            "slug": "API/FormData/delete",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/FormData/delete",
            "summary": "The delete() method of the FormData interface deletes a key and its value(s) from a FormData object.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "39"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "FormData: delete() method"
        }
    ],
    "dom-formdata-get": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/FormData.json",
            "name": "get",
            "slug": "API/FormData/get",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/FormData/get",
            "summary": "The get() method of the FormData interface returns the first value associated with a given key from within a FormData object. If you expect multiple values and want all of them, use the getAll() method instead.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "39"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "FormData: get() method"
        }
    ],
    "dom-formdata-getall": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/FormData.json",
            "name": "getAll",
            "slug": "API/FormData/getAll",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/FormData/getAll",
            "summary": "The getAll() method of the FormData interface returns all the values associated with a given key from within a FormData object.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "39"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "FormData: getAll() method"
        }
    ],
    "dom-formdata-has": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/FormData.json",
            "name": "has",
            "slug": "API/FormData/has",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/FormData/has",
            "summary": "The has() method of the FormData interface returns whether a FormData object contains a certain key.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "39"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "FormData: has() method"
        }
    ],
    "dom-formdata-set": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/FormData.json",
            "name": "set",
            "slug": "API/FormData/set",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/FormData/set",
            "summary": "The set() method of the FormData interface sets a new value for an existing key inside a FormData object, or adds the key/value if it does not already exist.",
            "support": {
                "chrome": {
                    "version_added": "50"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "18"
                },
                "firefox": {
                    "version_added": "39"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "11.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "FormData: set() method"
        }
    ],
    "interface-formdata": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/FormData.json",
            "name": "FormData",
            "slug": "API/FormData",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/FormData",
            "summary": "The FormData interface provides a way to construct a set of key/value pairs representing form fields and their values, which can be sent using the fetch(), XMLHttpRequest.send() or navigator.sendBeacon() methods. It uses the same format a form would use if the encoding type were set to \"multipart/form-data\".",
            "support": {
                "chrome": {
                    "version_added": "5"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.0"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "4",
                    "notes": "Before Firefox 7, specifying a <a href='https://developer.mozilla.org/docs/Web/API/Blob'><code>Blob</code></a> as the data to append to the object, the filename reported in the <code>Content-Disposition</code> HTTP header was an empty string, resulting in errors on some servers. Starting with Firefox 7, the filename <code>blob</code> is sent."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "nodejs": {
                    "version_added": "18.0.0"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5"
                },
                "safari_ios": {
                    "version_added": "5"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3",
                    "notes": "XHR in Android 4.0 sends empty content for <code>FormData</code> with <code>blob</code>."
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "FormData"
        }
    ],
    "dom-progressevent-progressevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ProgressEvent.json",
            "name": "ProgressEvent",
            "slug": "API/ProgressEvent/ProgressEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/ProgressEvent",
            "summary": "The ProgressEvent() constructor returns a new ProgressEvent object, representing the current completion of a long process.",
            "support": {
                "chrome": {
                    "version_added": "16"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.3"
                },
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "18"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "6"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ProgressEvent: ProgressEvent() constructor"
        }
    ],
    "dom-progressevent-lengthcomputable": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ProgressEvent.json",
            "name": "lengthComputable",
            "slug": "API/ProgressEvent/lengthComputable",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/lengthComputable",
            "summary": "The ProgressEvent.lengthComputable read-only property is a boolean flag indicating if the resource concerned by the ProgressEvent has a length that can be calculated. If not, the ProgressEvent.total property has no significant value.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.3"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ProgressEvent: lengthComputable property"
        }
    ],
    "dom-progressevent-loaded": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ProgressEvent.json",
            "name": "loaded",
            "slug": "API/ProgressEvent/loaded",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/loaded",
            "summary": "The ProgressEvent.loaded read-only property is an integer representing the amount of work already performed by the underlying process. The ratio of work done can be calculated with the property and ProgressEvent.total. When downloading a resource using HTTP, this value is specified in bytes (not bits), and only represents the part of the content itself, not headers and other overhead.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.3"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ProgressEvent: loaded property"
        }
    ],
    "dom-progressevent-total": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ProgressEvent.json",
            "name": "total",
            "slug": "API/ProgressEvent/total",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent/total",
            "summary": "The ProgressEvent.total read-only property is an unsigned 64-bit integer value indicating the total size of the data being processed or transmitted. In the case of an HTTP transmission, this is the size of the body of the message (the Content-Length), and does not include headers and other overhead.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.3"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ProgressEvent: total property"
        }
    ],
    "interface-progressevent": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/ProgressEvent.json",
            "name": "ProgressEvent",
            "slug": "API/ProgressEvent",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/ProgressEvent",
            "summary": "The ProgressEvent interface represents events measuring progress of an underlying process, like an HTTP request (for an XMLHttpRequest, or the loading of the underlying resource of an <img>, <audio>, <video>, <style> or <link>).",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "deno": {
                    "version_added": "1.3"
                },
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "ProgressEvent"
        }
    ],
    "dom-xmlhttprequest": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "XMLHttpRequest",
            "slug": "API/XMLHttpRequest/XMLHttpRequest",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/XMLHttpRequest",
            "summary": "The XMLHttpRequest() constructor creates a new XMLHttpRequest.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "7"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: XMLHttpRequest() constructor"
        }
    ],
    "the-abort()-method": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "abort",
            "slug": "API/XMLHttpRequest/abort",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort",
            "summary": "The XMLHttpRequest.abort() method aborts the request if it has already been sent. When a request is aborted, its readyState is changed to XMLHttpRequest.UNSENT (0) and the request's status code is set to 0.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: abort() method"
        }
    ],
    "event-xhr-abort": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "abort_event",
            "slug": "API/XMLHttpRequest/abort_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort_event",
            "summary": "The abort event is fired when a request has been aborted, for example because the program called XMLHttpRequest.abort().",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: abort event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequestUpload.json",
            "name": "abort_event",
            "slug": "API/XMLHttpRequestUpload/abort_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestUpload/abort_event",
            "summary": "The abort event is fired at XMLHttpRequestUpload when a request has been aborted, for example because the program called XMLHttpRequest.abort().",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequestUpload: abort event"
        }
    ],
    "handler-xhr-onabort": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "abort_event",
            "slug": "API/XMLHttpRequest/abort_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort_event",
            "summary": "The abort event is fired when a request has been aborted, for example because the program called XMLHttpRequest.abort().",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: abort event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequestUpload.json",
            "name": "abort_event",
            "slug": "API/XMLHttpRequestUpload/abort_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestUpload/abort_event",
            "summary": "The abort event is fired at XMLHttpRequestUpload when a request has been aborted, for example because the program called XMLHttpRequest.abort().",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequestUpload: abort event"
        }
    ],
    "event-xhr-error": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "error_event",
            "slug": "API/XMLHttpRequest/error_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/error_event",
            "summary": "The error event is fired when the request encountered an error.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: error event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequestUpload.json",
            "name": "error_event",
            "slug": "API/XMLHttpRequestUpload/error_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestUpload/error_event",
            "summary": "The error event is fired when the request encountered an error.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequestUpload: error event"
        }
    ],
    "handler-xhr-onerror": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "error_event",
            "slug": "API/XMLHttpRequest/error_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/error_event",
            "summary": "The error event is fired when the request encountered an error.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: error event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequestUpload.json",
            "name": "error_event",
            "slug": "API/XMLHttpRequestUpload/error_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestUpload/error_event",
            "summary": "The error event is fired when the request encountered an error.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequestUpload: error event"
        }
    ],
    "the-getallresponseheaders()-method": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "getAllResponseHeaders",
            "slug": "API/XMLHttpRequest/getAllResponseHeaders",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders",
            "summary": "The XMLHttpRequest method getAllResponseHeaders() returns all the response headers, separated by CRLF, as a string, or returns null if no response has been received.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Starting from Firefox 49, empty headers are returned as empty strings in case the preference <code>network.http.keep_empty_response_headers_as_empty_string</code> is set to <code>true</code>, defaulting to <code>false</code>. Before Firefox 49 empty headers had been ignored. Since Firefox 50 the preference defaults to <code>true</code>."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: getAllResponseHeaders() method"
        }
    ],
    "dom-xmlhttprequest-getresponseheader": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "getResponseHeader",
            "slug": "API/XMLHttpRequest/getResponseHeader",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getResponseHeader",
            "summary": "The XMLHttpRequest method getResponseHeader() returns the string containing the text of a particular header's value.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Starting from Firefox 49, empty headers are returned as empty strings in case the preference <code>network.http.keep_empty_response_headers_as_empty_string</code> is set to <code>true</code>, defaulting to <code>false</code>. Before Firefox 49 empty headers had been ignored. Since Firefox 50 the preference defaults to <code>true</code>."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: getResponseHeader() method"
        }
    ],
    "event-xhr-load": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "load_event",
            "slug": "API/XMLHttpRequest/load_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/load_event",
            "summary": "The load event is fired when an XMLHttpRequest transaction completes successfully.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: load event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequestUpload.json",
            "name": "load_event",
            "slug": "API/XMLHttpRequestUpload/load_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestUpload/load_event",
            "summary": "The load event is fired when an XMLHttpRequestUpload transaction completes successfully.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequestUpload: load event"
        }
    ],
    "handler-xhr-onload": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "load_event",
            "slug": "API/XMLHttpRequest/load_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/load_event",
            "summary": "The load event is fired when an XMLHttpRequest transaction completes successfully.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "9"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: load event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequestUpload.json",
            "name": "load_event",
            "slug": "API/XMLHttpRequestUpload/load_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestUpload/load_event",
            "summary": "The load event is fired when an XMLHttpRequestUpload transaction completes successfully.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequestUpload: load event"
        }
    ],
    "event-xhr-loadend": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "loadend_event",
            "slug": "API/XMLHttpRequest/loadend_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/loadend_event",
            "summary": "The loadend event is fired when a request has completed, whether successfully (after load) or unsuccessfully (after abort or error).",
            "support": {
                "chrome": {
                    "version_added": "18"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: loadend event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequestUpload.json",
            "name": "loadend_event",
            "slug": "API/XMLHttpRequestUpload/loadend_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestUpload/loadend_event",
            "summary": "The loadend event is fired when a request has completed, whether successfully (after load) or unsuccessfully (after abort or error).",
            "support": {
                "chrome": {
                    "version_added": "18"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequestUpload: loadend event"
        }
    ],
    "handler-xhr-onloadend": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "loadend_event",
            "slug": "API/XMLHttpRequest/loadend_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/loadend_event",
            "summary": "The loadend event is fired when a request has completed, whether successfully (after load) or unsuccessfully (after abort or error).",
            "support": {
                "chrome": {
                    "version_added": "18"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: loadend event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequestUpload.json",
            "name": "loadend_event",
            "slug": "API/XMLHttpRequestUpload/loadend_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestUpload/loadend_event",
            "summary": "The loadend event is fired when a request has completed, whether successfully (after load) or unsuccessfully (after abort or error).",
            "support": {
                "chrome": {
                    "version_added": "18"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequestUpload: loadend event"
        }
    ],
    "event-xhr-loadstart": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "loadstart_event",
            "slug": "API/XMLHttpRequest/loadstart_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/loadstart_event",
            "summary": "The loadstart event is fired when a request has started to load data.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: loadstart event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequestUpload.json",
            "name": "loadstart_event",
            "slug": "API/XMLHttpRequestUpload/loadstart_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestUpload/loadstart_event",
            "summary": "The loadstart event is fired when a request has started to load data.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequestUpload: loadstart event"
        }
    ],
    "handler-xhr-onloadstart": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "loadstart_event",
            "slug": "API/XMLHttpRequest/loadstart_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/loadstart_event",
            "summary": "The loadstart event is fired when a request has started to load data.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.3"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: loadstart event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequestUpload.json",
            "name": "loadstart_event",
            "slug": "API/XMLHttpRequestUpload/loadstart_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestUpload/loadstart_event",
            "summary": "The loadstart event is fired when a request has started to load data.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequestUpload: loadstart event"
        }
    ],
    "the-open()-method": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "open",
            "slug": "API/XMLHttpRequest/open",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open",
            "summary": "The XMLHttpRequest method open() initializes a newly-created request, or re-initializes an existing one.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Starting in Firefox 30, synchronous requests on the main thread have been deprecated due to their negative impact on performance and the user experience. Therefore, the <code>async</code> parameter may not be <code>false</code> except in a <code>Worker</code>."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: open() method"
        }
    ],
    "the-overridemimetype()-method": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "overrideMimeType",
            "slug": "API/XMLHttpRequest/overrideMimeType",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/overrideMimeType",
            "summary": "The XMLHttpRequest method overrideMimeType() specifies a MIME type other than the one provided by the server to be used instead when interpreting the data being transferred in a request.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": [
                    {
                        "version_added": "11"
                    },
                    {
                        "version_added": "5",
                        "partial_implementation": true,
                        "notes": "Implemented via <code>ActiveXObject</code>"
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: overrideMimeType() method"
        }
    ],
    "event-xhr-progress": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "progress_event",
            "slug": "API/XMLHttpRequest/progress_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/progress_event",
            "summary": "The progress event is fired periodically when a request receives more data.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: progress event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequestUpload.json",
            "name": "progress_event",
            "slug": "API/XMLHttpRequestUpload/progress_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestUpload/progress_event",
            "summary": "The progress event is fired periodically when a request receives more data.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequestUpload: progress event"
        }
    ],
    "handler-xhr-onprogress": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "progress_event",
            "slug": "API/XMLHttpRequest/progress_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/progress_event",
            "summary": "The progress event is fired periodically when a request receives more data.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: progress event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequestUpload.json",
            "name": "progress_event",
            "slug": "API/XMLHttpRequestUpload/progress_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestUpload/progress_event",
            "summary": "The progress event is fired periodically when a request receives more data.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequestUpload: progress event"
        }
    ],
    "states": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "readyState",
            "slug": "API/XMLHttpRequest/readyState",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState",
            "summary": "The XMLHttpRequest.readyState property returns the state an XMLHttpRequest client is in. An XHR client exists in one of the following states:",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "7"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: readyState property"
        }
    ],
    "event-xhr-readystatechange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "readystatechange_event",
            "slug": "API/XMLHttpRequest/readystatechange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readystatechange_event",
            "summary": "The readystatechange event is fired whenever the readyState property of the XMLHttpRequest changes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: readystatechange event"
        }
    ],
    "handler-xhr-onreadystatechange": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "readystatechange_event",
            "slug": "API/XMLHttpRequest/readystatechange_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readystatechange_event",
            "summary": "The readystatechange event is fired whenever the readyState property of the XMLHttpRequest changes.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "9"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: readystatechange event"
        }
    ],
    "the-response-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "response",
            "slug": "API/XMLHttpRequest/response",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/response",
            "summary": "The XMLHttpRequest response property returns the response's body content as an ArrayBuffer, a Blob, a Document, a JavaScript Object, or a string, depending on the value of the request's responseType property.",
            "support": {
                "chrome": {
                    "version_added": "9"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "11.6"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "3"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: response property"
        }
    ],
    "the-responsetext-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "responseText",
            "slug": "API/XMLHttpRequest/responseText",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseText",
            "summary": "The read-only XMLHttpRequest property responseText returns the text received from a server following a request being sent.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5",
                    "notes": "Before Internet Explorer 10, the value of <code>XMLHttpRequest.responseText</code> could be read only once the request was complete."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: responseText property"
        }
    ],
    "the-responsetype-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "responseType",
            "slug": "API/XMLHttpRequest/responseType",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType",
            "summary": "The XMLHttpRequest property responseType is an enumerated string value specifying the type of data contained in the response.",
            "support": {
                "chrome": {
                    "version_added": "31"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "6"
                },
                "firefox_android": {
                    "version_added": "50"
                },
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "18"
                    },
                    {
                        "version_added": "12",
                        "version_removed": "15"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "18"
                    },
                    {
                        "version_added": "12",
                        "version_removed": "14"
                    }
                ],
                "safari": {
                    "version_added": "5.1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: responseType property"
        }
    ],
    "the-responseurl-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "responseURL",
            "slug": "API/XMLHttpRequest/responseURL",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseURL",
            "summary": "The read-only XMLHttpRequest.responseURL property returns the serialized URL of the response or the empty string if the URL is null. If the URL is returned, any URL fragment present in the URL will be stripped away. The value of responseURL will be the final URL obtained after any redirects.",
            "support": {
                "chrome": {
                    "version_added": "37"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "14"
                },
                "firefox": {
                    "version_added": "32"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": false
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "8"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: responseURL property"
        }
    ],
    "the-responsexml-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "responseXML",
            "slug": "API/XMLHttpRequest/responseXML",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML",
            "summary": "The XMLHttpRequest.responseXML read-only property returns a Document containing the HTML or XML retrieved by the request; or null if the request was unsuccessful, has not yet been sent, or if the data can't be parsed as XML or HTML.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1",
                    "notes": "Before Firefox 51, an error parsing the received data added a <code>&lt;parsererror&gt;</code> node to the top of the <code>Document</code> and then returned the <code>Document</code> in whatever state it happens to be in. This was inconsistent with the specification. Starting with Firefox 51, this scenario now correctly returns <code>null</code> as per the spec."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "7"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "3"
                },
                "safari_ios": {
                    "version_added": "1"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: responseXML property"
        }
    ],
    "the-send()-method": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "send",
            "slug": "API/XMLHttpRequest/send",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/send",
            "summary": "The XMLHttpRequest method send() sends the request to the server.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: send() method"
        }
    ],
    "the-setrequestheader()-method": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "setRequestHeader",
            "slug": "API/XMLHttpRequest/setRequestHeader",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader",
            "summary": "The XMLHttpRequest method setRequestHeader() sets the value of an HTTP request header. When using setRequestHeader(), you must call it after calling open(), but before calling send(). If this method is called several times with the same header, the values are merged into one single request header.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "5"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: setRequestHeader() method"
        }
    ],
    "the-status-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "status",
            "slug": "API/XMLHttpRequest/status",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status",
            "summary": "The read-only XMLHttpRequest.status property returns the numerical HTTP status code of the XMLHttpRequest's response.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "7",
                    "notes": "Internet Explorer version 5 and 6 supported ajax calls using <code>ActiveXObject()</code>"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: status property"
        }
    ],
    "the-statustext-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "statusText",
            "slug": "API/XMLHttpRequest/statusText",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/statusText",
            "summary": "The read-only XMLHttpRequest.statusText property returns a string containing the response's status message as returned by the HTTP server. Unlike XMLHTTPRequest.status which indicates a numerical status code, this property contains the text of the response status, such as \"OK\" or \"Not Found\". If the request's readyState is in UNSENT or OPENED state, the value of statusText will be an empty string.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "7",
                    "notes": "Internet Explorer version 5 and 6 supported ajax calls using <code>ActiveXObject()</code>"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: statusText property"
        }
    ],
    "the-timeout-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "timeout",
            "slug": "API/XMLHttpRequest/timeout",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout",
            "summary": "The XMLHttpRequest.timeout property is an unsigned long representing the number of milliseconds a request can take before automatically being terminated. The default value is 0, which means there is no timeout. Timeout shouldn't be used for synchronous XMLHttpRequests requests used in a document environment or it will throw an InvalidAccessError exception. When a timeout happens, a timeout event is fired.",
            "support": {
                "chrome": {
                    "version_added": "29"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "12"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": [
                    {
                        "version_added": "17"
                    },
                    {
                        "version_added": "12",
                        "version_removed": "16"
                    }
                ],
                "opera_android": [
                    {
                        "version_added": "18"
                    },
                    {
                        "version_added": "12",
                        "version_removed": "16"
                    }
                ],
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: timeout property"
        }
    ],
    "event-xhr-timeout": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "timeout_event",
            "slug": "API/XMLHttpRequest/timeout_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout_event",
            "summary": "The timeout event is fired when progression is terminated due to preset time expiring.",
            "support": {
                "chrome": {
                    "version_added": "29"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "12"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: timeout event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequestUpload.json",
            "name": "timeout_event",
            "slug": "API/XMLHttpRequestUpload/timeout_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestUpload/timeout_event",
            "summary": "The timeout event is fired when progression is terminated due to preset time expiring.",
            "support": {
                "chrome": {
                    "version_added": "29"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "12"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequestUpload: timeout event"
        }
    ],
    "handler-xhr-ontimeout": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "timeout_event",
            "slug": "API/XMLHttpRequest/timeout_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout_event",
            "summary": "The timeout event is fired when progression is terminated due to preset time expiring.",
            "support": {
                "chrome": {
                    "version_added": "29"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "12"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "8"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: timeout event"
        },
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequestUpload.json",
            "name": "timeout_event",
            "slug": "API/XMLHttpRequestUpload/timeout_event",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestUpload/timeout_event",
            "summary": "The timeout event is fired when progression is terminated due to preset time expiring.",
            "support": {
                "chrome": {
                    "version_added": "29"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "12"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": "mirror",
                "opera_android": "mirror",
                "safari": {
                    "version_added": "7"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": {
                    "version_added": "1.0"
                },
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequestUpload: timeout event"
        }
    ],
    "the-upload-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "upload",
            "slug": "API/XMLHttpRequest/upload",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/upload",
            "summary": "The XMLHttpRequest upload property returns an XMLHttpRequestUpload object that can be observed to monitor an upload's progress.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: upload property"
        }
    ],
    "the-withcredentials-attribute": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "withCredentials",
            "slug": "API/XMLHttpRequest/withCredentials",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials",
            "summary": "The XMLHttpRequest.withCredentials property is a boolean value that indicates whether or not cross-site Access-Control requests should be made using credentials such as cookies, authorization headers or TLS client certificates. Setting withCredentials has no effect on same-origin requests.",
            "support": {
                "chrome": {
                    "version_added": "3"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5",
                    "notes": "Starting with Firefox 11, it's no longer supported to use the <code>withCredentials</code> attribute when performing synchronous requests. Attempting to do so throws an <code>NS_ERROR_DOM_INVALID_ACCESS_ERR</code> exception."
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10",
                    "notes": "Internet Explorer versions 8 and 9 supported cross-domain requests (CORS) using <a href='https://developer.mozilla.org/docs/Web/API/XDomainRequest'><code>XDomainRequest</code></a>."
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12"
                },
                "opera_android": {
                    "version_added": "12"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest: withCredentials property"
        }
    ],
    "interface-xmlhttprequest": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequest.json",
            "name": "XMLHttpRequest",
            "slug": "API/XMLHttpRequest",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest",
            "summary": "XMLHttpRequest (XHR) objects are used to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": [
                    {
                        "version_added": "7"
                    },
                    {
                        "version_added": "5",
                        "partial_implementation": true,
                        "notes": "Implemented via <code>ActiveXObject('Microsoft.XMLHTTP')</code>"
                    }
                ],
                "oculus": "mirror",
                "opera": {
                    "version_added": "8"
                },
                "opera_android": {
                    "version_added": "10.1"
                },
                "safari": {
                    "version_added": "1.2"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequest"
        }
    ],
    "xmlhttprequesteventtarget": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequestEventTarget.json",
            "name": "XMLHttpRequestEventTarget",
            "slug": "API/XMLHttpRequestEventTarget",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestEventTarget",
            "summary": "XMLHttpRequestEventTarget is the interface that describes the event handlers shared on XMLHttpRequest and XMLHttpRequestUpload.",
            "support": {
                "chrome": {
                    "version_added": "1"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "1"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "7"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "1"
                },
                "safari_ios": "mirror",
                "samsunginternet_android": "mirror",
                "webview_android": "mirror",
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequestEventTarget"
        }
    ],
    "xmlhttprequestupload": [
        {
            "engines": [
                "blink",
                "gecko",
                "webkit"
            ],
            "filename": "api/XMLHttpRequestUpload.json",
            "name": "XMLHttpRequestUpload",
            "slug": "API/XMLHttpRequestUpload",
            "mdn_url": "https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequestUpload",
            "summary": "The XMLHttpRequestUpload interface represents the upload process for a specific XMLHttpRequest. It is an opaque object that represents the underlying, browser-dependent, upload process. It is an XMLHttpRequestEventTarget and can be obtained by calling XMLHttpRequest.upload.",
            "support": {
                "chrome": {
                    "version_added": "2"
                },
                "chrome_android": "mirror",
                "edge": {
                    "version_added": "12"
                },
                "firefox": {
                    "version_added": "3.5"
                },
                "firefox_android": "mirror",
                "ie": {
                    "version_added": "10"
                },
                "oculus": "mirror",
                "opera": {
                    "version_added": "12.1"
                },
                "opera_android": {
                    "version_added": "12.1"
                },
                "safari": {
                    "version_added": "4"
                },
                "safari_ios": {
                    "version_added": "3"
                },
                "samsunginternet_android": "mirror",
                "webview_android": {
                    "version_added": "37"
                },
                "edge_blink": {
                    "version_added": "79"
                }
            },
            "title": "XMLHttpRequestUpload"
        }
    ]
}
