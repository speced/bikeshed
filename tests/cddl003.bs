<pre class=metadata>
Title: Foo
Group: test
Shortname: foo
Level: 1
Status: LS
ED: http://example.com/foo
Abstract: Testing CDDL modules and shorthand notation.
Editor: Example Editor
Date: 1970-01-01
Markup Shorthands: markdown yes
</pre>

The CDDL {#cddl}
================

Specs may define multiple CDDL modules. These modules must be defined with a `<dfn>` of type `cddl-module`. For example, this test defines:

- the <dfn cddl-module>local end</dfn> module;
- the <dfn cddl-module>remote end</dfn> module.

CDDL blocks can then reference the definitions through a `data-cddl-module` attribute set to the name(s) of the CDDL module they are defined in.

The specific `all` value makes it possible to define CDDL that would only appear in the union of all CDDL modules, which gets produced by Reffy into Webref. That "all" module is not a real one but may be useful in authoring tools, e.g., to enable autocomplete. Using the specific `all` value should only be useful to create an artificial CDDL root type in the fake CDDL module. These definitions do not appear in the CDDL index that get produced at the end of the spec:

<xmp class=cddl data-cddl-module="all">
all = agent-capability / webExtension.ExtensionBase64Encoded
</xmp>

CDDL specified for the {^local end^}:

<xmp class=cddl data-cddl-module="local end">
agent-capability = &(
  receive-audio: 1
  receive-video: 2
  receive-presentation: 3
  control-presentation: 4
  receive-remote-playback: 5
  control-remote-playback: 6
  receive-streaming: 7
  send-streaming: 8
)
</xmp>

CDDL specified for the {^remote end^}:

<xmp class=cddl data-cddl-module="remote end">
webExtension.ExtensionBase64Encoded = {
  type: "base64",
  value: text,
}
</xmp>

CDDL specified for all modules:

<xmp class=cddl>
barewords = {
  bare: [+ float],
  "word": int,
}

anon1 = [("v1" / "v2")]
anon2 = {
  key: "v1" / "v2" / "unique"
}

nested = {
  key1: {
    key2: "nested"
  }
}

warn = [ (dupl: "val"), "dupl" ]
</xmp>

Linking to the CDDL {#links}
============================

The {^agent-capability^} production gives information about agent capabilities.

: {^agent-capability/receive-audio^}
:: The agent can receive audio
: {^agent-capability/receive-video^}
:: The agent can receive video
: {^agent-capability/receive-presentation|Alt text to receive-presentation^}
:: The agent can receive a presentation

Barewords and strings are treated the same way. For example, {^bare^} and {^"bare"^} both link to the same key definition. Same thing for {^word^} and {^"word"^}.

If there is no ambiguity, a key or value may be referenced directly, for example `{^"unique"^}` to target the "unique" value of anon2/key: {^"unique"^}.

Otherwise, full path must be specified, as in `{^anon1/"v1"^}`, `{^anon2/key/"v2"^}`, `{^nested/key1/key2/"nested"^}`: {^anon1/"v1"^}, {^anon2/key/"v2"^}, {^nested/key1/key2/"nested"^}.

In particular, partial paths such as `{^key/"unique"^}` or `{^key2/"nested"^}` do not work: {^key/"unique"^}, {^key2/"nested"^} (Bikeshed reports `No 'cddl' refs found` messages in such cases).

The {^warn^} type defines both a key and a value "dupl". Bikeshed reports a warning to the console to suggest creating additional CDDL types, because the shorthand `{^warn/dupl^}` can no longer be used. It remains possible to reference either construct by expliciting the link type, i.e., `<a cddl-key for=warn>dupl</a>` and `<a cddl-value for=warn>dupl</a>`: <a cddl-key for=warn>dupl</a>, <a cddl-value for=warn>dupl</a>.
