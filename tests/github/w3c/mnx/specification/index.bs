<style>
  .language-xml {
    font-size: 11px;
  }

  .example img {
    background-color: hsl(24, 20%, 95%);
    padding: 10px;
  }
</style>

<pre class="metadata">
Status: LD
Title: MNX Draft Specification
Shortname: cwmnx-draft
Level: 1
Editor: Joe Berkovitz, Risible LLC
Abstract: A draft specification for the MNX music notation document format.
    MNX is a proposed music notation markup standard. Its aim is to improve
    MusicXML in fundamental ways, while retaining many of its key concepts, terms
    and features. MNX seeks to provide a high degree of interoperability and
    exchange between different applications working with music notation. 
Markup Shorthands: markdown yes
Repository: w3c/mnx
Warning: Not Ready
!Participate: <a href="https://github.com/w3c/mnx/issues/new">File an issue</a> (<a href="https://github.com/w3c/mnx/issues">open issues</a>)
</pre>

<pre class="anchors">
url: https://www.w3.org/TR/REC-xml-names#NT-QName; type: dfn;
    text: QName;
url: https://www.w3.org/TR/1999/REC-xpath-19991116#dt-expanded-name; type: dfn;
    text: expanded-name;
urlPrefix: https://www.w3.org/TR/css3-syntax/; type: dfn; spec: css3-syntax;
    text: consume a component value
    text: component value
    text: environment encoding

urlPrefix: https://www.w3.org/TR/selectors4/#; type: dfn; spec: SELECTORS4
    text: type selector
    text: attribute selector
    text: pseudo-class

urlPrefix: https://www.w3.org/TR/css-cascade-4/#; type: dfn; spec: CSS-CASCADE-4
    text: specified value
    text: computed value

urlPrefix: https://www.w3.org/TR/xml/#; spec: XML; for: xml
    type: dfn; url: NT-Name; text: Name
    type: element-attr;
        url: sec-white-space; text: space

urlPrefix: https://www.w3.org/TR/xlink11/#; spec: XLINK; for: xlink; type: element-attr
    text: actuate; url: actuate-att
    text: href; url: link-locators
    url: link-semantics
        text: arcrole
        text: role
        text: title
    text: show; url: show-att
    text: type; url: link-types
    text: xlink; url: att-method

urlPrefix: https://www.w3.org/TR/xml-names/#; spec: XML-NAMES; for: xmlns; type: element-attr
    text: xmlns; url: ns-decl

url: https://www.w3.org/TR/html5/infrastructure.html#signed-integers; type: dfn; spec: html;
    text: rules for parsing integers
    text: rules for parsing signed integers
    text: valid integer
    text: signed integer

url: https://www.w3.org/TR/html5/infrastructure.html#non-negative-integers; type: dfn; spec: html;
    text: non-negative integer
    text: valid non-negative integer
    text: rules for parsing non-negative integers

url: https://www.w3.org/TR/html5/infrastructure.html#floating-point-numbers; type: dfn; spec: html;
    text: floating-point number
    text: valid floating-point number
    text: rules for parsing floating-point numbers

url: https://www.w3.org/TR/html5/infrastructure.html#percentages-and-lengths; type: dfn; spec: html;
    text: rules for parsing dimension values

url: https://www.w3.org/TR/html5/infrastructure.html#lists-of-floating-point-numbers; type: dfn; spec: html;
    text: valid list of floating-point numbers
    text: list of floating-point numbers
    text: rules for parsing a list of floating-point numbers

url: https://www.w3.org/TR/html5/infrastructure.html#space-separated-tokens; type: dfn; spec: html;
    text: set of space-separated tokens
    text: ordered set of space-separated tokens
    text: unordered set of space-separated tokens
    text: split a string on spaces

url: https://www.w3.org/TR/html5/infrastructure.html#colors; type:dfn; spec: html;
    text: simple color

url: https://w3c.github.io/musicxml/#; type: dfn;
    text: MusicXML specification

url: https://w3c.github.io/smufl/gitbook/specification#; type: dfn;
    text: SMuFL specification

url: https://w3c.github.io/smufl/gitbook/specification/glyphnames.html#; type: dfn;
    text: SMuFL glyph names

url: http://music-encoding.org/#; type: dfn;
    text: Music Encoding Initiative

url: https://www.w3.org/TR/SVG/linking.html#LinksIntoSVG; type: dfn;
    text: Linking into SVG content

</pre>
<pre class="link-defaults">
spec:dom; type:dfn; text:attribute
</pre>

<h2 id="status">Status of this document</h2>

This document is an early draft and focuses on the main structural features
that distinguish MNX from MusicXML 3.1. Many elements are omitted, or their details
are referred to the <a>MusicXML specification</a> as a placeholder.

<h2 id="introduction">Introduction</h2>

<h3 id="background">Background</h3>

  <em>This section is non-normative.</em>

  MNX is a proposed music notation markup standard, which seeks to provide a
  high degree of interoperability and exchange between different applications
  working with music notation.

  Many different sources of inspiration inform the design of MNX including
  MusicXML, the <a>Music Encoding Initiative</a>, the IEEE 1599 specification,
  and others.
<h3 id="mnx-score-types">MNX score types</h3>

  <em>This section is non-normative.</em>

MNX can support multiple <dfn>score types</dfn>. Each score type is a specific encoding that applies
to some portion of a <a>container document</a>.

The present draft of this specification deals with two <a>score types</a>:

<ul>
  <li><a href="#cwmnx">CWMNX</a>, which encodes Conventional Western Music Notation (CWMN) in a
  semantically rich fashion. It inherits many ideas and concepts from MusicXML.</li>

  <li><a href="#gmnx">GMNX</a>, where "G" is for
  <strong>G</strong>eneral. It serves as a kind of universal encoding for
  scores having arbitary graphical and audio content. In consequence, it is
  relatively free of semantics.</li>
</ul>

<h3 id="comparisons">Comparisons with other notation standards</h3>

  <em>This section is non-normative.</em>

The CWMNX score type of MNX is a lineal descendant of MusicXML, and employs
many of the same concepts. However it sacrifices some features and flexibility
of MusicXML in favor of tighter interoperability, and simplifies the element
structure considerably. CWMNX also moves all non-semantic information into CSS
properties.

MEI is a very general and expressive medium for encoding arbitrary musical
documents, with particular attention to the needs of scholars. Due to its
extreme plasticity, MEI is perhaps better described as a powerful framework
for building customized documents and applications, than as a single encoding
method. As such, interoperability has not been a main goal of MEI to date.
However there are efforts underway to define a clean MEI subset as an
interoperable medium for encoding CWMN (sometimes known as "MEI Go").

IEEE 1599 is a specification that has paid unique attention to the
relationships between different layers of musical information. Its Logic layer
is similar in content to CWMNX, while its Notational, Performance and Audio
layers answer some of the same concerns as GMNX. GMNX takes a different
approach to connecting these layers, and does not attempt to fully
unify semantic information with visual and performance data. It relies
to a greater degree on SVG, and to a lesser degree on MIDI.

<h3 id="compatibility">Compatibility with MusicXML</h3>

  <em>This section is non-normative.</em>

MNX uses MusicXML as a point of departure in many ways, but it does not
attempt to be backward-compatible with MusicXML, nor is it a superset of
MusicXML. However, a large proportion of MusicXML markup is expected to be
preserved. In these examples, MusicXML constructs are used freely throughout
as a way to show how proposed new concepts dovetail with existing ones.

Backward compatibility aside, it is a goal to be able to machine-translate
MusicXML into MNX. This is essential for migration purposes.

<h3 id="use-cases">Use cases</h3>

  <em>This section is non-normative.</em>

A companion document details a set of [known use cases for music notation](../use-cases/index.html).

<h3 id="audience">Audience</h3>

  <em>This section is non-normative.</em>

  This specification is intended for authors of documents and applications that use the features defined
  in this specification, implementors of tools that operate on documents that use the
  features defined in this specification, and individuals wishing to establish the correctness of
  documents or implementations with respect to the requirements of this specification.

  This document is probably not suited to readers who do not already have at least a passing
  familiarity with XML technologies. In places it sacrifices clarity for precision, and brevity
  for completeness. More approachable tutorials and authoring guides can provide a gentler
  introduction to the topic.

<h3 id="design-notes">Design notes</h3>

  <em>This section is non-normative.</em>

Some general principles regarding the design of this specification follow.

<dl>
  <dt>Make schematic form follow function.</dt>
  <dd>The schema of MNX tries where possible to let the constraints of an element hierarchy
    serve a useful purpose, by embodying analogous constraints in music notation. For example,
    the <{sequence}> and <{event}> elements force a musical voice in CWMN to follow conventional rules for avoiding temporal overlap.
  </dd>

  <dt>Preserve ease of reading and writing for simple content.</dt>
  <dd>While complex scores will necessarily be generated and parsed by machines, it's valuable to
    allow humans to easily create and read simple content. Therefore in some cases, encodings
    are intentionally more compact than strictly necessary. Examples in MNX include microsyntaxes
    and the use of XML attributes instead of elements for the most frequent properties.
  </dd>

  <dt>Address both literal encoding and semantic encoding.</dt>
  <dd>MNX includes two separate approaches to encoding music: high-level semantic encodings
    described by <a>CWMNX</a> (and other future modules), and low-level literal
    encodings described by <a>GMNX</a>. The literal encoding attempts to eliminate cultural
    and semantic assumptions within its scope, while still allowing linkage between the literal and
    semantic layers.
  </dd>

  <dt>Be specific about what is valid and what is not.</dt>
  <dd>MNX attempts to keep things constrained in its semantic layers, while
    the literal encoding is wide-open. While this constrains some potential expression towards the
    edges of CWMN, it enhances interoperability at the core.
  </dd>

  <dt>Address culturally specific needs in a modular fashion</dt>
  <dd>While much of the MNX specification addresses common Western music notation, nothing
    in the specification prevents the development of additional modules targeting other notation
    systems at a semantic level, or from taking other semantic approaches to Western music.
    The <a>GMNX</a> module avoids cultural specificity due to its literal focus.
  </dd>

  <dt>Separate semantic concerns from presentation/interpretation concerns.</dt>
  <dd>Within its semantic encoding for CWMNX, this specification strives to keep semantic
    descriptions from answering to the multitude of tiny features that control presentation and
    performance interpretation. These are segregated in the parallel domains of <a>style properties</a>
    and <a>interpretation content</a>.
  </dd>

  <dd>While it is challenging to ground the definition of what is "semantic" in music notation, the litmus
    test used here is the practical one of <em>widely shared understanding</em>: if the performance interpretation of some notation
    is widely shared within the culture targeted by some semantic module, then that
    aspect may be classified as semantic.</dd>

  <dt>Allow semantic encodings to "tunnel through" to the literal encoding.</dt>
  <dd>A semantic module such as CWMNX cannot supply all known information about rendering and performance, in cases
    where this knowledge lives outside the semantic markup. MNX allows semantic layers to "tunnel"
    through to employ the literal constructs of GMNX, allowing the same primitives to describe
    both entire scores at a literal level, and those fragments of a semantic score that require
    an embedded, literal description.
  </dd>

  <dt>Leverage existing value in the world</dt>
  <dd>The ecosystem of the Web is broad and valuable. MNX attempts to exploit this by making use of existing
    patterns and tooling. Examples include the reuse of many CSS concepts, and the ability to employ completely standard SVG
    documents within GMNX without need of alteration.
  </dd>
</dl>

<h4 id="design-notes-extensibility">Extensibility</h4>

  <em>This section is non-normative.</em>

  <em>Content TBD</em>

<h3 id="structure-of-this-specification">Structure of this specification</h3>

  <em>This section is non-normative.</em>

  This specification is divided into the following major sections:

  <div dfn-for="spec">
    : [[#introduction]]
    :: Non-normative materials providing a context for the HTML specification.
    : [[#infrastructure]]
    :: Scaffolding material on which the remainder of the specification relies
    : [[#mnx-container]]
    :: The high-level structure of MNX which organizes a hierarchy of musical resources in a document
    : [[#cwmnx-section]]
    :: A schema describing a musical score in Conventional Western Music Notation.
    : [[#gmnx-section]]
    :: A schema describing an arbitrary graphical score in conjunction with audio and performance data.
  </div>

<h4 id="how-to-read-this-specification">How to read this specification</h4>

  As described in the conformance requirements section below, this specification describes
  conformance criteria for a variety of conformance classes. In particular, there are conformance
  requirements that apply to <em>producers</em>, for example authors and the documents they create,
  and there are conformance requirements that apply to <em>consumers</em>, for example Web browsers.
  They can be distinguished by what they are requiring: a requirement on a producer states what is
  allowed, while a requirement on a consumer states how software is to act.

  <div class="example">
    For example, "the <code>foo</code> attribute's value must be a valid integer" is a
    requirement on producers, as it lays out the allowed values; in contrast, the requirement "the
    <code>foo</code> attribute's value must be parsed using the rules for parsing integers"
    is a requirement on consumers, as it describes how to process the content.
  </div>

  <strong>Requirements on producers have no bearing whatsoever on consumers.</strong>

<h4 id="typographic-conventions">Typographic conventions</h4>

  <div>
    This is a definition, requirement, or explanation.

    <p class="note">This is a note.</p>

    <p class="example">This is an example.</p>

    <p class="issue">This is an open issue.</p>

    <p class="advisement">This is a warning.</p>

    <pre class="css" highlight="css">/* this is a CSS fragment */</pre>

    The defining instance of a term is marked up like <dfn noexport>this</dfn>.
    Uses of that term are marked up like [=this=] or like <a><i>this</i></a>.

    The defining instance of an element, attribute, or API is marked up like
    <dfn element noexport><code>this</code></dfn>. References to that element, attribute, or API are
    marked up like <{this}>.

    Other code fragments are marked up <code>like this</code>.

    Byte sequences with bytes in the range 0x00 to 0x7F, inclusive, are marked up like
    `this`.

    Variables are marked up like <var ignore>this</var>.

    In some cases, requirements are given in the form of lists with conditions and corresponding
    requirements. In such cases, the requirements that apply to a condition are always the first set
    of requirements that follow the condition, even in the case of there being multiple sets of
    conditions for those requirements. Such cases are presented as follows:

    <dl class="switch">
      <dt>This is a condition</dt>
      <dt>This is another condition</dt>
      <dd>This is the requirement that applies to the conditions above.</dd>
      <dt>This is a third condition</dt>
      <dd>This is the requirement that applies to the third condition.</dd>
    </dl>
  </div>


<h3 id="suggested-reading">Suggested reading</h3>

  <em>This section is non-normative.</em>

  The following documents might be of interest to readers of this specification.

<section>
<h2 id="infrastructure">Infrastructure</h2>

<h3 id="terminology">Terminology</h3>

<h4 id="notational-idioms">Notational idioms</h4>

A <dfn>notational idiom</dfn> is a set of rules in the world for encoding
music as some set of visual markings, which can be interpreted by musicians to
produce an audible performance.

<h5 id="cwmn">Conventional Western music notation (CWMN)</h5>

<h4 id="score profiles">Score profiles</h4>

A <dfn>score profile</dfn> is a set of constraints on the rules in a notational idiom.
Score profiles are designed to narrow the set of constructs that can be produced or consumed
in MNX to a practical scope.

<h3 id="common-syntaxes">Common syntaxes</h3>

There are various places in MNX that accept particular data types, such as
note values, numbers or durations. This section describes the conformance
criteria for content in those formats, and how to parse them.

<h4 id="common-parser-idioms">Common parser idioms</h4>

  The <dfn export>space characters</dfn>, for the purposes of this specification, are U+0020 SPACE, U+0009
  CHARACTER TABULATION (tab), U+000A LINE FEED (LF), U+000C FORM FEED (FF), and U+000D CARRIAGE
  RETURN (CR).

  The <dfn lt="white_space|white_space characters">White_Space characters</dfn> are those that have the Unicode property "White_Space" in
  the Unicode <code>PropList.txt</code> data file. [[!UNICODE]]

  <p class="note">
    This should not be confused with the "White_Space" value (abbreviated "WS") of the "Bidi_Class"
    property in the <code>Unicode.txt</code> data file.
  </p>

  The <dfn export>control characters</dfn> are those whose Unicode "General_Category" property has the
  value "Cc" in the Unicode <code>UnicodeData.txt</code> data file. [[!UNICODE]]

  The <dfn export>uppercase ASCII letters</dfn> are the characters in the range U+0041 LATIN CAPITAL LETTER
  A to U+005A LATIN CAPITAL LETTER Z.

  The <dfn export>lowercase ASCII letters</dfn> are the characters in the range U+0061 LATIN SMALL LETTER A
  to U+007A LATIN SMALL LETTER Z.

  The <dfn export>ASCII letters</dfn> are the characters that are either [=uppercase ASCII letters=] or
  [=lowercase ASCII letters=].

  The <dfn export>ASCII digits</dfn> are the characters in the range U+0030 DIGIT ZERO (0) to U+0039 DIGIT
  NINE (9).

  The <dfn export>alphanumeric ASCII characters</dfn> are those that are either
  <a>uppercase ASCII letters</a>, <a>lowercase ASCII letters</a>, or <a>ASCII digits</a>.

  The <dfn export>ASCII hex digits</dfn> are the characters in the ranges U+0030 DIGIT ZERO (0) to U+0039
  DIGIT NINE (9), U+0041 LATIN CAPITAL LETTER A to U+0046 LATIN CAPITAL LETTER F, and U+0061 LATIN
  SMALL LETTER A to U+0066 LATIN SMALL LETTER F.

  The <dfn export>uppercase ASCII hex digits</dfn> are the characters in the ranges U+0030 DIGIT ZERO (0)
  to U+0039 DIGIT NINE (9) and U+0041 LATIN CAPITAL LETTER A to U+0046 LATIN CAPITAL LETTER F only.

  The <dfn export>lowercase ASCII hex digits</dfn> are the characters in the ranges U+0030 DIGIT ZERO (0)
  to U+0039 DIGIT NINE (9) and U+0061 LATIN SMALL LETTER A to U+0066 LATIN SMALL LETTER F only.

  Some of the micro-parsers described below follow the pattern of having an <var>input</var>
  variable that holds the string being parsed, and having a <var>position</var> variable pointing at
  the next character to parse in <var>input</var>.

  For parsers based on this pattern, a step that requires the consumer to <dfn>collect a sequence
  of characters</dfn> means that the following algorithm must be run, with <var>characters</var>
  being the set of characters that can be collected:

  1. Let <var>input</var> and <var>position</var> be the same variables as those of the same name in
      the algorithm that invoked these steps.
  2. Let <var>result</var> be the empty string.
  3. While <var>position</var> doesn't point past the end of <var>input</var> and the character at
      <var>position</var> is one of the <var>characters</var>, append that character to the end of
      <var>result</var> and advance <var>position</var> to the next character in <var>input</var>.
  4. Return <var>result</var>.

  The step <dfn>skip white space</dfn> means that the consumer must
  <a>collect a sequence of characters</a> that are [=space characters=]. The collected characters
  are not used.

  When a consumer is to <dfn lt="stripped line breaks|strip line breaks">strip line breaks</dfn> from a string, the consumer must remove
  any U+000A LINE FEED (LF) and U+000D CARRIAGE RETURN (CR) characters from that string.

  When a consumer is to <dfn lt="strip leading and trailing white space|stripping leading and trailing white space|leading and trailing white space stripped">strip leading and trailing white space</dfn> from a string, the
  consumer must remove all [=space characters=] that are at the start or end of the string.

  When a consumer is to <dfn lt="stripping and collapsing white space|strip and collapse white space">strip and collapse white space</dfn> in a string, it must replace any
  sequence of one or more consecutive [=space characters=] in that string with a single U+0020
  SPACE character, and then <a>strip leading and trailing white space</a> from that string.

  When a consumer has to <dfn lt="strictly splitting the string|strictly split a string|strictly split">strictly split a string</dfn> on a particular delimiter character
  <var>delimiter</var>, it must use the following algorithm:

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>position</var> be a pointer into <var>input</var>, initially
      pointing at the start of the string.
  3. Let <var>tokens</var> be an ordered list of tokens, initially empty.
  4. While <var>position</var> is not past the end of <var>input</var>:
      1. <a>Collect a sequence of characters</a> that are not the <var>delimiter</var> character.
      2. Append the string collected in the previous step to <var>tokens</var>.
      3. Advance <var>position</var> to the next character in <var>input</var>.
  5. Return <var>tokens</var>.

  <p class="note">
    For the special cases of splitting a string <a lt="split a string on spaces">on spaces</a> and <a lt="split a string on commas">on commas</a>, this
    algorithm does not apply (those algorithms also perform <a lt="strip leading and trailing white space">white space trimming</a>).
  </p>

<h4 id="numbers">Numbers</h4>

<h5 id="rational-numbers">Rational numbers</h5>

  A string is a <dfn>rational number</dfn> if it is either an integer, or a pair of integers
  separated by a U+002F SLASH whose second element is nonzero.

  The <dfn export>rules for parsing rational numbers</dfn> are as given in the following algorithm. When
  invoked, the steps must be followed in the order given, aborting at the first step that returns
  a value. This algorithm will return a pair of integers, one for the numerator and one for the denominator which  must be nonzero, or an error.

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start of
      the string.
  3. Let <var>fraction</var> be an initially empty list of integers.
  4. <a>Collect a sequence of characters</a> that are [=space characters=]. These are skipped.
  5. While <var>position</var> is not past the end of <var>input</var>, and <var>fraction</var> contains
      fewer than two elements:
      1. <a>Collect a sequence of characters</a> that are not [=space characters=], <a>ASCII digits</a>, U+002D HYPHEN-MINUS or U+002F SLASH
          characters. This skips past leading garbage.
      2. <a>Collect a sequence of characters</a> that are not [=space characters=] or U+002F SLASH, and let <var>unparsed number</var> be the result.
      3. Let <var>number</var> be the result of parsing <var>unparsed number</var> using the
          <a>rules for parsing signed integers</a>.
      4. If <var>number</var> is an error, set <var>number</var> to zero.
      5. Append <var>number</var> to <var>fraction</var>.
      6. <a>Collect a sequence of characters</a> that are [=space characters=], or U+002F SLASH.
  6. If <var>fraction</var> has no elements, return zero.
  7. If <var>fraction</var> has only one element, append 1 to <var>fraction</var>.
  8. Return the first element of <var>fraction</var> as the numerator and the second element
     of <var>fraction</var> as the denominator.

<h4 id="element-locations">Element locations</h4>

An <dfn>element location</dfn> constitutes a reference to a specific element
in the document. It consists of the character `#`, immediately followed by the
XML ID of the referenced element.

<h4 id="style-property-lists">Style property lists</h5>

MNX supports a simple and compact <dfn>style property list</dfn> syntax, allowing
a map of key-value pairs to be represented in a single string where the keys
are names of <a>style properties</a>.

To parse a <a>style property list</a>:

  1. Let <var>input</var> be the string being parsed.
  1. Let <var>defs</var> be the result of <a>strictly splitting the string</a> <var>input</var> using U+003B SEMICOLON as a delimiter.
  1. Let <var>properties</var> be an empty map.
  1. While <var>defs</var> is not empty,
      1. Let <var>definition</var> be the first element of <var>defs</var>, and remove it from <var>defs</var>.
      1. <a>Collect a sequence of characters</a> from <var>definition</var> that are not U+003A COLON, and let <var>property name</var>
          be the result after <a>stripping leading and trailing white space</a>.
      1. If <var>property name</var> is empty, return an error.
      1. If the next character of <var>definition</var> is not U+003A COLON,
          return an error.
      1. Skip the next character of <var>definition</var>.
      1. Let <var>property value</var> be the remaining characters of <var>definition</var>, after <a>stripping leading and trailing white space</a>.
      1. Add a new entry to <var>properties</var> with key <var>property name</var> and value <var>property value</var>.
  1. Return <var>properties</var>.

Examples include:

: `color: red`
:: A definition of the property `color` as having the value `red`.
: `color: green;`
:: A definition of the property `color` as having the value `green`. Note that a terminal `;` is provided in this case, but has no effect.
: `smufl-font: Bravura; color: red;`
:: A definition of two properties: `smufl-font` with value `Bravura`, and `color` with value `red`.

<h3 id="content-models">Content models and categories</h3>

  Each element in MNX falls into zero or more <dfn lt="content
  categories|content category">categories</dfn> that group elements with
  similar characteristics together. Examples of content categories
  include <a>event content</a> and <a>sequence content</a>, among
  many others.

<h4 id="element-definitions">Element definitions</h4>

  Each element in this specification has a definition that includes the following information:

  : <dfn>Contexts</dfn>
  :: A <em>non-normative</em> description of where the element can be used. This information is
      redundant with the content models of elements that allow this one as a child, and is provided
      only as a convenience.

  : <dfn>Content model</dfn>
  :: A normative description of what content must be included as children and descendants of the
      element.

  : <a>Attributes</a>
  :: A normative list of attributes that may be specified on the element (except where otherwise
      disallowed), along with non-normative descriptions of those attributes. (The content to the
      left of the dash is normative, the content to the right of the dash is not.)

  : <a>Style properties</a>
  :: A normative list of style properties that may be specified on the element (except where otherwise
      disallowed), along with non-normative descriptions of those attributes. Where these attributes may
      be inherited from ancestor elements, this is indicated.

  This is then followed by a description of what the element represents, along with any
  additional normative conformance criteria that may apply to producers and consumers
  and implementations. Examples are sometimes also included.

</section>

<h2 id="mnx-container">MNX container</h2>

Each MNX document acts as a <dfn>container document</dfn>, which contains a
hierarchy of components which collectively make up the
document as a whole.

<h3 id="structural-elements">Structural Elements</h3>

<h4 id="the-mnx-element">The <dfn element><code>mnx</code></dfn> element</h4>
<section dfn-for="mnx">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd>None: this is the top-level element.</dd>
    <dt><a>Content Model</a>:</dt>
    <dd>A single, required <{head}> element.</dd>
    <dd>Either a <{collection}> or a <{score}> element.</dd>
    <dt><a>Attributes</a>:</dt>
    <dd>None.</dd>
  </dl>

The <{mnx}> element encloses an MNX document as a whole.

<div class="example">
```xml
<mnx xmlns="http://www.w3.org/mnx">
    <head>
      ...head content...
    </head>
    <score>
      ...musical body content...
    </score>
</mnx>
```
</div>

</section>

<h4 id="the-head-element">The <dfn element><code>head</code></dfn> element</h4>
<section dfn-for="head">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd>Any.</dd>
    <dt><a>Content Model</a>:</dt>
    <dd><a>Metadata content</a>.</dd>
    <dd><a>Stylesheet definitions</a>.</dd>
    <dt><a>Attributes</a>:</dt>
    <dd>None.</dd>
  </dl>
The <{head}> element supplies overall descriptive information for an MNX document,
such as document-scoped metadata or <a>stylesheet definitions</a>.
</section>

<h4 id="the-collection-element">The <dfn element><code>collection</code></dfn> element</h4>
<section dfn-for="collection">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{mnx}>, <{collection}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd>Any combination of <{collection}> and <{score}> elements.</dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{collection/type}> - The type of the collection</dd>
  </dl>

The <{collection}> element describes a collection, which is a sequence of
ordered elements that make up a compound musical document. Each child element
of the collection may itself be either a collection or a score.

The <dfn element-attr>type</dfn> attribute determines the nature of the collection.
Valid collection type values include:

<dl dfn-for="collection/type">
  <dt><dfn attr-value><code>movements</code></dfn></dt>
  <dd>Each element comprises a movement of a work.</dd>
  <dt><dfn attr-value><code>sections</code></dfn></dt>
  <dd>Each element comprises a section of a work, or of a movement.</dd>
  <dt><dfn attr-value><code>parts</code></dfn></dt>
  <dd>Each element comprises a description of of the same music, organized for different parts.</dd>
</dl>

<a>Metadata content</a> or <a>style properties</a> may be included at any level
of the resulting structure, causing them to apply them only to those parts of
the document.

The following example shows a hierarchy of collections and scores.

<div class="example">
```xml
    <collection type="sections">
        <score>
            <title>Section 1 (for Flute and Cello)</title>
            <cwmnx>...</cwmnx>
        </score>
        <collection type="movements">
            <title>Section 2</title>
            <score>
                <title>Section 2, Movement 1 (for Solo Flute)</title>
                <cwmnx>...</cwmnx>
            </score>
            <score>
                <title>Section 2, Movement 2 (for Solo Cello)</title>
                <cwmnx>...</cwmnx>
            </score>
        </collection>
        <score>
            <title>Section 3 (for Flute and Cello)</title>
            <cwmnx>...</cwmnx>
        </score>
    </collection>
```
</div>

</section>

<h3 id="mnx-musical body">Musical body content</h3>

A <dfn lt="musical body|musical bodies|musical body content">musical
body</dfn> consists of a score in some <a>notational idiom</a> supplying
concrete musical content that can be rendered and/or performed.

<h4 id="the-score-element">The <dfn element><code>score</code></dfn> element</h4>
<section dfn-for="score">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{mnx}>, <{collection}>.</dd>
    <dt><a>Content Model</a>:</dt>
    <dd><a>Metadata content</a></dd>    
    <dd>Zero or one <a>musical body</a> elements.</dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{score/src}> - optional relative path to an external source file</dd>
  </dl>

The <{score}> element encloses a self-contained description of the score for
a portion or the entirety of a musical work.

If the <dfn element-attr>src</dfn> attribute is provided, this specifies a
relative path where the score's <a>musical body</a> lives. Otherwise, the body
must be provided within the content of the <{score}> element.

</section>


<h3 id="mnx-metadata-content">Metadata content</h3>

<dfn>Metadata content</dfn> may be included in many elements to supply
bibliographic data and other descriptive information.

<em>Many elements TBD. Need to harmonize with existing metadata and bibliographic standards.</em>

<h4 id="the-title-element">The <dfn element><code>title</code></dfn> element</h4>
<section dfn-for="title">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd>Any.</dd>
    <dt><a>Content Model</a>:</dt>
    <dd>Text</dd>
    <dt><a>Attributes</a>:</dt>
    <dd>None.</dd>
  </dl>

The <{title}> element assigns a title to its parent element in the context of the document as a whole.
</section>

<h2 id="cwmnx-section">CWMNX</h2>

<section>
<h3 id="cwmnx-scope">Scope</h3>

  <em>This section is non-normative.</em>

  This part of the specification is called <dfn>CWMNX</dfn>, and describes a
  semantic dialect of MNX designed to encode Conventional Western Music Notation.

</section>

<h3 id="cwmnx-semantics">Semantics</h3>

<h4 id="cwmnx-notational-concepts">Notational concepts</h4>

This section describes various foundational concepts in music notation that
are frequently referenced by this specification. 

<h5 id="cwmnx-parts-staves">Parts and staves</h5>

A score consists of multiple <dfn>parts</dfn>.  Each <a>part</a> is a grouping
of related musical material that relates to a single performer or set of
performers.  It has the same temporal extent as the score overall, but presents
a slice of content that is relevant to a single instrument or a group of
related instruments.

A part may employ one or more <dfn lt="staff|staves">staves</dfn>. Each <a>staff</a>
supplies a pair of dimensions, usually one for pitch and one for time, within which
notes may be placed.  Conventionally, the time dimension is horizontally oriented; 
for pitched instruments, the pitch dimension is vertically oriented. All <a>staves</a>
within a <a>part</a> share the same time dimension.

For unpitched instruments, the vertical dimension indicates a choice of sound rather
than a pitch, governed by a set of conventions that map note placement to sound.

Every segment of a staff possesses a <dfn>clef</dfn> that determines the
mapping between its pitch dimension and some set of performable pitches, with
additional information supplied by a <dfn>key signature</dfn>. <dfn>Accidental</dfn>
symbols on <a>notes</a> further modify this mapping on an ad-hoc basis.

Staves in CWMN are identified within a part by a unique <dfn>staff
index</dfn>. The topmost staff in a part has a staff index of 1; staves below
the topmost staff are identified with successively increasing indices.

<h5 id="cwmnx-notated-events">Notated events</h5>

A <dfn>notated event</dfn> in CWMN is a discrete action in the score with a
notated duration. It has an onset that
is relative to the start of its containing sequence as well as to other
elements in that sequence, subject to the conventions of CWMN.  Events belong
to a specific <a>staff</a> within a part, denoted by its <a>staff index</a>.

A notated event may include one or more <dfn>notes</dfn> possessing a
pitch, or a <dfn>rest</dfn> indicating silence.  Events including more than
one note are referred to as <dfn>chords</dfn>.

In both cases, the event possesses an associated <a>note value</a> that
indicates its notated duration. This value is not literal, but is subject to
performance interpretation.

The content of a notated event includes only the specific notes and chords
within it. In particular a notated event does not account for ties, ornamental
interpretation or many other kinds of performance reading. As such, the onset,
duration, pitch and other properties of notated events will often differ from
those in the corresponding <a>performance events</a>.

Events may further possess <dfn>articulations</dfn>, additional properties
that modulate their musical performance in commonly understood ways. In this
specification, we use the term <a>articulation</a> in an expanded sense to
cover all such additional properties.

Notated events are represented by the <{event}> element.

<h5 id="cwmnx-metrical-position">Metrical position</h5>

Most notated events possess a well-defined <dfn>metrical position</dfn>,
giving a time onset expressed as a rational number of whole note durations
after the start of its containing measure. This position may be thought of as
the event's "address" and plays a determining role in the normative rendering
and performance of events.

<h5 id="chromatic-pitches">Chromatic pitches</h4>

A <dfn>chromatic pitch</dfn> describes a pitch situated in a 12-tone
temperament notated as per CWMN conventions. The description incorporates
three elements:

- The <dfn>diatonic step</dfn>, which is one of the letters `A` through `G`, describing
    the corresponding diatonic steps.

- The <dfn>octave</dfn>, which is an integer giving the octave in which
    the step occurs. The assignment of pitches to octaves follows the <a href="https://en.wikipedia.org/wiki/Scientific_pitch_notation">
    Scientific Pitch Notation (SPN)</a> convention, in which the octave number increases
    on the step from `B` to `C`.  For example, the SPN for the range of steps around
    middle C on the piano keyboard includes the sequence: `...A3, B3, C4, D4...`.

- The <dfn>alteration</dfn>, which is a fractional alteration of pitch
    from the given step and octave, expressed in terms of the prevailing temperament of the work.

<h5 id="cwmnx-directions">Directions</h5>

A <dfn>direction</dfn> is a discrete instruction in the score
that applies to notated events.

Directions do not have a duration, although they have a specific location in
relation to a containing measure or sequence. Like events, directions also
belong to a specific <a>staff</a> within a part, denoted by its one-based
<a>staff index</a>.

Directions come in the following flavors:

<dfn>Single-ended</dfn> directions begin at a point in time in some part and
generally continue to apply until superseded by another direction, or by some
notation in the score that is understood to terminate it. An example is a
<em>piano</em> dynamic.

<dfn>Span</dfn> directions begin at a point in time in some part and end at a
later point within the same part. One common example of a span direction is a
slur.

<dfn>Liaison</dfn> directions begin on one note and end on an immediately
succeeding note. A common example of a liaison direction is a tie.

<h5 id="sequence">Notated sequences</h5>

A <dfn>notated sequence</dfn> is a set of <a>notated events</a> whose notional
time intervals do not overlap, which lie within the same measure and the same
part, and which occur at progressively greater temporal offsets within a
measure.

Notated sequences are represented by the <{sequence}> element.

<h5 id="voice">Voices</h5>

Notated sequences may also belong to <dfn>voices</dfn>. A voice is a set of
sequences in different measures, but within the same part. The sequences
within this set can be thought of as constituting a single musical voice
throughout the score. Thus they are an organizational construct, rather than a
notational one.

A given voice need not be expressed in every single measure of a part. It may
be present in some measures, and absent in others.

Even so, the assignment of sequences to voices has concrete implications for
MNX implementations. Producer implementations may interpret a voice as
affecting the way that musical material is organized, for example by cutting
and pasting material from  a given voice in one measure into the same voice in
a different measure. Consumer implementations might allow users to isolate the
playback of a single voice, including only the sequences that belong to it.

<h5 id="cwmnx-performance-interpretation">Performance Interpretation</h5>

A <dfn>performance interpretation</dfn> is the end result of deriving
a set of <a>performance events</a> from a score. Human performers do this
by reading music, while MNX consumers will generally do this algorithmically.

In GMNX, a consumer is given the exact performance interpretation as part of
the document.  In CWMNX, a consumer will typically employ a set of rules that
mimic the actions of a human performer, overriding these with exact
performance events where these are explicitly supplied within the document.

<h5 id="cwmnx-performance-events">Performance events</h5>

A <dfn>performance event</dfn> is a description of a single timed
element of a musical performance with specific attributes for its onset,
duration, pitch, dynamics, articulation and instrument. Unlike a notated
event, these attributes are specific and not subject to interpretation, and
they are independent of any notational concepts.

Performance events in MNX are used to describe the exact <a>performance
interpretation</a> of some or all of a score, as distinct from its notation.

<h5 id="note-values">Note values</h5>

There are a variety of situations in which the <dfn>note value</dfn> of a
musical event needs to be described, in terms of some fraction or multiple of
a CWMN whole-note unit.

In CWMN, fractions for undotted <dfn>base note values</dfn> are constrained to
be exact powers of two.  The most common note values of whole, half, quarter,
etc. correspond to whole-note fractions expressed by the non-negative powers
2<sup>0</sup>, 2<sup>-1</sup>, 2<sup>-2</sup>. The less frequently used note
values of breve, longa, etc. are expressed by the positive powers
2<sup>1</sup>, 2<sup>2</sup>, ...

In the broader case of <dfn>general note values</dfn>, some <dfn>number of dots</dfn>
act as a multiplier on the <a>base note value</a>. These multipliers take the form
(2<sup><em>n</em>+1</sup>-1) / 2<sup><em>n</em></sup>, where <em>n</em> is the
<a>number of dots</a>.

<h5 id="event-orientation">Orientation</h5>

Events and sequences may possess an optional <dfn>orientation</dfn> that
determines a the placement and rendering of content according to a complex set
of CWMN conventions. For the purposes of CWMNX there are two orientations:

<ul>
<li>An orientation of <dfn value dfn-for="orientation">up</dfn> orients note stems pointing upwards, and places beams, directions
and articulations accordingly.</li>

<li>An orientation of <dfn value dfn-for="orientation">down</dfn> orients note stems pointing upwards, and places beams, directions
and articulations accordingly.</li>
</ul>

<h4 id="cwmnx-notational-syntaxes">Notational syntaxes</h4>

<h5 id="note-value-syntax">Note value syntax</h5>

MNX provides a microsyntax for encoding note values whose syntactic
constraints map to the above requirements. Its syntax is designed to be
distinguishable from other syntaxes for integers, floating point numbers or
rational numbers.  The syntax for <a>base note values</a> consists of either
of the following forms:

1. For values less than or equal to a whole note:
    1. The character U+002F SLASH
    1. One or more <a>ASCII digits</a> encoding the <a>base note value</a> as a power-of-two fractional denominator
1. For values greater than a whole note:
    1. The character U+002A ASTERISK
    1. One or more <a>ASCII digits</a> encoding the <a>base note value</a> as a power-of-two multiplying factor

The syntax for <a>general note values</a> consists of these components:

1. A <a>base note value</a> encoding.
1. Zero or more occurrences of U+0064 LOWERCASE D characters. The number of occurrences
      supply the <a>number of dots</a>.

To <dfn>parse a note value</dfn>, use the following procedure:

  1. Let <var>input</var> be the string being parsed.
  1. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start of
      the string.
  1. Let <var>number of dots</var> be 0.
  1. If the character indicated by <var>position</var> is a U+002A ASTERISK character (*), let <var>fractional</var>
      be <code>false</code> and advance <var>position</var> by 1.
  1. Else, if the character indicated by <var>position</var> is a U+002E SLASH character (/), let <var>fractional</var>
      be <code>true</code> and advance <var>position</var> by 1.
  1. Else, return an error.
  1. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a> only and let <var>unparsed number</var>
      be the result.
  1. Let <var>base value</var> be the result of parsing <var>unparsed number</var> using the
      <a>rules for parsing integers</a>.
  1. If parsing a general note value, <a>collect a sequence of characters</a> that are U+0064 LOWERCASE D
      characters. Set <var>number of dots</var> to the length of this sequence.
  1. If <var>position</var> is not at the end of the string, return an error.
  1. If <var>base value</var> is not equal to a power of 2, return an error.
  1. If <var>base value</var> is equal to 1 and <var>fractional</var> is false, return an error.
  1. If <var>fractional</var> is true, set <var>base value</var> to (1 / <var>base value</var>).
  1. Return <var>base value</var> and <var>number of dots</var>.

<div class="example">
Here are some instances of the note value syntax:

: `/1`
:: a whole note
: `/4`
:: a quarter note
: `/8`
:: an eighth note
: `/8d`
:: a dotted eighth note
: `/8dd`
:: a double-dotted eighth note
: `*2`
:: a breve (double whole note)
: `*2d`
:: a dotted breve

</div>

<h5 id="note-value-multiple">Note value quantity syntax</h5>

MNX allows the specification of a <dfn>note value quantity</dfn>, defined as
an integer multiple of a <a>note value</a>. To parse a note value quantity,
use the following procedure:

  1. Let <var>input</var> be the string being parsed.
  1. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start of
      the string.
  1. Let <var>multiplier</var> be 1.
  1. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a> only, and let <var>unparsed number</var>
      be the result.
  1. If <var>unparsed number</var> is not empty, assign <var>unparsed number</var> to <var>multiplier</var>
      using the <a>rules for parsing integers</a>.
  1. Let <var>note value</var> be the result of parsing the remainder of string beginning at <var>position</var>
      according to the rules to <a>parse a note value</a>.
  1. Return <var>multiplier</var> and <var>note value</var> as the result.

Examples include:

: `/8`
:: a single eighth note
: `6/8`
:: six eighth notes
: `6/8d`
:: six dotted eighth notes
: `5/1`
:: five whole notes

<h5 id="time-signature-syntax">Time signature syntax</h5>

MNX allows the specification of a <dfn>time signature</dfn>, consisting of a
sum of ordered, undotted note value quantities defining the meter of a
measure. The sum may optionally share a common denominator. To parse a time
signature, use the following procedure:

  1. Let <var>input</var> be the string being parsed.
  1. Let <var>tokens</var> be the result of <a>strictly splitting the string</a> <var>input</var> using U+002B PLUS as a delimiter.
  1. If <var>tokens</var> is empty, return an error.
  1. Let <var>shared denominator</var> be true.
  1. Let <var>fractions</var> be an empty list.
  1. While <var>tokens</var> is not empty,
      1. Remove the first element of <var>tokens</var> and assign it to <var>t</var> after <a>stripping leading and trailing white space</a>.
      1. If <var>t</var> contains the characters U+002F SLASH or U+002A ASTERISK,
          1. Let <var>nv</var> be the result of parsing <var>t</var> as a <a>note value quantity</a>.
          1. If <var>nv</var> has a <var>number of dots</var> greater than zero, return an error.
          1. If <var>shared denominator</var> is true,
              1. Replace the denominator in each element of <var>fractions</var> with the denominator of <var>nv</var>.
              1. If more elements remain in <var>tokens</var>,
                  1. Set <var>shared denominator</var> to false.
          1. Append <var>nv</var> to <var>fractions</var>.
      1. Else,
          1. If <var>tokens</var> is empty, return an error.
          1. If <var>shared denominator</var> is false, return an error.
          1. Let <var>numerator</var> be the result of parsing <var>t</var> as a <a>valid integer</a>.
          1. Append the fraction composed of <var>numerator</var> and the denominator 1 to <var>fractions</var>.
  1. Return <var>fractions</var> and <var>shared denominator</var> as the result.

Examples include:

: `3/4`
:: Three-quarters time
: `2+3+2/8`
:: A compound time signature of 2/8, 3/8 and 2/8, with 2+3+2 over the shared denominator 8.
: `2/8 + 3/4 + 2/8`
:: A compound time signature of 2/8, 3/4 and 2/8 as separate fractions (note that the spaces
    are ignored)

Issue: Shared denominators are all-or-nothing. So there's currently no way to share a denominator
for only some of a time signature's fractions, which would require a grouping construct like
`2/4+(2+3/8)` or such.

<h5 id="chromatic-pitch-syntax">Chromatic pitch syntax</h5>

MNX allows the specification of a <a>chromatic pitch</a> in a single string,
by employing the <dfn>rules for parsing a chromatic pitch</dfn>. To parse this
syntax, employ the following procedure:

  1. Let <var>input</var> be the string being parsed.
  1. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start of
      the string.
  1. Let <var>alteration</var> be 0.
  1. If the character at <var>position</var> is not an <a>uppercase ASCII letter</a> in the range from
    U+0041 UPPERCASE A - U+0047 UPPERCASE G, return an error.
  1. Let <var>step</var> be the character at <var>position</var>, and advance <var>position</var> by 1.
  1. If the character at <var>position</var> is U+0023 HASH,
       1. While the character at <var>position</var> is U+0023 HASH,
           1. Increase <var>alteration</var> by 1.
           1. Advance <var>position</var> by 1.
  1. Else, if the character at <var>position</var> is U+0061 b,
       1. While the character at <var>position</var> is U+0061 b,
           1. Decrease <var>alteration</var> by 1.
           1. Advance <var>position</var> by 1.
  1. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a> only and let <var>unparsed number</var>
      be the result.
  1. Let <var>octave</var> be the result of parsing <var>unparsed number</var> using the
      <a>rules for parsing integers</a>.
  1. Let <var>alteration factor</var> be 0.
  1. If the character at <var>position</var> is U+002B PLUS,
       1. Set <var>alteration factor</var> to 1.
       1. Advance <var>position</var> by 1.
  1. If the character at <var>position</var> is U+002D HYPHEN-MINUS,
       1. Set <var>alteration factor</var> to -1.
       1. Advance <var>position</var> by 1.
  1. If <var>alteration factor</var> is not equal to zero,
       1. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>, U+002E FULL STOP, or
           U+002F SLASH and place the result in <var>unparsed number</var>.
       1. If the character at <var>position</var> is U+006F LOWERCASE o
           1. Multiply <var>alteration factor</var> by 12.
           1. Advance <var>position</var> by 1.
       1. Else, if the character at <var>position</var> is U+0077 LOWERCASE w
           1. Multiply <var>alteration factor</var> by 2.
           1. Advance <var>position</var> by 1.
       1. If <var>unparsed number</var> contains U+002F SLASH, parse it as a <a>rational number</a>, otherwise parse it as a <a>valid floating-point number</a>. Multiply the result by <var>alteration factor</var> and add this to <var>alteration</var>.
  1. If <var>position</var> is not at the end of the string, return an error.
  1. Return <var>step</var>, <var>octave</var> and <var>alteration</var> as the result.

Examples include:

: `C4`
:: Middle C
: `C#4`
:: The C-sharp above middle C
: `Db4`
:: The D-flat above middle C
: `Dbb4`
:: The D-double-flat very near middle C
: `C4+0.5`
:: The pitch one quarter-tone above middle C
: `C4+0.25w`
:: The pitch one quarter-tone above middle C (identical to the above, but expressed in whole tone units)
: `C4+1/4w`
:: The pitch one quarter-tone above middle C (identical to the above, but expressed as whole tone fraction)
: `C4+1/24o`
:: The pitch one quarter-tone above middle C  (identical to the above, but expressed as octave fraction)

<h5 id="measure-locations">Measure location syntax</h5>

There are a variety of situations in which the <dfn>measure location</dfn> of a
musical event needs to be described, in terms of the content of the measure.

The following cases exist for specifying <a>measure locations</a>:

<ol>
  <li>If the <a>measure location</a> is a <a>metrical position</a> in the context
  of some containing measure, then it is specified as a <a>valid floating-point
  number</a> or <a>note value quantity</a> that gives the number of whole notes from the start of the
  measure.</li>

  <li>If the <a>measure location</a> is a <a>metrical position</a> in the context
  of an arbitrary <{measure}> in the score, then it is specified as a <a>set of
  space-separated tokens</a>. The first token is a <a>element location</a>
  identifying the measure, and the second token is a <a>valid floating-point
  number</a> or <a>note value quantity</a> that gives the number of whole notes from the start of the
  identified measure. The identified measure must belong to the same
  <a>measure content</a> as the element in which the measure location is given.</li>

  <li>If the <a>measure location</a> is identical to the <a>metrical position</a>
  of some known <{event}> in the score, then it is specified as a <a>element location</a>
  identifying the event. The identified event must belong to the same
  <a>measure content</a> as the element in which the measure location is given.</li>
</ol>

<div class="example">
Here are some instances of the measure location syntax:

: `0.25`
:: one quarter note after the start of a containing measure
: `3/8`
:: three eighth notes after the start of a containing measure
: `#m4 0.25`
:: one quarter note after the start of the measure whose element ID is `m4`
: `#m4 1/4`
:: the same as the preceding example
: `#event235`
:: the same metrical position as the event whose element ID is `event235`

</div>

<h5 id="glyph-names">SMuFL glyph name syntax</h5>

Some contexts, particularly the 'glyph' property, permit the specification of
a <a>SMuFL glyph name</a> from the catalog of glyph names defined in the
<a>SMuFL specification</a>.

<section>
<h4 id="cwmnx-body-content">CWMNX body content</h4>

These elements of a CWMNX score supply its high-level description and structure.

<h5 id="the-cwmnx-element">The <dfn element><code>cwmnx</code></dfn> element</h5>

<section dfn-for="cwmnx">

  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd>Wherever a <a>musical body</a> is expected.</dd>
    <dt><a>Content Model</a>:</dt>
    <dd><a>Metadata content</a>.</dd>
    <dd><a>Stylesheet definitions</a>.</dd>
    <dd>Exactly one <{global}> element - <a>measure content</a> that is common to all parts within the score</dd>
    <dd>One or more <{part}> elements - description and <a>measure content</a> of each part in the score.</dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{cwmnx/profile}> — profile describing constraints on the contents of this score</dd>
  </dl>

The <{cwmnx}> element is a <a>musical body</a> that describes a CWMNX
score as a whole.

The <dfn element-attr><code>profile</code></dfn> attribute declares a <a>score
profile</a> that supplies constraints to which the score is expected to obey.

The following values of <{cwmnx/profile}> are supported, along with the
constraints that they represent:

<dl dfn-for="cwmnx/profile">
    <dt><dfn attr-value><code>standard</code></dfn></dt>
    <dd>The <a>measure content</a> in all <{global}> or <{part}> elements consists of an identical number of measures.</dd>
    <dd>Time signatures and tempo indications only occur in measures within the <{global}> element.</dd>
    <dd>Key signatures within the <{global}> element only occur in enharmonic/transposed forms that are equivalent within <{part}> elements.</dd>
    <dd>All notated events in a chord share the same duration</dd>
</dl>

The following example provides the basic skeleton of a <{cwmnx}> musical body:

<div class="example">
```xml
<cwmnx>
  <global>
      ...measure content describing system-wide features...
  </global>
  <part>
      ...part description content...
      ...measure content for part 1...
  </part>
  <part>
      ...part description content...
      ...measure content for part 2...
  </part>
  ...additional parts...
</cwmnx>
```
</div>
</section>

<section>

<h5 id="the-global-element">The <dfn element><code>global</code></dfn> element</h5>
<section dfn-for="global">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{cwmnx}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd><a>Measure content</a>, which must not include any <a>sequence content</a></dd>
  </dl>

The <{global}> element represents a set of measures, each of which provides
content that is shared by all parts within the score. Each <{measure}> element
within <{global}> supplies the shared content for all other <{measure}>
elements which share the same measure number.

Typical examples of such content include key signatures, time signatures and
tempo indications.

<a>Notated events</a> like notes or rests cannot be shared between parts in CWMN. Consequently,
<a>sequence content</a> cannot occur in the measures within <{global}>.

<div class="example">
```xml
<global>
  <measure>
    <directions>
      <tempo bpm="120" value="4"/>
      <time signature="4/4"/>
    </directions>
  </measure>
  <measure/>
  <measure/>
  <measure barline="final"/>
</global>
```
</div>
</section>

<h5 id="the-part-element">The <dfn element><code>part</code></dfn> element</h5>
<section dfn-for="part">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{cwmnx}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd><a>Part description content</a></dd>
    <dd><a>Measure content</a></dd>
  </dl>
</section>

The <{part}> element represents a set of measures which describe a single part
within the score. The sequence of measures must match the sequences found in the
score's <{global}> element, and in all other <{part}> elements.

<div class="example">
```xml
<part>
  <part-name>Violin</part-name>
  <part-abbreviation>Vln</part-abbreviation>
  <instrument-sound>strings.violin</instrument-sound>

  <measure>
    <sequence>...</sequence>
  </measure>
  <measure>
    <sequence>...</sequence>
  </measure>
  <measure>
    <sequence>...</sequence>
  </measure>
  <measure>
    <sequence>...</sequence>
  </measure>
</part>
```
</div>
</section>


<h4 id="cwmnx-system-content">Measure content</h4>

<dfn>Measure content</dfn> supplies a sequence of <{measure}> elements, each of
which supplies musical content for a time interval within a score.

The placement of the measures in measure content constitutes their <dfn>score
order</dfn>, which is the order in which they are logically presented to a
reader. This is distinct from their <dfn>performance order</dfn>, which is the
order in which they are played by a performer.

<h5 id="the-measure-element">The <dfn element><code>measure</code></dfn> element</h5>
<section dfn-for="measure">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{global}>, <{part}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd><a>Metadata content</a></dd>
    <dd>Zero or one <{directions}> elements</dd>
    <dd>One or more <{sequence}> elements (for measures within <{part}> elements only)</dd>
    <dd><a>Interpretation content</a></dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{measure/number}> - an optional numeric index for the measure
    <dd><{measure/barline}> - an optional ending barline type for the measure
  </dl>

The <{measure}> element encloses the direction and sequence content that together
make up the majority of musical content in a CWMNX score.

The optional attribute <dfn element-attr>number</dfn> provides an <a>non-negative integer</a>
which can be used for visually cross-referencing <{measure}> elements in different parts.
If provided, corresponding measures must share the same value for <{measure/number}>.

The optional attribute <dfn element-attr>barline</dfn> defines a barline type
for the barline drawn at the end of the measure. Allowed values include:

<dl dfn-for="measure/barline">
  <dd><dfn attr-value>regular</dfn></dd>
  <dd><dfn attr-value>dotted</dfn></dd>
  <dd><dfn attr-value>dashed</dfn></dd>
  <dd><dfn attr-value>heavy</dfn></dd>
  <dd><dfn attr-value>light-light</dfn></dd>
  <dd><dfn attr-value>light-heavy</dfn></dd>
  <dd><dfn attr-value>heavy-light</dfn></dd>
  <dd><dfn attr-value>heavy-heavy</dfn></dd>
  <dd><dfn attr-value>tick</dfn></dd>
  <dd><dfn attr-value>short</dfn></dd>
  <dd><dfn attr-value>none</dfn></dd>
</dl>

The following example shows both direction content and a single-voice sequence
with two monophonic half notes:

<div class="example">
<img src="images/measure-el-1.svg"/>
```xml
<measure number="2">
  <directions>
    <dynamics type="f" location="0"/>
    <wedge type="diminuendo" location="0" end="1/2"/>
    <dynamics type="p" location="1/2"/>
  </directions>
  <sequence>
    <event value="/2">
      <note pitch="C4"/>
    </event>
    <event value="/2">
      <note pitch="C5"/>
    </event>
  </sequence>
</measure>
```
</div>

</section>

<h5 id="the-sequence-element">The <dfn element><code>sequence</code></dfn> element</h5>

<section dfn-for="sequence">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{measure}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd><a>Metadata content</a></dd>
    <dd>Zero or one <{directions}> elements</dd>
    <dd><a>Sequence content</a></dd>
    <dd><a>Interpretation content</a></dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{sequence/orient}> - default <a>orientation</a> of direction and sequence content </dd>
    <dd><{sequence/staff}> - default staff index of direction or sequence content</dd>
    <dd><{sequence/voice}> - optional cross-measure voice identifier</dd>
  </dl>

The <{sequence}> element organizes a set of musical events within a measure
into a strict temporal sequence, accompanied by relevant directions. The
assignment of measure positions to these events  is accomplished by
<a>sequencing the content</a>, with a <a>starting position</a> of 0 and a
<a>time modification ratio</a> of 1.

The <a>sequence content</a> within each <{sequence}> supplies the music for a
single polyphonic voice within its containing measure, including notes,
chords, rests, beam groups, tuplets and grace note runs.

The optional <dfn element-attr>orient</dfn> attribute provides a default
<a>orientation</a> for all content within this sequence. If not provided, the
orientation is determined automatically according to the implementation's
rendering rules, and may also be overridden by descendants.

The optional <dfn element-attr>staff</dfn> attribute provides a default
<a>staff index</a> for all content within this sequence.  If not provided, the
staff index is determined automatically according to the implementation's
rendering rules, and may also be overridden by descendants.

The optional <dfn element-attr>voice</dfn> attribute supplies a string that
identifies the <a>voice</a> to which this sequence belongs. All <{sequence}>
elements in a given <{part}> having the same value of <{sequence/voice}>
belong to the same voice. Within a given <{measure}> element, no two
<{sequence}> elements may share the same value for <{sequence/voice}>.  The
value of <{sequence/voice}> is an opaque identifier that does not supply
information from producers to consumers.

This example shows a sequence with a single monophonic voice including a series
of events that together comprise a 4/4 measure. A single staff is used, so no
<{sequence/staff}> attribute is present.

<div class="example">
```xml
<measure>
    <sequence>
        <event value="/2">...</event>
        <event value="/4">...</event>
        <event value="/4">...</event>
    </sequence>
</measure>
```
</div>

Here's a more complex measure that shows two melodic voices with independent
rhythms on different staves, each represented by a <{sequence}> element:

<div class="example">
```xml
<measure>
    <sequence staff="1">
        <event value="/2">...</event>
        <event value="/4">...</event>
        <event value="/4">...</event>
    </sequence>
    <sequence staff="2">
        <event value="/2d">...</event>
        <tuplet inner="3/8" outer="1/4">
            <event value="/8">...</event>
            <event value="/8">...</event>
            <event value="/8">...</event>
        </tuplet>
    </sequence>
</measure>
```
</div>

If the voices in the previous example shared a single polyphonic staff,
it might look like this instead:

<div class="example">
```xml
<measure>
    <sequence orient="up">
        <event value="/2">...</event>
        <event value="/4">...</event>
        <event value="/4">...</event>
    </sequence>
    <sequence orient="down">
        <event value="/2d">...</event>
        <tuplet inner="3/8" outer="1/4">
            <event value="/8">...</event>
            <event value="/8">...</event>
            <event value="/8">...</event>
        </tuplet>
    </sequence>
</measure>
```
</div>

The following example shows a typical organization of sequences within a measure
for a SATB-style grand staff with four voices, two on each staff:

<div class="example">
```xml
<measure>
    <sequence orient="up" staff="1">...</sequence>
    <sequence orient="down" staff="1">...</sequence>
    <sequence orient="up" staff="2">...</sequence>
    <sequence orient="down" staff="2">...</sequence>
</measure>
```
</div>

When a <a>direction content</a> element is included in a sequence, it acquires
a measure location identical to that of the following event, or to the end of
the measure if there are no more events. The following example specifies a
<{dynamics}> element which applies to the start of the following note:

<div class="example">
```xml
<sequence>
  ...preceding sequence content...
  <dynamics type="mp"/>
  <event value="/4">
    <note pitch="C4"/>
  </event>
  ...following sequence content
</sequence>
```
</div>

Note that directions may also occur within a <{directions}> element at the
start of a sequence, in which case they are assigned explicit locations. In
this example, dynamic changes are specified over the course of a single whole
note which occupies the entire measure:

<div class="example">
<img src="images/sequence-el-6.svg"/>
```xml
<sequence>
  <directions>
    <dynamics type="f" location="0"/>
    <wedge type="diminuendo" location="0" end="1/2"/>
    <dynamics type="p" location="1/2"/>
  </directions>
  <event value="/1">
    <note pitch="C4"/>
  </event>
</sequence>
```
</div>

</section>

<h5 id="the-directions-element">The <dfn element><code>directions</code></dfn> element</h5>
<section dfn-for="directions">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{measure}>, <{sequence}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd><a>Direction content</a></dd>
    <dt><a>Attributes</a>:</dt>
    <dd>None.</dd>
  </dl>

The <{directions}> element organizes <a>direction content</a> within a containing
<{measure}> or <{sequence}> element. Within <{directions}>, each child direction element
must be assigned a explicit measure location, via its <{direction/location}> attribute.

The order of occurrence of child elements is not significant, since each child has an
explicit location independent of this order.

The context of the <{directions}> element defines a scope for contained directions as follows:

- Directions in a <{measure}> within the <{global}> element apply to all sequences of the measure in all parts. Directions with an orientation of ''orientation/up'' appear above the first displayed part; those with an orientation of ''orientation/down'' below the last displayed part.

- Directions in a <{measure}> within a <{part}> element apply to all sequences of the measure in a given part.

- Directions in a <{sequence}> apply to the sequence in which it occurs.

</section>

<h4 id="cwmnx-sequence-content">Sequence content</h4>

<dfn>Sequence content</dfn> supplies a series of musical events that are
both presented and performed in a given order, each at a distinct time. Such
events express the concepts of chords, notes and rests.

Sequence content possesses a <dfn>starting position</dfn>. This is the
<a>metrical position</a> within a containing measure of the content's first
element.

Sequence content also possesses a <dfn>time modification ratio</dfn>. This is
a rational number scale factor which implicitly applies to all positions and
durations within the content.

Sequence content also may define some number of <a>beamed groups</a>. If defined,
these are lists which accumulate events into groups to which beaming applies.

Sequence content also permits interspersed <a>direction content</a> whose
directions are injected into the sequence either adjacent to events, or
at explicitly given measure locations.

Within sequence content, nested <a>event content</a>
is assigned <a>metrical positions</a> and placed in beamed groups according to the
following procedure, called <dfn lt="sequence the content|sequencing the content">sequencing the content</dfn>:

<ol>
  <li>Let <var>sequence cursor</var> be the <a>starting position</a> of the sequence content.
  <li>Let <var>content</var> to the list of elements comprising the sequence content.</li>
  <li>While <var>content</var> is not empty:
    <ol>
      <li>Let <var>next</var> be the initial element of <var>content</var>,
      and remove it from the head of <var>content</var>.
      <li>If <var>next</var> is a <{beamed}> element:
        <ol>
          <li>If <var>beamed group</var> has a value of list type, beamed groups have been illegally nested. Throw an error.</li>
          <li>Set <var>beamed group</var> to an empty list.
          <li>
            <a>Sequence the content</a> of <var>next</var>, retaining the value of <var>beamed group</var>.
          </li>
          <li>Record <var>beamed group</var> as a group of beamed events within the sequence.</li>
          <li>Set <var>beamed group</var> to an undefined value.</li>
        </ol>
      </li>
      <li>If <var>next</var> is an <{event}> element:
        <ol>
          <li>If <var>next</var> has a <{event/measure}> value of <{event/measure/yes}>,
            <ol>
              <li>If <var>sequence cursor</var> is greater than zero, throw a processing error.</li>
              <li>Set <var>sequence cursor</var> to the end of the measure as defined by its time signature.</li>
            </ol>
          </li>
          <li>Else,
            <ol>
              <li>
                Set the <a>metrical position</a> of <var>next</var> to <var>sequence cursor</var>.
              </li>
              <li>
                Add the duration of <var>next</var>, multiplied by the
                  <a>time modification ratio</a>, to <var>sequence cursor</var>.
              </li>
              <li>
                If <var>beamed group</var> is a list, append <var>next</var> to <var>beamed group</var>.
            </ol>
        </ol>
      </li>
      <li>If <var>next</var> is a <{forward}> element:
        <ol>
          <li>
            Set the <a>metrical position</a> of <var>next</var> to <var>sequence cursor</var>.
          </li>
          <li>
            Add the duration of <var>next</var>, multiplied by the
              <a>time modification ratio</a>, to <var>sequence cursor</var>.
          </li>
        </ol>
      </li>
      <li>Else, if <var>next</var> is a <{tuplet}> element:
        <ol>
          <li>
            <a>Sequence the content</a> of <var>next</var>, using
            <var>sequence cursor</var> as the <a>starting position</a>,
            retaining the current value of <var>beamed group</var>, and
            multiplying the <a>time modification ratio</a> by the <{tuplet}>'s
            <{tuplet/outer}> / <{tuplet/inner}> ratio
            for the processing of the tuplet.
          </li>
          <li>
            Add the total duration of <var>next</var> as given by <{tuplet/outer}>, multiplied by the
              <a>time modification ratio</a>, to <var>sequence cursor</var>.
          </li>
        </ol>
      </li>
      <li>Else, if <var>next</var> is a <{grace}> element:
        <ol>
          <li>
            Process the contents of <var>next</var>, assigning them a non-metrical ordering
            relative to preceding or following elements as appropriate.
        </ol>
      </li>
      <li>Else, if <var>next</var> is <a>direction content</a>:
        <ol>
          <li>
            Take the current value of <var>sequence cursor</var> as the <a>measure location</a> of <var>next</var>.
          </li>
        </ol>
      </li>
      <li>
        If <var>sequence cursor</var> exceeds the specified duration for the enclosing element
        (time signature for a <{measure}>, <{tuplet/inner}> attribute for a <{tuplet}>), throw
        a processing error.
      </li>
    </ol>
  </li>
</ol>

<h5 id="the-event-element">The <dfn element><code>event</code></dfn> element</h5>
<section dfn-for="event">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{sequence}>, <{tuplet}>, <{beamed}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd><a>Metadata content</a></dd>
    <dd>Either zero or more <{note}> elements, or one <{rest}> element.</dd>
    <dd><a>Event content</a></dd>
    <dd><a>Interpretation content</a></dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{event/value}> - the metrical duration of this event</dd>
    <dd><{event/measure}> - optional flag indicating that the event occupies the entire measure.</dd>
    <dd><{event/orient}> - optional <a>orientation</a> of this event </dd>
    <dd><{event/staff}> - optional <a>staff index</a> of this event </dd>
    <dt><a>Style properties</a>:</dt>
    <dd>'stem-direction' - the stem direction of this event</dd>
  </dl>

The <{event}> element represents a <a>notated event</a>: a discrete period of
time within a sequence during which one or more notes are performed, or in
which a rest occurs.

All events other than <a>whole-measure events</a> require a <dfn element-attr>
value</dfn> attribute to provide their duration as a <a>note value</a>.
This duration is implicitly multiplied by the current <a>time modification
ratio</a>, as specified by the process of <a>sequencing the content</a> of the
event's containing element.

Here's an example of a simple event representing a half note:

<div class="example">
<img src="images/event-el-1.svg"/>
```xml
<event value="/2">
  <note pitch="C4"/>
</event>
```
</div>

With more than one <{note}>, the event becomes a chord:

<div class="example">
<img src="images/event-el-2.svg"/>
```xml
<event value="/2">
  <note pitch="C4"/>
  <note pitch="E4"/>
  <note pitch="G4"/>
</event>
```
</div>

With a <{rest}> element alone, the event is a rest:
<div class="example">
<img src="images/event-el-3.svg"/>
```xml
<event value="/2">
  <rest/>
</event>
```
</div>

NOTE: It is legal for an event to have neither notes nor a rest. The result is
functionally identical to <{forward}>, but is more constrained since an event
must have a valid <a>note value</a>, while a space can have a multiple
thereof.

If the optional <dfn element-attr>measure</dfn> attribute is given as <dfn
attr-value dfn-for="event/measure">yes</dfn>, then the event is a <dfn>whole-measure
event</dfn> which occupies the entire measure. Whole-measure events may not
specify a <{event/value}> attribute, and must either be empty or contain
exactly one <{rest}>. Here's an example:

<div class="example">
<img src="images/event-el-4.svg"/>
```xml
<event measure="yes">
  <rest/>
</event>
```
</div>


The optional <dfn element-attr>orient</dfn> attribute provides a specific
<a>orientation</a> for this event. If not provided, the orientation is
inherited from any <{sequence}> or <{tuplet}> ancestor which specified it. If
no ancestor did so, it is determined automatically according to the
implementation's rendering rules.

The optional <dfn element-attr>staff</dfn> attribute provides a specific
<a>staff index</a> for this event. If not provided, the orientation is
inherited from any <{sequence}> or <{tuplet}> ancestor which specified it. If
no ancestor did so, it is determined automatically according to the
implementation's rendering rules.

While <{event/staff}> could be used on a per-event basis, its primary purpose
is for overriding a default staff assignment at the <{sequence}> level, as in
cross-staff keyboard notation. The following example illustrates a lower-staff
keyboard voice that temporarily crosses into the upper staff:

<div class="example">
```xml
<sequence staff="2">
  <event value="/4">
    <note pitch="C3"/>
  </event>
  <event value="/4">
    <note pitch="G3"/>
  </event>
  <event value="/4" staff="1">
    <note pitch="E4"/>
  </event>
  <event value="/4">
    <note pitch="C3"/>
  </event>
</sequence>
```
</div>

</section>

<h5 id="the-tuplet-element">The <dfn element><code>tuplet</code></dfn> element</h5>
<section dfn-for="tuplet">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{sequence}>, <{tuplet}>, <{beamed}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd><a>Metadata content</a></dd>
    <dd><a>Sequence content</a></dd>
    <dd><a>Interpretation content</a></dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{tuplet/outer}> - duration with respect to containing element</dd>
    <dd><{tuplet/inner}> - duration of the enclosed sequence content</dd>
    <dd><{sequence/orient}> - optional <a>orientation</a> of this tuplet </dd>
    <dd><{sequence/staff}> - optional <a>staff index</a> of this tuplet </dd>
  </dl>

The <{tuplet}> element organizes a set of musical events that form a distinct
and contiguous run within a <{sequence}, and which are subject to a common
<a>time modification ratio</a> expressed as the quotient of two rational numbers.
A <{tuplet}> behaves much like a <{sequence}> element with respect to its contents.

The required attribute <dfn element-attr>outer</dfn> supplies a <a>note value
quantity</a> describing both the duration and the units of the tuplet with
respect to its enclosing context. This is how much time the tuplet occupies in
the measure or tuplet in which it is placed.

The required attribute <dfn element-attr>inner</dfn> supplies a <a>note value
quantity</a> describing the total duration and the units of the events within
the tuplet, as notated.

The contents of the tuplet are placed into a temporal sequence by performing
the procedure <a>sequencing the content</a> with a <a>starting position</a>
determined by the parent context, and a <a>time modification ratio</a> equal
to the tuplet's <{tuplet/outer}> value divided by its <{tuplet/inner}> value.
Following this procedure, the value of the <var>sequence cursor</var> MUST
equal the value of <{tuplet/inner}>, or the contents are considered to be in error.

The optional <dfn element-attr>orient</dfn> attribute provides a specific
<a>orientation</a> for all content within this tuplet. If not provided, the
orientation is determined automatically according to the implementation's
rendering rules.

The <dfn element-attr>staff</dfn> attribute provides a specific
<a>staff index</a> for all content within this tuplet.  If not provided, the
staff index is determined automatically according to the implementation's
rendering rules.

<div class="example">
```xml
<sequence>
    ...preceding events in sequence...
    <tuplet inner="3/8" outer="1/4">
        <event value="/8">...</event>
        <event value="/8">...</event>
        <event value="/8">...</event>
    </tuplet>
    ...remaining events in sequence...
</sequence>
```
</div>

</section>

<h5 id="the-beamed-element">The <dfn element><code>beamed</code></dfn> element</h5>
<section dfn-for="beamed">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{sequence}>, <{tuplet}>, <{grace}>, <{beamed}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd><a>Metadata content</a></dd>
    <dd><a>Sequence content</a></dd>
    <dd><a>Interpretation content</a></dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{beamed/value}> - optional value of a beamed group within a parent</dd>
    <dd><{beamed/continue}> - optional beam group in following measure which continues this one</dd>
  </dl>

The <{beamed}> element defines a <dfn>beamed group</dfn> of events that are
joined by beams to conceptually mark them as belonging to a distinct run. In
CWMN, beams cannot have one end inside a grouping such as tuplets or grace
notes and the other end outside the same grouping. This element acts to
enforce that constraint.

NOTE: In general, the number of beams and the use of forward or backward hooks
is determined automatically by implementations. There is thus no CWMNX element
that represents an individual beam.  More detailed beam specifications may be
overridden using style properties, but do not amount to semantic markup.

Here is a simple beaming example in a 6/8 time signature. The grouping
suffices; there is no need to describe individual beams within the beamed
group, such as the distinct beam that joins the two 16th notes in the second
group:

<div class="example">
```xml
<sequence>
    <beamed>
      <event value="/8">...</event>
      <event value="/8">...</event>
      <event value="/8">...</event>
    </beamed>
    <beamed>
      <event value="/8">...</event>
      <event value="/16">...</event>
      <event value="/16">...</event>
      <event value="/8">...</event>
    </beamed>
</sequence>
```
</div>

The <{beamed}> element may also be nested in order to place child beamed groups
in a parent beamed group. A common scenario occurs when groups of short beamed
notes are themselves organized at a higher level. The <dfn element-attr>value</dfn>
attribute optionally gives the <a>base note value</a> to be assigned to the child
group for beaming purposes.

The following example illustrates two child beamed groups of four 32nd notes
each, which are in turn placed within a higher-parent beamed group. Each of
the two subgroups has a note value of one eighth note for beaming purposes,
and so the subgroups are themselves connected by a single beam to constitute
the larger group:

<div class="example">
```xml
<beamed>
  <beamed value="/8">
    <event value="/32">...</event>
    <event value="/32">...</event>
    <event value="/32">...</event>
    <event value="/32">...</event>
  </beamed>
  <beamed value="/8">
    <event value="/32">...</event>
    <event value="/32">...</event>
    <event value="/32">...</event>
    <event value="/32">...</event>
  </beamed>
</beamed>
```
</div>

Note: The <{beamed/value}> attribute does not affect beaming <em>within</em> a
beamed group, and so has no consequences unless beamed groups are nested.

Indirect nesting of beam groups also occurs. One example is a set of grace
notes sharing their own beam, preceding a regular non-grace note within a
larger beamed group:

<div class="example">
```xml
<beamed>
  <event value="/8">...</event>
  <event value="/8">...</event>
  <grace>
    <beamed>
      <event value="/8">...</event>
      <event value="/8">...</event>
      <event value="/8">...</event>
      <event value="/8">...</event>
    </beamed>
  </grace>
  <event value="/8">...</event>
  <event value="/8">...</event>
</beamed>
```
</div>

Beams may continue from one measure to the next. In this case, the <dfn
element-attr>continue</dfn> attribute gives the <a>element location</a> of
a <{beamed}> element in the succeeding measure of the same part, which serves
to identify both the continuing group and the sequence or voice in which it
resides. This attribute may only be specified if no other events follow this
beamed group in its measure.

A continuation of a prior beamed group, may itself have a continuation. Thus,
beamed groups can continue throughout a part without interruption if desired.

The following example illustrates a beam that crosses a measure boundary:

<div class="example">
```xml
<measure number="9">
  <sequence>
      ...preceding sequence content...
      <beamed continue="#beamcont1">
        <event value="/8">...</event>
        <event value="/8">...</event>
      </beamed>
  </sequence>
</measure>
<measure number="10">
  <sequence>
      <beamed id="beamcont1">
        <event value="/8">...</event>
        <event value="/8">...</event>
      </beamed>
      ...following sequence content...
  </sequence>
</measure>
```
</div>
</section>

<h5 id="the-forward-element">The <dfn element><code>forward</code></dfn> element</h5>
<section dfn-for="forward">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{sequence}>, <{tuplet}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd>None.</dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{forward/duration}> - the metrical duration of this space</dd>
  </dl>

The <{forward}> element represents a discrete period of time within a sequence
in which no sequence content occurs. It embodies the idea of blank space
within a measure.

The <dfn element-attr>duration</dfn> attribute specifies a <a>note value
quantity</a> that provides the length of this <{forward}>.

NOTE: In contrast to <{event}>'s <{event/value}> attribute, the
<{forward/duration}> attribute is not constrained to a single note value, but
may be a multiple of one.
</section>

<h5 id="the-grace-element">The <dfn element><code>grace</code></dfn> element</h5>
<section dfn-for="grace">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{sequence}>, <{tuplet}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd><a>Metadata content</a></dd>
    <dd><a>Sequence content</a></dd>
    <dd><a>Interpretation content</a></dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{grace/type}> - type of included grace notes</dd>
    <dd><{grace/slash}> - flag indicating rhythmic character of grace notes</dd>
  </dl>

The <{grace}> element represents a run of events that are performed in a
subordinate relationship to the surrounding non-grace events.

The <dfn element-attr>type</dfn> attribute describes the kind of grace notes
included in this element. Values include:

: <dfn attr-value dfn-for="grace/type">steal-previous</dfn> (default)

:: The run of grace notes occupies a time interval that ends before the
    expected onset of the next non-grace event, shortening the duration of
    the preceding non-grace event.

: <dfn attr-value dfn-for="grace/type">steal-following</dfn>

:: The run of grace notes occupies a time interval starting at the expected
    onset of the next non-grace event, both delaying its onset and shortening its duration.

: <dfn attr-value dfn-for="grace/type">make-time</dfn>

:: The run of grace notes delays the onset of the next non-grace event.

The <dfn element-attr>slash</dfn> attribute specifies whether grace notes are
notated with a slash or not. The default value of <dfn attr-value dfn-
for="grace/slash">yes</dfn> specifies a slash, indicating that the grace notes
are displayed with a diagonal stroke and are to be performed quickly and not
in their notated rhythm. Otherwise, they are performed with the notated note
values according to the performance characteristics given by <{grace/type}>.

<a>Direction content</a> lacking a <{direction/location} attribute within a
<{grace}> element, is considered to be in alignment with the following event,
even though grace notes in the same run technically share the same <a>measure
location</a>.

The following example illustrates a run of two grace notes up to a quarter note.
<div class="example">
```xml
<sequence>
    ...preceding event content...
    <grace>
      <event value="/8">...</event>
      <event value="/8">...</event>
    </grace>
    <event value="/4">...</event>
    ...following event content...
</sequence>
```
</div>

</section>

<h4 id="cwmnx-event-content">Event content</h4>

<dfn>Event content</dfn> comprises elements that describe the musical content
of a single event, that is performed at a distinct time.

<h5 id="the-note-element">The <dfn element><code>note</code></dfn> element</h5>
<section dfn-for="note">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{event}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd><a>Metadata content</a></dd>
    <dd><a>Note content</a></dd>
    <dd><a>Liaison content</a></dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{note/pitch}> - the musical pitch of this note </dd>
    <dd><{note/staff}> - an optional staff index for this note </dd>
    <dd><{note/accidental}> - an optional accidental for this note </dd>
    <dd><{note/value}> - an optional note value for this note </dd>
  </dl>

The <{note}> element defines a single note within an event, along with other
information pertaining to the note itself rather than to its containing event.

The <dfn element-attr>pitch</dfn> attribute supplies the pitch of the note
as a <a>chromatic pitch</a>, using the <a>rules for parsing a chromatic pitch</a>.

Optionally, the <dfn element-attr>staff</dfn> attribute supplies a <a>staff index</a>
for this note where this differs from the staff index which applies to the containing
<{event}> as a whole.

The <dfn element-attr>accidental</dfn> attribute supplies an accidental value
for this note. In the <{cwmnx/profile/standard}> CWMNX profile, this attribute
must match the <a>alteration</a> of the <{note/pitch}> attribute. Omission of
the  attribute indicates that no accidental is to be displayed. The special
value <dfn attr-value for="note/accidental">auto</dfn> indicates that a
consumer application should determine the proper accidental based on musical
context.

<em>(Import values here from MusicXML specification. Add style properties for
editorial indications. Handle the case of "explicit" accidentals that should
be preserved even if the chromatic context is changed by edits.)</em>

Advisement: The following features are not supported by the
<{cwmnx/profile/standard}> CWMNX profile.

The <dfn element-attr>value</dfn> attribute optionally supplies a <a>note
value</a> for this note, where this differs from the containing <{event}>'s
note value.  The value of the note must be less than or equal to the value of
the containing event.

</section>

<h5 id="the-rest-element">The <dfn element><code>rest</code></dfn> element</h5>
<section dfn-for="rest">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{event}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd><a>Metadata content</a></dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{rest/pitch}> - the musical pitch to which this rest should be visually registered </dd>
  </dl>

The <{rest}> element defines a rest within an event, along with other
information pertaining to the rest rather than to its containing event.

If the <dfn element-attr>pitch</dfn> attribute is provided, it mandates that
the rest be placed on the staff line corresponding to the provided
<a>chromatic pitch</a>. The accidental component of the pitch is
ignored for this purpose.
</section>

<h5 id="the-articulations-element">The <dfn element><code>articulations</code></dfn> element</h5>
<section dfn-for="articulations">
<em>Needs migration from MusicXML.</em>
</section>

<h5 id="the-lyric-element">The <dfn element><code>lyric</code></dfn> element</h5>
<section dfn-for="lyric">
<em>Needs migration from MusicXML.</em>
</section>

<h5 id="the-ornaments-element">The <dfn element><code>ornaments</code></dfn> element</h5>
<section dfn-for="ornaments">
<em>Needs migration from MusicXML.</em>
</section>

<h5 id="the-technical-element">The <dfn element><code>technical</code></dfn> element</h5>
<section dfn-for="technical">
<em>Needs migration from MusicXML.</em>
</section>

<h4 id="cwmnx-note-content">Note content</h4>

<dfn>Note content</dfn> comprises elements that describe the musical nature
of a single note within an event.

<h5 id="the-notehead-element">The <dfn element><code>notehead</code></dfn> element</h5>
<section dfn-for="notehead">
<em>Needs migration from MusicXML.</em>
</section>

<h5 id="the-fret-element">The <dfn element><code>fret</code></dfn> element</h5>
<section dfn-for="fret">
<em>Needs migration from MusicXML.</em>
</section>

<h5 id="the-string-element">The <dfn element><code>string</code></dfn> element</h5>
<section dfn-for="string">
<em>Needs migration from MusicXML.</em>
</section>

<h4 id="cwmnx-liaison-content">Liaison content</h4>

<dfn>Liaison content</dfn> comprises elements that describe the liaison or connection
between a single note within an event, and some other note.

<h5 id="cwmnx-liaison-attributes">Liaison attributes</h5>

Liaison elements share a set of common <dfn>liaison attributes</dfn> in an attribute group.

  <dl class="def">
    <dt><a>Attributes</a>:</dt>
    <dd><{liaisons/target}> - the optional element ID of the note at which the liaison ends</dd>
  </dl>

Liaisons in general must be provided with the ID of a <{note}> on which they end,
given via the <dfn element-attr dfn-for="liaisons">target</dfn> attribute. The constraints
on this attribute vary from one liaison to another.

<h5 id="the-tied-element">The <dfn element><code>tied</code></dfn> element</h5>
<section dfn-for="tied">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{note}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd><a>Metadata content</a></dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{tied/location}> - an optional measure location to end at
  </dl>

The <{tied}> element is used to indicate that a note is tied to a successor <{note}> element.

If the <{liaisons/target}> attribute is provided, it must specify the element
ID of a <{note}> which lies in the same part, and whose containing <{event}>
begins directly after the end of the of this note's event. The step, alteration and
octave values for the target note must be identical to this one.

If <{liaisons/target}> is not provided, the tie does not connect to a
particular destination note. In this case <dfn element-attr>location</dfn>
attribute may be used to specify the <a>measure location</a> of the other end
of the tie.

The value of <{tied/location}> may either lie before or after the current note's event,
or may assume the special values <{tied/location/incoming}> or <{tied/location/outgoing}>.
The handling is as follows:

- If the location precedes the start of the current event, this signifies a tie
    starting at the given location and ending on the current note.

- If the location occurs after the start of the current event, this signifies a tie
    starting at the current note and ending at the given location.

- A value of <dfn attr-value for="tied/location">incoming</dfn> places the start location
    at a conventionally short distance before the current note, and ends on the current note.

- A value of <dfn attr-value for="tied/location">outgoing</dfn> starts on the current note,
    and places the end location
    at a conventionally short distance after the current note.

If neither <{liaisons/target}> nor <{tied/location}> is given, the effect is as if
<{tied/location/outgoing}> was specified.

Note: If a producer implementation does not give an explicit value for
<{liaisons/target}>, this always signifies an unmatched tie. In this case
consumer implementations must not search for a matching end note of the same
pitch.

Examples:

<div class="example">
```xml
<sequence>
  <event value="/4">
    <note pitch="C4">
      <tied target="note2"/>
    </note>
  </event>
  <event value="/4">
    <note id="note2" pitch="C4"/>
  </event>
```
</div>

</section>

<h5 id="the-arpeggiate-element">The <dfn element><code>arpeggiate</code></dfn> element</h5>
<section dfn-for="arpeggiate">
<em>Needs migration from MusicXML. In this case the liaison target will be constrained to lie within the same event.</em>
</section>

<h5 id="the-glissando-element">The <dfn element><code>glissando</code></dfn> element</h5>
<section dfn-for="glissando">
<em>Needs migration from MusicXML.</em>
</section>

<h5 id="the-slide-element">The <dfn element><code>slide</code></dfn> element</h5>
<section dfn-for="slide">
<em>Needs migration from MusicXML.</em>
</section>

<h5 id="the-bend-element">The <dfn element><code>bend</code></dfn> element</h5>
<section dfn-for="bend">
<em>Needs migration from MusicXML, and probably some simplification and better handling of pre-bends.</em>
</section>

<h5 id="the-hammer-on-element">The <dfn element><code>hammer-on</code></dfn> element</h5>
<section dfn-for="hammer-on">
<em>Needs migration from MusicXML.</em>
</section>

<h5 id="the-pull-off-element">The <dfn element><code>pull-off</code></dfn> element</h5>
<section dfn-for="pull-off">
<em>Needs migration from MusicXML.</em>
</section>


<h4 id="cwmnx-direction-content">Direction content</h4>

<dfn>Direction content</dfn> consists of some number of musical
<dfn>directions</dfn> that modify or accompany the performance of events in
one or more measures. Directions may be included in a CWMNX score in two ways:

- Within a <{directions}> element below a <{measure}> or <{sequence}>, with
    explicitly defined measure locations for each direction.

- Within <a>sequence content</a>, in which case measure locations are assigned
    as an outcome of <a>sequencing the content</a>.

<h5 id="cwmnx-direction-attributes">Direction attributes</h5>

Directions share a set of common <dfn>direction attributes</dfn> in an attribute group.

  <dl class="def">
    <dt><a>Attributes</a>:</dt>
    <dd><{direction/location}> - the <a>measure location</a> of the direction</dd>
    <dd><{direction/staff}> - an optional <a>staff index</a></dd>
    <dd><{direction/orient}> - an optional <a>orientation</a></dd>
  </dl>

All directions within a <{directions}> parent element may be given an explicit
<a>measure location</a> by supplying a <dfn element-attr dfn-
for="direction">location</dfn> attribute. If omitted, this is determined by
the process of <a>sequencing the content</a> in which it occurs; if not within
a <{sequence}>, the default measure location is zero.

Conversely, directions occurring within <a>sequence content</a> must omit this
attribute as their location is determined during the procedure of
<a>sequencing the content</a>.

The optional <dfn element-attr dfn-for="direction">staff</dfn> attribute
designates the staff index to which this direction applies, if such a
designation makes sense.  If not provided, the orientation is inherited from
any <{sequence}> ancestor which specified it. If no ancestor did so, it is
determined automatically according to the implementation's rendering rules.

The optional <dfn element-attr dfn-for="direction">orient</dfn> attribute
provides a specific <a>orientation</a> for this direction. If not provided,
the orientation is inherited from any <{sequence}> ancestor which specified
it. If no ancestor did so, it is determined automatically according to the
implementation's rendering rules.

<h5 id="the-dynamics-element">The <dfn element><code>dynamics</code></dfn> element</h5>
<section dfn-for="dynamics">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><a>Direction content</a></dd>
    <dt><a>Content Model</a>:</dt>
    <dd>None</dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{dynamics/type}> - the semantic nature of this dynamics direction</dd>
    <dt>Attribute Groups:</dt>
    <dd><a>Direction attributes</a></dd>
  </dl>

The <{dynamics}> element describes a textual dynamic direction to the performer.

The <dfn element-attr>type</dfn> attribute describes the nature of the dynamic. The following
dynamics are supported:

<dl dfn-for="dynamics/type">
  <dt>
    <dfn attr-value><code>p</code></dfn>,
    <dfn attr-value><code>pp</code></dfn>,
    <dfn attr-value><code>ppp</code></dfn>,
    <dfn attr-value><code>pppp</code></dfn>,
    <dfn attr-value><code>ppppp</code></dfn>,
    <dfn attr-value><code>pppppp</code></dfn>,
  </dt>
  <dt>
    <dfn attr-value><code>f</code></dfn>,
    <dfn attr-value><code>ff</code></dfn>,
    <dfn attr-value><code>fff</code></dfn>,
    <dfn attr-value><code>ffff</code></dfn>,
    <dfn attr-value><code>fffff</code></dfn>,
    <dfn attr-value><code>ffffff</code></dfn>
  </dt>
  <dt>
    <dfn attr-value><code>mp</code></dfn>
    <dfn attr-value><code>mf</code></dfn>,
    <dfn attr-value><code>sf</code></dfn>,
    <dfn attr-value><code>sfp</code></dfn>,
    <dfn attr-value><code>sfpp</code></dfn>,
    <dfn attr-value><code>fp</code></dfn>,
    <dfn attr-value><code>rf</code></dfn>,
    <dfn attr-value><code>rfz</code></dfn>,
    <dfn attr-value><code>sfz</code></dfn>,
    <dfn attr-value><code>sffz</code></dfn>,
    <dfn attr-value><code>fz</code></dfn>
    <dfn attr-value><code>n</code></dfn>
    <dfn attr-value><code>pf</code></dfn>
    <dfn attr-value><code>sfzp</code></dfn>
  </dt>
</dl>

</section>

<h5 id="the-instruction-element">The <dfn element><code>instruction</code></dfn> element</h5>
<section dfn-for="instruction">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><a>Direction content</a></dd>
    <dt><a>Content Model</a>:</dt>
    <dd>The text of this direction.</dd>
    <dt>Attribute Groups:</dt>
    <dd><a>Direction attributes</a></dd>
  </dl>
The <{instruction}> element describes a run of text that is presented in a visual style
consistent with general instructions to the performer.

<div class="example">
```xml
<measure>
  <directions>
    <instruction>Molto adagio</instruction>
  </directions>
  ...following measure content...
</measure>
```
</div>

</section>

<h5 id="the-expression-element">The <dfn element><code>expression</code></dfn> element</h5>
<section dfn-for="expression">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><a>Direction content</a></dd>
    <dt><a>Content Model</a>:</dt>
    <dd>The text of this direction.</dd>
    <dt>Attribute Groups:</dt>
    <dd><a>Direction attributes</a></dd>
  </dl>

The <{expression}> element describes a run of text that is presented in a visual style
consistent with describing musical expression.

<div class="example">
```xml
<sequence>
  <dirgroup>
    <expression>subito</expression>
    <dynamics>p</dynamics>
  </dirgroup>
  ...following sequence content...
</sequence>
```
</div>

</section>

<h5 id="the-ending-element">The <dfn element><code>ending</code></dfn> element</h5>
<section dfn-for="ending">
  <em>Needs migration from MusicXML. Applies from the start of the containing measure (i.e. does not belong to a &lt;barline&gt;)</em>
</section>

<h5 id="the-repeat-element">The <dfn element><code>repeat</code></dfn> element</h5>
<section dfn-for="repeat">
  <em>Needs migration from MusicXML. Applies to the containing measure (i.e. does not belong to a &lt;barline&gt;).
      Thus, "start" means a repeat starting from the beginning of this measure; "end" means a repeat ending at the end
      of this measure.</em>
</section>

<h5 id="the-coda-element">The <dfn element><code>coda</code></dfn> element</h5>
<section dfn-for="coda">
  <em>Needs migration from MusicXML. May need to distinguish musical form use from textual reference to the symbol.</em>
</section>

<h5 id="the-segno-element">The <dfn element><code>segno</code></dfn> element</h5>
<section dfn-for="segno">
  <em>Needs migration from MusicXML. May need to distinguish musical form use from textual reference to the symbol.</em>
</section>

<h5 id="the-harmony-element">The <dfn element><code>harmony</code></dfn> element</h5>
<section dfn-for="harmony">
<em>Needs migration from MusicXML.</em>
</section>

<h5 id="the-symbol-element">The <dfn element><code>symbol</code></dfn> element</h5>
<section dfn-for="symbol">
<em>Needs migration from MusicXML -- arbitrary SMuFL glyph. (How will visual registration work?)</em>
</section>

<h5 id="the-dirgroup-element">The <dfn element><code>dirgroup</code></dfn> element</h5>
<section dfn-for="dirgroup">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><a>Direction content</a></dd>
    <dt><a>Content Model</a>:</dt>
    <dd><a>Direction content</a>, which must not include <a>measure locations</a></dd>
    <dt>Attribute Groups:</dt>
    <dd><a>Direction attributes</a></dd>
  </dl>
The <{dirgroup}> element describes a set of directions which are presented
sequentially, like a sentence. The typical presentation of directions in a group is
to arrange them horizontally from left to right.

TBD: spacing properties

</section>
<h4 id="cwmnx-spanning-directions">Spanning directions</h4>

<dfn>Spanning directions</dfn> are directions whose temporal extent within a part is
characterized by a <a>span</a>.

<h5 id="cwmnx-span-attributes">Span attributes</h5>

Spanning directions share a set of common <dfn>span attributes</dfn> in an attribute group.

  <dl class="def">
    <dt><a>Attributes</a>:</dt>
    <dd><{spans/end}> - the <a>measure location</a> of the direction</dd>
  </dl>

Spanning directions MUST be given a <a>measure location</a> as their endpoint,
by supplying a <dfn element-attr dfn-for="spans">end</dfn> attribute. This
measure location must lie within the same run of <a>measure content</a> as the
location given for the start of the spanning direction.

<h5 id="the-slur-element">The <dfn element><code>slur</code></dfn> element</h5>
<section dfn-for="slur">
</section>

<h5 id="the-wedge-element">The <dfn element><code>wedge</code></dfn> element</h5>
<section dfn-for="wedge">
   <dl class="def">
     <dt><a>Contexts</a>:</dt>
     <dd><a>Direction content</a></dd>
     <dt><a>Content Model</a>:</dt>
     <dd>None</dd>
     <dt><a>Attributes</a>:</dt>
     <dd><{wedge/type}> - the type of wedge</dd>
     <dt>Attribute Groups:</dt>
     <dd><a>Direction attributes</a></dd>
     <dd><a>Span attributes</a></dd>
   </dl>

The <dfn element-attr>type</dfn> attribute describes the nature of the wedge:

<dl dfn-for="wedge/type">
  <dt><dfn attr-value><code>diminuendo</code></dfn></dt>
  <dd>The wedge represents a decrease in dynamic level.</dd>
  <dt><dfn attr-value><code>crescendo</code></dfn></dt>
  <dd>The wedge represents an increase in dynamic level.</dd>
</dl>
</section>

<h5 id="the-cresc-element">The <dfn element><code>cresc</code></dfn> element</h5>
<section dfn-for="cresc">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><a>Direction content</a></dd>
    <dt><a>Content Model</a>:</dt>
    <dt><a>Attributes</a>:</dt>
    <dd><{cresc/text}> - optional text to be displayed</dd>
    <dt>Attribute Groups:</dt>
    <dd><a>Direction attributes</a></dd>
    <dd><a>Span attributes</a></dd>
  </dl>

The <{cresc}> element represents a crescendo or increasing dynamic level over the course of a span,
notated as text followed by a dashed line.

The optional <dfn element-attr>text</dfn> attribute overrides the text to be
displayed in the score for this element.

</section>

<h5 id="the-dim-element">The <dfn element><code>dim</code></dfn> element</h5>
<section dfn-for="dim">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><a>Direction content</a></dd>
    <dt><a>Content Model</a>:</dt>
    <dd>None</dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{dim/text}> - optional text to be displayed</dd>
    <dt>Attribute Groups:</dt>
    <dd><a>Direction attributes</a></dd>
    <dd><a>Span attributes</a></dd>
  </dl>

The <{dim}> element represents a diminuendo or decreasing dynamic level over the course of a span,
notated as text followed by a dashed line.

The optional <dfn element-attr>text</dfn> attribute overrides the text to be
displayed in the score for this element.

</section>

<h5 id="the-pedal-element">The <dfn element><code>pedal</code></dfn> element</h5>
<section dfn-for="pedal">
  <em>Details TBD.</em>
</section>

<h5 id="the-bracket-element">The <dfn element><code>bracket</code></dfn> element</h5>
<section dfn-for="bracket">
<em>TBD: This should be separated into distinct elements with their own semantics.
  Brackets in MusicXML are too much of a catch-all.</em>
</section>

Advisement: Other spans exist in MusicXML and need to be migrated.

<h4 id="cwmnx-staff-directions">Staff directions</h4>

<dfn>Staff directions</dfn> are directions that apply as a whole to the
one or more musical staves in a part, and which determine the interpretation
of other notations within some applicable range of those staves.

Because it delineates disjoint ranges of staves, any <a>staff direction</a> has the
effect of <dfn lt="partitioning|partitions">partitioning</dfn> the events in a
measure, such that all events lie either before or after the given directions.
For example, consider a <{clef}> element describing a clef change. No matter
how many polyphonic voices exist in a measure, all notes in all voices either
lie to the left or to the right of this clef.

Staff directions that modify the interpretation or layout of the staff, apply
from the start of that <{measure}> to all subsequent measures within the same
<{global}> or <{part}> element until changed.

Most staff directions have a fixed location, typically the beginning or
end of the measure in which they occur.

<h5 id="the-key-element">The <dfn element><code>key</code></dfn> element</h5>
<section dfn-for="key">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd>Direction content</dd>
    <dt><a>Content Model</a>:</dt>
    <dd>None</dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{key/fifths}> - the transposition from concert pitch in fifths</dd>
  </dl>

The <{key}> element defines a key signature applicable to this and all following
measure content, until changed.

The <a>measure location</a> of a <{key}> direction is ignored and is assumed to be zero.

The <a>staff index</a> of a <{key}> direction is ignored, as the direction always applies
to all the staves in a given part (if not the whole score).

It is invalid to place more than one <{key}> element within a <{measure}>.

In the <{cwmnx/profile/standard}> CWMNX profile, <{key}> elements in <{global}> measure content
are required for every key change. <{key}> elements below <{part}>
are optional; if present they must indicate a value of <{key/fifths}> that is
either identical to the corresponding value in the global <{key}> or differs from it
by a multiple of 12.

The required <dfn element-attr>fifths</dfn> attribute is a <a>valid
integer</a> which supplies a number of fifths distance from a signature with
no accidentals.
</section>

<h5 id="the-time-element">The <dfn element><code>time</code></dfn> element</h5>
<section dfn-for="time">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd>Direction content</dd>
    <dt><a>Content Model</a>:</dt>
    <dd>None</dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{time/signature}> - the displayed <a>time signature</a></dd>
    <dd><{time/measure}> - an <a>time signature</a> which describes the content of the current measure only, and which is not displayed</dd>
  </dl>

The <{time}> element defines a time signature applicable to this and following
measures, until changed.

The <a>measure location</a> of a <{time}> direction is ignored and is assumed to be zero.

It is invalid to place more than one <{time}> element within a <{measure}>.

In the <{cwmnx/profile/standard}> CWMNX profile, a <{time}> element may only appear
inside <{global}> measure content, not within a <{part}>.

The required <dfn element-attr>signature</dfn> attribute supplies a <a>time signature</a> that gives the time signature for this measure and for subsequent measures. By default this signature is displayed in normative rendering.

Here is an example of a 4/4 time signature:

<div class="example">
```xml
<global>
  <measure>
    <directions>
      <time signature="4/4"/>
    </directions>
    ...
  </measure>
  ...
</global>
```
</div>

Optionally, the <dfn element-attr>measure</dfn> attribute may be used to
override the notated <a>time signature</a> for <em>the current measure
only</em>, where this value differs from <{time/signature}>. This is of particular use
for anacruses and for shortened measures prior to a repeat or jump back to an anacrusis.

For example, here is an example of a 3/4 time signature beginning with an anacrusis
or pickup measure containing a single beat:

<div class="example">
```xml
<global>
  <measure>
    <directions>
      <time signature="3/4" measure="1/4"/>
    </directions>
    ...this pickup measure contains only 1 beat...
  </measure>
  <measure>
    ...the following measure contains 3 beats...
  </measure>
  ...
</global>
```
</div>

Note: The <{time/measure}> attribute must be provided in all cases where the
actual content of a measure is of a different length from that indicated by
<{time/signature}>. MNX does not require consumer implementations to examine
the contents of measures to determine their intended length.

</section>

<h5 id="the-tempo-element">The <dfn element><code>tempo</code></dfn> element</h5>
<section dfn-for="tempo">

  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd>Direction content</dd>
    <dt><a>Content Model</a>:</dt>
    <dd>None.</dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{tempo/value}> - the note value of the tempo</dd>
    <dd><{tempo/bpm}> - the number of beats per minute</dd>
  </dl>

The <{tempo}> element defines a tempo, from the point of its occurrence forward until changed.
The tempo is rendered as a conventional pairing of a small beat unit notation equated to a
metronome marking.

In the <{cwmnx/profile/standard}> CWMNX profile, a <{tempo}> element may only appear
inside <{global}> measure content, not within a <{part}>.

The required <dfn element-attr>value</dfn> attribute supplies a <a>note value</a>
which is asserted to occur with a frequency of <dfn element-attr>bpm</dfn> times per
minute, which is a <a>valid floating-point number</a>.

To notate tempi using arbitrary text, various approaches may be taken,
singly or in combination:

- The <{tempo}> direction may be combined with other directions in a <{dirgroup}>, e.g. as <{instruction}>

- The normal visual content of the <{tempo}> direction may be supressed by
    setting the 'display' style property to ''display/none''

- A <{performance-tempo}> may be supplied as <a>interpretation content</a> for any direction.

</section>

<h5 id="the-staves-element">The <dfn element><code>staves</code></dfn> element</h5>
<section dfn-for="staves">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd>Direction content</dd>
    <dt><a>Content Model</a>:</dt>
    <dd>None</dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{staves/number}> - the number of staves in this part</dd>
  </dl>

The <{staves}> element defines the number of staves in a part's measures,
from the point of its occurrence forward until changed.

The <a>measure location</a> of a <{staves}> direction is ignored and is assumed to be zero.

It is invalid to place more than one <{staves}> element within a <{measure}>.

A <{staves}> element may only appear inside <{part}> measure content, not
within <{global}>.

The required <dfn element-attr>number</dfn> attribute supplies the number of staves
in the part, as a <a>valid non-negative integer</a> other than zero.

If no <{staves}> element is encountered at the start of a part, the number of staves
is taken as 1.

</section>

<h5 id="the-clef-element">The <dfn element><code>clef</code></dfn> element</h5>
<section dfn-for="clef">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd>Direction content</dd>
    <dt><a>Content Model</a>:</dt>
    <dd>None.</dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{clef/line}> - the staff line associated with the clef sign</dd>
    <dd><{clef/sign}> - the clef sign</dd>
    <dd><{clef/octave}> - an optional number of octaves by which the clef's normal pitches should be transposed</dd>
    <dt>Attribute Groups:</dt>
    <dd><a>Direction attributes</a></dd>
  </dl>

The <{clef}> element defines a clef associated with this staff.

The required <dfn element-attr>line</dfn> attribute gives the staff line for
the clef symbol, where the counting upwards from 1 starting at the bottom line
on the staff.

The required <dfn element-attr>sign</dfn> attribute gives the clef symbol and may
assume the following values:

<dl dfn-for="clef-sign">
  <dt><dfn attr-value><code>G</code></dfn></dt>
  <dd>G (treble) clef</dd>
  <dt><dfn attr-value><code>F</code></dfn></dt>
  <dd>F (bass) clef</dd>
  <dt><dfn attr-value><code>C</code></dfn></dt>
  <dd>C clef</dd>
  <dt><dfn attr-value><code>percussion</code></dfn></dt>
  <dd>Percussion clef</dd>
  <dt><dfn attr-value><code>jianpu</code></dfn></dt>
  <dd>Jianpu clef</dd>
</dl>

<em>Is the `none` value from MusicXML needed? Why?</em>

The optional <dfn element-attr>octave</dfn> attribute is a <a>signed
integer</a> giving the number of octaves by which the pitches normally
indicated by the given clef sign should be transposed. It defaults to zero.

</section>

<h5 id="the-staff-details-element">The <dfn element><code>staff-details</code></dfn> element</h5>
<section dfn-for="staff-details">

<em>Details TBD.</em>

<em>Describes the nature of a particular staff; applies to this staff in all succeeeding
measure content in the part until changed. Expected to resemble MusicXML's corresponding element.</em>

</section>

<h5 id="the-barline-element">The <dfn element><code>barline</code></dfn> element</h5>
<section dfn-for="barline">
  <em>Only describes a barline explicitly placed elsewhere than the end of a measure. Barlines at the end of a measure
      are more simply described by the <{measure/barline}> attribute.</em>
</section>

<h5 id="the-use-instrument-element">The <dfn element><code>use-instrument</code></dfn> element</h5>
<section dfn-for="use-instrument">

  <em>Details TBD - applies a specific instrument sound to the staff as a whole.</em>
</section>

<h5 id="the-transpose-element">The <dfn element><code>transpose</code></dfn> element</h5>
<section dfn-for="transpose">
  <em>Details TBD - determines the transposition applicable to all staves in the part.</em>
</section>

Advisement: Other staff direction elements exist in MusicXML and need to be migrated.


<h4 id="cwmnx-part-description-content">Part description content</h4>

<dfn>Part description content</dfn> consists of elements that supply information describing a part,
and occur at the beginning of a <{part}> element.

<h5 id="the-part-name-element">The <dfn element><code>part-name</code></dfn> element</h5>
<section dfn-for="part-name">
</section>

<h5 id="the-part-abbreviation-element">The <dfn element><code>part-abbreviation</code></dfn> element</h5>
<section dfn-for="part-abbreviation">
</section>

<h5 id="the-instrument-sound-element">The <dfn element><code>instrument-sound</code></dfn> element</h5>
<section dfn-for="instrument-sound">
</section>

<h4 id="cwmnx-interpretation-content">Interpretation content</h4>

<dfn>Interpretation content</dfn> may be included in some elements to control
the specific way in which the element is interpreted as a musical performance.

<h5 id="the-interpret-element">The <dfn element><code>interpret</code></dfn> element</h5>
<section dfn-for="interpret">
  <dl class="def">
    <dt><a>Content Model</a>:</dt>
    <dd>Any number of <{performance-event}> or <{performance-tempo}> elements</dd>
  </dl>

The <{interpret}> element substitutes explicit GMNX <a>performance data</a>
for the performance of its CWMNX parent element that a producer would normally
generate.

Within <{interpret}>, a set of child <{performance-event}> and <{performance-tempo}> elements supply
this performance information. The <a>notated time units</a> for all such
events are equal to the same units used by the containing element to represent
note values, and are thus modified in the case of elements for which the
<a>time modification ratio</a> is not unity, such as <{tuplet}>.

The notated time coordinate of zero refers to the measure location of the
containing element. All performance event times within <{interpret}> are thus
relative to this origin. Negative event times are permitted, and specify
performance events which precede the location of the containing element.

When <{interpret}> occurs within an <{event}> or <{note}> element, all
<{performance-event}> attributes are defaulted to the values that would be
generated by an implementation for the first note in the containing element.

As one example, consider this use of <{interpret}> to play a beamed pair of eighth
notes in a swung triplet rhythm instead:

<div class="example">
```xml
<beamed>
  <event value="/8">
    <note pitch="C4"/>
  </event>
  <event value="/8">
    <note pitch="D4"/>
  </event>
  <interpret>
    <performance-event start="0" duration="1/6" pitch="C4"/>
    <performance-event start="1/6" duration="1/12" pitch="D4"/>
  </interpret>
</beamed>
```
</div>

This scenario does not require the use of a beamed group; without the group,
the interpretation could be expressed at a per-event level as in the following
example. Note that the <{performance-event/pitch}> attributes no longer require
specification, and that the time origin for the second note now relates to its
default onset time.

<div class="example">
```xml
<sequence>
  ...preceding sequence content...
  <event value="/8">
    <note pitch="C4"/>
    <interpret>
      <performance-event start="0" duration="1/6"/>
    </interpret>
  </event>
  <event value="/8">
    <note pitch="D4"/>
    <interpret>
      <performance-event start="1/24" duration="1/12"/>
    </interpret>
  </event>
  ...following sequence content...
</sequence>
```
</div>

As a final example, this case uses an <{instruction}> element to specify
a tempo via an explicit interpretation:

<div class="example">
```xml
<sequence>
  ...preceding sequence content...
  <instruction class="tempo">
    <interpret>
      <performance-tempo beat="/4" bpm="60"/>
    </interpret>
    Langsamer
  </instruction>
  ...following sequence content...
</sequence>
```
</div>


Note: The measure location of a containing element is not always the same
as the time at which its first event is typically performed. Consider
the handling of grace notes, for example.

</section>

<!--
    To generate these from bullet-points like "- <{elementname}>", use this regexp substitution:
    Find:
        - <{([a-z-]+)}>
        or, in an XSD:
        (?s)\s*<xs:element name="(\w+)".*</xs:element>
    Replace:
        <h5 id="the-$1-element">The <dfn element><code>$1</code></dfn> element</h5>\n<section dfn-for="$1">\n</section>\n
-->
</section>

<h3 id="cwmnx-style-properties">Style properties</h3>

<dfn>Style properties</dfn> may be included in many elements to control the
specific way in which the element is rendered. Each property is defined as a
key-value pair.

Style properties are applied to each MNX semantic element according to the following
procedure for <dfn>style property computation</dfn>:

<ol>
  <li>Apply the property values from each <a>style selector definition</a>
    whose <a>style selector rule</a> matches the semantic element.
    All definitions with a matching rule are applied in the order
    that they were encountered in processing of the document.
  </li>

  <li>For each <{global/class}> attribute belonging to the semantic element, in the order
    of occurrence, apply the property values from each <a>style class definition</a>
    whose class name matches the <{global/class}> attribute.
    All definitions with a matching name are applied in the order
    that they were encountered in processing of the document.
  </li>

  <li>For each <{global/style}> attribute belonging to the semantic element,
    apply its property name-value pairs
    in the order of their processing in the given <a>style property list</a>.
  </li>

Properties are documented in the following places:

- Properties applying to all elements are defined below under <a href="cwmnx-common-properties">common style properties</a>.

- Properties applying to a <a>content category</a> are defined in the section describing that category.

- Properties applying to a specific element are defined in the description of that element.

<h4 id="the-style-element">The <dfn element-attr for="global"><code>style</code></dfn> attribute</h4>
The <{global/style}> attribute supplies the value of one or more explicit style properties
which apply to its parent element. The attribute value must be a valid <a>style property list</a>.

Here's an example of a style property definition adding color to a note:

<div class="example">
```xml
<note pitch="C4" style="color: #000099;"/>
```
</div>

</section>

<h4 id="the-class-attribute">The <dfn element-attr for="global"><code>class</code></dfn> attribute</h4>
<section dfn-for="style">

The <{global/class}> attribute may be used on any MNX element, and supplies the value
of a <a>style class definition</a> which applies to a that element as per the
rules of <a>style property computation</a>.

The value of this attribute supplies the names of one or more style class
definitions which apply to the containing element as an <a>ordered set of
space-separated tokens</a>. All style property values supplied by each class
definition are applied to the element, in the order in which they were defined.

For example, the following applies a class named `emphasis` to
a note:

<div class="example">
```xml
<note class="emphasis" pitch="C4"/>
```
</div>

In this case, two different classes `emphasis` and `alternate` are applied, along with a local overriding color:

<div class="example">
```xml
<note class="emphasis alternate" style="color: blue;" pitch="C4"/>
```
</div>

</section>

<h4 id="cwmnx-common-properties">Common style properties</h4>

The following <a>style properties</a> apply to many kinds of object in CWMNX, and in general
apply to all descendants of the element within which they are specified.

<h5 id="the-color-property">The <dfn property><code>color</code></dfn> property</h5>
<section dfn-for="color">
  <dl class="def">
    <dt>Applies to:</dt>
    <dd><{part}></dd>
    <dd><a>Sequence content</a></dd>
    <dd><a>Direction content</a></dd>
    <dd><a>Event content</a></dd>
    <dd><a>Note content</a></dd>
    <dd><a>Liaison content</a></dd>
    <dt>Value:</dt>
    <dd><a>Simple color</a></dd>
    <dt>Inherited:</dt>
    <dd>yes</dd>
  </dl>
  The 'color' property specifies a <a>simple color</a> to be used to render notational objects
  at or below the level of the element.

  Issue: Simple colors as per the HTML5 spec don't support an alpha property, so perhaps we
  should adopt a separate syntactical definition here.
</section>

<h5 id="the-smufl-font-property">The <dfn property><code>smufl-font</code></dfn> property</h5>
<section dfn-for="smufl-font">
  <dl class="def">
    <dt>Applies to:</dt>
    <dd><{part}></dd>
    <dd><a>Sequence content</a></dd>
    <dd><a>Direction content</a></dd>
    <dd><a>Event content</a></dd>
    <dd><a>Note content</a></dd>
    <dd><a>Liaison content</a></dd>
    <dt>Value:</dt>
    <dd>A SMuFL font name</dd>
    <dt>Inherited:</dt>
    <dd>yes</dd>
  </dl>
  The 'smufl-font' property specifies the name of a SMuFL font that will be used> to be used to render notational objects
  at or below the level of the element.
</section>

<h5 id="the-glyph-property">The <dfn property><code>glyph</code></dfn> property</h5>
<section dfn-for="glyph">
  <dl class="def">
    <dt>Applies to:</dt>
    <dd><a>Direction content</a></dd>
    <dd><a>Note content</a></dd>
    <dt>Value:</dt>
    <dd><a>SMuFL glyph name</a></dd>
    <dt>Inherited:</dt>
    <dd>no</dd>
  </dl>
  The 'glyph' property specifies a specific <a>SMuFL glyph name</a> to be used to render a notational object.
</section>

<h5 id="the-display-property">The <dfn property><code>display</code></dfn> property</h5>
<section dfn-for="display">

  <dl class="def">
    <dt>Applies to:</dt>
    <dd><{part}></dd>
    <dd><a>Sequence content</a></dd>
    <dd><a>Direction content</a></dd>
    <dd><a>Event content</a></dd>
    <dd><a>Note content</a></dd>
    <dd><a>Liaison content</a></dd>
    <dt>Value:</dt>
    <dd>''display/normal'' | ''display/none''</dd>
    <dt>Inherited:</dt>
    <dd>yes</dd>
  </dl>

The 'display' property controls the way in which an element and its
descendants interact with the layout of the document.

Permitted values include:

- <dfn value>normal</dfn> the element is displayed normally.
- <dfn value>none</dfn> the element is not processed for display and layout proceeds as if it did not exist.

Advisement: Other values are likely, making this property into more than simply a way of hiding content.

</section>

<h5 id="the-visibility-property">The <dfn property><code>visibility</code></dfn> property</h5>
<section dfn-for="visibility">
  <dl class="def">
    <dt>Applies to:</dt>
    <dd><a>Sequence content</a></dd>
    <dd><a>Direction content</a></dd>
    <dd><a>Event content</a></dd>
    <dd><a>Note content</a></dd>
    <dd><a>Liaison content</a></dd>
    <dt>Value:</dt>
    <dd>''visibility/visible'' | ''visibility/hidden''</dd>
    <dt>Inherited:</dt>
    <dd>yes</dd>
  </dl>

The 'visibility' property controls whether an element's contents (including
all of its descendants) are displayed by a consumer or not.

In contrast to 'display' with a value of ''display/none'', a 'visibility'
value of ''visibility/hidden'' does not affect the layout of any other
elements in the document. For example, the contents of a hidden <{event}>
will not be shown, but the place where the event would have appeared
will still occupy space in the containing measure.

Permitted values include:

- <dfn value>visible</dfn>: the element is visible
- <dfn value>hidden</dfn>: the element is hidden

</section>

<h5 id="the-perform-property">The <dfn property><code>perform</code></dfn> property</h5>
<section dfn-for="perform">
  <dl class="def">
    <dt>Applies to:</dt>
    <dd><a>Sequence content</a></dd>
    <dd><a>Direction content</a></dd>
    <dd><a>Event content</a></dd>
    <dd><a>Note content</a></dd>
    <dd><a>Liaison content</a></dd>
    <dt>Value:</dt>
    <dd>''perform/normal'' | ''perform/none''</dd>
    <dt>Inherited:</dt>
    <dd>yes</dd>
  </dl>
The 'perform' property controls whether an element's contents (including
all of its descendants) are performed by a consumer or not.

Permitted values include:

- <dfn value>normal</dfn> the element is performed
- <dfn value>none</dfn> the element is omitted from performance

</section>

<h5 id="the-y-property">The <dfn property><code>y</code></dfn> property</h5>
<section dfn-for="y">
  <dl class="def">
    <dt>Applies to:</dt>
    <dd><a>Direction content</a></dd>
    <dt>Value:</dt>
    <dd><var>staff position</var> | ''y/above'' | ''y/below''</dd>
    <dt>Inherited:</dt>
    <dd>no</dd>
  </dl>
The 'y' property places a direction at a given <var>staff position</var> given as a
<a>valid floating-point number</a> of staff lines starting from the top line and
proceeding downwards in a positive direction.

The special values <dfn value>above</dfn> and <dfn value>below</dfn> delegate
exact positioning of the direction to the implementation and request that
the direction be placed respectively above or below the staff.

<em>TBD: describe rendering model and regisration</em>

</section>

<h5 id="the-stem-direction-property">The <dfn property><code>stem-direction</code></dfn> property</h5>
<section dfn-for="stem-direction">
  <dl class="def">
    <dt>Applies to:</dt>
    <dd><a>Event content</a></dd>
    <dt>Value:</dt>
    <dd>''stem-direction/up'' | ''stem-direction/down''</dd>
    <dt>Inherited:</dt>
    <dd>no</dd>
  </dl>

The 'stem-direction' property controls the direction
of any rendered stem associated with this event. If omitted, the stem direction
is determined automatically by the implementation, in accordance with the
<a>orientation</a> of the event.

The value <dfn value>up</dfn> causes an event's stem to be rendered pointing upwards.

The value <dfn value>down</dfn> causes an event's stem to be rendered pointing downwards.
</section>

<h5 id="the-grace-slash-property">The <dfn property><code>grace-slash</code></dfn> property</h5>
<section dfn-for="grace-slash">
  <dl class="def">
    <dt>Applies to:</dt>
    <dd><{grace}></dd>
    <dt>Value:</dt>
    <dd>yes | no</dd>
    <dt>Inherited:</dt>
    <dd>no</dd>
  </dl>

The 'grace-slash' property controls whether or not a slash is rendered in
conjunction with the flag or beam of a grace note. If omitted, the stem
direction is determined automatically by the implementation based on the
nature of the grace note.
</section>

Advisement: Many other style properties exist in MusicXML (although not as
styles per se) and will need to be migrated.

<h3 id="cwmnx-stylesheet-definitions">Stylesheet definitions</h3>

The <{style-class}> and <{style-selector}> elements allow definition of style
properties in groups that can be applied in a unitary fashion to other
elements, respectively by name matching in a <a>style class definition</a>, or by
algorithmic rule matching in a <a>style selector definition</a>. Taken together,
these supply a set of <dfn>stylesheet definitions</dfn> that control the rendering
and interpretation of the document.

These definitions may be placed in the <{head}>, the <{cwmnx}>
element, or in a separate linked stylesheet.

<h4 id="the-style-class-element">The <dfn element><code>style-class</code></dfn> element</h4>
<section dfn-for="style-class">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd>Any.</dd>
    <dt><a>Content Model</a>:</dt>
    <dd>None.</dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{style-class/name}> - the name of this style class definition</dd>
    <dd><{global/style}> - the style property list applied by this definition</dd>
  </dl>

The <{style-class}> element supplies a <dfn>style class definition</dfn>,
which associates a list of style property values with a class that can be
referenced elsewhere using its name alone, as per the rules of <a>style
property computation</a>. 

The <dfn element-attr>name</dfn> attribute supplies the name of this style class
definition; the <{global/style}> attribute supplies the properties that make up the
content of the definition.

Multiple occurrences of <{style-class}> are permitted to share the same value
of <{style-class/name}>. These are equivalent to a single occurrence of
<{style-class}> with the same constituent definitions of style property values
in the same order.

Here is a style class definition that creates a class called `emphasis`,
intended to color its target objects bright red and apply a thicker stem width
in the case of events:

<div class="example">
```xml
<style-class name="emphasis" style="color: #FF0000; stem-width: 0.05;"/>
```
</div>

</section>

<h4 id="the-style-selector-element">The <dfn element><code>style-selector</code></dfn> element</h4>
<section dfn-for="style-selector">
  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd>Any.</dd>
    <dt><a>Content Model</a>:</dt>
    <dd>None.</dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{style-selector/rule}> - a set of element names to which this style selector definition applies</dd>
    <dd><{global/style}> - the style property list applied by this definition</dd>
  </dl>

The <{style-selector}> element supplies a <dfn>style selector
definition</dfn>, which defines a list of style property values applying to
all elements matching a <a>style selector rule</a>, as per the rules of <a>style
property computation</a>.

The <dfn element-attr>rule</dfn> attribute supplies a <dfn>style selector rule</dfn>
that is automatically applied to all semantic MNX elements to determine a set of
implied style properties. The following rule syntax is supported:

- An <a>unordered set of space-separated tokens</a>, each of which is the name
    of an MNX element. Elements whose names belong to this set are considered to
    match the rule.

The <{global/style}> attribute supplies the properties that make up the
content of the rule.

Multiple occurrences of <{style-selector}> are permitted to share the same value
of <{style-selector/rule}>. These are equivalent to a single occurrence of
<{style-selector}> with the same constituent definitions of style property values
in the same order.

Note: The scope of a defined rule is not limited to descendants of the element in which
the <{style-selector}> element occurs, but is global to the entire document.

For example, the following specifies that all <{event}> elements in the document
will employ a given stem width:

<div class="example">
```xml
<style-selector rule="event" style="stem-width: 0.05;"/>
```
</div>


</section>

<section>
<h3 id="cwmnx-rendering">Rendering</h3>

<em>TBD: section describing normative CWMNX rendering procedure, leaving room for implementation decisions.
The intent is to set out the normative constraints that CWMNX rendering must follow, including at least:

- 
- normative registration

</em>

</section>

<section>
<h3 id="cwmnx-interpretation">Interpretation</h3>

<em>TBD: section describing normative CWMNX performance interpretation, leaving room for implementation decisions.</em>


</section>

<section>
<h2 id="gmnx-section">GMNX</h2>

<dfn>GMNX</dfn> is a general format for representing musical scores in terms of linked
graphical media, audio media and performance data.

In contrast to CWMNX, there is no attempt to represent semantics directly in
GMNX. Thus, GMNX can be described as a low-level, literal format that
represents instances of scores, rather than their semantic content. GMNX is
intended to support applications which <em>must</em> be able to faithfully
execute a visual and/or audible rendition of a score, with an awareness of the
relationship between what is seen and what is heard.

GMNX can be employed as a <dfn>target format</dfn> for applications that
render semantic notation into media. And even though GMNX is not a semantic
format, GMNX elements may cross-reference elements in a semantic source
document that was rendered into GMNX. This supports a connection between  the
original semantic markup and a GMNX rendering of same.

Given GMNX's characteristics as a target format, some features of GMNX are
employed within CWMNX to provide literal descriptions of rendering where
semantic information does not suffice to yield the desired musical result.

The only constraints on the nature of a GMNX score are:

1. The visual content of the score must be encoded in SVG.

1. The audible content of the score must be encoded either as <a>audio media</a>
    or <a>performance data</a>.


<h3 id="gmnx-elements">Elements</h3>

<h4 id="gmnx-body">Musical body content</h4>

<h5 id="the-gmnx-element">The <dfn element><code>gmnx</code></dfn> element</h5>

<section dfn-for="gmnx">

  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd>Wherever a <a>musical body</a> is expected.</dd>
    <dt><a>Content Model</a>:</dt>
    <dd><a>Metadata content</a>.</dd>
    <dd>One or more <{score-view}> elements.</dd>
    <dd><a>Performance content</a>.</dd>
    <dt><a>Attributes</a>:</dt>
    <dd>None.</dd>
  </dl>

The <{gmnx}> element is a <a>musical body</a> that describes a GMNX
score as a whole.

The following example illustrates an entire GMNX document; the elements
are described individually in the remainder of this section.

<div class="example">
```xml
<gmnx>
  <score-view id="page1" view="score.svg#page1"/>
  <score-view id="page2" view="score.svg#page2"/>
  <score-view id="page3" view="score.svg#page3"/>

  <performance-audio>
    <performance-audio-media src="score.mp4"/>
    <performance-mapping>
      <performance-region start="0" end="0.72" view="page1" region="m1"/>
      <performance-region start="0.72" end="1.43" view="page1" region="m2"/>
      <performance-region start="1.43" end="2.99" view="page1" region="m3"/>
      <performance-region start="2.99" end="3.65" view="page1" region="m4"/>
    </performance-mapping>
  </performance-audio>

  <performance-data>
    <performance-tempo beat="/4" bpm="80"/>
    <performance-mapping>
      <performance-region start="0" end="1" view="page1" region="m1"/>
      <performance-region start="1" end="2" view="page1" region="m2"/>
      <performance-region start="2" end="3" view="page1" region="m3"/>
      <performance-region start="3" end="4" view="page1" region="m4"/>
    </performance-mapping>
    <performance-part>
      <instrument-sound>strings.violin</instrument-sound>
      <performance-event start="0" duration="1/4" pitch="C4" dynamics="100"/>
      <performance-event start="1/4" duration="1/4" pitch="D4" dynamics="100"/>
      ...following events...
    </performance-part>
  </performance-data>
</gmnx>
```
</div>

</section>

<h4 id="gmnx-graphics">Graphics media</h4>

<h5 id="the-score-view-element">The <dfn element><code>score-view</code></dfn> element</h5>

<section dfn-for="score-view">

  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{gmnx}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd>Any number of <{score-mapping}> elements.</dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{score-view/view}> - link to an SVG view of the score</dd>
  </dl>

The <{score-view}> element references a specific view within a separate
SVG document, via the URL provided in the <dfn element-attr>view</dfn>
attribute. This URL must follow the rules for <a>linking into SVG content</a>.

Each <{score-view}> element represents a single page of the score. A
default sequence of pages is established by the order of occurrence of
<{score-view}> elements within the document.

The sequence of page presentation in conjunction with <a>performance
content</a> may differ from the default sequence, according to the mapping
between performance and graphics.

</section>

<h5 id="the-score-mapping-element">The <dfn element><code>score-mapping</code></dfn> element</h5>

<section dfn-for="score-mapping">

  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{score-view}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd>None.</dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{score-mapping/graphics}> - an element ID within the SVG content described by the parent <{score-view}></dd>
    <dd><{score-mapping/semantics}> - one or more optional IDs of corresponding element(s) within source semantic documents</dd>
  </dl>

The <{score-mapping}> element supplies information on the correspondence
between an SVG element in a <{score-view}>, and sets of other
semantic elements in this or other documents.

The <dfn element-attr>graphics</dfn> attribute is required, and gives a single
ID of an element in the score view's SVG content. There is no restriction on
the nature or structure of this element, nor on its relationship to other
elements.

The optional <dfn element-attr>semantics</dfn> attribute supplies one or more
IDs of elements in a semantic source document, for example a CWMNX document.
This asserts that each of the referenced semantic source elements are considered as
generating the SVG content described by <{score-mapping/graphics}>.

Note: While this element describes only a single SVG element, it is commonly
the case that multiple SVG graphics may be associated with the same
semantic source.

</section>

<h4 id="gmnx-performance">Performance content</h4>

The category of <dfn>performance content</dfn> includes both of the following:

- <dfn>audio media</dfn> supplying a performance of a GMNX score in an audio file format

- <dfn>performance data</dfn>, describing a performance of a GMNX score in
    terms of discrete, parameterized sonic events

<h5 id="the-performance-audio-element">The <dfn element><code>performance-audio</code></dfn> element</h5>

<section dfn-for="performance-audio">

  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{gmnx}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd><a>Metadata content</a>.</dd>
    <dd>Zero or more <{performance-tempo}> elements.</dd>
    <dd>Zero or one <{performance-mapping}> elements.</dd>
    <dd>One or more <{performance-audio-media}> elements.</dd>
  </dl>

The <{performance-audio}> element defines one or more <a>audio media</a> files
that constitute a single performance of the score, and whose contents are
presumed to be temporally synchronized with each other.


Additionally, <{performance-tempo}> elements may establish an proportional
mapping between an arbitrary <a>notated time unit</a> and a time interval. This mapping
may change throughout the course of the performance.  If no such elements occur,
the <a>notated time unit</a> is defined as equal to 1 second of performance time.

A set of optional <{performance-mapping}> elements, if given, may establish a mapping
between the performance data and the graphical score.

</section>

<h5 id="the-performance-audio-media-element">The <dfn element><code>performance-audio-media</code></dfn> element</h5>

<section dfn-for="performance-audio-media">

  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{gmnx}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd><a>Metadata content</a>.</dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{performance-audio-media/src}> - URL of an audio file of the score</dd>
  </dl>

The <{performance-audio-media}> element includes an <a>audio media</a> file, via the URL provided
in the <dfn element-attr>src</dfn> attribute.

</section>

<h5 id="the-performance-data-element">The <dfn element><code>performance-data</code></dfn> element</h5>

<section dfn-for="performance-data">

  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{gmnx}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd><a>Metadata content</a>.</dd>
    <dd>One or more <{performance-part}> elements.</dd>
    <dd>Zero or more <{performance-tempo}> elements.</dd>
    <dd>Zero or one <{performance-mapping}> elements.</dd>
    <dt><a>Attributes</a>:</dt>
  </dl>

The <{performance-data}> element provides <a>performance data</a> in the form of
discrete sonic events suitable for synthesis or analysis.

It consists of some number of parts, plus optional mappings between performance time
and regions of graphical media.

Additionally, <{performance-tempo}> elements may establish an proportional
mapping between an arbitrary <a>notated time unit</a> and a time interval. This mapping
may change throughout the course of the performance.  If no such elements occur,
the <a>notated time unit</a> is defined as equal to 1 second of performance time.

A set of optional <{performance-mapping}> elements, if given, may establish a mapping
between the performance data and the graphical score.

</section>

<h5 id="the-performance-part-element">The <dfn element><code>performance-part</code></dfn> element</h5>

<section dfn-for="performance-part">

  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{performance-data}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd><a>Metadata content</a>.</dd>
    <dd>Zero or more <{performance-event}> elements.</dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{performance-part/instrument-sound}> - the sound ID of the instrument for this part.</dd>
  </dl>

The <{performance-part}> element organizes a list of <{performance-event}>
elements, within a given performance.

The <dfn element-attr>instrument-sound</dfn> attribute gives the MusicXML sound ID of the instrument
for this part.

Note: <{performance-part}> elements do not necessarily correspond to CWMNX
<{part}> elements, as they pertain to a single instrument.

</section>

<h5 id="the-performance-tempo-element">The <dfn element><code>performance-tempo</code></dfn> element</h5>

<section dfn-for="performance-tempo">

  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{performance-data}>, <{performance-audio}>, <{interpret}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd>None.</dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{performance-tempo/start}> - start time of this performance tempo</dd>
    <dd><{performance-tempo/beat}> - notated time units per beat</dd>
    <dd><{performance-tempo/bpm}> - number of beats per minute</dd>
  </dl>

The <{performance-tempo}> element describes a proportional relationship between
time and an arbitrary <dfn>notated time unit</dfn> that may be used by the score.

This relationship applies to a time range beginning at the time in seconds
specified by <dfn element-attr>start</dfn> and continuing until the next
<{performance-tempo}> element. The default value is 0.

The <dfn element-attr>beat</dfn> element is a <a>note value</a> which
establishes a beat as some fraction or multiple of a notated time unit (which
in CWMN a whole note by convention). The default value is 1.

The <dfn element-attr>bpm</dfn> element establishes a tempo, expressed as a
<a>valid floating-point number</a> giving the number of beats per minute. The
default value is 60.

NOTE: The defaults for both of the above attributes establish a notated
time unit as equal to 1 second. Thus, if no attribute values are provided,
score time is equal to real performance time.

NOTE: The set of <{performance-tempo}> elements establish a variable-rate progression
of a scoring time unit relative to performance time, similar to a MIDI tempo track.

Issue: continuous changes need to be supported

</section>

<h5 id="the-performance-event-element">The <dfn element><code>performance-event</code></dfn> element</h5>

<section dfn-for="performance-event">

  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{performance-part}>, <{interpret}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd>None.</dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{performance-event/start}> - start time of this event</dd>
    <dd><{performance-event/duration}> - duration of this event</dd>
    <dd><{performance-event/pitch}> - pitch of this event</dd>
    <dd><{performance-event/dynamics}> - dynamics for this event</dd>
    <dd><{performance-event/techniques}> - set of performance techniques for this event</dd>
    <dd><{performance-event/view}> - optional element ID of the <{score-view}> containing graphics for this event</dd>
    <dd><{performance-event/graphics}> - optional SVG elements for specific event graphics</dd>
  </dl>

The <{performance-event}> element describes a single musical event in terms of its
performance parameters.

All times given are in <a>notated time units</a>, whose relationship to performance time is described by
<{performance-tempo}> elements. These times may be expressed in the following forms which are
syntactically distinct:

- <a>Rational numbers</a>
- <a>Valid floating-point numbers</a>

<dfn element-attr>start</dfn> gives the starting time of the event.  This
specifies the actual start time, not a notated start time to be interpreted by
a performer. The default value is zero.

<dfn element-attr>duration</dfn> gives the duration of the event. This
specifies the actual duration to be performed, not a notated duration subject
to interpretation by a performer.

<dfn element-attr>pitch</dfn> gives the pitch of the event expressed as either
a <a>valid floating-point number</a> providing a frequency in Hertz, or a
<a>chromatic pitch</a>.

Note: The interpretation of pitch at the event level needs to be much more carefully nailed down.
Issues include how to control unpitched instruments, the temperament (if any) applied to chromatic pitches,
and no doubt more.

<dfn element-attr>dynamics</dfn> gives the dynamics of the event expressed in
a scale from 0 to 127.  <em>This scale needs to be better defined; the existing
MusicXML definition as "percentage of forte" is hard to interpret clearly.</em>

<dfn element-attr>techniques</dfn> gives a set of performance techniques applying
to the event as a <a>unordered set of space-separated tokens</a>.

Note: These presumably correspond to articulatory variations of the instrument sound.
Proper definition remains TBD.

If present, the <dfn element-attr>view</dfn> and <dfn element-attr>graphics</dfn> attributes
together define a set of SVG graphics in a <{score-view}> element which comprise the visual
representation corresponding to this event. Other than the fact of this correspondence, no other
information about the graphics is encoded.

</section>


<h5 id="the-performance-mapping-element">The <dfn element><code>performance-mapping</code></dfn> element</h5>

<section dfn-for="performance-mapping">

  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{performance-audio}>, <{performance-data}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd>Zero or more <{performance-region}> elements.</dd>
    <dt><a>Attributes</a>:</dt>
  </dl>
</section>

The <{performance-mapping}> element defines a sequence of piecewise, non-
overlapping ranges in notated time which correspond to piecewise regions
within score graphics media views. In essence, it is a timeline that
correlates a performance with elements within a series of views of the score
from which that performance is derived.

The <{performance-region}> elements in a mapping provide the detailed
descriptions of these ranges. The elements must occur in forward time order,
and the <{performance-region/end}> value of each region must be less than or
equal to the <{performance-region/start}> value of the next region.

<h5 id="the-performance-region-element">The <dfn element><code>performance-region</code></dfn> element</h5>

<section dfn-for="performance-region">

  <dl class="def">
    <dt><a>Contexts</a>:</dt>
    <dd><{performance-mapping}></dd>
    <dt><a>Content Model</a>:</dt>
    <dd>None.</dd>
    <dt><a>Attributes</a>:</dt>
    <dd><{performance-region/start}> - start time of the time region being mapped</dd>
    <dd><{performance-region/end}> - end time of the time region</dd>
    <dd><{performance-region/view}> - the element ID of the <{score-view}> containing the visual region</dd>
    <dd><{performance-region/region}> - the definition of the visual region itself</dd>
    <dd><{performance-region/cursor-start}> - a starting line segment for a cursor</dd>
    <dd><{performance-region/cursor-end}> - an ending line segment for a cursor</dd>
  </dl>

The <{performance-region}> element describes the relationship between a
performance time region expressed in <a>notated time units</a>, and a visual region of a
score page. This allows consumers to understand the correspondence between
regions of the graphical score and regions of one or more audio performances.

<dfn element-attr>start</dfn> gives the start of the time region.

<dfn element-attr>end</dfn> gives the end of the time region.

<dfn element-attr>view</dfn> identifies a view of some section of the score, by
providing the XML ID of its <{score-view}> element.

<dfn element-attr>region</dfn> identifies the visual region for the mapping
using a fragment identifier in accordance with <a>linking into SVG content</a>.
The fragment identifier refers to the same document identified by the
<{performance-region/view}> attribute.

If the pair of attributes <dfn element-attr>cursor-start</dfn> and <dfn
element-attr>cursor-end</dfn> are defined, then a mapping is defined between
points in performance time and line segments in the visual region. Each
attribute supplies an <a>ordered set of space-separated tokens</a> giving the
cursor's endpoints as successive X/Y pairs in user coordinates applicable to
the region.

The special tokens `left`, `right`, `top` and `bottom` may be used here to
define both endpoints of a cursor in terms of the corresponding edge of the
region's SVG bounding box.

Under this mapping, a time <var>t</var> in the time region corresponds to a
line segment in the visual region connecting two points given by the respective
formulae of:

- <var>cursor-start.p1</var> + (<var ignore=''>cursor-end.p1</var> - <var>cursor-start.p1</var>) * (<var>t</var> - <em>start</em>) / (<em>end</em> - <em>start</em>).
- <var>cursor-start.p2</var> + (<var ignore=''>cursor-end.p2</var> - <var>cursor-start.p2</var>) * (<var>t</var> - <em>start</em>) / (<em>end</em> - <em>start</em>).

If either or both of <{performance-region/cursor-start}> and
<{performance-region/cursor-end}> are undefined, then the entire time region corresponds
to the entire visual region, with no further decomposition.

Note: To more easily support cursor motion through curved arcs,  non-parallel
start and end cursors could be considered as segments of two rays whose common
origin lies at the point of intersection between these cursors. Interpolation
would then be performed in radial coordinates, smoothly sweeping both the
angle and the distances from the origin to move the cursor's endpoints along
roughly circular arcs. Straight-line motion would be merely a special case in which
the intersection lies at infinity.
  <dd></dd>

</section>



<section>
<div data-fill-with="index"></div>

<!-- <pre class="include">
path: sections/elements.include
</pre>

 -->
</section>

<!--  -->
<section>
<div data-fill-with="issues-index"></div>
</section>
