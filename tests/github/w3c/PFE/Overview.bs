<pre class='metadata'>
Title: Incremental Font Transfer
Shortname: PFE
Status: w3c/ED
Group: webfontswg
Level: none
TR: https://www.w3.org/TR/example/
ED: https://w3c.github.io/PFE/Overview.html
Editor: Chris Lilley, W3C, https://svgees.us/, w3cid 1438
Editor: Myles C. Maxfield, Apple Inc., mmaxfield@apple.com, w3cid 77180
Editor: Garret Rieger, Google Inc., grieger@google.com
Abstract: Example example
Status Text: This is a largely empty document because we have just started working on it.
</pre>

<!--
    for things that are not in specref
    https://www.specref.org/
-->
<pre class=biblio>
	{
		"PFE-report": {
            "href": "https://www.w3.org/TR/PFE-evaluation/",
            "authors": [
                "Chris Lilley"
                ],
            "status": "Note",
            "publisher": "W3C",
			"title": "Progressive Font Enrichment: Evaluation Report",
			"date": "15 October 2020"
		}
	}
</pre>

Introduction {#intro}
=====================

	<em>This section is not normative.</em>

    The success of WebFonts is unevenly distributed. This specification allows WebFonts to be used where slow networks, very large fonts, or complex subsetting requirements currently preclude their use. For example, even using WOFF 2 [[WOFF2]], fonts for CJK languages are too large to be practical.

    See the Progressive Font Enrichment: Evaluation Report [[PFE-report]] for the investigation which led to this specification.

Patch Based Incremental Transfer {#patch-incxfer}
=================================================

TODO(garretrieger): Describe the high level version of how this version operates.


Data Types {#data-types}
------------------------

This section lists all of the data types that are used to form the request and response messages
sent between the client and server.

### Encoding ### {#encoding}

All data types defined here are encoded into a byte representation for transport using CBOR
(Concise Binary Object Representation) [[!rfc8949]]. More information on how each data types
should be encoded by CBOR are given in the definition of those data types.

### Primitives ### {#primitives}

<table>
  <tr>
    <th>Data Type</th><th>Description</th><th>CBOR Major Type</th>
  </tr>
  <tr>
    <td>Integer</td><td>An integer value range [-2^64 - 1, 2^64 - 1] inclusive</td><td>0 or 1</td>
  </tr>
  <tr>
    <td>ByteString</td><td>Variable number of bytes</td><td>2</td>
  </tr>
  <tr>
    <td>ArrayOf&lt;Type&gt;</td><td>Array of a variable number of items of Type</td><td>4</td>
  </tr>
</table>

### SparseBitSet ### {#sparsebitset}

A data structure which compactly stores a set of distinct unsigned integers. The set is represented as
a tree where each node has a fixed number of children that recursively sub-divides an interval into
equal partitions. A tree of height <i>H</i> with branching factor <i>B</i> can store set membership
for integers in the interval [0 to <i>B</i><sup><i>H</i></sup>-1] inclusive. The tree is encoded into
a ByteString for transport.

To construct the tree <i>T</i> which encodes set <i>S</i> first select the branching factor <i>B</i>
(how many children each node has). <i>B</i> can be 4, 8, 16, or 32. 

Note: the encoder can use any of the possible branching factors, but it is recommended to
use 4 as that has been shown to give the smallest encodings for most sets typically encountered.

Next, determine the height, <i>H</i>, of the tree:

<i>H</i> = ceil(log<sub><i>B</i></sub>(max(</i>S</i>) + 1))

Next create a tree of height H where all non-leaf nodes have <i>B</i> children. Each node in the tree
has a single value composed of <i>B</i> bits. Given a node <i>p</i> which has <i>B</i> children:
<i>c<sub>0</sub></i> ... <i>c<sub><i>B</i> - 1</sub></i> and is in a tree, <i>T</i>, of height
<i>H</i>, then:

*  D(<i>c<sub>i</sub></i>) is depth of node <i>c<sub>i</sub></i>, that is the number of edges between
    the root node and <i>c<sub>i</sub></i>.
    
*  Start(<i>c<sub>i</sub></i>) is the start (inclusive) of the interval  covered by
     <i>c<sub>i</sub></i> :<br/>
     Start(<i>c<sub>i</sub></i>) =
     Start(<i>p</i>) + <i>i</i> * <i>B</i><sup><i>H</i> - D(<i>c<sub>i</sub></i>)</sup>
     
*  End(<i>c<sub>i</sub></i>) is the end (exclusive) of the interval  covered by
     <i>c<sub>i</sub></i> :<br/>
     End(<i>c<sub>i</sub></i>) =
     Start(<i>p</i>) + (<i>i</i> + 1) * <i>B</i><sup><i>H</i> - D(<i>c<sub>i</sub></i>)</sup>

*  Start(root node) = 0
     
*  The value of node <i>p</i> is a string of <i>B</i> bits. If its bits are numbered from 0 (least
    significant) to <i>B</i> - 1 (most significant) then bit <i>i</i> will be 1 if the set <i>S</i>
    contains at least one member in the interval [Start(<i>c<sub>i</sub></i>),
    End(<i>c<sub>i</sub></i>)), otherwise bit <i>i</i> will be 0.

*  If for node <i>p</i>, End(<i>p</i>) - Start(<i>p</i>) = <i>B</i>, then <i>p</i> will have no
    children.

The tree is encoded into a bit string. The bits of the bit string are numbered from 0 to M. When
appending multi bit values to the bit string, bits are added in order from least significant bit to
most significant bit.

First append 2 bits which encode the branching factor:

<table>
  <tr>
    <th>Bits</th><th>Branching Factor</th>
  </tr>
  <tr><td>00</td><td>4</td></tr>
  <tr><td>01</td><td>8</td></tr>
  <tr><td>10</td><td>16</td></tr>
  <tr><td>11</td><td>32</td></tr>
</table>

Then append the value <i>H</i> - 1 as a 6 bit unsigned integer.

Next the nodes are encoded into the bit string by traversing the nodes of the <i>T</i> in level
order and appending the value for each non-zero node to the bit string.If all set values
covered by a node's interval are present within set <i>S</i> that node can instead be encoded in the
bit string as <i>B</i> bits all set to zero. All children of that node must not be encoded.

Lastly the bit string is converted into a ByteString by converting each consecutive group of 8 bits
into the next byte of the string. The bit with the smallest index in the bit string is the least
significant bit in the byte and the bit with the largest index is the most significant bit.


<div class=example>
  The set {2, 33, 323} in a tree with a branching factor of 8 is encoded as the bit string:
  
  ```
  BitString:
  |- header |- lvl 0 |---- level 1 ----|------- level 2 -----------|
  |         |   n0   |   n1       n2   |   n3       n4       n5    |
  [ 10010000 10000100 10001000 10000000 00100000 01000000 00010000 ]

  Which then becomes the ByteString:
  [
    0b00001001,
    0b00100001,
    0b00010001,
    0b00000001,
    0b00000100,
    0b00000010,
    0b00001000
  ]
  ```
  
  First determine the height of the tree:
  
  <i>H</i> = ceil(log<sub>8</sub>(323 + 1)) = 3

  Then append

  *  branching factor = 8 = 01
  *  <i>H</i> - 1 = 2 = 000010

  Level 0:
  
  * root node, n<sub>0</sub> append 00100001. Since there are set members in the intervals
     [0, 64) for bit 0 and [320, 384) for bit 5.

  Level 1:
  
  * There will be two non-zero children corresponding to bit 0 and bit 5 in n<sub>0</sub>:
  * n<sub>1</sub> append 00010001. It is child 0 of n<sub>0</sub> and subdivides the interval
     [0, 64). Bit 0 is set since there are set members in [0, 8) and bit 4 for [32, 40).
  
  * n<sub>2</sub> append 00000001. It is child 5 of n<sub>0</sub> it subdivides the interval
     [320, 384). Bit 0 is set since there are set members in [320 - 328).

  Level 2:

  * n<sub>3</sub> append 00000100. Child 0 of n<sub>1</sub>, bit 2 is set for the interval [2, 3) or 2.
  * n<sub>4</sub> append 00000010. Child 4 of n<sub>1</sub>, bit 1 is set for the interval [33, 34) or 33.
  * n<sub>5</sub> append 00001000. Child 0 of n<sub>2</sub>, bit 3 is set for the interval [323, 324)
     or 323.
     
</div>

<div class=example>
  The set {0, 1, 2, ..., 17} can be encoded with a branching factor of 4 as:

  ```
  BitString:
  |- header | l0 |- lvl 1 -| l2  |
  |         | n0 | n1 | n2 | n3  |
  [ 00010000 1100 0000 1000 1100 ]

  ByteString:
  [
    0b00001000,
    0b00000011,
    0b00110001
  ]
  ```

  First determine the height of the tree:
  
  <i>H</i> = ceil(log<sub>4</sub>(17 + 1)) = 3

  Then append
  
  *  branching factor = 4 = 00
  *  <i>H</i> - 1 = 2 = 000010

  Level 0:
  *  n<sub>0</sub> append 0011. Bit 0 set for [0, 16), bit 1 set for [16, 32)

  Level 1:
  *  n<sub>1</sub> append 0000. All bits zero to indicate interval [0, 16) is fully filled.
  *  n<sub>2</sub> append 0001. Bit 0 set for [16, 20)

  Level 2:
  *  n<sub>3</sub> append 0011. Bit 0 set for value 16, bit 1 set for value 17.

</div>

### Objects ### {#objects}

Objects are data structures comprised of key and value pairs. Objects are encoded via CBOR as maps
(major type 5). Each key and value pair is encoded as a single map entry. Keys are always unsigned
integers and are encoded using major type 0. Values are encoded using the encoding specified by the
type of the value.

All fields in an object are optional and do not need to have an associated value. Conversely when
decoding and object fields may be present which are not specified in the schema. The decoder must
ignore without error any key and value pairs where the key is not recognized.

There are several types of object used, each type is defined by a schema in [[#schemas]]. The schema
for a type specifies for each field:

*  A human readable name for the field. For reference only, not used in the encoding.
*  A unsigned integer id for the field. This is used as the key in the encoding.
*  The type of the value stored in this field. Can be any of the types defined in [[#data-types]]
    including object types.

### Object Schemas ### {#schemas}

#### CompressedList #### {#CompressedList}

<table>
  <tr><th>ID</th><th>Field Name</th><th>Value Type</th></tr>
  <tr><td>0</td><td>value_deltas</td><td>ArrayOf&lt;Integer&gt;</td></tr>
</table>

Encodes a list of unsigned integers. The list is ordered and allows
duplicate values. Given a list L to be encoded the array value_deltas is calculated:

```
value_deltas = []
if len(value_deltas) > 0:
  value_deltas[0] = L[0]
  for i in range(1, len(value_deltas)):
    value_deltas[i] = L[i] - L[i-1]
```

<div class=example>
  The list [2, 2, 5, 1, 3, 7] would be encoded as [2, 0, 3, -4, 2, 4].
</div>

#### CompressedSet #### {#CompressedSet}

Encodes a set of unsigned integers. The set is not ordered and does not
allow duplicates. Members of the set are encoded into either a sparse bit
set or a list of ranges. To obtain the final set the members of the sparse
bit set and the list of ranges are unioned together.

The list of ranges is encoded as a series of deltas. For example the ranges

\[3, 10\], \[13, 15\], \[17, 17\] would be encoded as \[3, 7, 3, 2, 2, 0\].

  | ID | Field Name             | Type                   |
  | -- | ---------------------- | ---------------------- |
  | 0  | sparse_bit_set         | SparseBitSet           |
  | 1  | range_deltas           | ArrayOf&lt;Integer&gt; |

#### PatchRequest #### {#PatchRequest}

<table>
  <tr><th>ID</th><th>Field Name</th><th>Value Type</th></tr>
  <tr><td>0</td><td>protocol_version</td><td>Integer</td></tr>
  <tr><td>1</td><td>original_font_checksum</td><td>Integer</td></tr>
  <tr><td>2</td><td>base_checksum</td><td>Integer</td></tr>
  <tr><td>3</td><td>patch_format</td><td>ArrayOf&lt;Integer&gt;</td></tr>
  <tr><td>4</td><td>codepoints_have</td><td>CompressedSet</td></tr>
  <tr><td>5</td><td>codepoints_needed</td><td>CompressedSet</td></tr>
  <tr><td>6</td><td>ordering_checksum</td><td>Integer</td></tr>
  <tr><td>7</td><td>indices_have</td><td>CompressedSet</td></tr>
  <tr><td>8</td><td>indices_needed</td><td>CompressedSet</td></tr>
</table>

patch_format can include be any of the values specified in [[#patch-formats]].

#### PatchResponse #### {#PatchResponse}

<table>
  <tr><th>ID</th><th>Field Name</th><th>Value Type</th></tr>
  <tr><td>0</td><td>response_type</td><td>Integer</td></tr>
  <tr><td>1</td><td>original_font_checksum</td><td>Integer</td></tr>
  <tr><td>2</td><td>patch_format</td><td>Integer</td></tr>  
  <tr><td>3</td><td>patch</td><td>ByteString</td></tr>  
  <tr><td>4</td><td>patched_checksum</td><td>Integer</td></tr>  
  <tr><td>4</td><td>codepoint_ordering</td><td>CompressedList</td></tr>  
  <tr><td>5</td><td>ordering_checksum</td><td>Integer</td></tr>  
</table>

response_type can be one of the following values:

<table>
  <tr><th>Value</th><th>Response Type</th></tr>
  <tr><td>0</td><td>PATCH</td>
  <tr><td>1</td><td>REBASE</td>
  <tr><td>2</td><td>REINDEX</td>
</table>

New Font Request {#rebase-request}
----------------------------------

### Standard Response ### {#rebase-standard-response}

### Errors ### {#rebase-errors}

Patch Font Request {#patch-request}
-----------------------------------

### Standard Response ### {#patch-standard-response}

### Recoverable Errors ### {#patch-recoverable-errors}

#### Client’s Original Font does not Match Server’s #### {#client-font-mismatch}

#### Client’s Base does not Match Server’s #### {#client-base-mismatch}

#### Client Codepoint Reordering does not Match Servers #### {#codepoint-reordering-mismatch}

#### Client Side Patched Base Checksum Mismatch #### {#patch-mismatch}

#### Cmap Format 4 Overflow #### {#cmap4-overflow}

#### Offset Overflow during Subsetting #### {#offset-overflow}

### Errors ### {#errors}

New Font Response {#rebase-response}
---------------------------------------------

Patch Font Response {#patch-response}
---------------------------------------------

Update Codepoint Ordering Response {#reindex-response}
----------------------------------------------------------------

Error Response {#error-response}
----------------------------------------

*  font not found.
*  bad request.
*  internal error.

Procedures {#procedures}
------------------------

### Computing Checksums ### {#computing-checksums}

### Codepoint reodering ### {#codepoint-reodering}

#### Computing Checksum #### {#reodering-checksum}

#### Recommended algorithm #### {#reordering-algorithm}

### Patch and Compression Formats ### {#patch-formats}

Range Request Incremental Transfer {#range-request-incxfer}
===========================================================

Negotiating Incremental Transfer Type {#negotiating-transfer-type}
==================================================================

<h2 class=no-num id=priv-sec>Privacy and Security Considerations</h2>

Issue: Note any issues that have been raised about privacy and security.
