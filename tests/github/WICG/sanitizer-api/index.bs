<pre class="metadata">
Title: HTML Sanitizer API
Status: CG-DRAFT
Group: WICG
URL: https://wicg.github.io/sanitizer-api/
Repository: WICG/sanitizer-api
Shortname: sanitizer-api
Level: 1
Editor: Frederik Braun 68466, Mozilla, fbraun@mozilla.com, https://frederik-braun.com
Editor: Mario Heiderich, Cure53, mario@cure53.de, https://cure53.de
Editor: Daniel Vogelheim, Google LLC, vogelheim@google.com, https://www.google.com
Abstract:
  This document specifies a set of APIs which allow developers to take untrusted
  strings of HTML, and sanitize them for safe insertion into a document's DOM.
Indent: 2
Work Status: exploring
Boilerplate: omit conformance
Markup Shorthands: css off, markdown on
</pre>
<pre class="anchors">
spec: DOM-PARSING; urlPrefix: https://w3c.github.io/DOM-Parsing/
  type: attribute
    text: innerHTML; for: Element; url: #widl-Element-innerHTML
  type: method
    text: parseFromString; url: #widl-DOMParser-parseFromString-Document-DOMString-str-SupportedType-type
text: window.toStaticHTML(); type: method; url: https://msdn.microsoft.com/en-us/library/cc848922(v=vs.85).aspx
text: createDocumentFragment; type: method; url: https://dom.spec.whatwg.org/#dom-document-createdocumentfragment
text: Document; type: interface; url: https://dom.spec.whatwg.org/#interface-Document
text: DocumentFragment; type: interface; url: https://dom.spec.whatwg.org/#documentfragment
</pre>
<pre class="link-defaults">
spec:dom; type:dfn; text:append
</pre>
<pre class="biblio">
{
  "DOMPURIFY": {
    "href": "https://github.com/cure53/DOMPurify",
    "title": "DOMPurify",
    "publisher": "Cure53"
  },
  "HTML":{
    "authors": [
      "Anne van Kesteren",
      "Domenic Denicola",
      "Ian Hickson",
      "Philip Jägenstedt",
      "Simon Pieters"
    ],
    "href": "https://html.spec.whatwg.org/multipage/",
    "title": "HTML Standard",
    "status": "Living Standard",
    "publisher": "WHATWG",
    "repository": "https://github.com/whatwg/html",
  "id": "HTML"
  },
  "DEFAULTS": {
    "href": "https://github.com/WICG/sanitizer-api/blob/main/resources/defaults-derivation.html",
    "title": "Sanitizer API Defaults"
  }
}
</pre>

# Introduction # {#intro}

<em>This section is not normative.</em>

Web applications often need to work with strings of HTML on the client side,
perhaps as part of a client-side templating solution, perhaps as part of
rendering user generated content, etc. It is difficult to do so in a safe way,
however; the naive approach of joining strings together and stuffing them into
an {{Element}}'s {{Element/innerHTML}} is fraught with risk, as that can and
will cause JavaScript execution in a number of unexpected ways.

Libraries like [[DOMPURIFY]] attempt to manage this problem by carefully
parsing and sanitizing strings before insertion by constructing a DOM and
walking its members through an allow-list. This has proven to be a fragile
approach, as the parsing APIs exposed to the web don't always map in
reasonable ways to the browser's behavior when actually rendering a string as
HTML in the "real" DOM. Moreover, the libraries need to keep on top of
browsers' changing behavior over time; things that once were safe may turn
into time-bombs based on new platform-level features.

The browser has a fairly good idea of when it is going to
execute code. We can improve upon the user-space libraries by teaching the
browser how to render HTML from an arbitrary string in a safe manner, and do
so in a way that is much more likely to be maintained and updated along with
the browser's own changing parser implementation. This document outlines an
API which aims to do just that.

## Goals ## {#goals}

*   Mitigate the risk of DOM-based cross-site scripting attacks by providing
    developers with mechanisms for handling user-controlled HTML which prevent
    direct script execution upon injection.

*   Make HTML output safe for use within the current user agent, taking into
    account its current understanding of HTML.

*   Allow developers to override the defaults set of elements and attributes.
    Adding certain elements and attributes can prevent
    <a href="https://github.com/google/security-research-pocs/tree/master/script-gadgets">script gadget</a>
    attacks.

## Examples ## {#examples}

```js
let userControlledInput = "&lt;img src=x onerror=alert(1)//&gt;";

// Create a DocumentFragment from unsanitized input:
let s = new Sanitizer();
let sanitizedFragment = s.sanitize(userControlledInput);

// Replace an element's content from unsanitized input:
element.replaceChildren(s.sanitize(userControlledInput));
```

# Framework # {#framework}

## Sanitizer API ## {#sanitizer-api}

The core API is the `Sanitizer` object and the sanitize method. Sanitizers can
be instantiated using an optional `SanitizerConfig` dictionary for options.
The most common use-case - preventing XSS - is handled by default,
so that creating a Sanitizer with a custom config is necessary only to
handle additional, application-specific use cases.

<pre class="idl">
  [
    Exposed=(Window),
    SecureContext
  ] interface Sanitizer {
    constructor(optional SanitizerConfig config = {});
    DocumentFragment sanitize(SanitizerInput input);
    DOMString sanitizeToString(SanitizerInput input);
  };
</pre>

* The <dfn constructor for=Sanitizer lt="Sanitizer(config)">
    <code>new Sanitizer(<var>config</var>)</code></dfn> constructor steps
    are to create a new Sanitizer instance, and to retains a copy of |config|
    as its [=configuration object=].
* The <dfn method for=Sanitizer><code>sanitize(<var>input</var>)</code></dfn>
    method steps are to return the result of running the [=sanitize=]
    algorithm on |input|,
* The <dfn method for=Sanitizer><code>sanitizeToString(<var>input</var>)</code></dfn>
    method steps are to return the result of running [=sanitizeToString=]
    algorithm on |input|.

Example:
```js
  // Replace an element's content from unsanitized input:
  element.replaceChildren(new Sanitizer().sanitize(userControlledInput));
```

## Input Types ## {#inputs}

The sanitization methods support three input types: `DOMString`, `Document`,
and `DocumentFragment`. In all cases, the sanitization will work on a
{{DocumentFragment}} internally, but the work-fragment will be created by
parsing, cloning, or using the fragment as-is, respectively.

<pre class="idl">
  typedef (DOMString or DocumentFragment or Document) SanitizerInput;
</pre>

Note: Sanitizing a string will use the [=HTML Parser=] to parse the input,
    which will perform some degree of normalization. So even
    if no sanitization steps are taken on a particular input, it cannot be
    guaranteed that the output of `sanitizeToString` will be
    character-for-character identical to the input.
    Examples would be character regularization (`"&szlig;"` to `"ß"`),
    or light processing for some elements (`"<image>"` to `"<img>"`);


## The Configuration Dictionary ## {#config}

The Sanitizer's <dfn>configuration object</dfn> is a dictionary which
describes modifications to the sanitize operation. If a Sanitizer has
not received an explicit configuration, for example when being
constructed without any parameters, then the [=default configuration=] value
is used as the configuration object.

<pre class="idl">
  dictionary SanitizerConfig {
    sequence&lt;DOMString> allowElements;
    sequence&lt;DOMString> blockElements;
    sequence&lt;DOMString> dropElements;
    AttributeMatchList allowAttributes;
    AttributeMatchList dropAttributes;
    boolean allowCustomElements;
  };
</pre>

: allowElements
:: The <dfn>element allow list</dfn> is a sequence of strings with
    elements that the sanitizer should retain in the input.
: blockElements
:: The <dfn>element block list</dfn> is a sequence of strings with elements
   where the sanitizer should remove the elements from the input, but retain
   their children.
: dropElements
:: The <dfn>element drop list</dfn> is a sequence of strings with elements
   that the sanitizer should remove from the input, including its children.
: allowAttributes
:: The <dfn>attribute allow list</dfn> is an [=attribute match list=], which
   determines whether an attribute (on a given element) should be allowed.
: dropAttributes
:: The <dfn>attribute drop list</dfn>  is an [=attribute match list=], which
   determines whether an attribute (on a given element) should be dropped.
: allowCustomElements
:: <dfn>allow custom elements option</dfn> determines whether
   [=custom elements=] are to be considered. The default is to drop them.
   If this option is true, custom elements will still be checked against all
   other built-in or configured configured checks.

Note: `allowElements` creates a sanitizer that defaults to dropping elements,
  while `blockElements` and `dropElements` defaults to keeping unknown
  elements. Using both types is possible, but is probably of little practical
  use. The same applies to `allowAttributes` and `dropAttributes`.

Examples:
```js
  const sample = "Some text <b><i>with</i></b> <blink>tags</blink>.";

  // "Some text <b>with</b> text tags."
  new Sanitizer({allowElements: [ "b" ]).sanitizeToString(sample);

  // "Some text <i>with</i> <blink>tags</blink>."
  new Sanitizer({blockElements: [ "b" ]).sanitizeToString(sample);

  // "Some text <blink>tags</blink>."
  new Sanitizer({dropElements: [ "b" ]).sanitizeToString(sample);

  // Note: The default configuration handles XSS-relevant input:

  // Non-scripting input will be passed through:
  new Sanitizer().sanitizeToString(sample);  // Will output sample unmodified.

  // Scripts will be blocked: "abc alert(1) def"
  new Sanitizer().sanitizeToString("abc <script>alert(1)</script> def");
```

### Attribute Match Lists ### {#attr-match-list}

An <dfn>attribute match list</dfn> is a map of attribute names to element names,
where the special name "*" stands for all elements. A given |attribute|
belonging to an |element| matches an [=attribute match list=], if the
attribute's local name is a key in the match list, and element's local name
or `"*"` are found in the attribute's value list.

<pre class="idl">
  typedef record&lt;DOMString, sequence&lt;DOMString>> AttributeMatchList;
</pre>

Examples for attributes and attribute match lists:
```js
  const sample = "<span id='span1' class='theclass' style='font-weight: bold'>hello</span>";

  // Allow only <span style>: "<span style='font-weight: bold'>...</span>"
  new Sanitizer({allowAttributes: {"style": ["span"]}}).sanitizeToString(sample);

  // Allow style, but not on span: "<span>...</span>"
  new Sanitizer({allowAttributes: {"style": ["div"]}}).sanitizeToString(sample);

  // Allow style on any elements: "<span style='font-weight: bold'>...</span>"
  new Sanitizer({allowAttributes: {"style": ["*"]}}).sanitizeToString(sample);

  // Block <span id>: "<span class='theclass' style='font-weight: bold'>...</span>";
  new Sanitizer({blockAttributes: {"id": ["span"]}}).sanitizeToString(sample);

  // Block id, everywhere: "<span class='theclass' style='font-weight: bold'>...</span>";
  new Sanitizer({blockAttributes: {"id": ["*"]}}).sanitizeToString(sample);
```

## Algorithms ## {#algorithms}

<div algorithm="sanitize">
To <dfn>sanitize</dfn> a given |input| of type {{SanitizerInput}},
run these steps:
  1. Let |fragment| be the result of running the [=create a document fragment=]
     algorithm on |input|.
  1. Run the [=sanitize a document fragment=] algorithm on |fragment|.
  1. Return |fragment|.
</div>

<div algorithm="sanitizeToString">
To <dfn>sanitizeToString</dfn> a given |input| of type {{SanitizerInput}}, run these steps:
  1. Let |fragment| be the result of the [=create a document fragment=]
     algorithm on |input|.
  1. Let |sanitized| be the result of running the [=sanitize=] algorithm on
     |fragment|.
  1. Let |result| be the result of running the
     [=HTML Fragment Serialization Algorithm=] with |sanitized| as the `node`
     argument.
  1. Return |result|.
</div>

<div algorithm="create a document fragment">
To <dfn>create a document fragment</dfn> named |fragment| from an
|input| of type {{SanitizerInput}}, run these steps:

  1. Switch based on |input|'s type:
    1. If |input| is of type {{DocumentFragment}}, then:
      1. Let |node| refer to |input|.
    1. If |input| is of type {{Document}}, then:
      1. Let |node| refer to |input|'s `documentElement`.
    1. If |input| is of type `DOMString`, then:
      1. Let |node| be the result of running the {{parseFromString}} algorithm
          with |input| as first parameter (`string`),
          and `"text/html"` as second parameter (`type`).
  1. Let |clone| be the result of running [=clone a node=] on |node| with the
     `clone children flag` set to `true`.
  1. Let `fragment` be the result of {{createDocumentFragment}}.
  1. [=Append=] the node |clone| to the parent |fragment|.
  1. Return |fragment|.

Issue(WICG/sanitizer-api#42): It's unclear whether we can assume a generic
  context for {{parseFromString}}, or if we need to re-work the API to take
  the insertion context of the created fragment into account.
</div>

<div algorithm="sanitize a document fragment">
To <dfn>sanitize a document fragment</dfn> named |fragment| run these steps:

  1. Let |m| be a map that maps nodes to a [=sanitize action=]
  1. Let |nodes| be a list containing the [=inclusive descendants=] of
     |fragment|, in [=tree order=].
  1. [=list/iterate|For each=] |node| in |nodes|:
    1. Let |action| be the result of running the [=sanitize a node=] algorithm
       on |node|.
    1. Insert |node| and |action| into |m|
  1. [=list/iterate|For each=] |node| in |nodes|:
    1. If m[node] is `drop`, remove the |node| and all children from |fragment|.
    1. If m[node] is `block`, replace the |node| with all of its element and text node children from |fragment|.
    1. If m[node] is `keep`, do nothing.
</div>

<div algorithm="sanitize a node">
To <dfn>sanitize a node</dfn> named |node| run these steps:

  1. Let |sanitizer| be the current Sanitizer.
  1. If |node| is an element node:
    1. Let |element| be |node|'s element.
    1. [=list/iterate|For each=] |attr| in |element|'s
       [=Element/attribute list=]:
      1. Let |attr action| be the resulf of running the
         [=effective attribute configuration=] algorithm on |sanitizer|,
         |attr|, and |element|.
      1. If |attr action| is different from `keep`, remove |attr| from
        i |element|.
    1. Run the steps to [=handle funky elements=] on |element|.
    1. Let |action| be the resulf of running the
       [=effective element configuration=] algorithm on |sanitizer| and
       |element|.
    1. Return |action|.
  1. Return 'keep'

Issue: What about comment nodes, CDATA, etc. ?
</div>


Some HTML elements require special treatment in a way that can't be easily
expressed in terms of configuration options or other algorithms. The following
algorithm collects these in one place.

<div algorithm="handle funky elements">
To <dfn>handle funky elements</dfn> on a given |element|, run these steps:

  1. If |element|'s [=element interface=] is {{HTMLTemplateElement}}:
    1. Run the steps of the [=sanitize a document fragment=] algorithm on
       |element|'s |content| attribute, and replace |element|'s |content|
       attribute with the result.
    1. Drop all child nodes of |element|.
  1. If |element|'s [=element interface=] has a {{HTMLHyperlinkElementUtils}}
     mixin, and if |element|'s `protocol` property is "javascript:":
    1. Remove the `href` attribute from |element|.
  1. if |element|'s [=element interface=] is {{HTMLFormElement}},
     and if |element|'s `action` attribute is a [[URL]] with `javascript:`
     protocol:
    1. Remove the `action` attribute from |element|.
  1. if |element|'s [=element interface=] is {{HTMLInputElement}}
      or {{HTMLButtonElement}}, and if |element|'s `formaction` attribute is
      a [[URL]] with `javascript:` protocol
    1. Remove the `formaction` attribute from |element|.
</div>

### The Effective Configuration ### {#configuration}

A Sanitizer is potentially complex, so we will define a helper
construct, the *effective configuration*. This is mostly a specification
convenience and allows us to explain a Sanitizer's operation in two steps:
One, how to derive the effective configuration, and two, define the
Sanitzer's operation based on it.

An <dfn>effective configuration</dfn> maps a given |element| or a given pair of
|element| and |attribute| to a [=sanitize action=].

A <dfn>sanitize action</dfn> can have the values `keep`, `drop`, or `block`.
To determine the <dfn>stricter action</dfn> of two [=sanitize actions=], pick
the 'larger' of the two actions assuming a transitively defined order with
`drop` &gt; `block`, and `block` &gt; `keep`.

<div algorithm="effective element configuration">
To determine a Sanitizer |sanitizer|'s
<dfn>effective element configuration</dfn> for an element |element|,
run these steps:
  1. Let |config| be |sanitizer|'s [=configuration object=].
  1. Let |baseline action| be the result of running the steps of the
     [=determine the baseline configuration for an element=] algorithm
     for the element |element|.
  1. Let |config action| be the result of running the steps of the
     [=determine the effective configuration for an element=] algorithm
     for the element |element| and the config |config|.
  1. Return the [=stricter action=] of |baseline action| and |config action|.

Note: The definition of stricter actions ensures that the built-in baseline
      configuration cannot be overriden, and therefor forms a hard guarantee
      for all Sanitizer instances. (Likewise for attributes.)
</div>

<div algorithm="effective attribute configuration">
To determine a Sanitizer |sanitizer|'s
<dfn>effective attribute configuration</dfn> for an attribute |attr|
attached to an element |element|, run these steps:
  1. Let |config| be |sanitizer|'s [=configuration object=].
  1. Let |baseline action| be the result of running the steps of the
     [=determine the baseline configuration for an attribute=] algorithm
     on the attribute |attr|.
  1. Let |config action| be the result of running the steps of the
     [=determine the effective configuration for an attribute=] algorithm
     on the attribute |attr|, with the element |element| and the
     config |config|.
  1. Return the [=stricter action=] of |baseline action| and |config action|.
</div>

Before describing how an effective configuration is derived, we need a
helper definition:

<div algorithm="element kind">
The <dfn>element kind</dfn> of an |element| is one of `regular`, `unknown`, or `custom`. Let <var ignore>element kind</var> be:
  - `custom`, if |element|'s tag name is a [=valid custom element name=],
  - `unknown`, if |element| is not in the [[HTML]] namespace or if |element|'s
     tag name denotes an unknown element &mdash; that is, if the
     [=element interface=] the [[HTML]] specification assigns to it would
     be {{HTMLUnknownElement}},
  - `regular`, otherwise.
</div>

<div algorithm="attribute kind">
Similarly, the <dfn>attribute kind</dfn> of an |attribute| is one of `regular`
or `unknown`. Let <var ignore>attribute kind</var> be:
  - `unknown`, if the [[HTML]] specifcation does not assign any meaning to
     |attribute|'s name.
  - `regular`, otherwise.
</div>

Issue(WICG/sanitizer-api#72): The spec currently treats MathML and SVG as
    `unknown` content and therefore blocked by default. This needs to be fixed.

<div algorithm="determine the effective configuration for an element">
To <dfn>determine the effective configuration for an element</dfn> |element|,
given a [=configuration object=] |config|, run these steps:

  1. If |element|'s [=element kind=] is `custom` and if |config|'s
     [=allow custom elements option=] is unset or set to anything other
     than `true`: Return `drop`.
  1. Let |name| be |element|'s tag name.
  1. If |name| is in |config|'s [=element drop list=]: Return `drop`.
  1. If |name| is in |config|'s [=element block list=]: Return `block`.
  1. If |config| has a non-empty [=element allow list=] and |name| is not
     in |config|'s [=element allow list=]: Return `block`.
  1. If |config| does not have a non-empty [=element allow list=] and
     |name| is not it the [=default configuration=]'s [=element allow list=]:
     Return `block`.
  1. Return `keep`.
</div>

<div algorithm="determine the effective configuration for an attribute">
To <dfn>determine the effective configuration for an attribute</dfn> |attr|,
attached to an element |element|, and given a [=configuration object=] |config|,
run these steps:

  1. if |config|'s [=attribute drop list=] contains |attr|'s local
     name as key, and the associated value contains either |element|'s tag
     name or the string `"*"`: Return `drop`.
  1. If |config| has a non-empty [=attribute allow list=] and it does not
     contain |attr|'s local name, or |attr|'s associated value
     contains neither |element|'s tag name nor the string `"*"`:
     Return `drop`.
  1. if |config| does not have a non-empty [=attribute allow list=] and
     [=default configuration=]'s [=attribute allow list=] does not contain
     |attr|'s local name, or |attr|'s associated value contains
     neither |element|'s tag name nor the string `"*"`: Return `drop`.
  1. Return `keep`.
</div>

### Baseline and Defaults ### {#defaults}

Issue: The sanitizer baseline and defaults need to be carefully vetted, and
    are still under discussion. The values below are for illustrative
    purposes only.

<div algorithm="determine the baseline configuration for an element">
To <dfn>determine the baseline configuration for an element</dfn>
|element|, run these steps:
  1. if |element|'s [=element kind=] is `regular` and if |element|'s tag name
     is not in the [=baseline element allow list=]: Return `drop`.
  1. Return `keep`.
</div>

<div algorithm="determine the baseline configuration for an attribute">
To <dfn>determine the baseline configuration for an attribute</dfn>
|attr|, run these steps:
  1. If |attr|'s [=attribute kind=] is `regular` and if |attr|'s
     name is not in the [=baseline attribute allow list=]: Return `drop`
  1. Return `keep`.
</div>

The sanitizer has a built-in [=default configuration=], which is stricter than
the baseline and aims to eliminate any script-injection possibility, as well
as legacy or unusual constructs.

The defaults and baseline are defined by three JSON constants,
[=baseline element allow list=], [=baseline attribute allow list=],
[=default configuration=]. For better readability, these have been moved to
an <a href=#constants>appendix A</a>.


# Security Considerations # {#security-considerations}

The Sanitizer API is intended to prevent DOM-Based Cross-Site Scripting
by traversing a supplied HTML content and removing elements and attributes
according to a configuration. The specified API must not support
the construction of a Sanitizer object that leaves script-capable markup in
and doing so would be a bug in the threat model.

That being said, there are security issues which the correct usage of the
Sanitizer API will not be able to protect against and the scenarios will be
laid out in the following sections.

## Server-Side Reflected and Stored XSS ## {#server-side-xss}

<em>This section is not normative.</em>

The Sanitizer API operates solely in the DOM and adds a capability to traverse
and filter an existing DocumentFragment. The Sanitizer does not address
server-side reflected or stored XSS.

## DOM clobbering ## {#dom-clobbering}

<em>This section is not normative.</em>

DOM clobbering describes an attack in which malicious HTML confuses an
application by naming elements through `id` or `name` attributes such that
properties like `children` of an HTML element in the DOM are overshadowed by
the malicious content.

The Sanitizer API does not protect DOM clobbering attacks in its
default state, but can be configured to remove `id` and `name` attributes.

## XSS with Script gadgets ## {#script-gadgets}

<em>This section is not normative.</em>

Script gadgets is a technique in which an attacker uses existing application
code from popular JavaScript libraries to cause their own code to execute.
This is often done by injecting innocent-looking code or seemingly inert
DOM nodes that is only parsed and interpreted by a framework which then
performs the execution of JavaScript based on that input.

The Sanitizer API can not prevent these attacks, but requires page authors to
explicitly allow attributes and elements that are unknown to HTML and markup
that is known to be widely used for templating and framework-specific code,
like `data-` and `slot` attributes and elements like `<slot>` and `<template>`.
We believe that these restrictions are not exhaustive and encourage page
authors to examine their third party libraries for this behavior.

## Mutated XSS ## {#mutated-xss}

<em>This section is not normative.</em>

Mutated XSS or mXSS describes an attack based on parser mismatches when parsing
an HTML snippet without the correct context. In particular, when a parsed HTML
fragment has been serialized to a string, the format is not guaranteed to be
parsed and interpreted exactly the same when inserted into a different parent
element. An example for carrying out such an attack is by relying on the
change of parsing behavior for foreign content or misnested tags.

The Sanitizer API does not protect against mutated XSS, however we encourage
authors to use the `sanitize()` function of the API which returns a
DocumentFragment and avoids risks that come with serialization and additional
parsing. Directly operating on a fragment after sanitization also comes with a
performance benefit, as the cost of additional serialization and parsing is
avoided.

# Acknowledgements # {#ack}

Cure53's [[DOMPURIFY]] is a clear inspiration for the API this document
describes, as is Internet Explorer's {{window.toStaticHTML()}}.

# Appendix A: Built-in Constants # {#constants}

<em>This appendix is normative.</em>

These constants define core behaviour of the Sanitizer algorithm.

Note: The normative values of these constants are found below. They have
    been derived with the [[DEFAULTS]] script. It is expected that these
    values will be updated to include additional HTML elements as they are
    introduced in user agents.

## The Baseline Element Allow List ## {#baseline-element-allow-list}

The built-in <dfn>baseline element allow list</dfn> has the following value:

<pre class=include-code>
path: resources/baseline-element-allow-list.json
highlight: js
</pre>

## The Baseline Attribute Allow List ## {#baseline-attribute-allow-list}

The <dfn>baseline attribute allow list</dfn> has the following value:

<pre class=include-code>
path: resources/baseline-attribute-allow-list.json
highlight: js
</pre>

## The Default Configuration Object ## {#default-configuration-object}

The built-in <dfn>default configuration</dfn> has the following value:

<pre class=include-code>
path: resources/default-configuration.json
highlight: js
</pre>
