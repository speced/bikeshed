<pre class='metadata'>
Title: Web Budget API
Shortname: budget-api
Level: 1
Group: wicg
Status: ED
URL: https://wicg.github.io/budget-api/
Editor: Peter Beverloo, Google, peter@chromium.org
Abstract: This specification describes an API that can be used to retrieve the amount of budget an origin has available for resource consuming background operations, as well as the cost associated with doing such an operation.
Repository: WICG/budget-api
Warning: Obsolete
</pre>

<pre class="anchors">
spec: web-background-sync; urlPrefix: https://wicg.github.io/BackgroundSync/spec/
    type: dfn
        text: in the background; url: in-the-background
spec: push-api; urlPrefix: https://w3c.github.io/push-api/
    type: dfn
        text: push message; url: push-message
spec: html; urlPrefix: https://html.spec.whatwg.org/multipage/
    urlPrefix: browsers.html
        type: dfn
            text: origin; url: concept-origin
    urlPrefix: infrastructure.html
        type: dfn
            text: document; url: document
            text: in parallel; url: in-parallel
    urlPrefix: webappapis.html
        type: dfn
            text: document environment; url: document-environment
            text: entry settings object; url: entry-settings-object
            text: worker environment; url: worker-environment
        type: interface
            text: Navigator; url: navigator
    urlPrefix: workers.html
        type: dfn
            text: worker; url: worker
        type: interface
            text: WorkerNavigator; url: workernavigator
spec: promises-guide; urlPrefix: https://www.w3.org/2001/tag/doc/promises-guide#
    type: dfn
        text: A new promise; url: a-new-promise
spec: webidl; urlPrefix: https://heycam.github.io/webidl/
    type: dfn
        text: DOMException; url: dfn-DOMException
    type: interface
        text: SecurityError; url: securityerror
        text: sequence; url: idl-sequence
</pre>

<section class="non-normative">
  <h2 id="introduction">Introduction</h2>
  <em>This section is non-normative.</em>
  <p>
    Web Applications have conventionally been able to execute code, make network requests and
    interact with the user by means of established interaction, usually through a browser tab. This
    has allowed users to associate the presence of a browser tab with the Web Application's ability
    to do work on their behalf.
  </p>
  <p>
    Following the introduction of the Push API [[PUSH-API]] and Web Background Synchronization
    [[WEB-BACKGROUND-SYNC]], this assumption no longer stands. Web Applications are now able to both
    trigger and schedule execution of code <a>in the background</a>, outside of the user’s control.
  </p>
  <p>
    In an effort to mitigate risk to the user, user agents have implemented restrictions such as
    time limits on executing code <a>in the background</a>, or a requirement for the Web Application
    to use the Web Notification API [[NOTIFICATIONS]] to inform the user of the work they've done.
    Those restrictions are often unspecified and left up to the discretion of the user agent. In
    some cases, user agents will choose to not enforce these restrictions depending on the intensity
    of the <a lt="user engagement">user's engagement</a> with the Web Application.
  </p>
  <p>
    This specification describes an API that exposes a budget that can be used by authors to
    determine their current budget for resource consuming <a>background operations</a>, as well as
    the cost associated with doing a certain <a>background operation</a>.
  </p>
  <p>
    Because this API relates to the ability to do work <a>in the background</a>, which is considered
    a privilege, functionality provided by this API is only available in a <a>secure context</a>.
  </p>
  <p>
    An <a href="https://github.com/WICG/budget-api/blob/gh-pages/README.md">explainer</a> is
    available in our <a href="https://github.com/WICG/budget-api/">GitHub repository</a>.
  </p>

  <p class="note">
    This specification does not define how user agents establish or store the amount of current
    <a>budget</a>. It aims to define an API that exposes sufficient information to make the
    <a>budget</a> useful for authors, while not restricting the implementation details and
    heuristics specific to a user agent.
  </p>

  <section>
    <h3 id="current-budget">Current budget</h3>
    <p>
      There are various use-cases for needing to know the currently available <a>budget</a>:
    </p>
    <ul>
      <li>
        Deciding to <em>not</em> show a notification in response to a low priority push message
        whose primary purpose was to synchronize data.
      </li>
      <li>
        Deciding whether the <a>origin</a> can schedule a precise timer using a hypothetical Job
        Scheduler API.
      </li>
    </ul>

    <section class="example">
      <p>
        Determine whether a user visible interaction is required in response to a <a>push message</a>:
      </p>
      <pre class="lang-js">
        self.addEventListener('push', event => {
            // Execute the application-specific logic depending on the contents of the
            // received push message, for example by caching the latest content.

            event.waitUntil(
                navigator.budget.reserve('silent-push').then(reserved => {
                    if (reserved)
                        return;  // No need to show a notification.

                    // Not enough budget is available, must show a notification.
                    return registration.showNotification(...);
                })
            );
        });
      </pre>
    </section>
  </section>

  <section>
    <h3 id="expected-budget">Expected budget</h3>
    <p>
      There are various use-cases for needing to know the <a>budget</a> in advance:
    </p>
    <ul>
      <li>
        Deciding on the frequency of server-initiated cache updates of synchronized data.
      </li>
      <li>
        Deciding on the server whether there is sufficient <a>budget</a> available to hide
        previously shown notifications when the user dismissed them on other devices.
      </li>
      <li>
        Deciding to temporarily limit <a>background operations</a> if the <a>budget</a> could be
        used during an upcoming sporting event instead.
      </li>
    </ul>

    <p class="issue">
      Add an example that demonstrates a one of these use-cases.
    </p>
  </section>
</section>

<section>
  <h2 id="concepts">Concepts</h2>
  <p>
    The <dfn>user engagement</dfn> with an <a>origin</a> is defined by the intensity of their
    interaction with the application by means of navigation, interaction and retention signals.
  </p>
  <p>
    A <dfn>background operation</dfn> is the ability for an <a>origin</a> to execute potentially
    resource consuming code <a>in the background</a>.
  </p>
  <p>
    The <dfn>background operation cost</dfn> is a non-negative number that describes the cost of
    executing a <a>background operation</a> on the user's device.
  </p>
  <p>
    An <a>origin</a> has an associated <dfn>budget</dfn>, which is a non-negative number derived
    from the <a>user engagement</a> that describes how many <a>background operations</a> the
    <a>origin</a> is able to do, depending on the associated <a>background operation costs</a>.
  </p>
  <p>
    An <a>origin</a> has an associated <dfn>list of budget expectations</dfn>. This starts with the
    <a>origin</a>'s currently available <a>budget</a>, followed by zero or more entries indicating
    the lower bound of available <a>budget</a> at known points in the future.
  </p>
  <p class="note">
    User agents are not required to maintain future-bound budget expectations, but doing so enables
    more <a href="#expected-budget">use-cases</a> for authors.
  </p>
  <p>
    Part of an <a>origin</a>'s available <a>budget</a> can be
    <dfn lt="reserve budget">reserved</dfn>. This reduces the <a>origin</a>'s current <a>budget</a>
    by the given <var>cost</var>.
  </p>
  <p class="note">
    The reserved cost of certain <a>background operations</a> could be less than the cost
    indicated by <code>{{BudgetService/getCost()}}</code> when the user's device is in favorable
    conditions, for example because it's not on battery power.
  </p>
</section>

<section>
  <h2 id="security-and-privacy-considerations">Security and Privacy Considerations</h2>

  <section>
    <h3 id="applicability">Applicability</h3>
    <p>
      Applicability of the Budget API is limited to potentially resource consuming
      <a>background operations</a>—operations that are not sufficiently privacy sensitive to need
      express user permission for basic usage.
    </p>
    <p>
      User agents MUST NOT use the Budget API as an alternative to obtaining express user permission
      for privacy-sensitive operations such as accurate location access [[GEOLOCATION-API]] and
      access to the user's camera and/or microphone [[WEBRTC]].
    </p>
    <p class="note">
      Examples include Web Background Sync [[WEB-BACKGROUND-SYNC]], which may have execution time
      and retry limitations applied by the user agent, and the Push API [[PUSH-API]] in situations
      where the effects of a push message are not immediately visible to the user.
    </p>

    <section>
      <h4 id="location-tracking">Location Tracking</h4>
      <!-- Paraphrased from Web Background Sync -->
      <!-- https://wicg.github.io/BackgroundSync/spec/#permission -->
      <p>
        Fetch requests within <a>background operations</a> may reveal the client’s IP address to the
        server after the user left the page. The user agent SHOULD limit tracking by capping the
        duration of <a>background operations</a>.
      </p>
    </section>
  </section>

  <section>
    <h3 id="permissions">Permissions</h3>
    <p>
      The Budget API provides an alternative to obtaining express user permission where the user
      agent believes it can appropriately protect the user for strictly resource consuming
      <a>background operations</a>.
    </p>
    <p>
      Both the APIs described in this document, as well as the specifications that depend on this
      document, MUST NOT limit the user agent's ability to require express user permission in
      addition to budget requirements.
    </p>
    <p class="note">
      User agents that require express user permission for certain <a>background operations</a> MAY
      lower or eliminate the <a>background operation cost</a> of such an operation, because the user
      has explicitly allowed the Web Application to engage on their behalf.
    </p>
  </section>
</section>

<section>
  <h2 id="api">API</h2>

  <section>
    <h3 id="navigator-workernavigator-extensions">Navigator and WorkerNavigator extensions</h3>
    <pre class="idl">
      [Exposed=Window]
      partial interface Navigator {
          [SameObject] readonly attribute BudgetService budget;
      };
    </pre>
    <pre class="idl">
      [Exposed=Worker]
      partial interface WorkerNavigator {
          [SameObject] readonly attribute BudgetService budget;
      };
    </pre>

    <p>
      The <code>budget</code> attribute's getter must return a <code>{{BudgetService}}</code>
      scoped to the <a>entry settings object</a>'s <var>origin</var>.
    </p>
  </section>

  <section>
    <h3 id="budget-service-interface">The {{BudgetService}} interface</h3>
    <p>
      The <code>{{BudgetService}}</code> interface represents the programmatic interface to the user
      agent's budget service. It is available in both <a lt="document environment">document</a> and
      <a>worker environments</a>.
    </p>

    <pre class="idl">
      [Exposed=(Window,Worker)]
      interface BudgetService {
          Promise&lt;double&gt; getCost(OperationType operation);
          Promise&lt;sequence&lt;BudgetState&gt;&gt; getBudget();

          Promise&lt;boolean&gt; reserve(OperationType operation);
      };
    </pre>

    <p>
      The <code><dfn method for="BudgetService" title="getCost()">getCost()</dfn></code> method
      returns a promise that will be resolved with the worst-case <a>background operation cost</a>
      of the indicated <a>background operation</a>.
    </p>
    <p>
      When invoked, it MUST run the following steps:
    </p>
    <ol>
      <li>
        Let <var>promise</var> be <a>a new promise</a>.
      </li>
      <li>
        Let <var>origin</var> be the <a>entry settings object</a>'s <a>origin</a>.
      </li>
      <li>
        If the <var>origin</var> is not a <a>secure context</a>, reject <var>promise</var> with a
        <code>{{SecurityError}}</code> and terminate these steps.
      </li>
      <li>
        Return <var>promise</var> and run the following step <a>in parallel</a>:
        <ol>
          <li>
            Resolve the <var>promise</var> with the worst-case <a>background operation cost</a>
            associated with the given <var>operation</var>.
          </li>
        </ol>
      </li>
    </ol>

    <p>
      The <code><dfn method for="BudgetService" title="getBudget()">getBudget()</dfn></code> method
      returns a promise that will be resolved with a sequence of <code>{{BudgetState}}</code>
      objects indicating the expected state of the <a>budget</a> at given times in the future.
    </p>
    <p>
      When invoked, it MUST run the following steps:
    </p>
    <ol>
      <li>
        Let <var>promise</var> be <a>a new promise</a>.
      </li>
      <li>
        Let <var>origin</var> be the <a>entry settings object</a>'s <a>origin</a>.
      </li>
      <li>
        If the <var>origin</var> is not a <a>secure context</a>, reject <var>promise</var> with a
        <code>{{SecurityError}}</code> and terminate these steps.
      </li>
      <li>
        Return <var>promise</var> and run the following step <a>in parallel</a>:
        <ol>
          <li>
            Let <var>details</var> be a new <code>{{sequence}}</code>.
          </li>
          <li>
            If there are entries in <var>origin</var>'s <a>list of budget expectations</a>, for each
            <var>entry</var>:

            <ol>
              <li>
                Let <var>state</var> be a new <code>{{BudgetState}}</code> instance.
              </li>
              <li>
                Set <var>state</var>'s <code>{{BudgetState/budgetAt}}</code> attribute to
                <var>entry</var>'s <a>budget</a> value.
              </li>
              <li>
                Set <var>state</var>'s <code>{{BudgetState/time}}</code> attribute to the
                <code>{{DOMTimeStamp}}</code> representing the final date of <var>entry</var>'s validity
                in milliseconds since 00:00:00 UTC on 1 January 1970.
              </li>
              <li>
                Add <var>state</var> to <var>details</var>.
              </li>
            </ol>

            Otherwise:
            <ol>
              <li>
                Let <var>state</var> be a new <code>{{BudgetState}}</code> instance.
              </li>
              <li>
                Set <var>state</var>'s <code>{{BudgetState/budgetAt}}</code> attribute to <em>0</em>.
              </li>
              <li>
                Set <var>state</var>'s <code>{{BudgetState/time}}</code> attribute to the
                <code>{{DOMTimeStamp}}</code> representing the current time in milliseconds since
                00:00:00 UTC on 1 January 1970.
              </li>
              <li>
                Add <var>state</var> to <var>details</var>.
              </li>
            </ol>
          </li>
          <li>
            Resolve the <var>promise</var> with <var>details</var>.
          </li>
        </ol>
      </li>
    </ol>

    <p>
      The <code><dfn method for="BudgetService" title="reserve()">reserve()</dfn></code> method
      returns a promise that will be resolved with a boolean indicating whether the requested
      budget for <var>operation</var> could be <a lt="reserve budget">reserved</a>.
    </p>
    <p>
      When invoked, it MUST run the following steps:
    </p>
    <ol>
      <li>
        Let <var>promise</var> be <a>a new promise</a>.
      </li>
      <li>
        Let <var>origin</var> be the <a>entry settings object</a>'s <a>origin</a>.
      </li>
      <li>
        If the <var>origin</var> is not a <a>secure context</a>, reject <var>promise</var> with a
        <code>{{SecurityError}}</code> and terminate these steps.
      </li>
      <li>
        Return <var>promise</var> and run the following step <a>in parallel</a>:
        <ol>
          <li>
            Let <var>budget</var> be the amount of budget available to <var>origin</var>.
          </li>
          <li>
            Let <var>cost</var> be the <a>background operation cost</a> associated with
            <var>operation</var>.
          </li>
          <li>
            If <var>cost</var> is greater than <var>budget</var>, resolve the <var>promise</var> with
            the boolean <code>false</code> and abort these steps.
          </li>
          <li>
            <a lt="reserve budget">Reserve</a> the <var>cost</var> from <var>origin</var>'s
            <a>budget</a> and resolve the <var>promise</var> with the boolean <code>true</code>.
          </li>
        </ol>
      </li>
    </ol>
  </section>

  <section>
    <h3 id="budget-state-interface">The {{BudgetState}} interface</h3>
    <p>
      The <code>{{BudgetState}}</code> interface represents the amount of <a>budget</a> available at
      a specific point in time. This enables authors to make near-term decisions about how to spend
      their <a>budget</a>.
    </p>

    <pre class="idl">
      [Exposed=(Window,Worker)]
      interface BudgetState {
        readonly attribute double budgetAt;
        readonly attribute DOMTimeStamp time;
      };
    </pre>

    <p>
      The <dfn attribute dfn-for="BudgetState"><code>budgetAt</code></dfn> attribute's getter must
      return the <a>budget</a> at the associated <code>{{BudgetState/time}}</code>.
    </p>

    <p>
      The <dfn attribute dfn-for="BudgetState"><code>time</code></dfn> attribute's getter must
      return the timestamp representing the time, in milliseconds since 00:00:00 UTC on 1 January
      1970, at which the <code>{{BudgetState/budgetAt}}</code> will be valid.
    </p>
  </section>

  <section>
    <h3 id="operation-type-enum">The {{OperationType}} enum</h3>
    <p>
      The <code>{{OperationType}}</code> enumeration describes the known set of <a>background
      operations</a> that the Web Budget API caters for. Authors can use this in combination with
      <code>{{BudgetService/getCost()}}</code> to interpret their available <a>budget</a> as a
      quantifiable set of <a>background operations</a> it can be used for.
    </p>

    <pre class="idl">
      enum OperationType {
        "silent-push"
      };
    </pre>

    <p>
      The following <code>{{OperationType}}</code> values are defined:
    </p>
    <ul>
      <li>
        The <code><dfn for="OperationType">silent-push</dfn></code> value represents a <a>background
        operation</a> in response to an incoming push message through the Push API that does not
        result in a user visible action. [[!PUSH-API]]
      </li>
    </ul>

    <p class="note">
      Specifications are encouraged to extend the <code>{{OperationType}}</code> enumeration with
      their own values. Naming consistency with the Permission API [[PERMISSIONS]], where
      applicable, is recommended.
    </p>
  </section>

</section>
