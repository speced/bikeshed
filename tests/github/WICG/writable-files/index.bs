<pre class=metadata>
Title: Writable Files
Shortname: WritableFiles
Abstract: This document defines a web platform API that lets websites gain write access to the
  native file system. It builds on [[FILE-API]], but adds lots of new functionality on top.
Status: ED
ED: https://wicg.github.io/writable-files/
Level: 1
Editor: Marijn Kruisselbrink, Google, mek@chromium.org, w3cid 72440
Group: WICG
Repository: wicg/writable-files
Indent: 2
Complain About: accidental-2119 yes, missing-example-ids yes
Markup Shorthands: css no, markdown yes
</pre>

<pre class=link-defaults>
spec:fetch; type:interface; text:ReadableStream
</pre>

<pre class=anchors>
</pre>

<style>
.domintro dt {
    font-family: Menlo, Consolas, "DejaVu Sans Mono", Monaco, monospace;

    padding-top: 0.5em;
    padding-bottom: 1em;
}
.domintro dt a {
    color: inherit; border-bottom-style: none;
}
.domintro dt code {
    font-size: inherit;
}
</style>

# Introduction # {#introduction}

*This section is non-normative.*

TODO

This provides similar functionality as earlier drafts of the [[file-system-api]] as well as the
[[entries-api]], but with a more modern API.

# Files and Directories # {#files-and-directories}

## Concepts ## {#concepts}

A <dfn>entry</dfn> is either a [=file entry=] or a [=directory entry=].

Each [=/entry=] has an associated <dfn for=entry>name</dfn>.

A <dfn lt="file|file entry">file entry</dfn> additionally consists of <dfn for="file entry">binary
data</dfn> and a <dfn for="file entry">modification timestamp</dfn>.

A <dfn lt="directory|directory entry">directory entry</dfn> additionally consists of a [=/set=] of
<dfn for="directory entry">entries</dfn>. Each member is either a [=file=] or a [=directory=].

The <dfn lt="parent|parent directory">parent directory</dfn> of a [=/entry=] |child| is the
[=directory=] |parent| for which |parent|'s [=entries=] [=list/contains=] |child|, if such a
[=directory=] exist. Each [=directory entry=] must be [=list/contained=] by the [=entries=] of at
most one [=directory entry=], while each [=file entry=] must be [=list/contained=] by the entries
of exactly one [=directory entry=].

If a [=directory=] does not have a [=parent directory=], it is called a <dfn>root directory</dfn>.

Each [=/entry=] |entry| has an associated <dfn>file system</dfn>, which is either |entry| itself if
|entry| is a [=root directory=], or otherwise is equal to the [=file system=] of |entry|'s [=parent
directory=].

Issue: TODO: Explain how entries map to files on disk (multiple entries can map to the same file or
directory on disk but doesn't have to map to any file on disk). Root directories typically don't map
to files on disk at all. Same file represented by different entries can have different parents etc.

## The {{FileSystemHandle}} interface ## {#api-filesystemhandle}

<xmp class=idl>
interface FileSystemHandle {
  readonly attribute boolean isFile;
  readonly attribute boolean isDirectory;
  readonly attribute USVString name;

  Promise<FileSystemDirectoryHandle> getParent();

  Promise<FileSystemHandle> moveTo(
      FileSystemDirectoryHandle parent, optional USVString name);
  Promise<FileSystemHandle> copyTo(
      FileSystemDirectoryHandle parent, optional USVString name);
  Promise<void> remove();
};
</xmp>

A {{FileSystemHandle}} object represents a [=/entry=]. Each {{FileSystemHandle}} object is assocaited
with a <dfn for=FileSystemHandle>entry</dfn> (a [=/entry=]). Multiple separate objects implementing
the {{FileSystemHandle}} interface can all be associated with the same [=/entry=] simultaneously.

<div class="note domintro">
  : |handle| . {{FileSystemHandle/isFile}}
  :: Returns true iff |handle| is a {{FileSystemFileHandle}}.

  : |handle| . {{FileSystemHandle/isDirectory}}
  :: Returns true iff |handle| is a {{FileSystemDirectoryHandle}}.

  : |handle| . {{FileSystemHandle/name}}
  :: Returns the [=entry/name=] of the entry represented by |handle|.
</div>

The <dfn attribute for=FileSystemHandle>isFile</dfn> attribute must return true if the associated
[=FileSystemHandle/entry=] is a [=file entry=], and false otherwise.

The <dfn attribute for=FileSystemHandle>isDirectory</dfn> attribute must return true if the
associated [=FileSystemHandle/entry=] is a [=directory entry=], and false otherwise.

The <dfn attribute for=FileSystemHandle>name</dfn> attribute must return the [=entry/name=] of the
associated [=FileSystemHandle/entry=].

### The {{FileSystemHandle/getParent()}} method ### {#api-filesystemhandle-getparent}

<div class="note domintro">
  : |parent| = await |handle| . {{FileSystemHandle/getParent()}}
  :: Returns a promise resolved to the [=parent directory=] of |handle|.
     If |handle| is the [=root directory=] of its file system the promise
     resolves to `null`.

     Can reject if the entry no longer exists in the underlying file system, or
     if some error prevents reading the entry or its parent.
</div>

<div algorithm>
The <dfn method for=FileSystemHandle>getParent()</dfn> method, when invoked, must run these steps:

1. TODO

</div>

### The {{FileSystemHandle/moveTo()}} method ### {#api-filesystemhandle-moveto}

<div class="note domintro">
  : |newHandle| = await |handle| . {{FileSystemHandle/moveTo()|moveTo}}(await
        |handle|.{{FileSystemHandle/getParent()}}, |newName|)
  :: Renames the entry represented by |handle| to |newName|.

  : |newHandle| = await |handle| . {{FileSystemHandle/moveTo()|moveTo}}(|otherDir|)
  :: Moves the entry represented by |handle| to |otherDir|, while keeping its existing name.

  : |newHandle| = await |handle| . {{FileSystemHandle/moveTo()|moveTo}}(|otherDir|, |newName|)
  :: Moves the entry represented by |handle| to |otherDir|, while renaming it to |newName|.

     In all of these cases, |handle| will no longer represent a valid entry, and thus any further
     operations on it will fail.

     Attempting to move an entry to the directory it already exists in, without renaming it is
     an error. In all other cases if the target entry already exists, it is overwritten.
</div>

<div algorithm>
The <dfn method for=FileSystemHandle>moveTo(|parent|, |name|)</dfn> method, when invoked, must run
these steps:

1. TODO

</div>

### The {{FileSystemHandle/copyTo()}} method ### {#api-filesystemhandle-copyto}

<div class="note domintro">
  : |newHandle| = await |handle| . {{FileSystemHandle/copyTo()|copyTo}}(await
        |handle|.{{FileSystemHandle/getParent()}}, |newName|)
  :: Creates a copy of the entry represented by |handle| with name |newName|.

  : |newHandle| = await |handle| . {{FileSystemHandle/copyTo()|copyTo}}(|otherDir|)
  :: Creates a copy of the entry represented by |handle| in |otherDir|, while keeping its existing
     name.

  : |newHandle| = await |handle| . {{FileSystemHandle/copyTo()|copyTo}}(|otherDir|, |newName|)
  :: Creates a copy of the entry represented by |handle| in |otherDir|, using |newName| for the
     name of the new entry.

     In all of these cases, |handle| will no longer represent a valid entry, and thus any further
     operations on it will fail.

     Attempting to copy an entry on top of itself will fail. In all other cases if the target entry
     already exists, it is overwritten.
</div>

<div algorithm>
The <dfn method for=FileSystemHandle>copyTo(|parent|, |name|)</dfn> method, when invoked, must run
these steps:

1. TODO

</div>

### The {{FileSystemHandle/remove()}} method ### {#api-filesystemhandle-remove}

<div class="note domintro">
  : await |handle| . {{FileSystemHandle/remove()}}
  :: Attempts to remove the entry represented by |handle| from the underlying file system.
</div>

<div algorithm>
The <dfn method for=FileSystemHandle>remove()</dfn> method, when invoked, must run these steps:

1. TODO

</div>

## The {{FileSystemFileHandle}} interface ## {#api-filesystemfilehandle}

<xmp class=idl>
interface FileSystemFileHandle : FileSystemHandle {
  Promise<File> getFile();
  Promise<FileSystemWriter> createWriter();
};
</xmp>


### The {{FileSystemFileHandle/getFile()}} method ### {#api-filesystemfilehandle-getfile}

<div class="note domintro">
  : |file| = await |fileHandle| . {{FileSystemFileHandle/getFile()}}
  :: Returns a {{File}} representing the state on disk of the entry represented by |handle|.
</div>

<div algorithm>
The <dfn method for=FileSystemFileHandle>getFile()</dfn> method, when invoked, must run these steps:

1. TODO

</div>

### The {{FileSystemFileHandle/createWriter()}} method ### {#api-filesystemfilehandle-createwriter}

<div class="note domintro">
  : |writer| = await |fileHandle| . {{FileSystemFileHandle/createWriter()}}
  :: Returns a {{FileSystemWriter}} that can be used to write to the file.
</div>

<div algorithm>
The <dfn method for=FileSystemFileHandle>createWriter()</dfn> method, when invoked, must run these steps:

1. TODO

</div>

## The {{FileSystemDirectoryHandle}} interface ## {#api-filesystemdirectoryhandle}

<xmp class=idl>
dictionary FileSystemGetFileOptions {
  boolean create = false;
};

dictionary FileSystemGetDirectoryOptions {
  boolean create = false;
};

interface FileSystemDirectoryHandle : FileSystemHandle {
  Promise<FileSystemFileHandle> getFile(USVString name, optional FileSystemGetFileOptions options);
  Promise<FileSystemDirectoryHandle> getDirectory(USVString name, optional FileSystemGetDirectoryOptions options);

  // This really returns an async iterable, but that is not yet expressable in WebIDL.
  object getEntries();

  Promise<void> removeRecursively();
};
</xmp>

Issue: Should we have separate getFile and getDirectory methods, or just a single getChild/getEntry
method?

Issue: Having getFile methods in both FileSystemDirectoryHandle and FileSystemFileHandle, but with
very different behavior might be confusing? Perhaps rename at least one of them (but see also
previous issue).

Issue: Should getEntries be its own method, or should FileSystemDirectoryHandle just be an async
iterable itself?

### The {{FileSystemDirectoryHandle/getFile()}} method ### {#api-filesystemdirectoryhandle-getfile}

<div class="note domintro">
  : |fileHandle| = await |directoryHandle| . {{FileSystemDirectoryHandle/getFile()|getFile}}(|name|)
  :: Returns a handle for a file named |name| in the directory represented by |directoryHandle|. If
     no such file exists, this rejects.

  : |fileHandle| = await |directoryHandle| . {{FileSystemDirectoryHandle/getFile()|getFile}}(|name|, { {{FileSystemGetFileOptions/create}}: true })
  :: Returns a handle for a file named |name| in the directory represented by |directoryHandle|. If
     no such file exists, this creates a new file. If no file with named |name| can be created this
     rejects. Creation can fail because there already is a directory with the same name, because the
     name uses characters that aren't supported in file names on the underlying file system, or
     because the user agent for security reasons decided not to allow creation of the file.

     See TODO section for possible security reasons.
</div>

<div algorithm>
The <dfn method for=FileSystemDirectoryHandle>getFile(|name|, |options|)</dfn> method, when invoked,
must run these steps:

1. TODO

</div>

### The {{FileSystemDirectoryHandle/getDirectory()}} method ### {#api-filesystemdirectoryhandle-getdirectory}

<div class="note domintro">
  : |subdirHandle| = await |directoryHandle| . {{FileSystemDirectoryHandle/getDirectory()|getDirectory}}(|name|)
  :: Returns a handle for a directory named |name| in the directory represented by
    |directoryHandle|. If no such directory exists, this rejects.

  : |subdirHandle| = await |directoryHandle| . {{FileSystemDirectoryHandle/getDirectory()|getDirectory}}(|name|, { {{FileSystemGetDirectoryOptions/create}}: true })
  :: Returns a handle for a directory named |name| in the directory represented by
     |directoryHandle|. If no such directory exists, this creates a new directory. If creating the
     directory failed, this rejects. Creation can fail because there already is a file with the same
     name, or because the name uses characters that aren't supported in file names on the underlying
     file system.
</div>

<div algorithm>
The <dfn method for=FileSystemDirectoryHandle>getDirectory(|name|, |options|)</dfn> method, when
invoked, must run these steps:

1. TODO

</div>

### The {{FileSystemDirectoryHandle/getEntries()}} method ### {#api-filesystemdirectoryhandle-getentries}

<div class="note domintro">
  : for await (const |handle| of |directoryHandle| . {{FileSystemDirectoryHandle/getEntries()}}) {}
  :: Iterates over all entries whose parent is the entry represented by |directoryHandle|.
</div>

<div algorithm>
The <dfn method for=FileSystemDirectoryHandle>getEntries()</dfn> method, when invoked, must run
these steps:

1. TODO

</div>

### The {{FileSystemDirectoryHandle/removeRecursively()}} method ### {#api-filesystemdirectoryhandle-removerecursively}

<div class="note domintro">
  : await |directoryHandle| . {{FileSystemDirectoryHandle/removeRecursively()}}
  :: Removes the entry represented by |directoryHandle|, and all entries contained within it,
     recursively.
</div>

## The {{FileSystemWriter}} interface ## {#api-filesystemwriter}

<xmp class=idl>
interface FileSystemWriter {
  Promise<void> write(unsigned long long position, (Blob or ReadableStream) data);
  Promise<void> truncate(unsigned long long size);
  Promise<void> close();
};
</xmp>

### The {{FileSystemWriter/write()}} method ### {#api-filesystemwriter-write}

<div class="note domintro">
  : await |writer| . {{FileSystemWriter/write()|write}}(|position|, |data|)
  :: Writes the content of |data| into the file associated with |writer| at position |position|.
     If |position| is past the end of the file writing will fail and this method rejects.
</div>

<div algorithm>
The <dfn method for=FileSystemWriter>write(|position|, |data|)</dfn> method, when invoked, must run
these steps:

1. TODO

</div>

### The {{FileSystemWriter/truncate()}} method ### {#api-filesystemwriter-truncate}

<div class="note domintro">
  : await |writer| . {{FileSystemWriter/truncate()|truncate}}(|size|)
  :: Resizes the file associated with |writer| to be |size| bytes long. If |size| is larger than
     the current file size this pads the file with zero bytes, otherwise it truncates the file.
</div>

<div algorithm>
The <dfn method for=FileSystemWriter>truncate(|size|)</dfn> method, when invoked, must run these
steps:

1. TODO

</div>

# Accessing native filesystem # {#native-filesystem}

## The {{Window/chooseFileSystemEntries()}} method ## {#api-choosefilesystementries}

<xmp class=idl>
enum ChooseFileSystemEntriesType { "openFile", "saveFile", "openDirectory" };

dictionary ChooseFileSystemEntriesOptionsAccepts {
  USVString description;
  sequence<USVString> mimeTypes;
  sequence<USVString> extensions;
};

dictionary ChooseFileSystemEntriesOptions {
    ChooseFileSystemEntriesType type = "openFile";
    boolean multiple = false;
    sequence<ChooseFileSystemEntriesOptionsAccepts> accepts;
    boolean excludeAcceptAllOption = false;
};

partial interface Window {
    [SecureContext]
    Promise<(FileSystemHandle or sequence<FileSystemHandle>)>
        chooseFileSystemEntries(optional ChooseFileSystemEntriesOptions options);
};
</xmp>

<div class="note domintro">
  : |result| = await window . {{Window/chooseFileSystemEntries()|chooseFileSystemEntries}}(|options|)
  :: Shows a file picker dialog to the user and returns handles for the selected files or
     directories.

     The |options| argument sets options that influence the behavior of the shown file picker.

     |options|.{{ChooseFileSystemEntriesOptions/type}} specifies the type of the entry the website
     wants the user to pick. When set to {{ChooseFileSystemEntriesType/"openFile"}} (the default),
     the user can select only existing files. When set to {{ChooseFileSystemEntriesType/"saveFile"}}
     the dialog will additionally let the user select files that don't yet exist. Finally when set
     to {{ChooseFileSystemEntriesType/"openDirectory"}}, the dialog will let the user select
     directories instead of files.

     If |options|.{{ChooseFileSystemEntriesOptions/multiple}} is false (or absent) the user can
     only select a single file, and the |result| will be a single {{FileSystemHandle}}. If on the
     other hand |options|.{{ChooseFileSystemEntriesOptions/multiple}} is true, the dialog can let
     the user select more than one file, and |result| will be an array of {{FileSystemHandle}}
     instances (even if the user did select a single file, if
     {{ChooseFileSystemEntriesOptions/multiple}} is true this will be returned as a single-element
     array).

     Finally |options|.{{ChooseFileSystemEntriesOptions/accepts}} and
     |options|.{{ChooseFileSystemEntriesOptions/excludeAcceptAllOption}} specify the types of files
     the dialog will let the user select. Each entry in
     |options|.{{ChooseFileSystemEntriesOptions/accepts}} describes a single type of file,
     consisting of a {{ChooseFileSystemEntriesOptionsAccepts/description}}, zero or more
     {{ChooseFileSystemEntriesOptionsAccepts/mimeTypes}} and zero or more
     {{ChooseFileSystemEntriesOptionsAccepts/extensions}}. Options with no valid
     {{ChooseFileSystemEntriesOptionsAccepts/mimeTypes}} and no
     {{ChooseFileSystemEntriesOptionsAccepts/extensions}} are invalid and are ignored. If no
     {{ChooseFileSystemEntriesOptionsAccepts/description}} is provided one will be generated.

     If |options|.{{ChooseFileSystemEntriesOptions/excludeAcceptAllOption}} is true, or if no valid
     entries exist in |options|.{{ChooseFileSystemEntriesOptions/accepts}}, a option matching all
     files will be included in the file types the dialog lets the user select.
</div>

<div algorithm>
The <dfn method for=Window>chooseFileSystemEntries(|options|)</dfn> method, when invoked, must run
these steps:

1. TODO

</div>

# Accessing special filesystems # {#special-filesystems}

## The {{FileSystemDirectoryHandle/getSystemDirectory()}} method ## {#api-getsystemdirectory}

<xmp class=idl>
enum SystemDirectoryType {
  "sandbox"
};

dictionary GetSystemDirectoryOptions {
  required SystemDirectoryType type;
};

partial interface FileSystemDirectoryHandle {
  static Promise<FileSystemDirectoryHandle> getSystemDirectory(GetSystemDirectoryOptions options);
};
</xmp>

<div class="note domintro">
  : |directoryHandle| = {{FileSystemDirectoryHandle}} .
    {{FileSystemDirectoryHandle/getSystemDirectory()|getSystemDirectory}}({
       {{GetSystemDirectoryOptions/type}}: {{SystemDirectoryType/"sandbox"}} })
  :: Returns the sandboxed filesystem.
</div>

Issue(27): getSystemDirectory might not be the best name. Also perhaps should be on Window rather
than on FileSystemDirectoryHandle.

<div algorithm>
The <dfn method for=FileSystemDirectoryHandle>getSystemDirectory(|options|)</dfn> method, when
invoked, must run these steps:

1. TODO

</div>

# Security Considerations # {#security-considerations}

## Secure Context ## {#secure-context}

## Limiting types of files that can be written to ## {#file-type-limitations}
