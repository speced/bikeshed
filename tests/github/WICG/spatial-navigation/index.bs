<pre class='metadata'>
Title: Spatial Navigation
Shortname: spatnav
Level: 1
Status: ED
Group: WICG
Repository: wicg/spatial-navigation
URL: http://wicg.github.io/spatial-navigation
Editor: Jihye Hong, LG Electronics, jh.hong@lge.com
Editor: Florian Rivoal, Invited Expert, https://florian.rivoal.net
Abstract: This specification defines a general model for navigating the focus using the arrow keys,
    as well as related CSS and JavaScript features.
At risk: {{getSpatnavContainer()}}
At risk: {{focusableAreas()}}
At risk: 'spatial-navigation-contain'
</pre>
<pre class="anchors">
spec: ui-events; urlPrefix: https://w3c.github.io/uievents/;
    type: event;
        text: keydown
        text: click
spec: html; urlPrefix: https://html.spec.whatwg.org/multipage/;
    urlPrefix: interaction.html
        type: dfn;
            text: DOM anchor
            text: focusable area
            text: currently focused area of a top-level browsing context
            text: sequential focus navigation order
            text: sequential focus navigation starting point
            text: sequential navigation search algorithm
            text: control group
    urlPrefix: dom.html
        type: dfn;
            text: the body element; url: #the-body-element-2
spec: dom; urlPrefix: https://dom.spec.whatwg.org/
    type: dfn;
        text: document element
spec: overscroll-behavior; urlPrefix: https://wicg.github.io/overscroll-behavior/;
    type: dfn;
        text: scroll boundary
spec: css2; urlPrefix: https://drafts.csswg.org/css2/
    urlPrefix: box.html
        type: dfn;
            text: border box; url: #x14
</pre>
<style>
code.key {
    border: solid 1px;
    border-radius: 0.5ch;
    padding: 1px 5px;
}
</style>


<h2 id="intro" class=non-normative>
Introduction</h2>

<em>This section is not normative.</em>

Historically, most browsers have not offered features to let users move the focus directionally.
Some, such as TV browsers, have enabled users to move the focus using the arrow keys out of necessity,
since no other input mechanism is available on a typical TV remote control.

Others, have enabled different key combinations to control spatial navigation,
such as pressing the <code class=key>Shift</code> key together with arrow keys.

This ability to move around the page directionally is called <dfn lt="spatial navigation | spatnav" export>spatial navigation</dfn>
(or <strong>spatnav</strong> for short).

<a>Spatial navigation</a> can be useful for a webpage built using a grid-like layout,
or other predominantly non linear layouts.
The figure below represents a photo gallery arranged in a grid layout.
If the user presses the <code class=key>Tab</code> key to move focus,
they need to press the key many times to reach the desired element.
Also, the grid layout may arrange the layout of elements independently of their source order.
Therefore sequential navigation using the <code class=key>Tab</code> key makes focus navigation unpredictable.
In contrast, <a>spatial navigation</a> moves the focus among focusable elements
depending on their position
allowing it to address problems encountered with sequential navigation.

<figure>
    <img alt="When elements are laid out in a grid pattern, spatial navigation makes it much easier to predict and control where focus should move to." src="images/spatnav-enable.png" style="width: 500px;"/>
    <figcaption>Application using a grid-like layout.</figcaption>
</figure>

While arrow keys are naturally suited to control spatial navigation,
no previous specification describes how that should work,
or how it may be controlled.
This specification introduces a processing model for spatial navigation,
as well as APIs
enabling authors to control and override how spatial navigation works.

Some aspects of this specification, such as the JavaScript Events,
also extends how sequential navigation work,
in order to make sure that keyboard navigation in general
has a consistent and well defined model.

Note: As a general principle,
keyboard navigation,
and spatial navigation in particular,
should be possible to control without JavaScript,
and declarative solutions are therefore preferred.
Since spatial navigation depends on layout,
that means CSS is typically the right mechanism to define
spatial navigation related controls.
However, in the spirit of the <a href="https://github.com/extensibleweb/manifesto">Extensible Web Manifesto</a> [[EXTENSIBLE]],
we feel it is important to provide the right JavaScript primitives
to let authors experiment and explore the problem space.
More declarative features may be added later,
based on feedback and experience acquired through such JavaScript usage.

Note: A few features are marked <dfn noexport>at-risk</dfn>.
The editors of this specification believe
they represent an important part of the user or author experience
of the features defined in specification.
At the same time, the core functionality of this specification
can be implemented without implementing these
so it seems possible that implementors may choose to down-prioritize them
to reduce the scope of a first implementation.
While it is hoped that these features will be implemented as well,
they are marked at-risk in recognition that they might not be at first.


<h2 id=interaction>
Module interaction</h2>

This document depends on the Infra Standard [[!infra]].

The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" are to be interpreted as described in RFC 2119. [[!RFC2119]]


<h2 id=overview class=non-normative>
Overview</h2>

<em>This section is not normative.</em>

Using a UA-defined mechanism
(typically arrow keys, possibly in combination with modifier keys like <code class=key>Shift</code> or <code class=key>Control</code>),
the user may ask the User Agent to navigate in a particular direction.
This will either
move the focus from its current location to a new focusable item in the direction requested,
or scroll if there is no appropriate item.

More specifically,
the User Agent will first search for visible and focusable items
in the direction indicated
within the current <a>spatial navigation focus container</a>
(by default the root element, scrollable elements, and iframes,
but other elements can be made into <a>spatial navigation focus containers</a>
using the 'spatial-navigation-contain' property).

If it finds any, it will pick the best one for that direction,
and move the focus there.

If it does not, it will scroll the <a>spatial navigation focus container</a> in the requested direction
instead of moving focus.
Doing so may uncover focusable elements
which would then be eligible targets to move the focus to
next time spatial navigation in the same direction is requested.

If the <a>spatial navigation focus container</a> cannot be scrolled,
either because it is not a scrollable element
or because it is already scrolled to the maximum in that direction,
the User Agent will select the next <a>spatial navigation focus container</a> up the ancestry chain,
and repeat the process of
looking for eligible focus targets,
selecting the best one if there's any,
scrolling if not,
going up the ancestry chain if it cannot scroll,
until it has either moved focus,
scrolled,
or reached the root.

Additionally, when the user has focused a <a>scroll container</a> which contains focusable elements,
the user may ask the User Agent to move the focus to the nested elements
(for instance by pressing <code class=key>Enter</code>).

The User Agent will then follow a similar logic: first, search for visible and focusable items
within the currently focused <a>scroll container</a>,
and if there is any,
select the best one and move the focus there.

<div class=note>Note: This feature is needed because elements inside a scrollable container
are neither to its top, bottom, left or right.
They are inside, and could not be reached otherwise using spatial navigation only.

Issue(15): While this ability is needed, it could be achieved by different mechanisms,
such as for example automatically moving the focus inside of a scroll container
instead of focusing it,
if it contains focusable elements.
The current proposition is felt to be more intuitive for end users.
Feedback appreciated.
</div>

At key points during this search for the appropriate response to the spatial navigation request,
the User Agent will fires events.
These enable authors to prevent the upcoming action
(by calling {{preventDefault()}}),
and if desired to provide an alternate action,
such as using calling the {{HTMLElement/focus()}} method on a different
element of the author's choosing.

To help authors write such alternate actions,
and as part of exposing underlying platform primitives as per the <a href="https://github.com/extensibleweb/manifesto">Extensible Web</a> principles,
this specification also defines JavaScript APIs
that expose key constructs of the underlying model.


See [[#events-nav-type]] for details about the various events,
and [[#js-api]] for details about the JavaScript API.

<div class='example'>
    In this example, shows how a series of focusable elements
    arranged in a scrollable element
    would be navigated when using spatial navigation.
    For the sake of keeping the description simple,
    this example assumes a UA where spatial navigation is triggered using arrow keys.

    <figure>
        <img alt="" src="images/spatnav-scroll-visible-1.png" style="width: 200px;"/>
        <img alt="" src="images/spatnav-scroll-visible-2.png" style="width: 200px;"/>
        <figcaption>Moving focus to the visible element in the <a>spatial navigation focus container</a>.</figcaption>
    </figure>

    On the left of figure 2, "Box 2" is focused.
    Pressing the <code class=key>ArrowDown</code> key moves focus to
    "Box 3" without scrolling because "Box 3" is visible in the <a>scrollport</a> of the <a>spatial navigation focus container</a>.

    <figure>
        <img alt="" src="images/spatnav-scroll-invisible-1.png" style="width: 160px;"/>
        <img alt="" src="images/spatnav-scroll-invisible-2.png" style="width: 160px;"/>
        <img alt="" src="images/spatnav-scroll-invisible-3.png" style="width: 160px;"/>
        <img alt="" src="images/spatnav-scroll-invisible-4.png" style="width: 160px;"/>
        <figcaption>Moving focus to the hidden element in the <a>spatial navigation focus container</a>.</figcaption>
    </figure>

    On the first of figure 3, under "Box 3", there isn't any visible element in the <a>scrollport</a>.
    Therefore, the effect of pressing the <code class=key>ArrowDown</code> is to scroll down, as shown in the second.
    The next press of the <code class=key>ArrowDown</code> key makes "Box 4" come into the <a>scrollport</a>,
    and the focus will move to it when there is additional pressing the <code class=key>ArrowDown</code>, as the fourth.

    This example uses the markup as follows:
    <pre class="lang-css">
        #scroller {
            width: 700px;
            height: 700px;
            overflow-x: hidden;
            overflow-y: auto;
        }

        .box {
            width: 150px;
            height: 110px;
            background-color: blue;
        }

        .box:focus {
            background-color: red;
        }
    </pre>

    <pre class="lang-html">
        &lt;div id="scroller">
            &lt;div class="box" tabindex="0">Box 1&lt;/div>
            &lt;div class="box" tabindex="0">Box 2&lt;/div>
            &lt;div class="box" tabindex="0">Box 3&lt;/div>
            &lt;div class="box" tabindex="0">Box 4&lt;/div>
        &lt;/div>
    </pre>
</div>

<h2 id=triggering>
Triggering Spatial Navigation</h2>

When the user triggers spatial navigation in a given direction,
the User Agent must run the <a>spatial navigation steps</a> in that direction.

This specification does not define what UI mechanism User Agents should offer to users to trigger spatial navigation.
This intentionally left for User Agents to decide.

<div class=note>Note:
    It is expected that User Agents on devices with limited input capabilities,
    such as TVs operated with a remote control,
    or devices operated with a game controller,
    will use spatial navigation as their primary or exclusive navigation mechanism.
</div>

Although it is possible for User Agents
to implement the processing model and APIs defined by the specification
without giving any direct means to the user to trigger spatial navigation themselves,
this specification recommends not to do so:
User Agents should offer a means for users to trigger spatial navigation directly,
without having to use the APIs.

Note: Conversely, authors should assume that spatial navigation may be triggered
by the UA in response to user actions
even if the author has not invoked any of the APIs.

Regardless of the actual mechanism chosen to trigger spatial navigation,
the following requirements apply:
* If the mechanism the user must use to trigger spatial navigation
    would normally fire a {{UIEvent}},
    then that event must be fired prior to running the <a>spatial navigation steps</a>
    and these steps must not be run if that event's <a>canceled flag</a>
    gets set.

    <div class=example>
        Gaming devices may trigger spatial navigation based on pressing the D-pad.
        This would result in firing a <a event>keydown</a> event
        with the key set to one of
        <code class=key>ArrowDown</code>,
        <code class=key>ArrowLeft</code>,
        <code class=key>ArrowRight</code>,
        or <code class=key>ArrowUp</code>,
        followed if not canceled by running the <a>spatial navigation steps</a>,
        including firing the relevant {{NavigationEvent}}s.

        A User Agent on a desktop computer that triggers spatial navigation
        using the arrow keys of the keyboard
        would follow the same sequence.
    </div>
* If the mechanism the user must use to trigger spatial navigation
    would in some contexts trigger other actions,
    the User Agent should in these contexts
    give priority to these other actions
    and execute them instead of spatial navigation.
    It must not trigger both.

    <div class=example>
        In a User Agent that triggers spatial navigation
        using the arrow keys without modifier keys,
        and uses these same arrow keys to move
        the text insertion caret when an editable element is focused,
        the arrow keys should by default to moving the caret.
        Spatial navigation would only be triggered by the arrow keys
        when the focused element is not editable,
        or when it is editable but the caret cannot move any further in the requested direction.
    </div>

    An exception is made for scrolling:
    since spatial navigation itself handles scrolling
    (in addition to moving the focus)
    User Agents should not offer the same mechanism to trigger both spatial navigation
    and a scrolling behavior separate from spatial navigation.
    UAs may however, offer a way for the user to switch between different modes,
    or offer both based on different UI mechanism.

    <div class=example>
        A User Agent may have a setting to let the user choose
        between using the arrow keys without modifier keys
        for spatial navigation or for scrolling.
        Another one may offer scrolling on arrow keys without modifiers,
        and spatial navigation on arrow keys when pressed together
        with the <code class=key>Shift</code> key,
        or on the <code class=key>W</code> <code class=key>A</code> <code class=key>S</code> <code class=key>D</code> keys.
        Offering only spatial navigation or only scrolling
        as responses to pressing arrow keys would also be possibilities.
    </div>


<h2 id="js-api">
JavaScript API</h2>

Note: These APIs are designed to be low level constructs following the processing model closely.
As such, they should be easy to use by authors who want to extend or override the way spatial navigation works.
More user-friendly and higher level APIs may be considered based on use cases.

<pre class=idl>
enum SequentialNavigationDirection {
    "forward",
    "backward"
};
enum SpatialNavigationDirection {
    "up",
    "down",
    "left",
    "right",
    "inside"
};

enum FocusableAreaSearchMode {
    "visible",
    "all"
};

dictionary FocusableAreasOptions {
    FocusableAreaSearchMode mode;
};

dictionary SpatNavSearchOptions {
    required SpatialNavigationDirection dir;
    sequence&lt;Node>? candidates;
    Node? container;
};

partial interface Element {
    Node getSpatnavContainer();
    sequence&lt;Node> focusableAreas(optional FocusableAreasOptions arg);
    Node? spatNavSearch(SpatNavSearchOptions arg);
    Node? seqNavSearch(SequentialNavigationDirection dir);
};
</pre>

Note: The way the direction is expressed allows us to expand to more than 4-way navigation
later of if this is found necessary.
More directional keywords or a numerical angle could be added.

Note: the {{focusableAreas()}} and {{getSpatnavContainer()}} methods are <a>at-risk</a>.

<div algorithm="getSpatnavContainer steps">
The {{Element/getSpatnavContainer()}} method must follow these steps:
1. Return the nearest ancestor of the element that is a <a>spatnav container</a>

</div>

<div algorithm="focusableAreas steps">
The {{Element/focusableAreas()}} method must follow these steps:
1. Let <var>v</var> be <code>false</code>
    if the argument's {{FocusableAreasOptions/mode}} attribute if present and equal to <code>"all"</code>,
    or <code>true</code> otherwise.
4. Let <var>areas</var> be the result of <a>finding focusable areas</a> within the element with the visibleOnly argument set to <var>v</var>
5. Let <var>anchors</var> be a <a for=list>clone</a> of <var>areas</var>,
    with every <a>focusable area</a> which is not itself a <a>Node</a> replaced with its <a>DOM anchor</a>.
6. Return <var>anchors</var>

</div>

<div algorithm="spatNavSearch steps">
The {{Element/spatNavSearch()}} method must follow these steps:
1. Let <var>d</var> be the argument's {{SpatNavSearchOptions/dir}} attribute
2. If the argument's {{SpatNavSearchOptions/candidates}} attribute is not <code>null</code>,
    then let <var>areas</var> be that attribute,
    else, let <var>areas</var> be the result of <a>finding focusable areas</a>
    within the argument's {{SpatNavSearchOptions/container}} attribute is not <code>null</code>,
    or the element's nearest <a>spatnav container</a> ancestor
4. Return the result of <a>selecting the best candidate</a> within <var>areas</var> in direction <var>d</var> from the element

Note: When neither a container nor a list of candidates is provided,
this only searches through the visible focusable areas of the nearest
<a>spatnav container</a> ancestor.
<strong>If none are found, this does not climb further up the ancestry chain,
and the result will be <code>null</code>.</strong>
</div>


<div algorithm="seqNavSearch steps">
The {{Element/seqNavSearch()}} method must follow these steps:
1. Let <var>d</var> be the argument
2. Let <var>s</var> be <code>sequential</code> if the element is a <a for="/">browsing context</a>
    or if the element is in its <a>control group</a>'s <a>sequential focus navigation order</a>;
    otherwise, let <var>s</var> be <code>DOM</code>.
4. Return the result of running the <a>sequential navigation search algorithm</a> with the element as its starting point argument,
    <var>d</var> as its direction argument,
    and <var>s</var> as the selection mechanism argument.

</div>

<div class=example>
    The following code changes the behavior of spatial navigation
    from scrolling when there is no focusable element visible,
    to jumping to focusable elements even when they are not visible.

    <pre><code highlight=javascript>
    document.addEventListener("navbeforescroll", function(e) {
        var container = e.target.getSpatnavContainer();
        var areas = container.focusableAreas({ mode: "all" });

        if (areas.length == 0)) { return; }

        e.preventDefault();
        var target = e.target.spatNavSearch({
            dir: e.dir,
            candidates: areas
        });
        target.focus();
    });
    </code></pre>
</div>


<h2 id="events-navigationevent">
Navigation Events</h2>

<h3 id="interface-focusevent">
Interface NavigationEvent</h3>

The {{NavigationEvent}} interface provides specific contextual information associated with sequential or spatial navigation.

To create an instance of the {{NavigationEvent}} interface, use the {{NavigationEvent}} constructor,
passing an optional {{NavigationEventInit}} dictionary.

<pre class=idl>
enum NavigationDirection {
      "up",
      "down",
      "left",
      "right",
      "inside",
      "forward",
      "backward"
};

[Constructor(DOMString type, optional NavigationEventInit eventInitDict)]
interface NavigationEvent : UIEvent {
      readonly attribute NavigationDirection dir;
      readonly attribute EventTarget? relatedTarget;
};

dictionary NavigationEventInit : UIEventInit {
      required NavigationDirection dir;
      EventTarget? relatedTarget = null;
};
</pre>

<h3 id="events-nav-type" class="non-normative">
Navigation Event Types</h3>

<em>This section and its subsections are not normative.</em>

The Navigation event types are summarized below.
For full normative details, see [[#processing-model]].

<h4 id="event-type-navbeforefocus" class="non-normative">
<dfn event for=NavigationEvent>navbeforefocus</dfn></h4>

The <a event>navbeforefocus</a> event occurs before spatial or <a href="https://html.spec.whatwg.org/multipage/interaction.html#sequential-focus-navigation">sequential</a> navigation changes the focus.

<table class="def">
    <tbody>
        <tr>
            <th>Type
            <td><strong><code>navbeforefocus</code></strong>
        <tr>
            <th>Interface
            <td>{{NavigationEvent}}
        <tr>
            <th>Bubbles
            <td>Yes
        <tr>
            <th>Cancelable
            <td>Yes
        <tr>
            <th>Attributes of the event
            <td><dl>
                <dt>{{NavigationEvent}}.{{NavigationEvent/relatedTarget}}
                <dd>The DOM anchor of the focusable area that will be focused

                <dt>{{NavigationEvent}}.{{NavigationEvent/dir}}
                <dd>The direction of the navigation as requested by the user
            </dl>
    </tbody>
</table>

<div class='example'>
    This example shows the [[UI-EVENTS#event-order]] when pressing the <code class=key>ArrowRight</code>
    key.
    For the sake of keeping the description simple,
    this example assumes a UA where spatial navigation is triggered using arrow keys.

    <table class="complex data">
        <thead>
            <tr>
                <th>
                <th>Event type
                <th>{{KeyboardEvent}}.{{KeyboardEvent/key}}
                <th>Notes
        </thead>
        <tbody>
            <tr>
                <td>1
                <td>keydown
                <td><code class=key>ArrowRight</code>
                <td>MUST be a key which can activate spatial navigation,
                    such as the arrow keys, or spatial navigation is not activated.
            <tr>
                <td>2
                <td>navbeforefocus
                <td>
                <td>Sent if the candidates for spatial navigation is not <code>null</code>,
                    or this is not generated.
            <tr>
                <td>3
                <td>focusin
                <td>
                <td>Sent before the target element receives focus.
            <tr>
                <td>4
                <td>focus
                <td>
                <td>Sent after the target element receives focus.
        </tbody>
    </table>
</div>

<h4 id="event-type-navbeforescroll" class="non-normative">
<dfn event for=NavigationEvent>navbeforescroll</dfn></h4>

The <a event>navbeforescroll</a> event occurs before spatial navigation triggers scrolling.
<table class="def">
    <tbody>
        <tr>
            <th>Type
            <td><strong><code>navbeforescroll</code></strong>
        <tr>
            <th>Interface
            <td>{{NavigationEvent}}
        <tr>
            <th>Bubbles
            <td>Yes
        <tr>
            <th>Cancelable
            <td>Yes
        <tr>
            <th>Attributes of the event
                <td><dl>
                    <dt>{{NavigationEvent}}.{{NavigationEvent/relatedTarget}}
                    <dd>The element that will be scrolled if the event is not canceled

                    <dt>{{NavigationEvent}}.{{NavigationEvent/dir}}
                    <dd>The direction of the navigation as requested by the user
                </dl>
    </tbody>
</table>

<div class='example'>
    This example shows the [[UI-EVENTS#event-order]] when pressing the <code class=key>ArrowDown</code>
    key in the situation like the following figure.
    For the sake of keeping the description simple,
    this example assumes a UA where spatial navigation is triggered using arrow keys.

		<figure>
		    <img alt="An image about navbeforescroll" src="images/navbeforescroll-example-1.png" style="width: 200px;"/>
		    <figcaption>"Box 2" gains the focus and there isn't any candidate in a downward direction
            in the <a>scrollport</a>.</figcaption>
		</figure>

    <table class="complex data">
        <thead>
            <tr>
                <th>
                <th>Event type
                <th>Event target
                <th><code>relatedTarget</code>
                <th>Notes
        </thead>
        <tbody>
            <tr>
                <td>1
                <td>keydown
                <td><code>#box2</code>
                <td>N/A
                <td>MUST be a key which can activate spatial navigation,
                    such as the arrow keys,
                    otherwise spatial navigation is not triggered.
            <tr>
                <td>2
                <td>navbeforescroll
                <td><code>#box2</code>
                <td><code>#scrollContainer</code>
                <td>Sent if <code>#scrollContainer</code> doesn't contain any candidate in the <a>scrollport</a>,
                otherwise this would not be generated.
        </tbody>
    </table>

    After <a event>navbeforescroll</a> is fired, pressing the <code class=key>ArrowDown</code> key triggers scrolling
    down the scrollbar like in the figure below:

    <figure>
        <img alt="An image of the result about navnotarget" src="images/navbeforescroll-example-2.png" style="width: 200px;"/>
        <figcaption>The result of moving focus when there isn't any candidate in the <a>scrollport</a>.</figcaption>
    </figure>

    This example uses the markup as follows:
    <pre class="lang-css">
        #scrollContainer {
            width: 700px;
            height: 700px;
            overflow-x: hidden;
            overflow-y: auto;
        }

        .item {
            width: 150px;
            height: 110px;
            background-color: blue;
        }

        .item:focus {
            background-color: red;
        }
    </pre>

    <pre class="lang-html">
        &lt;div id="scrollContainer">
            &lt;div id="box1" class="item" tabindex="0">Box 1&lt;/div>
            &lt;div id="box2" class="item" tabindex="0">Box 2&lt;/div>
            &lt;div id="box3" class="item" tabindex="0">Box 3&lt;/div>
        &lt;/div>
   </pre>
</div>

<h4 id="event-type-navnotarget" class="non-normative">
<dfn event for=NavigationEvent>navnotarget</dfn></h4>

The <a event>navnotarget</a> event occurs before going up the tree to search candidates in the
nearest ancestor <a>spatnav container</a> when spatial navigation has failed to find any candidate
within the current <a>spatnav container</a>.

If the <a>spatnav container</a> is scrollable, the event occurs when there isn't any candidate in it
and it cannot be scrolled at the same time.

<table class="def">
    <tbody>
        <tr>
            <th>Type
            <td><strong><code>navnotarget</code></strong>
        <tr>
            <th>Interface
            <td>{{NavigationEvent}}
        <tr>
            <th>Bubbles
            <td>Yes
        <tr>
            <th>Cancelable
            <td>Yes
        <tr>
            <th>Attributes of the event
            <td><dl>
                <dt>{{NavigationEvent}}.{{NavigationEvent/relatedTarget}}
                <dd>The <a>spatnav container</a> that was searched in.

                <dt>{{NavigationEvent}}.{{NavigationEvent/dir}}
                <dd>The direction of the navigation as requested by the user
            </dl>
    </tbody>
</table>

<div class='example'>
    This example shows the [[UI-EVENTS#event-order]] when pressing the <code class=key>ArrowDown</code>
    key in the situation like the following figure.
    For the sake of keeping the description simple,
    this example assumes a UA where spatial navigation is triggered using arrow keys.

		<figure>
		    <img alt="An image about navnotarget" src="images/navnotarget-example-1.png" style="width: 200px;"/>
		    <figcaption>Moving focus when there isn't any candidate in the
				<a>scroll container</a>.</figcaption>
		</figure>

    <table class="complex data">
        <thead>
            <tr>
                <th>
                <th>Event type
                <th>Event target
                <th><code>relatedTarget</code>
                <th>Notes
        </thead>
        <tbody>
            <tr>
                <td>1
                <td>keydown
                <td><code>#box2</code>
                <td>N/A
                <td>MUST be a key which can activate spatial navigation,
                    such as the arrow keys,
                    otherwise spatial navigation is not triggered.
            <tr>
                <td>2
                <td>navnotarget
                <td><code>#box2</code>
                <td><code>#scrollContainer</code>
                <td>Sent if <code>#scrollContainer</code> doesn't contain any candidate and
                cannot be scrolled,
                otherwise this would not be generated.
            <tr>
                <td>3
                <td>navbeforefocus
                <td><code>#box2</code>
                <td><code>#box3</code>
                <td>Sent if the candidates in <code>#container</code> is not <code>null</code>,
                otherwise this would not be fired.
            <tr>
                <td>4
                <td>focusin
                <td><code>#box3</code>
                <td>N/A
                <td>Sent before the target element receives focus.
            <tr>
                <td>5
                <td>focus
                <td><code>#box3</code>
                <td>N/A
                <td>Sent after the target element receives focus.
        </tbody>
    </table>

    The result of this example is the figure as follows:

    <figure>
        <img alt="An image of the result about navnotarget" src="images/navnotarget-example-2.png" style="width: 200px;"/>
        <figcaption>The result of moving focus when there isn't any candidate in the <a>scrollport</a>
        and <a>scroll container</a> cannot be scrolled.</figcaption>
    </figure>

    This example uses the markup as follows:
    <pre class="lang-css">
        #container {
            width: 900px;
            height: 1400px;
        }

        #scrollContainer {
            width: 700px;
            height: 700px;
            overflow-x: hidden;
            overflow-y: auto;
        }

        .item {
            width: 150px;
            height: 110px;
            background-color: blue;
        }

        .item:focus {
            background-color: red;
        }
    </pre>

    <pre class="lang-html">
        &lt;div id="container">
            &lt;div id="scrollContainer">
                &lt;div id="box1" class="item" tabindex="0">Box 1&lt;/div>
                &lt;div id="box2" class="item" tabindex="0">Box 2&lt;/div>
            &lt;/div>
            &lt;div id="box3" class="item" tabindex="0">Box 3&lt;/div>
        &lt;/div>
   </pre>
</div>


<h2 id=processing-model>
Processing Model</h2>

The [[#overview]] section gives a high level idea of how spatial navigation works,
to help readers of this specification build a general mental model.
It uses intuitive but imprecise terminology,
and glosses over many details
for the sake of readability.

This section defines the corresponding normative behavior
and aims for as much detail as necessary
to fully define the behavior.
This includes integration with sequential navigation.

Issue(19): The following currently does not account
for <a href="https://github.com/WICG/overscroll-behavior">the proposed overscroll-behavior specification</a>.

Issue(21): The following does not take shadow dom into account.


<h3 id=grouping>
Groupings of elements</h3>

While the general model for spatial navigation
is to work from the layout of the document
and the relative position of focusable elements,
the User Agent is required to prioritize finding elements
from a local logical grouping,
only looking for focusable elements outside of the grouping
if a suitable one cannot be found inside it (see [[#nav]] for details).

Such groupings are called <dfn lt="spatial navigation focus container | spatial navigation focus containers | spatnav container | spatnav containers">spatial navigation focus containers</dfn> (or <strong>spatnav containers</strong> for short).

By default, <a>spatnav containers</a> are established by:
* the <a>document element</a> of a <a for="/">browsing context</a>'s <a>document</a>
    (not limited to the <a>top-level browsing context</a>)

    Issue(18): Should that be the viewport rather than the document element?
* a <a>scroll containers</a>

Additional <a>spatnav containers</a> can be created using the 'spatial-navigation-contain' property (see [[#container]]).

<h3 id=nav>
Navigation</h3>

There can be a <dfn>spatial navigation starting point</dfn>. It is initially unset.
The user agent may set it when the user indicates that it should be moved.

Note: For example, the user agent could set it to the position of the user's click if the user clicks on the document contents.

If the UA sets both a <a>spatial navigation starting point</a> and a <a>sequential focus navigation starting point</a>,
they must not be set differently.

Issue(23): The focusing steps should probably reset the <a>spatial navigation starting point</a>

<div algorithm="to run the spatial navigation steps">
To run the <dfn>spatial navigation steps</dfn> in <var>direction</var>, do the following:

1. Let <var>startingPoint</var> be the <a>DOM anchor</a> of the <a>currently focused area of a top-level browsing context</a>.
2. If <var>startingPoint</var> is the <a>Document</a> of the <a>top-level browsing context</a>
    set <var>startingPoint</var> to <a>the body element</a> if it is not <code>null</code>
    or to the <a>document element</a> otherwise.
3. If the <a>spatial navigation starting point</a> is not <code>null</code>
    and it is a descendant of <var>startingPoint</var>
    then set <var>startingPoint</var> to the <a>spatial navigation starting point</a>
4. If the <var>direction</var> is <code>inside</code>,
    then run the <a>navigate inside steps</a> on <var>startingPoint</var>.
1. Let <var>eventTarget</var> be <var>startingPoint</var> if <var>startingPoint</var> is an element,
    or let <var>eventTarget</var> be the element which contains <var>startingPoint</var>
    if <var>startingPoint</var> is a position.
    (<a>assert</a>: There is no other alternative)
2. If <var>starting point</var> is the <a>document element</a> or the <a>the body element</a> of the <a>top-level browsing context</a>
    then set <var>starting point</var> to:
    * the top edge of the viewport    if <var>direction</var> is <code>down</code>
    * the bottom edge of the viewport if <var>direction</var> is <code>up</code>
    * the left edge of the viewport   if <var>direction</var> is <code>right</code>
    * the right edge of the viewport  if <var>direction</var> is <code>left</code>

    Note: We special case the situation where we're navigating from the state where nothing was focused,
    to start searching from the edges of the viewport.
3. Let <var>container</var> be the nearest ancestor of <var>eventTarget</var> that is a <a>spatnav container</a>.
4. <i>Loop</i>: Let <var>candidates</var> be the result of <a>finding focusable areas</a>
    within <var>container</var>
5. If <var>candidates</var> is <code>null</code>:
    * If <var>container</var> is a <a>scroll container</a> that <a>can be manually scrolled</a>:
            1. <a>Fire an event</a> named <a event>navbeforescroll</a> at <var>eventTarget</var> using {{NavigationEvent}}
                with its {{NavigationEvent/dir}} set to <var>direction</var>
                and {{NavigationEvent/relatedTarget}} set to <var>container</var>
                and with it's <code>bubbles</code> and <code>cancelable</code> attributes set to <code>true</code>,
                and let <var>allowScroll</var> be the result.
            2. If <var>allowScroll</var> is <code>true</code>,
                then return <a>Directionally scroll the element</a> <var>container</var> in <var>direction</var> the return,
                else return.
    * Else,
        1. <a>Fire an event</a> named <a event>navnotarget</a> at <var>eventTarget</var> using {{NavigationEvent}}
            with its {{NavigationEvent/dir}} set to <var>direction</var> and {{NavigationEvent/relatedTarget}} set to <var>container</var>
            and with it's <code>bubbles</code> and <code>cancelable</code> attributes set to <code>true</code>,
            and return if the result is <code>false</code>.
        2.
            * If <var>container</var> is the <a>document element</a> of the <a>top-level browsing context</a>,
                then return.
                The User Agent may transfer focus to its own controls (if any) honouring <var>direction</var>.
            * Else, if <var>container</var> is the <a>document element</a> of a <a>nested browsing context</a> then:
                1. Set <var>startingPoint</var> to <var>container</var>'s <a>browsing context container</a>
                2. Set <var>eventTarget</var> be <var>startingPoint</var>
                3. Set <var>container</var> to the nearest ancestor of <var>startingPoint</var> that is a <a>spatnav container</a>.
                4. Return to the step labeled <i>loop</i>.

                Issue(28): is it sane from a security standpoint that this propagates up from iframes?
            * Else, set <var>container</var> to its closest ancestor that is itself a <a>spatnav container</a>
                and return to the step labeled <i>loop</i>.
6. Let <var>bestCandidate</var> be the result of <a>selecting the best candidate</a>
    within <var>candidates</var> in <var>direction</var> starting from <var>startingPoint</var>
7. <a>Fire an event</a> named <a event>navbeforefocus</a> at <var>eventTarget</var> using {{NavigationEvent}}
    with its {{NavigationEvent/dir}} set to <var>direction</var> and {{NavigationEvent/relatedTarget}} set to <var>bestCandidate</var>
    and with it's <code>bubbles</code> and <code>cancelable</code> attributes set to <code>true</code>,
    and let <var>allowFocusChange</var> be the result.
8. If <var>allowFocusChange</var> is <code>false</code>, return
9. Run the <a>focusing steps</a> for <var>bestCandidate</var> and return

</div>

<div algorithm="to run the navigate inside steps">
To run the <dfn>navigate inside steps</dfn> on <var>eventTarget</var>, do the following:
1. Let <var>candidates</var> be the result of <a>finding focusable areas</a>
    within <var>eventTarget</var>
2. If <var>candidates</var> is <code>null</code>,
    <a>Fire an event</a> named <a event>navnotarget</a> at <var>eventTarget</var> using {{NavigationEvent}}
    with its {{NavigationEvent/dir}} set to <code>inside</code> and {{NavigationEvent/relatedTarget}} set to <var>eventTarget</var>
    and with it's <code>bubbles</code> and <code>cancelable</code> attributes set to <code>true</code>,
    then return.
3. Let <var>bestCandidate</var> be the result of <a>selecting the best candidate</a>
    within <var>candidates</var> in direction <code>inside</code>
    starting from the <a>inline start</a> <a>block start</a> corner of <var>eventTarget</var>'s <a>scrollport</a>.
4. <a>Fire an event</a> named <a event>navbeforefocus</a> at <var>eventTarget</var> using {{NavigationEvent}}
    with its {{NavigationEvent/dir}} set to <code>inside</code> and {{NavigationEvent/relatedTarget}} set to <var>bestCandidate</var>
    and with it's <code>bubbles</code> and <code>cancelable</code> attributes set to <code>true</code>,
    and let <var>allowFocusChange</var> be the result.
5. If <var>allowFocusChange</var> is <code>false</code>, return
6. Run the <a>focusing steps</a> for <var>bestCandidate</var> and return

</div>

For consistency between <a>sequential focus navigation</a> and the model defined above,
the following is also defined:

<div algorithm="to run the sequential navigation steps">
To run the <dfn>sequential navigation steps</dfn>
run step 1 through 9 of <a href="https://html.spec.whatwg.org/multipage/interaction.html#sequential-focus-navigation">the HTML steps for sequential navigation</a>,
with one change:
between step 5 and 6, add the following:

> 5.5. if <var>candidate</var> is not <code>null</code>,
> <a>Fire an event</a> named <a event>navbeforefocus</a> at <var ignore>eventTarget</var> using {{NavigationEvent}}
> with its {{NavigationEvent/dir}} set to <var ignore>direction</var> and {{NavigationEvent/relatedTarget}} set to <var>candidate</var>
> and return if the result is false
>

Issue(27): This is a monkeypatch on [[HTML]].
Eventually this should be upstreamed.
</div>

<h3 id=heuristics>
Focus Navigation Heuristics</h3>

Note: The following algorithms are inspired from Chrome's implementation
as well as from the <a href="https://www.w3.org/TR/WICD/#focus-handling">old WICD Spec</a>.
Implementors who find better approaches or refinements to these approaches are strongly
encouraged to provide feedback and help improve this specification
in order to maximize interoperability.
In particular, divergences in how User Agents <a>find focusable areas</a>
may cause some elements to be focusable in some User Agents but not in others,
which would be bad for users.

All geometrical operations in this section are defined to work on the result of CSS layout,
including all graphical transformations, such as <a>relative positioning</a> or [[CSS-TRANSFORMS-1]].

The <dfn>boundary box</dfn> of an object is defined as follows:
* if the object is a point, the boundary is that point
* if the object is an element, the boundary is the <a>border box</a> of the element's <a>principal box</a>.
* if the object is a <a>focusable area</a> which is not an element, the boundary is the axis-aligned the bounding box of that <a>focusable area</a>
* if the object is a geometric shape, the boundary is the axis-aligned the bounding box of that shape

Issue(w3c/csswg-drafts#2324): CSS should have a term for “border box taking into account corner shaping properties like border-radius”.

<div algorithm="to find focusable areas">

To <dfn lt="find focusable areas | finding focusable areas">find candidates</dfn> within a containing element <var>C</var>,
with an optional <var>visibleOnly</var> argument that defaults to <code>true</code>,
follow the following steps:

1. Let <var>focusables</var> be the <a spec=infra for="/">set</a> of all the <a>focusable areas</a> that are descendants of <var>C</var>.
2. The UA should <a spec=infra for=set>remove</a> from <var>focusables</var> elements whose <a element-attr spec=html><code>tabindex</code></a> attribute is set to a negative value.

    Note: This is a "SHOULD" in order to mirror the exclusion of elements with negative tabindex
    from the <a>sequential focus navigation order</a> as defined in [[HTML#the-tabindex-attribute]].
3. If <var>visibleOnly</var> is <code>false</code>,
    return <var>focusables</var>.

    Note: <var>focusables</var> may be empty
3. Let <var>visibles</var> be the subset of items in <var>focusables</var>
    whose <a>boundary box</a>
    is at least partly within <var>C</var>'s <a>scrollport</a>.

    Issue(29): Should that be C's <a>optimal viewing region</a> instead?
    Probably not, given the next step, but maybe.
4. Remove from <var>visibles</var> items are <a>obscured</a> by other parts of the page:
    If no point of the area enclosed by an item's <a>boundary box</a> can be hit by a hit test due to some other object(s) overlapping it,
    it is said to be <dfn>obscured</dfn>.

    Note: Spatial navigation is often an afterthought for many web authors,
    if it is remembered at all.
    If elements which cannot be focused or activated clicking / pointing
    could be focused by spatial navigation,
    there would be a risk that activating them would violate the author's assumptions
    of what events can happen in certain states of the web page.
    For instance, if the submit button of a form can be focused and activated even though
    there is a dialog over it,
    this may cause a bug in the application.
    While careful authors should use the inert attribute (or similar practices) to prevent such problems,
    but this specification aims to make spatial navigation robust even in the eventuality
    that authors forget to do so.

    Issue(w3c/csswg-drafts#2325): Some CSS spec needs to define hit testing.
5. Return <var>visibles</var>.

    Note: <var>visibles</var> may be empty

</div>

<div algorithm="to select the best candidate">

To <dfn lt="select the best candidate | selecting the best candidate">select the best candidate</dfn>
within a <a spec=infra for="/">set</a> of <var>candidates</var>
in a direction <var>dir</var>,
starting from <var>starting point</var>,
follow the following steps:

1. If <var>candidates</var> is <a spec=infra for=set>empty</a>, return <code>null</code>
2. If <var>candidates</var> contains a single item, return that item
3. If <var>dir</var> is not <code>inside</code>,
	set <var>candidates</var> be the subset of its items
        whose <a>boundary box</a>'s geometric center is within the closed half plane
        whose boundary goes through the geometric center of the <var>starting point</var>
        and is perpendicular to <var>D</var>.
3. For each <var>candidate</var> in <var>candidates</var>,
    find the points <var>P1</var> inside the <a>boundary box</a> of <var>starting point</var>
    and <var>P2</var> inside the <a>boundary box</a> of <var>candidate</var>
    that minimize the <var>distance</var> between these two points,
    when <var>distance</var> is defined as follows:

    <dl>
      <dt><var>distance</var>:
        <dd><var>A</var> + <var>B</var> + <var>C</var> - <var>D</var>

      <dt><var>A</var>:
        <dd>The euclidian distance between <var>P1</var> and <var>P2</var>.

      <dt><var>B</var>:
        <dd>The absolute distance in the <var>dir</var> direction between <var>P1</var> and <var>P2</var>,
            or 0 if <var>dir</var> is <code>inside</code>.

      <dt><var>C</var>:
        <dd>The absolute distance in the direction which is orthogonal to <var>dir</var> between <var>P1</var> and <var>P2</var>,
            or 0 if <var>dir</var> is <code>inside</code>.

      <dt><var>D</var>:
        <dd>The square root of the area of intersection between the <a>boundary boxes</a> of <var>candidate</var> and <var>starting point</var>
    </dl>
4. Return the item of the <var>candidates</var> set that has the smallest <var>distance</var>

</div>

<h2 id=declarative>
Controlling spatial navigation through declarative means</h2>

<h3 id=container>
Creating additional spatnav containers: the 'spatial-navigation-contain' property</h3>

<pre class='propdef'>
Name: spatial-navigation-contain
Value: auto | contain
Initial: auto
Inherited: no
</pre>

<dl dfn-for=spatial-navigation-contain dfn-type=value>
    <dt><dfn>auto</dfn>
    <dd>If the element is either
    the <a>document element</a> of a <a for="/">browsing context</a>'s <a>document</a>
    (not limited to the <a>top-level browsing context</a>)
    or
    a <a>scroll container</a>
    then it establishes a <a>spatial navigation focus container</a>,
    otherwise it does not.

    <dt><dfn>contain</dfn>
    <dd>The element establishes a <a>spatial navigation focus container</a>
</dl>

Issue(16): Add an example

Note: the 'spatial-navigation-contain' property is <a>at-risk</a>.


<h2 class=no-num id=scrolling>Appendix A. Scroll extensions</h2>

This section proposes a few extensions to CSS
that should be integrated in upstream specifications,
but are hosted here until then.

<div algorithm>

Issue(w3c/csswg-drafts#2322): Terminology like this should be in [[CSSOM-VIEW-1]], [[CSS-OVERFLOW-3]], [[CSS-SCROLL-SNAP-1]].

An element <var>e</var> <dfn lt="can be manually scrolled | can be scrolled manually | cannot be scrolled manually | cannot be manually scrolled">can be manually scrolled</dfn> in a given direction <var>d</var> if:
* The <a>principal box</a> established by <var>e</var> is a <a>scroll container</a>, and
* if <var>d</var> is <code>up</code> or <code>down</code>, the computed value of the 'overflow-y' property is not ''overflow/hidden'', and
* if <var>d</var> is <code>left</code> or <code>right</code>, the computed value of the 'overflow-x' property is not ''overflow/hidden'', and
* <var>e</var> is not at the <a>scroll boundary</a> in the direction <var>d</var>
* <var>e</var> is not snapped to the last ''mandatory'' snap point in direction <var>d</var>

</div>

<div algorithm="to directionally scroll an element">

Issue(w3c/csswg-drafts#2323): [[CSSOM-VIEW-1]] should probably define
how to perform a scroll in a given direction without an explicit position.
Until then, we roll our own.

To <dfn lt="directionally scroll an element | directionally scroll the element">directionally scroll an element</dfn> <var>e</var> in direction <var>dir</var>:

1. Let <var>d</var> be a User Agent defined distance.
2. Let <var>x</var> be <var>e</var>’s current scroll position on the x axis.
3. Let <var>y</var> be <var>e</var>’s current scroll position on the y axis.
4. Use the <a spec=CSSOM-VIEW-1>scroll an element</a> algorithm from [[!CSSOM-VIEW-1]] on <var>e</var> to
    * (<var>x</var>, <var>y</var> - <var>d</var>) if <var>dir</var> is <code>up</code>
    * (<var>x</var>, <var>y</var> + <var>d</var>) if <var>dir</var> is <code>down</code>
    * (<var>x</var> - <var>d</var>, <var>y</var>) if <var>dir</var> is <code>left</code>
    * (<var>x</var> + <var>d</var>, <var>y</var>) if <var>dir</var> is <code>right</code>

</div>
