<h1>Keyboard Map</h1>

<pre class="metadata">
Shortname: keyboard-map
Level:
Group: webplatform
Status: ED
TR: http://www.w3.org/TR/keyboard-map/
ED: https://wicg.github.io/keyboard-map/
Repository: wicg/keyboard-map
!Explainer: <a href="https://github.com/wicg/keyboard-map/blob/master/explainer.md">Keyboard Map Explainer</a>
Editor:
    Gary Kacmarcik, Google, garykac@google.com
Abstract:
	This specification defines an API that allows websites to convert from a given
	{{KeyboardEvent/code}} value to a
	valid {{KeyboardEvent/key}} value that can be shown to the user to
	identify the given key.
	The conversion from {{KeyboardEvent/code}} to {{KeyboardEvent/key}} is based on
	the user's currently selected keyboard layout.
	It is intended to be used by web applications that want to treat the keyboard as a
	set of buttons and need to describe those buttons to the user.

Status Text:
	This document is an editor's draft proposed as a First Public Working Draft.
	
</pre>

<pre class="anchors">
urlPrefix: http://www.w3.org/TR/uievents/#; type: dfn; spec: uievents;
	text: dead key
urlPrefix: http://www.w3.org/TR/uievents-key/#; type: dfn; spec: uievents-key;
	text: key attribute value
urlPrefix: http://www.w3.org/TR/uievents-code/#; type: dfn; spec: uievents-code;
	text: writing system keys
urlPrefix: http://www.w3.org/TR/uievents-code/#code-; type: dfn; spec: uievents-code;
	text: Quote
</pre>

<h2 id="introduction">Introduction</h2>

	On a {{KeyboardEvent}}, the {{KeyboardEvent/code}} attribute encodes
	a value that represents the physical location of the key that was pressed. This value
	ignores the current locale (e.g., "en-US"), layout (e.g., "dvorak") and modifier state
	(e.g., "Shift + Control"), so it is ideally suited for applications (like games) that
	want to use the keyboard as a set of generic buttons. The idea behind the
	{{KeyboardEvent/code}} attribute is that it provides a platform-neutral
	[=scancode=] for each physical key.

	The {{KeyboardEvent/key}} attribute, on the other hand, contains the value that is
	generated by the key press, accounting for the locale, layout, and modifier
	keys. Almost every Unicode character is a valid `key` attribute, along with a number
	of special named values (see {{KeyboardEvent}} [=key attribute values=]),
	so there are thousands of possible {{KeyboardEvent/key}} values.

	Because most users have a physical keyboard that matches their locale and layout,
	we can reasonably assume that the {{KeyboardEvent/key}} value is a good stand-in for
	the glyph printed on the keycap. While this does not hold true when the user has
	selected a different layout, in that case the user is well-aware of the mismatch
	between the glyph on the keycap and the character generated by a key press.
	
	The API described in this document provides a simple way of obtaining this basic
	{{KeyboardEvent/code}} to {{KeyboardEvent/key}} mapping.


<h2 id="API">Keyboard Map API</h2>

	<h3 id="navigator-interface">Navigator Interface</h3>

		<pre class="idl" data-highlight="webidl">
		partial interface Navigator : EventTarget {
			[SecureContext, SameObject] readonly attribute Keyboard keyboard;
		};
		</pre>

		<div id="navigator-idl" dfn-for="Navigator">

		<div class="algorithm" data-algorithm="navigator-keyboard">
		<h4 id="h-navigator-keyboard"><dfn>keyboard</dfn></h4>
		The [=keyboard=] attribute must return the {{Navigator}}'s {{Keyboard}} object.
		</div>

		</div><!-- dfn-for Navigator -->

		Note: The [=keyboard=] object is also defined in the 
		<a href="https://w3c.github.io/keyboard-lock/#navigator-interface">Keyboard Lock</a>
		specification. These two definitions will be reconciled once we decide on a final
		home for these specifications.
		
	<h3 id="keyboard-map-interface">Keyboard Interface</h3>

		<pre class="idl" data-highlight="webidl">
		interface KeyboardLayoutMap {
			readonly maplike&lt;DOMString, DOMString>;
		};
		</pre>
		
		<div id="keyboardlayoutmap-idl" dfn-for="KeyboardLayoutMap">

		The {{KeyboardLayoutMap}} is a readonly collection of mappings from
		{{KeyboardEvent/code}} values to {{KeyboardEvent/key}} values.

		</div><!-- dfn-for KeyboardLayoutMap -->
		
	<h3 id="keyboard-interface">Keyboard Interface</h3>

		<pre class="idl" data-highlight="webidl">
		[SecureContext, Exposed=Window] interface Keyboard {
			Promise&lt;KeyboardLayoutMap> getLayoutMap();
		};
		</pre>

		<div id="keyboard-idl" dfn-for="Keyboard">

		<div class="algorithm" data-algorithm="keyboard-getlayoutmap">
		<h4 id="h-keyboard-getlayoutmap"><dfn>getLayoutMap()</dfn></h4>

			When [=getLayoutMap()=] is called, the user agent must
			run the following steps:

			1. Let |p| be a new {{Promise}}.
			
			1. Run the following steps [=in parallel=]:
			
				1. Let |map| be a new {{KeyboardLayoutMap}} that is initially empty.
		
				1. For each value |code| in the "KeyboardEvent code" column of the
					[=Writing System Keys=] table

					1. Let |layout| be the highest priority ASCII-capable keyboard layout,
						or the highest priority keyboard layout if none of the available
						layouts are ASCII-capable.

						Issue: Do we need the ability to select the highest-prio layout
						regardless of whether or not it is ASCII-capable?
						See <a href="https://github.com/wicg/keyboard-map/issues/1">Github Issue #1</a>

					1. If |code| is not a valid key in the |layout|, then continue
				
					1. Let |key| be the {{KeyboardEvent/key}} value that would be generated
						by |layout|
						if the key identified by |code| was pressed with no modifiers.

					1. If |key| is a [=dead key=], then
				
						1. Set |key| to the string formed by a space " " followed by the
							combining character that corresponds to the [=dead key=].
						
					1. Create a map entry |e| from the pair < |code|, |key| >
				
					1. Add |e| to |map|.
			
				1. Resolve |p| with |map|.
			
			1. Return |p|.

			<div></div>
			
			User agents may choose to cache the |map| and return the cached value as
			long as the cache is updated (or invalidated) whenever the keyboard layout
			changes.
			
			<div class="example">
			To show instructions about which key to press in a game:
			<pre>
				navigator.keyboard.getLayoutMap().then(function(map) {
					var keyUp = map.get("KeyW");
					showUserDialog("Press " + keyUp + " to move up.");
				});
			</pre>
			</div>

			<div class="example">
			On a "US International" keyboard where the single-quote (') key is a
			[=dead key=] that adds an acute accent to the following character.
			The keyboard map would contain an entry mapping [=Quote=] (the 
			{{KeyboardEvent/code}} for this key) to the 2 character string
			U+0020 U+0301 (which is a space followed by the Unicode Combining Acute Accent).
			</div>

		</div><!-- getLayoutMap() -->

		</div><!-- dfn-for Keyboard -->

<h2 id="keyboard-events">Keyboard Events</h2>

	<h3 id="layoutchange-event">The <dfn>layoutchange</dfn> Event</h2>
	
		The [=layoutchange=] event fires on the [=keyboard=] object whenever the
		current keyboard layout is changed. A layout change can occur when the user
		selects a new layout, or it may happen automatically when the user performs an
		action (e.g., switching to an application that has a preferred layout).
		
		Note the following:
		
		* Modifying the set of available layouts does not trigger a [=layoutchange=]
			event, unless the modification changes the current layout.
		
		* Adding or removing a physical keyboard does not trigger an event unless
			the system has functionality to change the current layout based on adding or 
			removing a physical keyboard. But note that it is the layout change that
			triggers this event, not the act of adding or removing the physical keyboard.
		
		* The event will be fired whenever the current layout changes, even if the
			highest priority ASCII-capable layout remains the same.

		If the keyboard layout changes while the user agent is not the foreground
		application, then the [=layoutchange=] event MUST fire when the user agent
		regains focus.

		<div class="example">
		To handle this event:
		<pre>
			navigator.keyboard.addEventListener("layoutchange", function() {
				// Update user keyboard map settings
				updateGameControlSettingsPage();
			});
		</pre>
		</div>
	
<h2 id="mobile">Mobile Device Considerations</h2>

	Since this is a keyboard-focused API and mobile devices do not commonly
	have physical keyboards, this API will not typically be present or
	supported on mobile devices.

<h2 id="security">Security Considerations</h2>

	This API returns static data and does not change any system state, so there are
	no special security concerns.
	
<h2 id="privacy">Privacy Considerations</h2>

	As with all APIs that return information about the current device state, there is
	a risk of using this API to create a larger "fingerprint" of the user than if this
	API was not available.
	
	By returning info from the highest priority ASCII-capable keyboard layout instead of
	the active layout, the value of this information for fingerprinting is reduced since
	users are more likely to share the same values.
	
	Note the following situations where this layout information might be used to identify
	individuals:
	
	* Users who use uncommon ASCII layouts (like Dvorak or Colemak)
	
	* Users who use an ASCII layout that doesn't match the default for the region that
		they are in. For example, a user in the US with an active UK or French layout.
	
	Without this API, similar fingerprinting can still be attempted, but it is more
	difficult since it would require the user to interact with the page by typing
	characters and analyze the resulting {{KeyboardEvent}}s.
	
	<h3 id="privacy-mitigations">Privacy Mitigations</h3>
	
	User agents that are concerned about the privacy impact of providing this
	keyboard mapping information can consider the following:
	
	* Having a user prompt to ask for permission whenever a site attempts to use this API.
	
	* Always return a "standard" mapping. Although note that the standard mapping
		would need to vary for different parts of the world. For example, a user agent that
		had a "privacy mode" that always returned a US-QWERTY layout mapping would
		actually be providing more identifying information for users in the UK than
		the actual mapping would (since most users in the UK do not use a US layout).

<h2 id="acknowledgements-contributors">Acknowledgements</h2>

	Thanks to the following people for the discussions that lead
	to the creation of this proposal:

	Joe Downing (Google),
	Masayuki Nakano (Mozilla),
	Julien Wajsberg (Mozilla)

<h2 id="glossary">Glossary</h2>

: <dfn>scancode</dfn>
::	A value that the keyboard hardware assigns to each key so that it can be identified
	uniquely.
	See <a href="https://en.wikipedia.org/wiki/Scancode">https://en.wikipedia.org/wiki/Scancode</a>
	for additional information.
