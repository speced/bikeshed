<pre class="metadata">
Title: Contact Picker API
Shortname: contact-picker
Level: 1
Status: UD
Group: wicg
URL: https://wicg.github.io/contact-api/spec
Editor: Peter Beverloo, Google, beverloo@google.com
Editor: Rayan Kanso, Google, rayankans@google.com
Abstract: An API to give one-off access to a user's contact information with full control over the shared data.
Markup Shorthands: css no, markdown yes
Indent: 2
</pre>

<pre class=link-defaults>
spec:infra; type:dfn; text:list
spec:html; type:dfn; for:/; text:browsing context
spec:html; type:dfn; for:/; text:origin
spec:html; type:dfn; for:/; text:valid e-mail address
</pre>

# Introduction # {#intro}

Contact pickers are frequently seen in various desktop and native mobile applications for a variety
of use cases. This specification defines an API to bring contact pickers to the web, which will
enable new use cases for web apps, such as:
* Bootstrapping a user's social graph for social networks.
* Selecting the recipients of a message within an e-mail application.

The contact picker model was chosen to give full control to users over the shared data, allowing
users to choose exactly which contacts to provide to the website. The contact picker model gives
websites one-off access to a user's contacts, meaning developers have to request access to the
user's contacts every time they need it. This differs from some native contact APIs, but is
necessary for ensuring users' contacts are not accessed without their knowledge and explicit
consent.

## Example ## {#example}

<div class="example">
  Requesting contacts as a result of a user click.

  <pre class="lang-js">
    selectRecipientsButton.addEventListener('click', async () => {
      const contacts = await navigator.contacts.select(['name', 'email'], {multiple: true});

      if (!contacts.length) {
        // Either no contacts were selected in the picker, or the picker could
        // not be launched. Exposure of the API implies expected availability.
        return;
      }

      // Use the names and e-mail addresses in |contacts| to populate the
      // recipients field in the website's UI.
      populateRecipients(contacts);
    });
  </pre>

  In the above example `selectRecipientsButton` is a {{HTMLButtonElement}}, and `populateRecipients`
  is a developer-defined function.
</div>

# Privacy Considerations # {#privacy}

Exposing contact information has a clear privacy impact, in terms of exposing PII of uninvolved
parties. A picker model is enforced so that the user agent can offer a user experience that makes
it clear what information is going to be shared with the website and when.

The following constraints are also enforced:
* The API is only available in a [=top-level browsing context=] which must also be a
  [=secure context=]. These restrictions help ensure that the provided contact information reaches
  its intended recipient.
* A user gesture is needed to initiate the API, to disallow programmatic requests to the user's
  contacts.

# Realms # {#realms}

All platform objects are created in the [=context object=]'s [=relevant Realm=] unless otherwise
specified.

# Infrastructure # {#infrastructure}

The <dfn>contact picker task source</dfn> is a [=task source=].

<div algorithm>
  To <dfn>queue a contact picker task</dfn> on an optional |eventLoop| (an [=event loop=],
  defaulting to the caller's [=context object=]'s [=relevant settings object=]'s
  [=responsible event loop=]) with |steps| (steps), [=queue a task=] on |eventLoop| using the
  [=contact picker task source=] to run |steps|.
</div>

## User contact ## {#infrastructure-user-contact}

A <dfn>user contact</dfn> consists of:
<div dfn-for="user contact">

* <dfn>names</dfn>, a [=list=] of {{DOMString}}s, initially empty, each [=list/item=] representing
  a unique name corresponding to the user.
* <dfn>emails</dfn>, a [=list=] of {{DOMString}}s, initially empty, each [=list/item=] representing
  a unique [=valid e-mail address=] of the user.
* <dfn>numbers</dfn>, a [=list=] of {{DOMString}}s, initially empty, each [=list/item=]
  representing a unique phone number of the user.

Note: The lists can be of different sizes, and entries with the same index don't need to correspond
to each other.

A [=user contact=] contains data relating to a single user.

</div>

# API Description # {#api}

## Extensions to {{Navigator}} ## {#extensions-to-navigator}

<script type="idl">
[Exposed=Window]
partial interface Navigator {
  [SecureContext, SameObject] readonly attribute ContactsManager contacts;
};
</script>

<div dfn-for="Navigator">
A {{Navigator}} has a <dfn>contacts manager</dfn> (a {{ContactsManager}}), initially a new
{{ContactsManager}}.

The <dfn attribute>contacts</dfn> attribute's getter must return the [=context object=]'s
[=Navigator/contacts manager=].
</div>

The [=browsing context=] has a <dfn>contact picker is showing flag</dfn>, initially unset.

## {{ContactsManager}} ## {#contacts-manager}

<script type="idl">
dictionary ContactInfo {
    sequence<DOMString> name;
    sequence<DOMString> email;
    sequence<DOMString> tel;
};

enum ContactProperty { "email", "name", "tel" };

dictionary ContactsSelectOptions {
    boolean multiple = false;
};

[Exposed=(Window,SecureContext)]
interface ContactsManager {
    Promise<sequence<ContactInfo>> select(sequence<ContactProperty> properties, optional ContactsSelectOptions options);
};
</script>

<div dfn-for="ContactsManager">

### {{ContactsManager/select()}} ### {#contacts-manager-select}

<div algorithm>
  The <dfn method>select(|properties|, |options|)</dfn> method, when invoked, runs these steps:

  1. Let |relevantBrowsingContext| be the [=context object=]'s [=relevant settings object=]'s
     [=environment settings object/responsible browsing context=].
  1. If |relevantBrowsingContext| is not a [=top-level browsing context=], then return
     [=a promise rejected with=] an {{InvalidStateError}} {{DOMException}}.
  1. If the algorithm is not [=triggered by user activation=] then return
     [=a promise rejected with=] a {{SecurityError}} {{DOMException}}.
  1. If |relevantBrowsingContext|'s [=contact picker is showing flag=] is set then return
     [=a promise rejected with=] an {{InvalidStateError}} {{DOMException}}.
  1. If |properties| is [=list/empty=], then return [=a promise rejected with=] a {{TypeError}}.
  1. Set |relevantBrowsingContext|'s [=contact picker is showing flag=].
  1. Let |promise| be [=a new promise=].
  1. Run the following steps [=in parallel=]:
    1. Let |selectedContacts| be be the result of [=launching a contact picker=] with |options|'
       `multiple` member and |properties|. If this fails, then:
      1. Return [=a promise rejected with=] an {{InvalidStateError}} {{DOMException}}.
      1. Unset |relevantBrowsingContext|'s [=contact picker is showing flag=].
      1. Abort thise steps.
    1. Unset |relevantBrowsingContext|'s [=contact picker is showing flag=].
    1. [=Queue a contact picker task=] to run these steps:
      1. Let |contacts| be an empty [=list=].
      1. [=list/For each=] |selectedContact| in |selectedContacts|:
        1. Let |contact| be a new {{ContactInfo}} with:
          : {{ContactInfo/name}}
          :: |selectedContact|'s [=user contact/names=] if |properties| [=list/contains=]
             "`name`", otherwise an empty [=list=].
          : {{ContactInfo/email}}
          :: |selectedContact|'s [=user contact/emails=] if |properties| [=list/contains=]
             "`email`", otherwise an empty [=list=].
          : {{ContactInfo/tel}}
          :: |selectedContact|'s [=user contact/numbers=] if |properties| [=list/contains=]
             "`tel`", otherwise an empty [=list=].
        1. [=list/Append=] |contact| to |contacts|.
      1. Resolve |promise| with |contacts|.
  1. Return |promise|.
</div>

# Contact Picker # {#contact-picker}

<div algorithm>
  To <dfn lt="launching a contact picker">launch</dfn> a contact picker with |allowMultiple| (a
  [=boolean=]), and |properties| (a [=list=] of {{DOMString}}s), the user agent MUST present a user
  interface that follows these rules:

  * If presenting a user interface fails or accessing the source of the contact information fails,
    then return failure.   
  * The UI MUST prominently display the [=browsing context=]'s [=origin=].
  * The UI MUST make it clear which `properties` of the contact will be shared.

    NOTE: This information is derived from |properties|.

  * The UI MUST provide a way to select individual contacts. If |allowMultiple| is false, only one
    contact should be pickable.
  * The UI MUST provide an option to cancel/return without sharing any contacts, in which case
    remove the UI and return an empty [=list=].
  * The UI MUST provide an a way for users to indicate that they are done selecting, in which case
    remove the UI and return a [=list=] of the selected contacts as [=user contacts=].
</div>

Note: It is up to the user agent to choose the source of the contact information displayed in the
picker.
