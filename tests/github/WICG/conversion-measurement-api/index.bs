<pre class='metadata'>
Title: Conversion Measurement
Shortname: conversion-measurement
Level: 1
Status: CG-DRAFT
Group: wicg
Repository: WICG/conversion-measurement-api
URL: https://wicg.github.io/conversion-measurement-api
Editor: Charlie Harrison, Google Inc. https://google.com, csharrison@chromium.org
Abstract: A new API to measure and attribute cross-site conversions.

Markup Shorthands: markdown on
Complain About: accidental-2119 on, missing-example-ids on
Assume Explicit For: on
</pre>
<pre class=link-defaults>
spec:html; type:element; text:a
</pre>

Introduction {#intro}
=====================

<em>This section is non-normative</em>

This specification describes how web browsers can provide a mechanism to the
web that allows measuring and attributing conversions (e.g. purchases) to ads
a user interacted with on another site. This mechanism should remove one need
for cross site identifiers like third party cookies.

## Overview ## {#overview}

An anchor tag with <{a/impressiondata}> and <{a/conversiondestination}> attributes is
classified as an <dfn export>impression tag</dfn>. When impression tags are clicked, and the
resulting navigation commits in a document matching the <{a/conversiondestination}>,
then the impression is stored in UA storage.

At a later point, the <{a/conversiondestination}> site may fire an HTTP request to
trigger conversion registration, which matches up with any previously
stored impressions. If matching impressions exist, they are scheduled to be
reported at a later time, possibly multiple days in the future.

Reports are sent to reporting endpoints that are configured in impression tags
and conversion registration requests.

# Fetch monkeypatches # {#fetch-monkeypatches}

Issue: Patch into fetch for cancelling requests redirected to the .well-known
conversion domain.

# HTML monkeypatches # {#html-monkeypatches}

Rewrite the anchor element to accept the following attributes:

<pre class="idl">
partial interface HTMLAnchorElement {
    [CEReactions, Reflect] attribute DOMString conversiondestination;
    [CEReactions, Reflect] attribute DOMString impressiondata;
    [CEReactions, Reflect] attribute DOMString reportingorigin;
    [CEReactions, Reflect] attribute unsigned long long impressionexpiry;
};
</pre>

The <dfn for="a" element-attr>conversiondestination</dfn> is the
declared destination [=scheme-and-registrable-domain=] of the anchor for
purposes of conversion measurement

The <dfn for="a" element-attr>impressiondata</dfn> is a string
containing information about the `impression tag` and will be supplied in the
`conversion report`.

The <dfn for="a" element-attr>reportingorigin</dfn> declares the
intended [=origin=] to send the `conversion report` for this impression.

The <dfn for="a" element-attr>impressionexpiry</dfn> is the amount
of time in milliseconds the impression should be considered for conversion
measurement and reporting reporting.


Issue: Need monkey patches passing impression data in navigation, and a mechanism
for validating the resulting document matches the conversiondestination.

# Structures # {#structures}

<h3 dfn-type=dfn>Impression</h3>

An impression is a [=struct=] with the following items:

<dl dfn-for="impression">
: <dfn>impression source</dfn>
:: An [=url/origin=].
: <dfn>impression data</dfn>
:: A [=string=].
: <dfn>conversion destination</dfn>
:: An [=url/origin=].
: <dfn>reporting endpoint</dfn>
:: An [=url/origin=].
: <dfn>expiry</dfn>
:: A point in time.
: <dfn>impression time</dfn>
:: A point in time.

</dl>

<h3 dfn-type=dfn>Conversion</h3>

A conversion is a [=struct=] with the following items:

<dl dfn-for="conversion">
: <dfn>conversion source</dfn>
:: An [=url/origin=].
: <dfn>conversion data</dfn>
:: A [=string=].
: <dfn>conversion time</dfn>
:: A point in time.

</dl>

<h3 dfn-type=dfn>Conversion report</h3>

A conversion report is a [=struct=] with the following items:

<dl dfn-for="conversion report">
: <dfn>impression data</dfn>
:: A [=string=].
: <dfn>conversion data</dfn>
:: A [=string=].
: <dfn>attribution credit</dfn>
:: An integer in the range [0, 100].

</dl>

# Algorithms # {#algorithms}

<h3 algorithm id="parsing-conversion-destination">Parsing a conversion destination</h3>

To <dfn>parse a conversion destination</dfn> from an <{a}> tag |anchor|,
1. Let |url| be the result of running the [=URL parser=] on the value of
    the |anchor|'s <{a/conversiondestination}>.
1. Return the result of [=obtain a site|obtaining a site=] from |url|'s
    [=url/origin=].

<h3 algorithm id="creating-impression">Activating an impression</h3>

To <dfn>activate an impression</dfn> from an <{a}> tag |anchor|,
1. Let |currentTime| be the current time.
1. Let |impression| be a new [=impression=] struct whose items are:

    : [=impression/impression source=]
    :: |anchor|'s [=relevant settings object=]'s [=environment/top-level origin=].
    : [=impression/impression data=]
    :: The result of applying [=parsing conversion data=] to |anchor|'s
        <{a/impressiondata}> attribute.
    : [=impression/conversion destination=]
    :: The result of running [=parse a conversion destination=] on |anchor|.
    : [=impression/reporting endpoint=]
    :: The [=url/origin=] of the result of running the [=URL parser=] on the value
        of |anchor|'s <{a/reportingorigin}> attribute.
    : [=impression/expiry=]
    :: |currentTime| +  <{a/impressionexpiry}> milliseconds.
    : [=impression/impression time=]
    :: |currentTime|.

1. Issue: Need to spec how to store the impression.

<h3 algorithm id="creating-a-conversion">Creating a conversion</h3>

To <dfn>create a conversion</dfn> from a [=url=] |url| and an
[=environment settings object=] |environment|, return a new [=conversion=]
struct with the items:

    : [=conversion/conversion source=]
    :: |environment|'s [=environment/top-level origin=].
    : [=conversion/conversion data=]
    :: The result of applying [=parsing conversion data=] to the value associated with the
        `"conversion-data"` field of |url|'s [=url/query=].
    : [=conversion/conversion time=]
    :: The current time.

Issue: Formalize how to parse the query similar to URLSearchParams.

<h3 algorithm id="register-conversion">Register a conversion</h3>

To <dfn>register a conversion</dfn> from a [=request=] |request|, run the following steps:

1. If |request|'s [=request/current url's=] [=url/path=] is not `.well-known/register-conversion`,
    return.
1. If |request|'s [=request/redirect count=] is less than 1, return.
1. Let |previousUrl| be the second to last [=URL=] in |request|'s
    [=request/URL list=].
1. If |request|'s [=request/current url's=] [=url/origin=] is not [=same origin=] with
    |previousUrl|'s [=url/origin=], return.
1. Let |conversionToRegister| be the result of applying [=create a conversion=] from the
    request's [=request/current url=].

    Note: the restriction to require a redirect is needed to ensure that the
    request's origin is aware and in control of the conversion registration.

1. Issue: Need to spec how to store the conversion.

<h3 algorithm id="parsing-data">Parsing data fields</h3>

This section defines how to parse and extract both
[=impression/impression data=] and [=conversion/conversion data=] from a
[=string=] |input| and a unsigned long long |maxData|.

<dfn>Parsing conversion data</dfn> from |input| with |maxData| returns the result of
the following steps:

1. Let |decodedInput| be the result of decoding |input| as a base-16 integer.
1. Let |clampedDecodedInput| be the remainder when dividing |decodedInput| by
    |maxData|.
1. Let |encodedOutput| be the result of encoding |clampedDecodedInput| as a
    base 16 encoding.
1. Return |encodedOutput|.

<h3 algorithm id="delivery-time">Establishing report delivery time</h3>
The <dfn>report delivery time</dfn> for an [=impression=] |impression| and a
[=conversion/conversion time=] |conversionTime| is the result of the following steps:
1. Let |conversionTimeAfterImpression| be the difference between the
    [=conversion/conversion time=] and [=impression/impression time=].
1. Let |expiryDelta| be the difference between the [=impression/expiry=] and
    the [=impression/impression time=]

    Note: |conversionTimeAfterImpression| should always be less than
    |expiryDelta| because it should not be possible to convert an expired
    impression.

1. If:
    <dl class="switch">
    <dt>|conversionTimeAfterImpression| <= (2 days - 1 hour)</dt>
    <dd>return [=impression/impression time=] + 2 days.</dd>

    <dt> |expiryDelta| > (2 days - 1 hour)
        - and |expiryDelta| < (7 days - 1 hour)
        - and |conversionTimeAfterImpression| <= |expiryDelta|
    </dt>
    <dd>return the [=impression/expiry=] + 1 hour.</dd>

    <dt>|conversionTimeAfterImpression| <= (7 days - 1 hour)</dt>
    <dd>return [=impression/impression time=] + 7 days</dd>

    <dt>Otherwise</dt>
    <dd>return the [=impression/expiry=] + 1 hour.</dd>
    </dl>

<h3 algorithm id="queuing-report">Queuing a conversion report</h3>
TODO

<h3 algorithm id="attribution-credit">Establishing attribution credit</h3>
TODO

# Security consideration # {#security-considerations}
TODO

# Privacy consideration # {#privacy-considerations}
TODO
