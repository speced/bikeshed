<pre class="metadata">
Title: Geolocation Sensor
Level: none
Status: ED
ED: https://wicg.github.io/geolocation-sensor/
Shortname: geolocation-sensor
Editor: Anssi Kostiainen 41974, Intel Corporation, https://intel.com/
Group: wicg
Abstract:
  This specification defines the {{GeolocationSensor}} interface for obtaining
  [=geolocation=] of the hosting device.
!Participate: <a href="https://github.com/wicg/geolocation-sensor">GitHub</a> (<a href="https://github.com/WICG/geolocation-sensor/issues/new">new issue</a>, <a href="https://github.com/wicg/geolocation-sensor/issues">open issues</a>)
Indent: 2
Markup Shorthands: markdown on
Inline Github Issues: true
!Tests: <a href="https://github.com/w3c/web-platform-tests/tree/master/geolocation-sensor">web-platform-tests</a>
!Polyfills: <a href="https://github.com/kenchris/sensor-polyfills/blob/master/src/geolocation-sensor.js">geolocation-sensor.js</a><br><a href="https://github.com/w3c/sensors/blob/master/polyfills/geolocation.js">geolocation.js</a>
Boilerplate: omit issues-index, omit conformance, omit feedback-header
Ignored Vars: p, geo, key
Default Biblio Status: current
Note class: note
</pre>
<pre class="anchors">
urlPrefix: https://w3c.github.io/sensors; spec: GENERIC-SENSOR
  type: dfn
    text: high-level
    text: sensor
    text: latest reading
    text: default sensor
    text: construct a sensor object; url: construct-sensor-object
    text: initialize a sensor object; url: initialize-a-sensor-object
    text: sensor type
    text: security and privacy; url: security-and-privacy
    text: extensible; url: extensibility
    text: check sensor policy-controlled features; url: check-sensor-policy-controlled-features
urlPrefix: https://dom.spec.whatwg.org; spec: DOM
  type: dfn
    text: add the following abort steps; url: abortsignal-add
    text: aborted flag; url: abortsignal-aborted-flag
urlPrefix: http://w3c.github.io/hr-time/; spec: HR-TIME-2
  type: interface
    text: DOMHighResTimeStamp; url: dom-domhighrestimestamp
</pre>
</pre>
<pre class="biblio">
{
  "WGS84": {
    "authors": [
      "National Imagery and Mapping Agency"
    ],
    "href": "http://earth-info.nga.mil/GandG/publications/tr8350.2/wgs84fin.pdf",
    "title": "Department of Defence World Geodetic System 1984",
    "status": "Technical Report, Third Edition",
    "publisher": "National Imagery and Mapping Agency"
  }
}
</pre>

Introduction {#intro}
============

The {{GeolocationSensor}} API extends the {{Sensor}} interface [[GENERIC-SENSOR]] to provide
information about the [=geolocation=] of the hosting device.

The feature set of the {{GeolocationSensor}} is similar to that of the Geolocation API
[[GEOLOCATION-API]], but it is surfaced through a modern API that is consistent across
<a href="https://www.w3.org/2009/dap/#sensors">contemporary sensor APIs</a>, improves
<a>security and privacy</a>, and is <a>extensible</a>. The API aims to be
<a href="https://github.com/kenchris/sensor-polyfills/blob/master/src/geolocation-sensor.js">polyfillable</a>
(<a href="https://kenchris.github.io/sensor-polyfills/run-geolocation.html">example</a>)
on top of the existing Geolocation API.

Examples {#examples}
========

<p>
  Get a new geolocation reading every second:
</p>
<div class="example">
  <pre highlight="js">
  let geo = new GeolocationSensor({ frequency: 1 });
  geo.start();

  geo.onreading = () => console.log(\`lat: ${geo.latitude}, long: ${geo.longitude}\`);

  geo.onerror = event => console.error(event.error.name, event.error.message);
  </pre>
</div>

<p>
  Get a one-shot geolocation reading:
</p>
<div class="example">
  <pre highlight="js">
  GeolocationSensor.read()
    .then(geo => console.log(\`lat: ${geo.latitude}, long: ${geo.longitude}\`))
    .catch(error => console.error(error.name));
  </pre>
</div>

Security and Privacy Considerations {#security-and-privacy}
===================================

Note: Investigate any geolocation-specific security and privacy considerations that are not
mitigated by the Generic Sensor API [[!GENERIC-SENSOR]], and define geolocation-specific
mitigations.

Model {#model}
=====

The term <dfn>geolocation</dfn> refers to the real-world geographic location of the
hosting device represented in geographic coordinates [[!WGS84]].

Note: An implementation can use multiple location information sources to acquire
<a>geolocation</a> information, and this specification is agnostic with respect
to those sources.

The <dfn>Geolocation Sensor</dfn> <a>sensor type</a>'s associated {{Sensor}} subclass is the
{{GeolocationSensor}} class.

The <a>Geolocation Sensor</a> has an associated {{PermissionName}} which is
<a for="PermissionName" enum-value>"geolocation"</a>.

A <dfn>latest geolocation reading</dfn> is a [=latest reading=] for a {{Sensor}} of
<a>Geolocation Sensor</a> <a>sensor type</a>. It includes [=map/entries=] whose [=map/keys=]
are "latitude", "longitude", "altitude", "accuracy", "altitudeAccuracy", "heading", "speed"
and whose [=map/values=] contain device's [=geolocation=].

Note: Consider adding a visual of the standard coordinate system for the Earth.

API {#api}
===

The GeolocationSensor Interface {#geolocationsensor-interface}
-------------------------------

<pre class="idl">
  [Constructor(optional GeolocationSensorOptions options), SecureContext, Exposed=Window]
  interface GeolocationSensor : Sensor {
    static Promise&lt;GeolocationSensorReading&gt; read(optional ReadOptions readOptions);
    readonly attribute unrestricted double? latitude;
    readonly attribute unrestricted double? longitude;
    readonly attribute unrestricted double? altitude;
    readonly attribute unrestricted double? accuracy;
    readonly attribute unrestricted double? altitudeAccuracy;
    readonly attribute unrestricted double? heading;
    readonly attribute unrestricted double? speed;
  };

  dictionary GeolocationSensorOptions : SensorOptions {
    // placeholder for GeolocationSensor-specific options
  };

  dictionary ReadOptions : GeolocationSensorOptions {
    AbortSignal? signal;
  };

  dictionary GeolocationSensorReading {
    DOMHighResTimeStamp? timestamp;
    double? latitude;
    double? longitude;
    double? altitude;
    double? accuracy;
    double? altitudeAccuracy;
    double? heading;
    double? speed;
  };

</pre>

<div class="note">
Normative changes to the <code>
<a href="https://dev.w3.org/geo/api/spec-source.html#coordinates_interface">
Coordinates</a></code> interface of the Geolocation API are the following:
<ul>
  <li>Use <a href="https://heycam.github.io/webidl/#idl-unrestricted-double">
  unrestricted double</a> to not throw TypeError on NaN, +Infinity or −Infinity.
  (Geolocation API defines NaN as a valid value for heading, yet uses double as its type.)
  <li>Use <a href="https://heycam.github.io/webidl/#dfn-nullable-type">nullable</a> to allow
  all attributes to default to null. (Geolocation API does not provide synchronous means to
  access these attributes, thus latitude, longitude and altitude are not nullable and "must be
  supported by all implementations".)
</ul>
</div>

To construct a {{GeolocationSensor}} object the user agent must invoke the
[=construct a geolocation sensor object=] abstract operation.

### GeolocationSensor.read() ### {#geolocationsensor-read}

The {{GeolocationSensor/read()}} method, when called, must run the following algorithm:

<div algorithm="read">
<!-- https://dom.spec.whatwg.org/#abortcontroller-api-integration -->

    : input
    :: |options|, a {{ReadOptions}} object.
    : output
    :: |p|, a promise.

    1. Let |p| be a new promise.
    1. Let |options| be the first argument.
    1. Let |signal| be the |options|' dictionary member of the same name if present, or null otherwise.
    1. If |signal|'s <a>aborted flag</a> is set, then reject |p| with an "{{AbortError!!exception}}" {{DOMException}} and return |p|.
    1. Let |geo| be the result of invoking <a>construct a Geolocation Sensor object</a> with |options|. If this throws a {{DOMException}}, catch it, reject |p| with that {{DOMException}}, and return |p|.
    1. Invoke |geo|.{{Sensor/start()}}.
    1. If |signal| is not null, then <a>add the following abort steps</a> to |signal|:
      1. Invoke |geo|.{{Sensor/stop()}}.
      1. Reject |p| with an "{{AbortError!!exception}}" {{DOMException}} and abort these steps.
    1. Run these steps <a>in parallel</a>:
      1. If <a>notify error</a> is invoked with |geo|, invoke |geo|.{{Sensor/stop()}}, and reject |p| with the {{DOMException}} passed as input to <a>notify error</a>.
      1. If <a>notify new reading</a> is invoked with |geo|, then <a>resolve geolocation promise</a> with |geo| and |p|.
    1. Return |p|.
</div>

<p class="note">
Implementations can reuse the same promise for multiple concurrent calls within the same browsing context if the arguments passed to {{read()}} are the same.
</p>

To <dfn>resolve geolocation promise</dfn> means to run the following steps:
  1. Let |reading| be a {{GeolocationSensorReading}}.
  1. [=set/For each=] |key| → |value| of <a>latest geolocation reading</a>:
    1. [=map/Set=] |reading|[key] to |value|.
  1. Invoke |geo|.{{Sensor/stop()}}.
  1. Resolve |p| with |reading|.


### GeolocationSensor.latitude ### {#geolocationsensor-latitude}

The {{GeolocationSensor/latitude!!attribute}} attribute of the {{GeolocationSensor}} interface
returns the result of invoking [=get value from latest reading=] with `this` and "latitude" as
arguments. It represents the latitude coordinate of the [=geolocation=] in decimal degrees
[[!WGS84]].

### GeolocationSensor.longitude ### {#geolocationsensor-longitude}

The {{GeolocationSensor/longitude!!attribute}} attribute of the {{GeolocationSensor}} interface
returns the result of invoking [=get value from latest reading=] with `this` and "longitude" as
arguments. It represents the longitude coordinate of the [=geolocation=] in decimal degrees
[[!WGS84]].

### GeolocationSensor.altitude ### {#geolocationsensor-altitude}

The {{GeolocationSensor/altitude!!attribute}} attribute of the {{GeolocationSensor}} interface
returns the result of invoking [=get value from latest reading=] with `this` and "altitude" as
arguments. It represents the [=geolocation=] in meters above the WGS 84 ellipsoid [[!WGS84]].

### GeolocationSensor.accuracy ### {#geolocationsensor-accuracy}

The {{GeolocationSensor/accuracy!!attribute}} attribute of the {{GeolocationSensor}} interface
returns the result of invoking [=get value from latest reading=] with `this` and "accuracy" as
arguments. It represents the accuracy of the [=latest reading=]["latitude"] value and
[=latest reading=]["longitude"] value in meters with a 95% confidence level.

If the [=latest reading=]["latitude"] value is null or [=latest reading=]["longitude"] value is
null, it must return null.

### GeolocationSensor.altitudeAccuracy ### {#geolocationsensor-altitudeaccuracy}

The {{GeolocationSensor/altitudeAccuracy!!attribute}} attribute of the {{GeolocationSensor}}
interface returns the result of invoking [=get value from latest reading=] with `this` and
"altitudeAccuracy" as arguments. It represents the accuracy of the
[=latest reading=]["altitude"] value in meters with a 95% confidence level.

If the [=latest reading=]["altitude"] value is null, it must return null.

### GeolocationSensor.heading ### {#geolocationsensor-heading}

The {{GeolocationSensor/heading!!attribute}} attribute of the {{GeolocationSensor}} interface
returns the result of invoking [=get value from latest reading=] with `this` and "heading" as
arguments. It represents the direction of travel in degrees counting clockwise relative to the
true north in the range 0 ≤ heading ≤ 360.

### GeolocationSensor.speed ### {#geolocationsensor-speed}

The {{GeolocationSensor/speed!!attribute}} attribute of the {{GeolocationSensor}} interface
returns the result of invoking [=get value from latest reading=] with `this` and "speed" as
arguments. It represents the magnitude of the horizontal component of the velocity in meters
per second.

Abstract Operations {#abstract-operations}
===================

<h3 dfn export>Construct a geolocation sensor object</h3>

<div algorithm="construct a geolocation sensor object">

    : input
    :: |options|, a {{GeolocationSensorOptions}} object.
    : output
    :: A {{GeolocationSensor}} object.

    1.  Let |allowed| be the result of invoking [=check sensor policy-controlled features=]
        with {{GeolocationSensor}}.
    1.  If |allowed| is false, then:
        1.  [=Throw=] a {{SecurityError}} {{DOMException}}.
    1.  Let |geo| be the new {{GeolocationSensor}} object.
    1.  Invoke [=initialize a sensor object=] with |geo| and |options|.
    1.  Return |geo|.
</div>

Acknowledgements {#acknowledgements}
================

Tobie Langel for the work on Generic Sensor API and the geolocation.js polyfill.