<pre class="metadata">
Title: User-Agent Client Hints
Status: CG-DRAFT
Group: WICG
ED: https://wicg.github.io/ua-client-hints/
Repository: wicg/ua-client-hints
Shortname: ua-client-hints
Level: None
Editor: Mike Taylor 90704, Google LLC, miketaylr@google.com
Editor: Yoav Weiss 58673, Google LLC, yoav@yoav.ws
Former Editor: Mike West 56384, Google LLC, mkwst@google.com
Abstract:
    This document defines a set of Client Hints that aim to provide developers with the ability to
    perform agent-based content negotiation when necessary, while avoiding the historical baggage and
    passive fingerprinting surface exposed by the venerable `User-Agent` header.
Indent: 4
Default Biblio Status: current
Markup Shorthands: css off, markdown on
Boilerplate: omit conformance, omit feedback-header
!Participate: <a href="https://github.com/WICG/ua-client-hints/issues/new">File an issue</a> (<a href="https://github.com/WICG/ua-client-hints/issues">open issues</a>)
</pre>
<pre class="link-defaults">
spec:fetch; type:dfn; for:/; text:request
spec:webidl; type:dfn; text:resolve
spec:infra; type:dfn; text:user agent
spec:infra; type:dfn; for:/; text:list
</pre>
<pre class="anchors">
urlPrefix: https://tools.ietf.org/html/rfc8941; spec: rfc8941
    type: dfn
        text: structured header; url: #
    for: structured header
        type: dfn
            text: token; url: #section-3.3.4
            text: boolean; url: #section-3.3.6
            text: string; url: #section-3.3.3
            text: list; url: #section-3.1
            text: serializing a list; url: #section-4.1.1
    type: abstract-op
        text: serialize Structured Header; url: #section-4.1
urlPrefix: https://wicg.github.io/client-hints-infrastructure/
    type: dfn
        text: low entropy hint table; url: #low-entropy-hint-table
        text: client hints token; url: #client-hints-token
        text: client hints fetch integration; url: #fetch
        text: policy controlled client hints features; url: #policy-controlled-client-hints-features
        text: append client hints to request; url: #abstract-opdef-append-client-hints-to-request
urlPrefix: https://tc39.es/ecma262/
    type: dfn
        text: current realm; url: #current-realm
</pre>
<pre class="biblio">
{
  "FacebookYearClass": {
    "href": "https://engineering.fb.com/android/year-class-a-classification-system-for-android/",
    "title": "Year class: A classification system for Android",
    "authors": [ "Chris Marra", "Daniel Weaver" ]
  },
  "I-D.ietf-tls-grease": {
    "href": "https://tools.ietf.org/html/draft-ietf-tls-grease",
    "title": "Applying GREASE to TLS Extensibility",
    "authors": [ "David Benjamin" ],
    "status": "ID",
    "publisher": "IETF"
  },
  "Janc2014": {
    "href": "https://dev.chromium.org/Home/chromium-security/client-identification-mechanisms#TOC-Browser-level-fingerprints",
    "title": "Technical analysis of client identification mechanisms",
    "authors": [ "Artur Janc", "Michal Zalweski" ]
  },
  "Rossi2015": {
    "href": "https://channel9.msdn.com/Events/WebPlatformSummit/2015/The-Microsoft-Edge-Rendering-Engine-that-makes-the-Web-just-work#time=9m45s",
    "title": "The Microsoft Edge Rendering Engine that makes the Web just work",
    "author": [ "Jacob Rossi" ]
  }
}
</pre>

Introduction {#intro}
============

Today, user agents generally identify themselves to servers by sending a `User-Agent` HTTP request
header field along with each request (defined in Section 5.5.3 of [[RFC7231]]). Ideally, this header
would give servers the ability to perform content negotiation, sending down exactly those bits that
best represent the requested resource in a given user agent, optimizing both bandwidth and user
experience. In practice, however, this header's value exposes far more information about the user's
device than seems appropriate as a default, on the one hand, and intentionally obscures the true
user agent in order to bypass misguided server-side heuristics, on the other.

For example, a recent version of Chrome on iOS identifies itself as:

``` http
  User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X)
              AppleWebKit/605.1.15 (KHTML, like Gecko)
              CriOS/69.0.3497.105 Mobile/15E148 Safari/605.1
```

While a recent version of Edge identifies itself as:

``` http
  User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64)
              AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.2704.79
              Safari/537.36 Edge/18.014
```

There's quite a bit of information packed into those strings (along with a fair number of lies).
Version numbers, platform details, model information, etc. are all broadcast along with every
request, and form the basis for fingerprinting schemes of all sorts. Individual vendors have taken
stabs at altering their user agent strings, and have run into a few categories of feedback from
developers that have stymied historical approaches:

1.  Brand and version information (e.g. "Chrome 69") allows websites to work around known bugs in
    specific releases that aren't otherwise detectable. For example, implementations of Content
    Security Policy have varied wildly between vendors, and it's difficult to know what policy to
    send in an HTTP response without knowing what browser is responsible for its parsing and
    execution.

2.  Developers will often negotiate what content to send based on the user agent and platform. Some
    application frameworks, for instance, will style an application on iOS differently from the same
    application on Android in order to match each platform's aesthetic and design patterns.

3.  Similarly to #1, OS revisions and architecture can be responsible for specific bugs which can
    be worked around in website's code, and narrowly useful for things like selecting appropriate
    executables for download (32 vs 64 bit, ARM vs Intel, etc).

4.  Sophisticated developers use model/make to tailor their sites to the capabilities of the
    device (e.g. [[FacebookYearClass]]) and to pinpoint performance bugs and regressions which
    sometimes are specific to model/make.

This document proposes a mechanism which might allow user agents to be a bit more aggressive about
removing entropy from the `User-Agent` string generally by giving servers that really need some
specific details about the client the ability to opt-into receiving them. It introduces four new
Client Hints ([[!RFC8942]]) that can provide the client's branding and version
information, the underlying operating system's branding and major version, as well as details about
the underlying device. Rather than broadcasting this data to everyone, all the time, user agents can
make reasonable decisions about how to respond to given sites' requests for more granular data,
reducing the passive fingerprinting surface area exposed to the network.

Examples {#examples}
--------

A user navigates to `https://example.com/` for the first time using the latest version of the "Examplary Browser". Their
user agent sends the following header along with the HTTP request:

``` http
  Sec-CH-UA: "Examplary Browser"; v="73", ";Not?A.Brand"; v="27"
```

The server is interested in rendering content consistent with the user's underlying platform, and
asks for a little more information by sending an `Accept-CH` header (Section 2.2.1 of
[[!RFC8942]]) along with the initial response:

``` http
  Accept-CH: Sec-CH-UA-Full-Version, Sec-CH-UA-Platform
```

In response, the user agent includes more detailed version information, as well as information about
the underlying platform in the next request:

``` http
  Sec-CH-UA: "Examplary Browser"; v="73", ";Not?A.Brand"; v="27"
  Sec-CH-UA-Full-Version: "73.3R8.2H.1"
  Sec-CH-UA-Platform: "Windows"
```

Infrastructure {#infrastructure}
==============

This specification depends on Client Hints Infrastructure, HTTP Client Hints, and the Infra
Standard.
[[!CLIENT-HINTS-INFRASTRUCTURE]]
[[!RFC8942]]
[[!INFRA]]

Some of the terms used in this specification are defined in <cite>Structured Field Values for
HTTP</cite>.
[[!RFC8941]]

User Agent Hints {#http-ua-hints}
================

The following sections define a number of HTTP request header fields that expose detail about a
given [=user agent=], which servers can opt-into receiving via the Client Hints infrastructure
defined in [[!RFC8942]]. The definitions below assume that each [=user agent=]
has defined a number of properties for itself:

*   <dfn for="user agent" export>brand</dfn> - The [=user agent=]'s commercial name (for example:
      "cURL", "Edge", "The World's Best Web Browser")
*   <dfn for="user agent" export>significant version</dfn> - The [=user agent=]'s marketing version,
      which includes distinguishable web-exposed features (for example: "72", "3", or "12.1")
*   <dfn for="user agent" export>full version</dfn> - The [=user agent=]'s build version (for
      example: "72.0.3245.12", "3.14159", or "297.70E04154A")
*   <dfn for="user agent" export>platform brand</dfn> - The [=user agent=]'s operating system's
      commercial name. (for example: "Windows", "iOS", or "AmazingOS")
*   <dfn for="user agent" export>platform version</dfn> - The [=user agent=]'s operating system's
      version. (for example: "NT 6.0", "15", or "17G")
*   <dfn for="user agent" export>platform architecture</dfn> - The [=user agent=]'s underlying CPU
      architecture (for example: "ARM", or "x86")
*   <dfn for="user agent" export>model</dfn> - The [=user agent=]'s device model (for example: "",
      or "Pixel 2 XL")
*   <dfn for="user agent" export>mobileness</dfn> - A boolean indicating if the [=user agent=]'s
      device is a mobile device. (for example: ?0 or ?1)


[=User agents=] SHOULD keep these strings short and to the point, but servers MUST accept arbitrary
values for each, as they are all values constructed at the [=user agent=]'s whim.

[=User agents=] MUST map higher-entropy [=platform architecture=] values to the following buckets:

* x86 CPU architectures => "x86"
* ARM CPU architectures => "arm"

Other CPU architectures could be mapped into one of these values in case that makes sense, or be
mapped to the empty string.

ISSUE 105: There might be use-cases for higher-entropy, more specific CPU architectures (e.g. 32
vs. 64 bit architectures, or specific instruction sets for the download of highly optimized
executable binaries). If necessary, we could support those use-cases through one or more separate
hints.

[=User agents=] SHOULD return the empty string or a fictitious value for [=platform architecture=]
unless the user's platform is one where both the following conditions apply:
 * Binary download of executables is likely.
 * Different CPU architectures are likely to require different binary executable resources, and
     different binary exeutable resources are likely to be available.

[=User Agents=] MUST return the empty string for [=model=] if [=mobileness=] is false. [=User
Agents=] MUST return the empty string for [=model=] even if [=mobileness=] is true, except on
platforms where the model is typically exposed.

[=User agents=] MAY return the empty string or a fictitious value for [=full version=], [=platform
architecture=] or [=model=], for privacy, compatibility, or other reasons.

The 'Sec-CH-UA-Arch' Header Field {#sec-ch-ua-arch}
------------------------------

The <dfn http-header>`Sec-CH-UA-Arch`</dfn> request header field gives a server information about
the architecture of the platform on which a given [=user agent=] is executing. It is a
[=Structured Header=] whose value MUST be a [=structured header/string=]
[[!RFC8941]].

The header's ABNF is:

~~~ abnf
  Sec-CH-UA-Arch = sh-string
~~~


The 'Sec-CH-UA-Model' Header Field {#sec-ch-ua-model}
-------------------------------

The <dfn http-header>`Sec-CH-UA-Model`</dfn> request header field gives a server information about
the device on which a given [=user agent=] is executing. It is a [=Structured Header=] whose value MUST
be a [=structured header/string=] [[!RFC8941]].

The header's ABNF is:

``` abnf
  Sec-CH-UA-Model = sh-string
```

ISSUE(wicg/ua-client-hints): Perhaps `Sec-CH-UA-Mobile` is enough, and we don't need to expose the model?


The 'Sec-CH-UA-Platform' Header Field {#sec-ch-ua-platform}
----------------------------------

The <dfn http-header>`Sec-CH-UA-Platform`</dfn> request header field gives a server information about the platform on
which a given [=user agent=] is executing. It is a [=Structured Header=] whose value MUST be a
[=structured header/string=] [[!RFC8941]]. Its value SHOULD match one of the following common
platform values: "Android", "Chrome OS", "iOS", "Linux", "macOS", "Windows", or "Unknown".

The header's ABNF is:

``` abnf
  Sec-CH-UA-Platform = sh-string
```

The 'Sec-CH-UA-Platform-Version' Header Field {#sec-ch-ua-platform-version}
----------------------------------

The <dfn http-header>`Sec-CH-UA-Platform-Version`</dfn> request header field gives a server
information about the platform version on which a given [=user agent=] is executing. It is a
[=Structured Header=] whose value MUST be a [=structured header/string=]
[[!RFC8941]].

The header's ABNF is:

``` abnf
  Sec-CH-UA-Platform-Version = sh-string
```

The 'Sec-CH-UA' Header Field {#sec-ch-ua}
----------------------------

The <dfn http-header>`Sec-CH-UA`</dfn> request header field gives a server information about a
[=user agent=]'s branding and version. It is a [=Structured Header=] whose value MUST be a
[=structured header/list=] [[!RFC8941]]. The list's items MUST be
[=structured header/string=]. The value of each item SHOULD include a "v" parameter, indicating the
[=user agent=]'s version.

The header's ABNF is:

``` abnf
  Sec-CH-UA = sh-list
```

Note: Unlike most Client Hints, since it's included in the [=low entropy hint table=],
the `Sec-CH-UA` header will be sent by default, whether or not the server opted-into
receiving the header via an `Accept-CH` header (although it can still be controlled by it's
[=policy controlled client hints feature=].
It is considered low entropy because it includes only the [=user agent=]'s branding information,
and the significant version number (both of which are fairly clearly sniffable by "examining the
structure of other headers and by testing for the availability and semantics of the features
introduced or modified between releases of a particular browser" [[Janc2014]]).


To <dfn abstract-op local-lt="set-ua">return the `Sec-CH-UA` value for a request</dfn>, [=user agents=] MUST:

1.  Let |list| be a [=/list=], initially empty.

2. For each |brandVersion| in [=user agent/brands=]:

    1. Let |parameter| be a [=dictionary=], initially empty.

    2. Set |parameter|["param_name"] to "v".

    3. Set |parameter|["param_value"] to |brandVersion|'s {{NavigatorUABrandVersion/version}}.

    2. Let |pair| be a tuple comprised of |brandVersion|'s {{NavigatorUABrandVersion/brand}} and |parameter|.

    3. Append |pair| to |list|.

3. Return the output of running [=serializing a list=] with |list| as input.

The 'Sec-CH-UA-Full-Version' Header Field {#sec-ch-ua-full-version}
--------------------------------

The <dfn http-header>`Sec-CH-UA-Full-Version`</dfn> request header field gives a server information
about the user agent's [=user agent/full version=]. It is a [=Structured Header=]
whose value MUST be a [=structured header/string=] [[!RFC8941]].

The header's ABNF is:

``` abnf
  Sec-CH-UA-Full-Version = sh-string
```

The 'Sec-CH-UA-Mobile' Header Field {#sec-ch-ua-mobile}
--------------------------------

The <dfn http-header>`Sec-CH-UA-Mobile`</dfn> request header field gives a server information about
whether or not a [=user agent=] prefers a "mobile" user experience. It is a [=Structured Header=]
whose value MUST be a [=structured header/boolean=] [[!RFC8941]].

The header's ABNF is:

``` abnf
  Sec-CH-UA-Mobile = sh-boolean
```

Note: Like `Sec-CH-UA` above, since it's included in the [=low entropy hint table=],
the `Sec-CH-UA-Mobile` header will be sent by default, whether or not the server opted-into
receiving the header via an `Accept-CH` header (although it can still be controlled by it's
[=policy controlled client hints feature=].
It is considered low enropy because it is a single bit of information directly controllable
by the user.

Note: These client hints can be evoked with the following set of [=Client hints tokens=]:
`Sec-CH-UA-Arch`, `Sec-CH-UA-Model`, `Sec-CH-UA-Platform`, `Sec-CH-UA`, `Sec-CH-UA-Mobile`


Interface {#interface}
=================

<pre class="idl">
dictionary NavigatorUABrandVersion {
  DOMString brand;
  DOMString version;
};

dictionary UADataValues {
  DOMString platform;
  DOMString platformVersion;
  DOMString architecture;
  DOMString model;
  DOMString uaFullVersion;
};

[Exposed=(Window,Worker)]
interface NavigatorUAData {
  readonly attribute FrozenArray&lt;NavigatorUABrandVersion&gt; brands;
  readonly attribute boolean mobile;
  Promise&lt;UADataValues&gt; getHighEntropyValues(sequence&lt;DOMString&gt; hints);
};

interface mixin NavigatorUA {
  [SecureContext] readonly attribute NavigatorUAData userAgentData;
};

Navigator includes NavigatorUA;
WorkerNavigator includes NavigatorUA;

</pre>

Note: The high-entropy portions of the user agent information are retrieved through a {{Promise}}, in order to give [=user agents=] the opportunity to gate their exposure behind potentially time-consuming checks (e.g. by asking the user for their permission).

Processing model {#processing}
--------------

<h4 id="monkeypatch-html-windoworworkerglobalscope"><code>WindowOrWorkerGlobalScope</code></h4>

Each [=user agent=] has an associated <dfn for="user agent">brands</dfn>, which is a [=/list=] created by running
[=create brands=].

Every {{WindowOrWorkerGlobalScope}} object has an associated <dfn for="WindowOrWorkerGlobalScope">brands frozen array</dfn>,
which is a <code><a interface>FrozenArray</a>&lt;<a dictionary>NavigatorUABrandVersion</a>></code>. It is initially the
result of [=create a frozen array|creating a frozen array=] from the [=user agent=]'s [=brands=].

<h4 id="create-ua-list-section">Create brands</h4>

When asked to run the <dfn>create brands</dfn> algorithm, the [=user agent=] MUST run the following steps:
1. Let |list| be a [=/list=].

2. Collect pairs of [=user agent/brand=] and [=user agent/significant version=] which represent the [=user agent=] or
    [=equivalence classes=].

3. For each pair:

    1. Let |dict| be a new {{NavigatorUABrandVersion}} dictionary,
        with [=user agent/brand=] as {{NavigatorUABrandVersion/brand}} and [=user agent/significant version=] as
        {{NavigatorUABrandVersion/version}}.

    2. Append |dict| to |list|.

4.  The [=user agent=] SHOULD execute the following steps:

    1.  [=list/Append=] one additional [=list/item=] to |list| containing a {{NavigatorUABrandVersion}} dictionary,
        initialized with <a lt="create an arbitrary brand">arbitrary brand</a> and <a lt="create an arbitrary version">
        arbitrary version</a> combinations.

    2.  Randomize the order of the [=list/items=] in |list|.

    Note: One approach to minimize caching variance when generating these random components could be to
    determine them at build time, and keep them identical throughout the lifetime of the [=user agent=]'s significant
    version.

    Note: See [[#grease]] for more details on when and why these randomization steps might be appropriate.

5. Return |list|.

An <dfn for="user agent" export>equivalence class</dfn> represents a group of browsers believed to be compatibile with
each other. A shared rendering engine may form an [=equivalence class=], for example.

<h4 id="create-arbitrary-brands-section"
    algorithm="to create arbitrary brand and version values">Create arbitrary brand and version values</h4>

To <dfn>create an arbitrary brand</dfn>, the [=user agent=] MUST run these steps:

    1. Let |arbitraryBrand| be a [=/string=] composed of [=ASCII alpha=]. |arbitraryBrand| MUST contain one or more
         0x20 (SP) bytes and be no longer than twenty [=ASCII bytes=].
    1. Let |arbitraryBrandList| be the result of <a lt="split on ASCII whitespace">splitting |arbitraryBrand| on ASCII
         whitespace</a>.
    1. Let |greaseyStack| be a [=stack=].
    1. Let |greaseyChars| be the [=list=] of [=ASCII bytes=] « 0x20 (SP), 0x28 (left parenthesis), 0x29
         (right parenthesis), 0x2D (-), 0x2E (.), 0x2F (/), 0x3A (:), 0x3B (;), 0x3D (=), 0x3F (?), 0x5F (_) ».
    1. For each item of |arbitraryBrandList|, [=stack/push=] a randomly selected [=list/item=] from |greaseyChars| onto
         |greaseyStack|.
    1. Let |greaseyBrandList| be a [=list=] and |index| be 0.
    1. While |greaseyStack| [=stack/is not empty=]:
        1. Let |item| be the result of <a lt="pop">popping</a> from |greaseyStack|.
        1. Append |item| to |greaseyBrandList|.
        1. Append |arbitraryBrandList|[|index|] to |greaseyBrandList|.
        1. Increment |index| by 1.
    1. Return the result of <a lt="strip leading and trailing ASCII whitespace"> stripping leading and trailing ASCII
         whitespace</a> from the [=concatenation=] of |greaseyBrandList| (with no separator).

    Note: [=Structured Headers=] allows for escaped 0x22 (\") and 0x5C (\\) inside a [=structured header/string=], but
          these are known to not be web-compatible.

To <dfn>create an arbitrary version</dfn>, return a [=/string=] that MUST match the format of the [=user agent=]'s
[=user agent/significant version=], but MUST NOT match the value.

Note: User Agents may decide to send arbitrarily low versions to ensure proper version checking, and should vary them
over time.

<h4 id="getters">Getters</h4>

On getting, the {{NavigatorUAData/brands}} attribute MUST return [=this=]'s [=relevant global object=]'s [=WindowOrWorkerGlobalScope/brands frozen array=].

On getting, the {{NavigatorUAData/mobile}} attribute must return the [=user agent=]'s [=user agent/mobileness=].

<h4 id="getHighEntropyValues"><code>getHighEntropyValues</code> method</h4>

The <dfn method for="NavigatorUA"><code>getHighEntropyValues(|hints|)</code></dfn> method MUST run these steps:

1. Let |p| be a [=a new promise=] created in the [=current realm=].

2. If the [=user agent=] decides one or more values in |hints| should not be returned, then [=reject=] and return |p| with a "{{NotAllowedError}}".

ISSUE(wicg/ua-client-hints): We can improve upon when and why a UA decides to refuse a hint once [Issue #151](https://github.com/WICG/ua-client-hints/issues/151) is resolved.

3. Otherwise, run the following steps [=in parallel=]:

    1. Let |uaData| be a new {{UADataValues}}.

    2. If |hints| [=list/contains=] "platform", set |uaData|["{{UADataValues/platform}}"] to the [=user agent=]'s [=user agent/platform brand=].

    3. If |hints| [=list/contains=] "platformVersion", set |uaData|["{{UADataValues/platformVersion}}"] to the [=user agent=]'s [=user agent/platform version=].

    4. If |hints| [=list/contains=] "architecture", set |uaData|["{{UADataValues/architecture}}"] to the [=user agent=]'s [=user agent/platform architecture=].

    5. If |hints| [=list/contains=] "model", set |uaData|["{{UADataValues/model}}"] to the [=user agent=]'s [=user agent/model=].

    6. If |hints| [=list/contains=] "uaFullVersion", let |uaData|["{{UADataValues/uaFullVersion}}"] be the the user agent's [=user agent/full version=].

    7. [=Queue a task=] on the [=permission task source=] to [=resolve=] |p| with |uaData|.

4.  Return |p|.

Security and Privacy Considerations {#security-privacy}
===================================

Secure Transport {#secure-transport}
----------------

Client Hints will not be delivered to non-secure endpoints (see the secure transport requirements in
Section 2.2.1 of [[!RFC8941]]). This means that [=user agent=] information will not
be leaked over plaintext channels, reducing the opportunity for network attackers to build a profile
of a given agent's behavior over time.

Delegation {#delegation}
----------

Client Hints will be delegated from top-level pages via Permissions Policy. This reduces the likelihood that [=user agent=]
information will be delivered along with subresource requests, which reduces the potential for
passive fingerprinting.

That delegation is defined as part of [=append client hints to request=].

Fingerprinting {#fingerprinting}
--------------

The primary goal of User Agent Client Hints is to reduce the default entropy
available to the network for passive fingerprinting. However, it will still be possible
for some, or all, hints to be requested and used for active fingerprinting purposes by
first or delegated third parties. As noted in [[#access]], [=User agents=] should consider
policies to restrict or reduce access to parties that are known to actively
fingerprint their users.

Access Restrictions {#access}
-------------------

The information in the Client Hints defined above reveals quite a bit of information about the user
agent and the platform/device upon which it runs. [=User agents=] ought to exercise judgement before
granting access to this information, and MAY impose restrictions above and beyond the secure
transport and delegation requirements noted above. For instance, [=user agents=] could choose to reveal
[=user agent/platform architecture=] only on requests it intends to download, giving the server the
opportunity to serve the right binary. Likewise, they could offer users control over the values
revealed to servers, or gate access on explicit user interaction via a permission prompt or via a
settings interface.

Implementation Considerations {#impl-considerations}
=============================

The 'User-Agent' Header {#user-agent}
-----------------------

[=User agents=] SHOULD deprecate usage of the `User-Agent` header by reducing its information granularity
or removing the header entirely, in favor of the Client Hints model described in this document. The header,
however, is likely to be impossible to remove entirely in the near-term, as existing sites' content negotiation
code will continue to require its presence (see [[Rossi2015]] for a recent example of a new browser's struggles
in this area).

One approach which might be advisable could be for each [=user agent=] to lock the value of its
`User-Agent` header, ensuring backwards compatibility by maintaining the crufty declarations of
"like Gecko" and "AppleWebKit/537.36" on into eternity. This can ratchet over time, first freezing
the version number, then shifting platform and model information to something reasonably generic in
order to reduce the fingerprint the header provides.

GREASE-like UA Brand Lists {#grease}
----------------------

History has shown us that there are real incentives for [=user agents=] to lie about their branding
in order to thread the needle of sites' sniffing scripts, and prevent their users from being blocked
by UA-based allow/block lists.

Resetting expectations may help to prevent abuse of the [=user agent/brands=] list in the short term, but
probably won't help in the long run. The world of network protocols introduced the notion of <abbr
title="Generate Random Extensions And Sustain Extensibility">GREASE</abbr> [[I-D.ietf-tls-grease]].
We could borrow from that concept to tackle this problem.

[=User agents=]' [=user agent/brands=] containing more than a single entry could encourage
standardized processing of the [=user agent/brands=] list. By randomly including additional, intentionally
incorrect, comma-separated entries with arbitrary ordering, they would reduce the chance that we
ossify on a few required strings.

Let's examine a few examples:
* In order to avoid sites from barring unknown browsers from their allow lists, Chrome could send a
    UA set that includes an non-existent browser, and which varies once in a while.
    - `"Chrome"; v="73", "(Not;Browser"; v="12"`
* In order to enable [=equivalence classes=] based on Chromium versions, Chrome could add the rendering
    engine and its version to that.
    - `"Chrome"; v="73", "(Not;Browser"; v="12", "Chromium"; v="73"`
* In order to encourage sites to rely on [=equivalence classes=] based on Chromium versions rather than
    exact UA sniffing, Chrome might remove itself from the set entirely.
    - `"(Not;Browser"; v="12", Chromium"; v="73"`
* Browsers based on Chromium may use a similar UA string, but use their own brand as part of the
    set, enabling sites to count them.
    - `"Chrome"; v="73", "Xwebs mega"; v="60", "Chromium"; v="73", "(Not;Browser"; v="12"`


[=User agents=] MUST include more than a single value in [=user agent/brands=], where one of these values is an
arbitrary value.

The value order in [=user agent/brands=] MUST change over time to prevent receivers of the header
from relying on certain values being in certain locations in the list.

When choosing GREASE strategies, [=user agents=] SHOULD keep caching variance in mind and minimize
variance among identical [=user agent=] versions.

Note: One approach to minimize caching variance could be to determine the GREASE parts of the UA set
at build time, and keep them identical throughout the lifetime of the [=user agent=]'s significant
version.

The 'Sec-CH-' prefix {#sec-ch}
--------------------

Restricting user-land JavaScript code from influencing and modifying UA-CH headers has various
security related advantages. At the same time, there don't seem to be any legitimate [use-cases](https://github.com/WICG/ua-client-hints#use-cases) which
require such user-land rewriting.

As such and based on [discussions with the TAG](https://github.com/w3ctag/design-reviews/issues/320), it seems
reasonable to forbid write access to these headers from JavaScript (e.g. through `fetch` or Service
Workers), and demarcate them as browser-controlled client hints so they can be documented and
included in requests without triggering CORS preflights.

Therefore, request headers defined in this specification include a `Sec-CH-` prefix.

IANA Considerations {#iana}
===================

This document intends to define the `Sec-CH-UA-Arch`, `Sec-CH-UA-Model`, `Sec-CH-UA-Platform`,
`Sec-CH-UA-Platform-Version`, `Sec-CH-UA-Mobile` and `Sec-CH-UA` HTTP request header fields, and
register them in the permanent message header field registry ([[RFC3864]]).

It also intends to deprecate usage of the `User-Agent` header field.

'Sec-CH-UA-Arch' Header Field {#iana-arch}
--------------------------

Header field name: Sec-CH-UA-Arch

Applicable protocol: http

Status: standard

Author/Change controller: IETF

Specification document: this specification ([[#sec-ch-ua-arch]])

'Sec-CH-UA-Model' Header Field {#iana-model}
---------------------------

Header field name: Sec-CH-UA-Model

Applicable protocol: http

Status: standard

Author/Change controller: IETF

Specification document: this specification ([[#sec-ch-ua-model]])

'Sec-CH-UA-Platform' Header Field {#iana-platform}
------------------------------

Header field name: Sec-CH-UA-Platform

Applicable protocol: http

Status: standard

Author/Change controller: IETF

Specification document: this specification ([[#sec-ch-ua-platform]])

'Sec-CH-UA-Platform-Version' Header Field {#iana-platform-version}
------------------------------

Header field name: Sec-CH-UA-Platform-Version

Applicable protocol: http

Status: standard

Author/Change controller: IETF

Specification document: this specification ([[#sec-ch-ua-platform-version]])

'Sec-CH-UA' Header Field {#iana-ua}
------------------------

Header field name: Sec-CH-UA

Applicable protocol: http

Status: standard

Author/Change controller: IETF

Specification document: this specification ([[#sec-ch-ua]])

'Sec-CH-UA-Mobile' Header Field {#iana-mobile}
----------------------------

Header field name: Sec-CH-UA-Mobile

Applicable protocol: http

Status: standard

Author/Change controller: IETF

Specification document: this specification ([[#sec-ch-ua-mobile]])

'Sec-CH-UA-Full-Version' Header Field {#iana-full-version}
----------------------------

Header field name: Sec-CH-UA-Full-Version

Applicable protocol: http

Status: standard

Author/Change controller: IETF

Specification document: this specification ([[#sec-ch-ua-full-version]])

'User-Agent' Header Field {#iana-user-agent}
-------------------------

Header field name: User-Agent

Applicable protocol: http

Status: deprecated

Author/Change controller: IETF

Specification document: this specification ([[#user-agent]]), and Section 5.5.3 of [[RFC7231]]

Acknowledgments {#ack}
=============================

Thanks to
Aaron Tagliaboschi,
ArkUmbra, <!-- github -->
jasonwee, <!-- github -->
Luke Williams,
Mike West,
and Toru Kobayashi
for valuable feedback and contributions to this specification.
