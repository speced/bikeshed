<pre class='metadata'>
Title: C++ Language Evolution status 🦠 pandemic edition 🦠 2021/01–2021/03
Shortname: P1018
Revision: 9
Audience: WG21, EWG
Status: P
Group: WG21
URL: http://wg21.link/P1018r9
!Source: <a href="https://github.com/jfbastien/papers/blob/master/source/P1018r9.bs">github.com/jfbastien/papers/blob/master/source/P1018r9.bs</a>
Editor: JF Bastien, Woven Planet, cxx@jfbastien.com
Date: 2021-03-06
Markup Shorthands: markdown yes
Toggle Diffs: no
No abstract: false
Abstract: This paper is a collection of items that the C++ Language Evolution group has worked on in the latest meeting, their status, and plans for the future.
</pre>

<style>
table, th, td { border: 2px solid grey; }
</style>

Executive summary {#summary}
=================

We have not met in-person since the February 2020 meeting in Prague because of the global pandemic. We're instead holding weekly teleconferences, as detailed in [[P2145R1]]. We focus on providing non-final guidance, and will use electronic straw polls as detailed in [[P2195R0]] to move papers and issues forward in a asynchronous manner.

Our main achievements have been:

* **Issue processing**: most of the 50 language evolution issues have proposed resolutions, and a large number of them have been voted on through electronic polling.
* **C++23**: we've started work on papers for C++23 and later.
* **Incubation**: we've acted as EWG-I and "incubated" some early papers by providing early feedback to authors.

This paper outlines:

* The work achieved;
* Other ongoing work;
* Lists the straw polls that were submitted for the February 2021 polling period as well as their results;
* Lists the remaining outstanding issues.


Paper of note {#note}
=============

* [[P1000R4]] C++ IS schedule
* [[P0592R4]] To boldly suggest an overall plan for C++23
* [[P1999R0]] Process: double-check evolutionary material via a Tentatively Ready status
* [[P2195R0]] Electronic Straw Polls
* [[P2145R1]] Evolving C++ Remotely


Tentatively ready papers {#tentative}
========================

Following our process in [[P1999R0]], we usually mark papers as tentatively ready for CWG. We would usually take a brief look at the next meeting, and if nothing particular concerns anyone, send them to CWG. However, given the pandemic, we've decided to provide guidance only in virtual teleconferences, and have an asynchronous polling mechanism to officially send papers to CWG or other groups as detailed in [[P2195R0]].

You can follow the lists of papers on GitHub:

* <a href="https://github.com/cplusplus/papers/labels/TentativelyReady">tentatively ready papers</a>,
* <a href="https://github.com/cplusplus/papers/labels/EWG-vote-on-me">EWG vote on me papers</a>.


Issue Processing {#issue-pro}
================

We've reviewed 50 Language Evolution issues at the Core groups' request, and have tentative resolutions for most. We don't want to poll all of these at the same time, and therefore only polled a subset in the February 2021 polling period, reserving other issues for later polling periods. We've will therefore only poll the "tentatively ready" issues (since they're tied to papers, and polled with said papers, as outlined below), as well as the "resolved" issues since telecon attendees believe that prior work has already addressed the issues.

[[#issues]] contains a list of issues which aren't being voted on in this polling period.


Poll Results {#polls}
============

In all, 36 people participated in the February 2021 EWG polls. Close to half of the voters were EWG regulars before the pandemic, the rest were CWG/LEWG/LWG/SG1/SG16 regulars, most have attended a good number of the EWG telecons regularly during the pandemic.

The list of polls which EWG took in the February 2021 polling period, along with their results, and some of the relevant comments from poll participants, are:

P2223R1 Trimming whitespaces before line splicing {#P2223R1}
-----------------------------------------------------

    * [[P2223R1]]
    * <a href="https://github.com/cplusplus/papers/issues/925">GitHub issue</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG14-Oct-2020">Notes 2020-10-14</a>
    * Not yet seen by WG14, nor the SG22 C / C++ liaison group.
    * <strong>Highlight:</strong> make trailing whitespaces after <code>\</code> non-significant.
    * 🗳 <strong>Poll:</strong> Forward P2223R1 "Trimming whitespaces before line splicing" to Core, thereby also fixing [[CWG1698]].

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>11</td><td>15</td><td>4</td><td>0</td><td>0</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>Strongly in favor as this aligns the standard with common practice, avoids contorting standard wording by implementations in order to claim conformance while producing the behavior programmers want, and avoids needless surprised and implementation divergence.
    <li>We should not have implementation divergence on this, and this direction to resolve it is good.
    <li>I'm not particularly excited about this paper because it only partially solves the problem of implementation divergence in this space and does not outline a play to solve all the existing issues in a consistent way. This will not likely impact my users.
    <li>Invisible differences in the behavior of code are bad.
    <li>Reducing divergence in compilers is good.
    <li>I find this somewhat unimportant.
</ul>

P2201R0 Mixed string literal concatenation {#P2201R0}
-----------------------------------------------------

    * [[P2201R0]]
    * <a href="https://github.com/cplusplus/papers/issues/905">GitHub issue</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-P2013R2FreestandingLanguage:Optional::operatorNewP2201R0MixedStringLiteralConcatenation-19-Aug-2020">Notes 2020-08-19</a>
    * Seen by WG14 as [[N2594]], straw Poll: Does the committee wish to adopt N2594 into C23 as is? 18-0-2 passes.
    * <strong>Highlight:</strong> string concatenation involving string-literals with <em>encoding-prefixes</em> mixing `L""`, `u8""`, `u""`, and `U""` is currently conditionally-supported with implementation-defined behavior, this paper makes it ill-formed.
    * 🗳 <strong>Poll:</strong> Forward P2201R0 "Mixed string literal concatenation" to Core, after adding an Annex C entry.

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>14</td><td>12</td><td>1</td><td>0</td><td>0</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>This was meaningless and unimplemented. No good reason to have it.
    <li>I was very horrified that we allowed this when I saw this paper for the first time.
    <li>As paper said, this is not portable and without clear meaning.
    <li>Implementation defined behavior that doesn't have many supporting implementations, PLUS can only result in nonsense needs to disappear from the language.
</ul>

P2186R1 Removing Garbage Collection Support {#P2186R1}
-----------------------------------------------------

    * [[P2186R1]]
    * <a href="https://github.com/cplusplus/papers/issues/898">GitHub issue</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-P2139R2ReviewingDeprecatedFacilitiesOfC20ForC23P2186R0RemovingGarbageCollectionSupport-30-July-2020">Notes 2020-07-03</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/P2186">Notes 2020-12-14</a>
    * <strong>Highlight:</strong> remove (not deprecate) garbage collection support in C++23.
    * 🗳 <strong>Poll:</strong> Forward P2186R1 "Removing Garbage Collection Support" to Core.

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>12</td><td>12</td><td>4</td><td>1</td><td>0</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>(Against) It does not seem to provide much harm, even if not used… And since the basic need seems genuine, I'd prefer to keep the mechanism until it is properly handled, than removing it and having to reintroduce something similar later.
    <li>Clearly, no need to have unused utilities.
    <li>To the best of my knowledge, this is unused and not implemented in implementations. The specification cost of keeping it is not zero. 
    <li>Given that 10 years after being standardized, this is not provided in any major implementation, it's IMHO save to assume that "nobody" needs this/can use this due to the issues outlined in the paper.
    <li>Implementations of garbage collection exist, yet do not rely on the "garbage collection support" in the Standard.  Furthermore, the paper argues convincingly that the Standard's "support" for garbage collection does not support common use cases, like placement new in local arrays.
    <li>Keeping stuff in the standard that's not supported and is lacking guidance for proper implementation makes little sense. Removing it might free space for a better, more useful specification that's not restricted to cmpatibility.
</ul>

P2173R0 Attributes on Lambda-Expressions {#P2173R0}
-----------------------------------------------------

    * [[P2173R0]]
    * <a href="https://github.com/cplusplus/papers/issues/882">GitHub issue</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-23-Apr-2020">Notes 2020-04-23</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-P2156-P2173-2-July-2020">Notes 2020-07-02</a>
    * <strong>Highlight:</strong> allow attributes for lambdas, those attributes appertaining to the function call operator of the lambda.
    * 🗳 <strong>Poll:</strong> Forward P2173R0 "Attributes on Lambda-Expressions" to Core, thereby also fixing [[CWG2097]].

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>12</td><td>16</td><td>1</td><td>0</td><td>0</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>This is a good addition because it makes lambdas more consistent with function call operators on named objects.
    <li>The attributes are defined hereby to pertain to the correct entity, so that we will not have unfortunate consistency issues with other function attributes.
    <li>I desperately need this functionality for multiple vendor-specific attributes.
    <li>This fills a functionality gap and makes the language more regular.
</ul>

P2156R1 Allow Duplicate Attributes {#P2156R1}
-----------------------------------------------------

    * [[P2156R1]]
    * <a href="https://github.com/cplusplus/papers/issues/864">GitHub issue</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Wednesday15th-April-2020">Notes 2020-04-15</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-23-Apr-2020">Notes 2020-04-23</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-P2156-P2173-2-July-2020">Notes 2020-07-02</a>
    * Seen by WG14 as [[N2557]], straw Poll: Is the committee in favor of adopting N2557 into C23? 19-0-0 passes.
    * <strong>Highlight:</strong> current limitations on duplicate attributes are inconsistent, this change removes all limitations on duplicate attributes in an attribute-list for all attributes that specify a limitation. This affects `carries_dependency`, `deprecated`, `fallthrough`, `likely`, `unlikely`, `unused`, `noreturn`, and `no_unique_address`.
    * 🗳 <strong>Poll:</strong> Forward P2156R1 "Allow Duplicate Attributes" to Core, thereby also fixing [[CWG1914]].

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>12</td><td>11</td><td>3</td><td>1</td><td>1</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>(Against / Strongly against) The use case (macro replacement) is questionable, especially for cases where the same attribute has different values. It also further complicates future extensions for reflection on attributes. We can resolved CWG1914 by declaring that the particular attributes mentioned there could not be specified more than once on a declaration, even in separate attribute specifiers.
    <li>In practice, attributes are often hidden in macros and it is easy to get duplicates, and fixing the duplication is challenging in code that supports many compilers and standards.
    <li>Especially useful for auto-generated code.
    <li>It is easier on developers if we allow duplicate attributes.
    <li>I see no reason for preventing `[[X, X]]` but allowing `[[X]] [[X]]` as these variants should be equivalent.
    <li>Compilers could still warn about duplicated attributes.
    <li>This unifies the behavior with what's already been adopted into C.
    <li>This makes the language more regular.
</ul>

P2013R3 Freestanding Language: Optional `::operator new` {#P2013R3}
-----------------------------------------------------

    * [[P2013R3]]
    * <a href="https://github.com/cplusplus/papers/issues/749">GitHub issue</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21prague/P2013R0-EWG">Notes 2020-02-14</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-P2013R2FreestandingLanguage:Optional::operatorNewP2201R0MixedStringLiteralConcatenation-19-Aug-2020">Notes 2020-08-19</a>
    * Not yet seen by WG14, nor the SG22 C / C++ liaison group.
    * <strong>Highlight:</strong> on freestanding C++ implementations, make the various default allocating `::operator new` optional. Placement `new` is still required. All `::operator delete` are still required. Hosted implementations are unchanged.
    * 🗳 <strong>Poll:</strong> Forward P2013R3 "Freestanding Language: Optional `::operator new`" to Core.

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>8</td><td>15</td><td>3</td><td>0</td><td>1</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>(Strongly against) The freestanding implementation parts of the standard impact a very small number of users and the committee spends a disproportionally large amount of time with it. I'm against any time spent on freestanding language work with the exception of its removal.
    <li>Making freestanding more useful is a good thing.
    <li>Consistent with C++ core principles to move errors to build time whenever possible.
    <li>Matches existing practice.
    <li>This is an important topic.
</ul>

P1949R6 C++ Identifier Syntax using Unicode Standard Annex 31 {#P1949R6}
-----------------------------------------------------

    * [[P1949R6]]
    * <a href="https://github.com/cplusplus/papers/issues/688">GitHub issue</a>
    * <a href="https://github.com/sg16-unicode/sg16/issues/48">SG16 Unicode group tracking GitHub issue</a>
    * C++20 NB comment <a href="https://github.com/cplusplus/nbballot/issues/28">NL029 05.10</a>
    * <a href="http://wiki.edg.com/bin/view/Wg21belfast/SG16NBNL029">Notes 2019-12-19</a>
    * <a href="http://wiki.edg.com/bin/view/Wg21prague/SG16P1949R1">Notes 2020-02-12</a>
    * <a href="http://wiki.edg.com/bin/view/Wg21prague/SG17P1949R1">Notes 2020-02-13</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21prague/D1949R2-EWG">Notes 2020-02-14</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-P1949-18-June-2020">Notes 2020-06-18</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-P1949-24-Sep-2020">Notes 2020-09-24</a>
    * Not yet seen by WG14, nor the SG22 C / C++ liaison group.
    * <strong>Highlight:</strong> C++11 uses a hand-curated list of Unicode codepoints to determine which characters are allowed in identifiers. This is flawed in many ways outlined in the paper. Replace this hand-curated list with the Unicode consortium's recommendations for identifiers [[UAX31]].
    * 🗳 <strong>Poll:</strong> Forward P1949R6 "C++ Identifier Syntax using Unicode Standard Annex 31" to Core.

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>19</td><td>6</td><td>3</td><td>0</td><td>0</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>The allow-list approach isn't sustainable. There are too many characters allowed that can be actively harmful, such as RTL modifiers.
    <li>Follows Unicode recommendations. WG21 shouldn't be in the business of assigning meaning to Unicode characters, Unicode is authoritative in this case.
    <li>Avoids surprising behavior that is difficult to defend.
    <li>Good international language support encourages wider adoption and this wider adoption implies a larger global pool of resources for the development of the C++ ecosystem.
</ul>

P1938R2 `if consteval` {#P1938R2}
-----------------------------------------------------

    * [[P1938R2]]
    * <a href="https://github.com/cplusplus/papers/issues/677">GitHub issue</a>
    * C++20 NB comment <a href="https://github.com/cplusplus/nbballot/issues/219">FR22 20.15.10</a>, discussed in <a href="http://wiki.edg.com/bin/view/Wg21belfast/FR222">Belfast</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21prague/P1938R0-EWG">Notes 2020-02-14</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-8-Oct-2020">Notes 2020-10-08</a>
    * <strong>Highlight:</strong> C++20 added `std::is_constant_evaluated()` and `consteval`, which interact poorly with each other. This paper adds a new form of `if` statement to address the poor interaction.
    * 🗳 <strong>Poll:</strong> Forward P1938R2 "`if consteval`" to Core.

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>20</td><td>7</td><td>2</td><td>0</td><td>0</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>The number of experts who have been confused by `is_constant_evaluated` suggests that this is a much safer spelling for the utility.
    <li>Makes metaprogramming more accessible and its code more readable, better composability.
    <li>Sad that this wasn't in C++20.
</ul>

P1847R3 Make declaration order layout mandated {#P1847R3}
-----------------------------------------------------

    * [[P1847R3]]
    * <a href="https://github.com/cplusplus/papers/issues/600">GitHub issue</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21belfast/P1847">Notes 2019-11-05</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21prague/P1847R2-EWG">Notes 2020-02-13</a>
    * <strong>Highlight:</strong> C++ currently lets compilers reorder data member layout if they have different access controls. Compilers don't take advantage of this permission. This paper removes the unused flexibility.
    * 🗳 <strong>Poll:</strong> Forward P1847R3 "Make declaration order layout mandated" to Core.

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>12</td><td>7</td><td>7</td><td>1</td><td>2</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.
<br><strong>Chair comment on outcome:</strong> this was discussed in-person in Prague and Belfast and had strong consensus, the current objections had been discussed in person, and the request for finer-grained control are addressed in a separate paper (in fact, the paper was separated at WG21's request).

<strong>Salient comments:</strong>
<ul>
    <li>(Against) I'm mildly opposed to nailing down a property of the language that users should probably not depend on in the first place. I realize that the practical impact of doing so is small, but at the same time I'm also not convinced by the benefits.
    <li>(Strongly against) I think the current rules are sensible; they set aside a clearly delineated space for data that must remain layout-compatible over time.  Access control is strongly associated with class invariants, whereas invariants can't be enforced on serialized data.  It would not make sense to memcpy data from a file directly into the representation of a class type that maintains invariants.  Instead, that data should be deserialized into a standard-layout struct, verified for conformance to invariants, and only then supplied to the class type after verification.  The class type can use the standard-layout struct directly as a (private) class member. I've certainly seen plenty of code that assumes the rules in P1847 are already in place, thanks to compilers generally following those rules anyway, but I think such code is highly suspect and likely predicated on false assumptions about the validity of deserialized data.  I'd prefer that the language did not encourage writing more of this code.
    <li>(Strongly against) I hate that some classes will have a standard, fixed layout, but that `is_standard_layout<T>` is going to be `false` for them (and for instance that common starting sequence will become a very hard to understand UB). Even if currently no well known implementation uses the allowed reordering, It seems that such reordering can provide structures with better packing, and an implementation might want to benefit from that eventually. So unless there is another mechanism to mean : Please, compiler, do what you think is best, I don't really see the point of removing this freedom.
    <li>Standardizing existing practice for an implementation freedom no one found a use for. It is what compilers have been doing for decades; we should be able to rely on it.
    <li>The current layout rules are effectively frozen in this form by ABI compatibility concerns.
    <li>Paves the way for the `[[layout(...)]]` attribute, which I would really like to see making progress.
</ul>

P1401R4 Narrowing contextual conversions to `bool` {#P1401R4}
-----------------------------------------------------

    * [[P1401R4]]
    * <a href="https://github.com/cplusplus/papers/issues/188">GitHub issue</a>
    * Addresses [[CWG2320]], which was caused by resolving [[CWG2039]], see <a href="https://lists.isocpp.org/core/2016/09/0899.php">Richard Smith's email regarding this approach</a>.
    * <a href="https://wiki.edg.com/bin/view/Wg21prague/P1401R2-EWG">Notes 2020-02-12</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-30-Sep-2020">Notes 2020-09-30</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG28-Oct-2020">Notes 2020-10-28</a>
    * <strong>Highlight:</strong> allow conversions from integral types to type `bool` in `static_assert` and `if constexpr`-statements.
    * 🗳 <strong>Poll:</strong> Forward P1401R4 "Narrowing contextual conversions to `bool`" to Core.

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>13</td><td>13</td><td>3</td><td>0</td><td>0</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>Increases consistency.
    <li>The decision this paper is undoing is yet another example of an attempt to move the language in a particular direction, but without a complete migration plan. These incomplete migrations make the language incoherent and frustrating.
    <li>I wish we could go the other direction and disallow any conversions to bool everywhere (including from integer and pointer types, regardless of context, allowing only user-defined conversions), but there's no way we'll ever get there from here.  C++ is a language that thinks non-boolean types have boolean properties, and we shouldn't make exceptions to that based on context.
</ul>

P1393R0 A General Property Customization Mechanism {#P1393R0}
-----------------------------------------------------

    * [[P1393R0]]
    * <a href="https://github.com/cplusplus/papers/issues/185">GitHub issue</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-P1393-21-May-2020">Notes 2020-05-21</a>
    * <strong>Highlight:</strong> "properties" are a customization mechanism at the center of [[P0443R14]] executors. The proposed approach is library-only, but it could be possible to develop a language-based approach instead. The discussion and poll's goal are to avoid a late-changing redesign of executors based on wanting a language-based approach for customization.
    * 🗳 <strong>Poll:</strong> We understand properties and think that specifying them purely in library is the right approach.

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>1</td><td>4</td><td>14</td><td>4</td><td>2</td></tr>
</table>
<br><strong>Poll outcome:</strong> ❌ no consensus, participants do *not* understand properties, and might want to specify executors' customizations mechanism as a language feature.

<strong>Salient comments:</strong>
<ul>
    <li>(Strongly against) I coauthored a paper that worked deeply with properties. I understood them when I was working with them, but my brain quickly pushed it all out of my head when I was done because they were so complex to work with. I do not think specifying them purely in library is the right approach.
    <li>(Strongly against) properties are not understood. As one glaring example - there is no way to define a single polymorphic type to satisfy all the concepts listed as "applicable" for a property. several of the properties in 0443 expose this fault. Another example is how properties for values that can change at runtime run afoul of the equality behaviour defined for the polymorphic types. Authors of properties have been known to disagree on how to answer question about what properties are for and what they are not for. properties needs to be sent back to LEWG until a majority actually understand all the mechanisms in the properties paper and how they interact or until the mechanisms have been reduced to a set that is generally understood.
    <li>(Against) I don't understand properties.
    <li>Demanding a different solution at this late date, without offering any concrete alternative, would unnecessarily delay Executors, and would send authors a message that we don't value their time.
    <li>The property system seems complicated, but that complication does not appear to arise from a lack of language support.
    <li>I'm not sure how I'm supposed to understand properties if the papers don't explain it.
</ul>

CWG2169 Narrowing conversions and overload resolution {#CWG2169}
-----------------------------------------------------

    <ul>
    <li>[[CWG2169]]
    <li><blockquote>
    <p>Current implementations ignore narrowing conversions during overload resolution, emitting a diagnostic if calling the selected function would involve narrowing. For example:
    <pre>
    struct s { long m };
    struct ss { short m; };
    void f( ss );
    void f( s );
    void g() {
      f({ 1000000 }); // Ambiguous in spite of narrowing for f(ss)
    }
    </pre>
    <p>However, the current wording of 12.4.3.1.5 [over.ics.list] paragraph 7 says,
    <blockquote>Otherwise, if the parameter has an aggregate type which can be initialized from the initializer list according to the rules for aggregate initialization (9.4.1 [dcl.init.aggr]), the implicit conversion sequence is a user-defined conversion sequence with the second standard conversion sequence an identity conversion.</blockquote>
    <p>In the example above, `ss` cannot be initialized from `{ 1000000 }` because of the narrowing conversion, so presumably `f(ss)` should not be considered. If this is not the intended outcome, paragraph 7 should be restated in terms of having an implicit conversion sequence, as in, e.g., bullet 9.1, instead of a valid initialization.
    </blockquote></li>
    <li><a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-29-Apr-2020">Notes 2020-04-29</a>
    <li><a href="https://lists.isocpp.org/ext/2020/10/15157.php">JF's email to EWG 2020-10-19</a>, with the follow-up suggestion that no paper was needed and CWG could resolve the issue if given guidance from EWG.
    <li>🗳 <strong>Poll:</strong> Guidance to Core: implementations are right, the Standard needs to be fixed to address this issue by following existing implementations.
    </ul>

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>12</td><td>10</td><td>4</td><td>1</td><td>0</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>(Against) I don't see the rationale for such a decision, and I would naively expect the sample code to compile.
    <li>Standardize existing practice.
    <li>We shouldn't need to look at a specific value that is passed in a call to determine what the overload being selected is.
</ul>

CWG2355 Deducing <i>noexcept-specifiers</i> {#CWG2355}
-----------------------------------------------------

  * [[CWG2355]]
  * The list of deducible forms in 13.10.2.5 [temp.deduct.type] paragraph 8 does not include the ability to deduce the value of the constant in a noexcept-specifier, although implementations appear to allow it. Note: multiple standard library implementations rely on it.
  * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-07-May-2020">Notes 2020-05-07</a>
  * 🗳 <strong>Poll:</strong> Guidance to Core: modify the Standard such that the value of a constant in a <i>noexcept-specifier</i> can be deduced.

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>11</td><td>13</td><td>2</td><td>0</td><td>0</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>As stdlib implementations rely on it, we should change the standard to match.
    <li>Fixes an obvious oversight.
</ul>

CWG476 Determining the buffer size for placement `new` {#CWG476}
-----------------------------------------------------

    * [[CWG476]]
    * Resolved by [[CWG2382]] (no overhead for placement `new` for arrays). CWG2382 was moved in Belfast as part of [[P1969r0]].
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Thursday9th-April-2020">Notes 2020-04-09</a>
    * 🗳 <strong>Poll:</strong> Mark CWG476 "Determining the buffer size for placement `new`" as resolved by P1969r0, and a duplicate of CWG2382.

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>12</td><td>6</td><td>6</td><td>0</td><td>0</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>The core issues already adopted have resolved this issue.
</ul>

CWG687 `template` keyword with <i>unqualified-id</i>s {#CWG687}
-----------------------------------------------------

    * [[CWG687]]
    * Resolved by [[P0846r0]]
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Thursday9th-April-2020">Notes 2020-04-09</a>
    * 🗳 <strong>Poll:</strong> Mark CWG687 "`template` keyword with <i>unqualified-id</i>s" as resolved by P0846r0.

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>12</td><td>9</td><td>5</td><td>0</td><td>0</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>The paper in question was specifically presented to EWG as an alternative to the direction of this issue.
</ul>

CWG1326 Deducing an array bound from an <i>initializer-list</i> {#CWG1326}
-----------------------------------------------------

    * [[CWG1326]]
    * Resolved by [[P0127R2]] Declaring non-type `template` parameters with `auto`, and [[CWG1591]].
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Thursday9th-April-2020">Notes 2020-04-09</a>
    * 🗳 <strong>Poll:</strong> Mark CWG1326 "Deducing an array bound from an <i>initializer-list</i>" as resolved by P0127R2, and a duplicate of CWG1591.

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>11</td><td>10</td><td>6</td><td>0</td><td>0</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>The core issues already adopted have resolved this issue.
</ul>

CWG1331 `const` mismatch with defaulted copy constructor {#CWG1331}
-----------------------------------------------------

    * [[CWG1331]]
    * Resolved by [[P0641r2]] (whose title is Resolving Core Issue #1331, also resolves [[CWG1426]]).
    * <a href="https://wiki.edg.com/bin/view/Wg21rapperswil2014/EvolutionWorkingGroup">Notes 2014-06-21</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Thursday9th-April-2020">Notes 2020-04-09</a>
    * 🗳 <strong>Poll:</strong> Mark CWG1331 "`const` mismatch with defaulted copy constructor" as resolved by P0641r2.

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>9</td><td>14</td><td>3</td><td>0</td><td>0</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>The core issues already adopted have resolved this issue.
</ul>

CWG1393 Pack expansions in <i>using-declaration</i>s {#CWG1393}
-----------------------------------------------------

    * [[CWG1393]]
    * Resolved by [[P0195r2]] (same title as issue)
    * <a href="https://wiki.edg.com/bin/view/Wg21rapperswil2014/EvolutionWorkingGroup">Notes 2014-06-21</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Thursday9th-April-2020">Notes 2020-04-09</a>
    * 🗳 <strong>Poll:</strong> Mark CWG1393 "Pack expansions in <i>using-declaration</i>s" as resolved by P0195r2.

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>11</td><td>12</td><td>4</td><td>0</td><td>0</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>The core issues already adopted have resolved this issue.
</ul>

CWG1426 Allowing additional parameter types in defaulted functions {#CWG1426}
-----------------------------------------------------

    * [[CWG1426]]
    * Resolved by [[P0641r2]] (also resolves [[CWG1331]])
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Thursday9th-April-2020">Notes 2020-04-09</a>
    * 🗳 <strong>Poll:</strong> Mark CWG1426 "Allowing additional parameter types in defaulted functions" as resolved by P0641r2.

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>8</td><td>12</td><td>5</td><td>0</td><td>0</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>The core issues already adopted have resolved this issue.
</ul>

CWG1561 Aggregates with empty base classes {#CWG1561}
-----------------------------------------------------

    * [[CWG1561]]
    * Resolved by [[P0017r1]] (which allowed aggregates to have base classes)
    * <a href="https://wiki.edg.com/bin/view/Wg21rapperswil2014/EvolutionWorkingGroup">Notes 2014-06-21</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Wednesday15th-April-2020">Notes 2020-04-15</a>
    * 🗳 <strong>Poll:</strong> Mark CWG1561 "Aggregates with empty base classes" as resolved by P0017r1.

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>10</td><td>13</td><td>5</td><td>1</td><td>0</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>(Against) The proposed change complicates aggregate initialization.  I find that this goes against the trend of papers like P1008R1.  More generally, I find that keeping aggregates simple encourages a more stateless, functional programming style.
    <li>We chose a different path (which is more powerful if occasionally less convenient); there's nothing further to discuss here.
    <li>Aggregates have problems and we do not have enough information to fix them right now. For example the symmetry between aggregates and structured bindings is missing. On the other hand, we can always reopen the issue or create a new one when new information appears.
</ul>

CWG1912 <i>exception-specification</i> of defaulted function {#CWG1912}
-----------------------------------------------------

    * [[CWG1912]]
    * The current rules requiring a defaulted member function to have an exception-specification compatible with that of the implicitly-declared function are overly constraining. It should be possible, for example, to specify that a defaulted move constructor will be non-throwing, based on knowledge available to the programmer, even if the implicitly-declared constructor would be throwing.
    * Resolved by [[p1286r2]]
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-23-Apr-2020">Notes 2020-04-23</a>
    * 🗳 <strong>Poll:</strong> Mark CWG1912 "<i>exception-specification</i> of defaulted function" as resolved by p1286r2.

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>10</td><td>12</td><td>6</td><td>0</td><td>0</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>I'm not thrilled about more cases when `=default` really means `=delete`.
    <li>This issue has been argued completely: it is common practice to supply explicit exception-specifications at places where the compiler does not deduce the correct (or useful) setting.
    <li>The solution is not worse than the alternatives. I do not like the "additional use case" with deliberately calling std::terminate. It is a trick that casual programmers will not understand.
</ul>

CWG1931 Default-constructible and copy-assignable closure types {#CWG1931}
-----------------------------------------------------

    * [[CWG1931]]
    * Resolved by [[P0624r2]] Default constructible and assignable stateless lambdas
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-23-Apr-2020">Notes 2020-04-23</a>
    * 🗳 <strong>Poll:</strong> Mark CWG1931 "Default-constructible and copy-assignable closure types" as resolved by P0624r2.

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>12</td><td>11</td><td>4</td><td>0</td><td>0</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>The paper indeed resolves the issue.
</ul>

CWG2295 Aggregates with deleted defaulted constructors {#CWG2295}
-----------------------------------------------------

    * [[CWG2295]]
    * Should a class with a deleted non-user-provided default constructor be considered an aggregate?
    * Resolved by [[P1008r1]] Prohibit aggregates with user-declared constructors
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-07-May-2020">Notes 2020-05-07</a>
    * 🗳 <strong>Poll:</strong> Mark CWG2295 "Aggregates with deleted defaulted constructors" as resolved by P1008r1.

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>12</td><td>12</td><td>4</td><td>0</td><td>0</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>The paper indeed resolves the issue.
</ul>

CWG2341 Structured bindings with `static` storage duration {#CWG2341}
-----------------------------------------------------

    * [[CWG2341]]
    * Resolved by [[P1091r3]] Extending structured bindings to be more like variable declarations
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-07-May-2020">Notes 2020-05-07</a>
    * 🗳 <strong>Poll:</strong> Mark CWG2341 "Structured bindings with `static` storage duration" as resolved by P1091r3.

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>11</td><td>12</td><td>4</td><td>0</td><td>0</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>The paper indeed resolves the issue.
</ul>

CWG2343 `void*` non-type template parameters {#CWG2343}
-----------------------------------------------------

    * [[CWG2343]]
    * According to 13.2 [temp.param] bullet 4.2, non-type template parameters of pointer type must be either pointer to object or pointer to function. This excludes `void*`, which is an object pointer but not a pointer to object. However, most or all current implementations accept `void*` as a non-type template parameter. Notes from the April, 2018 Core teleconference: Not all implementations accept a `void*` template parameter, so this should not be a DR if it is eventually adopted. Furthermore, there is some implementation divergence over the kinds of template arguments that can be passed to a `void*` template parameter.
    * Resolved by [[P0732R2]] (which used `std::strong_ordering` in defining strong structural equality and used that for NTTPs) because [[P0515R3]] had given `<=>` the type `std::strong_ordering` for "object pointers" (which includes `void*`, even though void is not an object type). Later [[P1907R1]] replaced all that, saying simply that structural types (which include all scalar types) were acceptable, but that didn't change `void*`'s status. Davis <a href="http://lists.isocpp.org/ext/2020/05/13730.php">emailed EWG the above text</a>.
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-07-May-2020">Notes 2020-05-07</a>
    * <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG28-Oct-2020">Notes 2020-10-28</a>
    * 🗳 <strong>Poll:</strong> Mark CWG2343 "`void*` non-type template parameters" as resolved by P0732R2.

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>10</td><td>11</td><td>4</td><td>0</td><td>0</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>The paper indeed resolves the issue.
</ul>

CWG??? unqualified lookup in <i>conversion-type-id</i>s (<a href="https://lists.isocpp.org/ext/2020/06/14037.php">Sent by Richard Smith to EWG, from CWG</a>) {#CWGZygoloid}
-----------------------------------------------------

    <ul>
    <li><blockquote>The basic situation looks like this:
      <pre>
      struct A {
        struct B {};
        operator B();
      };
      void f(A a) { a.operator B(); }
      </pre>
      There is a special-case lookup rule that allows this code to work: when looking up the `B` in `a.operator B()`, we look inside `a`. Presumably the intent is to allow `operator B` to be named in the same way when it’s referenced as it was named when it was declared. This is a fairly general rule: in `<some context>operator B`, we look up the `B` in the same place in which we later look up the name `operator B`.
      <p><em>Question</em> The issue we are facing is: exactly what lookups does the special-case rule apply to? Consider a few examples:
      <pre>
      a.operator B&lt;C&gt;();
      a.operator B D::*();
      a.operator decltype(E)();
      </pre>
      Which of `B`, `C`, `D`, and `E` get the special "look this name up in `a`" rule?
      <p>There is implementation divergence:
      <ul>
      <li>Clang says none.
      <li>EDG and MSVC say `B` only.
      <li>GCC says `B` and `D`.
      <li>And the consistent rules we're looking at now would say all of `B`, `C`, `D`, and `E` are looked up in `A`.
      </ul>
      </blockquote>
      </li>
    <li>Resolved by [[P1787R6]].
    <li><a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG28-Oct-2020">Notes 2020-10-28</a>
    <li>🗳 <strong>Poll:</strong> Mark the CWG issue sent by Richard Smith to EWG on 2020-06 "unqualified lookup in <i>conversion-type-id</i>s" as resolved by P1787R6.
    </ul>

<strong>Poll votes:</strong>
<table>
    <thead><tr><td>SF</td><td>F</td><td>N</td><td>A</td><td>SA</td></tr></thead>
    <tr><td>9</td><td>10</td><td>5</td><td>0</td><td>0</td></tr>
</table>
<br><strong>Poll outcome:</strong> ✅ consensus.

<strong>Salient comments:</strong>
<ul>
    <li>The paper indeed resolves the issue.
</ul>

Polling Process {#process}
===============

For each poll, participants are asked to vote one of:

* Strongly in favor
* In favor
* Neutral
* Against
* Strongly against

Participants also have the option to abstain from voting on a particular poll. They are be asked to comment on each poll. This comment is mandatory, as it helps the chair determine consensus.


Teleconferences {#telecons}
===============

Here are the minutes for the virtual discussions that were held since the Prague meeting in February 2020:

<ol>
<li>2020-04-09 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Thursday9th-April-2020">Issue Processing</a>
<li>2020-04-15 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Wednesday15th-April-2020">Issue Processing</a>
<li>2020-04-23 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-23-Apr-2020">Issue Processing</a>
<li>2020-04-29 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-29-Apr-2020">Issue Processing</a>
<li>2020-05-07 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-07-May-2020">Issue Processing</a>
<li>2020-05-13 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-13-May-2020">Issue Processing</a>
<li>2020-05-21 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-P1393-21-May-2020">A General Property Customization Mechanism</a>—[[P1393R0]] (<a href="https://wg21.link/P1393/github">P1393 tracking issue</a>)
<li>2020-06-10 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-D2139R1-10-June-2020">Reviewing Deprecated Facilities of C++20 for C++23</a>—[[P2139R1]] (<a href="https://wg21.link/P2139/github">P2139 tracking issue</a>)
<li>2020-06-18 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-P1949-18-June-2020">C++ Identifier Syntax using Unicode Standard Annex 31</a>—[[P1949R4]] (<a href="https://wg21.link/P1949/github">P1949 tracking issue</a>)
<li>2020-06-24 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-P1467-24-June-2020">Extended floating-point types and standard names</a>—[[P1467R4]] (<a href="https://wg21.link/P1467/github">P1467 tracking issue</a>)
<li>2020-07-02 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-P2156-P2173-2-July-2020">Allow Duplicate Attributes, Attributes on Lambda-Expressions</a>—[[P2156R0]] (<a href="https://wg21.link/P2156/github">P2156 tracking issue</a>) and [[P2173R0]] (<a href="https://wg21.link/P2173/github">P2173 tracking issue</a>)
<li>2020-07-08 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-P1726R3-8-July-2020">Pointer lifetime-end zap and provenance, too</a>—[[P1726R3]] (<a href="https://wg21.link/P1726/github">P1726 tracking issue</a>)
<li>2020-07-16 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-P1726R3-16-July-2020">Guaranteed copy elision for return variables</a>—[[P2025R1]] (<a href="https://wg21.link/P2025/github">P2025 tracking issue</a>)
<li>2020-07-30 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-P2139R2ReviewingDeprecatedFacilitiesOfC20ForC23P2186R0RemovingGarbageCollectionSupport-30-July-2020">Reviewing Deprecated Facilities of C++20 for C++23, Removing Garbage Collection Support</a>—[[P2139R2]] (<a href="https://wg21.link/P2139/github">P2139 tracking issue</a>) and [[P2186R0]] (<a href="https://wg21.link/P2186/github">P2186 tracking issue</a>)
<li>2020-08-05 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-P1875R0-5-Aug-2020">Transactional Memory Lite Support in C++</a>—[[P1875R0]] (<a href="https://wg21.link/P1875/github">P1875 tracking issue</a>)
<li>2020-08-19 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-P2013R2FreestandingLanguage:Optional::operatorNewP2201R0MixedStringLiteralConcatenation-19-Aug-2020">Freestanding Language: Optional `::operator new`, Mixed string literal concatenation</a>—[[P2013R2]] (<a href="https://wg21.link/P2013/github">P2013 tracking issue</a>) and [[P2201R0]] (<a href="https://wg21.link/P2201/github">P2201 tracking issue</a>)
<li>2020-08-27 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-D2211R0-27-Aug-2020">Exhaustiveness Checking for Pattern Matching</a>—[[P1371R3]] (<a href="https://wg21.link/P1371/github">P1371 tracking issue</a>)
<li>2020-09-02 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-P1967-02-Sep-2020">`#embed` - a simple, scannable preprocessor-based resource acquisition method</a>—[[P1967R2]] (<a href="https://wg21.link/P1967/github">P1967 tracking issue</a>)
<li>2020-09-10 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-P2011R1-10-Sep-2020">A pipeline-rewrite operator</a>—[[P2011R1]] (<a href="https://wg21.link/P2011/github">P2011 tracking issue</a>)
<li>2020-09-16 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-P1371-16-Sep-2020">Pattern matching: inspect is always an expression</a>—[[P1371R3]] (<a href="https://wg21.link/P1371/github">P1371 tracking issue</a>)
<li>2020-09-24 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-P1949-24-Sep-2020">C++ Identifier Syntax using Unicode Standard Annex 31, Member Templates for Local Classes</a>—[[P1949R6]] (<a href="https://wg21.link/P1949/github">P1949 tracking issue</a>) and [[P2044R0]] (<a href="https://wg21.link/P2044/github">P2044 tracking issue</a>)
<li>2020-09-30 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-30-Sep-2020">Narrowing contextual conversions to bool, Generalized pack declaration and usage</a>—[[P1401R3]] (<a href="https://wg21.link/P1401/github">P1401 tracking issue</a>) and [[P1858R2]] (<a href="https://wg21.link/P1858/github">P1858 tracking issue</a>)
<li>2020-10-08 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-8-Oct-2020">Compound Literals, `if consteval`</a>—[[P2174R0]] (<a href="https://wg21.link/P2174/github">P2174 tracking issue</a>) and [[P1938R1]] (<a href="https://wg21.link/P1938/github">P1938 tracking issue</a>)
<li>2020-10-14 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG14-Oct-2020">Inline Namespaces: Fragility Bites, Trimming whitespaces before line splicing</a>—[[P1701R1]] (<a href="https://wg21.link/P1701/github">P1701 tracking issue</a>) and [[P2223R0]] (<a href="https://wg21.link/P2223/github">P2223 tracking issue</a>)
<li>2020-10-22 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG22-Oct-2020">Issues Processing</a>
<li>2020-10-28 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG28-Oct-2020">Issues Processing</a>
<li>2020-11-05 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG05-Nov-2020">Deducing <code>this</code></a>—<a href="https://wg21.link/P0847r5">P0847R5</a> (<a href="https://wg21.link/P0847/github">P0847 tracking issue</a>)
<li>2020-11-19 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG19-Nov-2020"><code>goto</code> in pattern matching</a>
<li>2020-12-03 <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG03-Dec-2020"><code>auto(x)</code>: decay-copy in the language</a>—<a href="https://wg21.link/P0849r5">P0849R5</a> (<a href="https://wg21.link/P0849/github">P0849 tracking issue</a>)
<li>2021-01-14 <a href="https://wiki.edg.com/bin/view/Wg21telecons2021/Polls-2021-01-14">Polls</a>
<li>2021-01-20 <a href="https://wiki.edg.com/bin/view/Wg21telecons2021/Minutes-2021-01-20">Final polls preparation</a>
<li>2021-01-28 <a href="https://wiki.edg.com/bin/view/Wg21telecons2021/EWG-2021-01-28">P2012 Fix the range‐based for loop</a>
<li>2021-02-03 <a href="https://wiki.edg.com/bin/view/Wg21telecons2021/EWG-2021-02-03">P2280 Using unknown references in constant expressions</a>
<li>2021-02-11 <a href="https://wiki.edg.com/bin/view/Wg21telecons2021/EWG-2021-02-11">P1974 Non-transient constexpr allocation using <code>propconst</code></a>
<li>2021-02-17 <a href="https://wiki.edg.com/bin/view/Wg21telecons2021/EWG-2021-02-17">P2242 Non-literal variables (and labels and <code>goto</code>s) in <code>constexpr</code> functions</a>
<li>2021-02-25 <a href="https://wiki.edg.com/bin/view/Wg21telecons2021/EWG-2021-02-25">P1371 pattern matching: implementation experience</a> pattern matching now has fairly capable prototype implementation and in this session it will be both demonstrated and described. Bruno, the core implementer, will also field any implementation related questions surrounding the proposal. See the <a href="https://godbolt.org/z/fdd5j4">Godbolt demo</a>.
<li>2021-03-02 <a href="https://wiki.edg.com/bin/view/Wg21telecons2021/EvolutionJoint-2021-03-02">P2279R0 We need a language mechanism for customization points</a> joint EWG+LEWG session
</ol>


Remaining Open Issues {#issues}
=====================

The following table lists all remaining open issues referred to EWG by Core or Library. Some of them are ready to be polled but are held back from the February 2021 polling period to limit the number of polls in this round.

<table cellspacing="0" cellpadding="0">
  <tbody>
    <tr>
      <td valign="middle">
        <p><b>From</b></p>
      </td>
      <td valign="top">
        <p><b>#</b></p>
      </td>
      <td valign="top">
        <p><b>Title</b></p>
      </td>
      <td valign="top">
        <p><b>Notes</b></p>
      </td>
      <td valign="top">
        <p><b>Resolution</b></p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG2261]]</p>
      </td>
      <td valign="top">
        <p>Explicit instantiation of in-class `friend` definition</p>
      </td>
      <td valign="top">
      <pre>
        struct S { 
           template &lt;class T&gt; friend void f(T) { } 
          }; 
          template void f(int);  // Well-formed?
        </pre>
        <p>A `friend` is not found by ordinary name lookup until it is explicitly declared in the containing namespace, but declaration matching does not use ordinary name lookup. There is implementation divergence on the handling of this example.</p>
        <p><br></p>
        <p><a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-29-Apr-2020">Note 2020-04-29</a> Tentative agreement: This should be well-formed.</p>
        <p>SF 1 F 10 N 2 A 1 SA 0 </p>
        <p>JF <a href="https://lists.isocpp.org/ext/2020/05/13708.php"><span>emailed EWG / Core about this</span></a>.</p>
        <p>Davis: the current name lookup approach which Core is taking in p1787 would disallow this. Supporting this is possible, it would be inconsistent, but would also be a feature.</p>
        <p><a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG22-Oct-2020">Notes 2020-10-22</a>: wait until p1787 is voted into the working draft, because it’s making this behavior intentional. At that point, we can vote on marking the issue as Not a Defect. No objection to unanimous consent.</p>
      </td>
      <td valign="top">
        <p>♻️</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG2270]]</p>
      </td>
      <td valign="top">
        <p>Non-`inline` functions and explicit instantiation declarations</p>
      </td>
      <td valign="top">
        <p>[Detailed description pending.]</p>
        <p><b>Hubert:</b> question over the role of the `inline` keyword in relation to explicit instantiation declarations.</p>
        <p>For `inline` functions, explicit instantiation declarations do not have the effect of suppressing implicit instantiation.</p>
        <p>A user's desire for wanting to suppress implicit instantiation can arise for different reasons:</p>
        <p>To reduce space in object files, executables, etc. and similarly to reduce the number of input symbols to the linker</p>
        <p>To reduce compile time in performing semantic analysis for instantiations whose definitions are provided elsewhere</p>
        <p>To control point-of-instantiation, avoiding contexts where the requisite declarations are not declared</p>
        <p>The special rule around inline functions allows `inline`-ness to be used to indicate that the first reason is the intent and that instantiation-for-inlining is okay.</p>
        <p>Consider the following as a translation unit:</p>
        <pre>
        template &lt;typename T&gt;
        //inline
        void f(T t) { g(t); }
        enum E : int;
        extern template void f(E);
        void h(E e) { f(e); }
        </pre>
        <p>Marking the template definition `inline` would mean that the intended declaration for `g` would need to be provided as the best candidate at the points-of-instantiation for `f&lt;E&gt;`.</p>
        <p>The issue initially points out that this use of the `inline` keyword does not match a view that `inline` is essentially an ODR tool to allow multiple definitions (as opposed to a way to indicate desire for inlining) and proposed that `extern template` merely has the effect of suppressing definitions in terms of linkage (regardless of the `inline` keyword). Such a change would affect the usability of the feature for user intent that falls within the latter two options above.</p>
        <p>I am not sure if CWG is asking EWG a specific question other than the general "we do not believe this is a wording or obvious consistency issue; is this an issue in terms of design?"</p>
        <p><b>Meeting:</b></p>
        <p>Hubert <a href="https://lists.isocpp.org/ext/2020/05/13799.php"><span>forked the thread on the reflector</span></a>. Might want the education SG to take a look, or might want a paper.</p>
        <p><b>Meeting 2020-10-28</b>: Inbal will try to put together the wording, to prove / disprove whether this is a defect.</p>
      </td>
      <td valign="top">
        <p>♻️</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Lib</p>
      </td>
      <td valign="top">
        <p>[[LWG2432]]</p>
      </td>
      <td valign="top">
        <p>initializer_list assignability</p>
      </td>
      <td valign="top">
        <p>std::initializer_list::operator= [support.initlist] is horribly broken and it needs deprecation:</p>
        <p><br></p>
        <p>std::initializer_list&lt;foo&gt; a = {{1}, {2}, {3}};</p>
        <p>a = {{4}, {5}, {6}};</p>
        <p>// New sequence is already destroyed.</p>
        <p><br></p>
        <p>Assignability of initializer_list isn't explicitly specified, but most implementations supply a default assignment operator. I'm not sure what [description] says, but it probably doesn't matter.</p>
        <p><br></p>
        <p><b>Proposed resolution:</b></p>
        <p><br></p>
        <p>Edit [support.initlist] p1, class template initializer_list synopsis, as indicated:</p>
        <p><br></p>
        <p>namespace std {</p>
        <p>  template&lt;class E&gt; class initializer_list {</p>
        <p>  public:</p>
        <p>    […]</p>
        <p>    constexpr initializer_list() noexcept;</p>
        <p>  </p>
        <p>    initializer_list(const initializer_list&amp;) = default;</p>
        <p>    initializer_list(initializer_list&amp;&amp;) = default;</p>
        <p>    initializer_list&amp; operator=(const initializer_list&amp;) = delete;</p>
        <p>    initializer_list&amp; operator=(initializer_list&amp;&amp;) = delete;</p>
        <p>    </p>
        <p>    constexpr size_t size() const noexcept;</p>
        <p>    […]</p>
        <p>  };</p>
        <p>  […]</p>
        <p>}</p>
        <p><br></p>
        <p><span><a href="http://wiki.edg.com/bin/view/Wg21cologne/LWGTelecon-2014-12-18">LWG telecon</a></span> appears to want a language change to disallow assigning a braced-init-list to an std::initializer_list but still permit move assignment of std::initializer_list objects. That is,</p>
        <p><br></p>
        <p>auto il1 = {1,2,3};</p>
        <p>auto il2 = {4,5,6};</p>
        <p>il1 = {7,8,9}; // currently well-formed but dangles immediately; should be ill-formed</p>
        <p>il1 = std::move(il2); // currently well-formed and should remain so</p>
        <p><br></p>
        <p><b>Meeting:</b> Proposed resolution:</p>
        <pre>
        initializer_list(const initializer_list&) = default;
        initializer_list(initializer_list&&) = default;
        [[deprecated]] initializer_list& operator=(const initializer_list&) = default;
        [[deprecated]] initializer_list& operator=(initializer_list&&) = default;
        </pre>
        <p>SF F N A SA</p>
        <p>0 3 12 0 0</p>
        <p>JF <a href="https://lists.isocpp.org/lib-ext/2020/05/15334.php"><span>emailed LEWG</span></a>, to see if they have an opinion, no feedback. Asked LEWG chairs to schedule for a telecon.</p>
        <p><span><a href="https://lists.isocpp.org/lib/2020/10/17760.php">LWG discussed</a></span> priority.</p>
      </td>
      <td valign="top">
        <p>♻️</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Lib</p>
      </td>
      <td valign="top">
        <p>[[LWG2813]]</p>
      </td>
      <td valign="top">
        <p>std::function should not return dangling references</p>
      </td>
      <td valign="top">
        <p>If a std::function has a reference as a return type, and that reference binds to a prvalue returned by the callable that it wraps, then the reference is always dangling. Because any use of such a reference results in undefined behaviour, the std::function should not be allowed to be initialized with such a callable. Instead, the program should be ill-formed.</p>
        <p><br></p>
        <p>A minimal example of well-formed code under the current standard that exhibits this issue:</p>
        <p><br></p>
        <p>int main()  {</p>
        <p>  std::function&lt;const int&amp;()&gt; F([]{ return 42; });</p>
        <p>  int x = F(); // oops!</p>
        <p>}</p>
        <p><br></p>
        <p><b>Proposed resolution:</b></p>
        <p><br></p>
        <p>Add a second paragraph to the remarks section of 20.14.16.2.1 [func.wrap.func.con]:</p>
        <p><br></p>
        <p>template&lt;class F&gt; function(F f);</p>
        <p>-7- Requires: F shall be CopyConstructible.</p>
        <p>-8- Remarks: This constructor template shall not participate in overload resolution unless</p>
        <ul>
          <li><span></span>F is Lvalue-Callable (20.14.16.2 [func.wrap.func]) for argument types ArgTypes... and return type R, and<br>
</li>
          <li><span></span>If R is type "reference to T" and INVOKE(ArgTypes...) has value category V and type U:<br>
</li>
          <ul>
            <li><span></span>V is a prvalue, U is a class type, and T is not reference-related (9.4.3 [dcl.init.ref]) to U, and<br>
</li>
            <li><span></span>V is an lvalue or xvalue, and either U is a class type or T is reference-related to U.<br>
</li>
          </ul>
        </ul>
        <p>[…]</p>
        <p><br></p>
        <p><b>Tim:</b> LWG in Batavia 2018 would like a way to detect when the initialization of a reference would bind it to a temporary. This requires compiler support, since there's no known way in the current language to do so reliably in the presence of user-defined conversions (see thread starting at <a href="https://lists.isocpp.org/lib/2017/07/3256.php"><span>https://lists.isocpp.org/lib/2017/07/3256.php</span></a>).</p>
        <p><br></p>
        <p><b>Meeting:</b> </p>
        <p>Tim wrote <a href="https://wg21.link/p2255"><span>p2255</span></a> to address this.</p>
        <p>Ville thinks there should be an analysis of alternative approaches.</p>
        <p>Also see <a href="http://wg21.link/P0932"><span>P0932</span></a>.</p>
      </td>
      <td valign="top">
        <p>♻️</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG728]]</p>
      </td>
      <td valign="top">
        <p>Restrictions on local classes</p>
      </td>
      <td valign="top">
        <p>Now that the restriction against local classes being used as template arguments has been lifted, they are more useful, yet they are still crippled. For some reason or oversight, the restriction against local classes being templates or having member templates was not lifted. Allowing local classes to have member templates facilitates generic programming (the reason for lifting the other restriction), especially when it comes to the visitor-pattern (see the boost::variant documentation and the following example) as implemented in boost and the boost::MPL library (since functors have to be template classes in mpl, and higher-order functors have to have member templates to be useful). A local class with a member template would allow this desirable solution:</p>
        <p>    #include &lt;boost/variant.hpp&gt;</p>
        <p>    int main() {</p>
        <p>      struct times_two_generic: public boost::static_visitor&lt;&gt; {</p>
        <p>        template &lt;typename T&gt; void operator()(T&amp; operand) const {</p>
        <p>            operand += operand;</p>
        <p>        }</p>
        <p>      };</p>
        <p>      std::vector&lt;boost::variant&lt;int, std::string&gt;&gt; vec;</p>
        <p>      vec.push_back(21);</p>
        <p>      vec.push_back("hello ");</p>
        <p>      times_two_generic visitor;</p>
        <p>      std::for_each(vec.begin(), vec.end(), boost::apply_visitor(visitor));</p>
        <p>    }</p>
        <p>Is there any compelling reason not to allow this code? Is there any compelling reason not to allow local classes to be templates, have friends, or be able to define their static data members at function scope? Wouldn't this symmetry amongst local and non-local classes make the language more appealing and less embarrassing?</p>
        <p>Also see <a href="http://wg21.link/p2044"><span>p2044</span></a>, seen by EWGI in Prague and requested to be merged with <a href="http://wg21.link/P1988"><span>P1988</span></a>, and implementors queried.</p>
        <p><span><a href="https://isocpp.org/files/papers/D2044R2.pdf">The current paper draft</a></span> addresses all of this.</p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Thursday9th-April-2020"><span>notes</span></a>)</p>
        <p>Some folks unsure that we should do anything here. Revisit the resolution with P2044.</p>
        <p>Extension issues are a closed status on the issues list, like NAD Future was for LWG I find it helpful to have a status that says EWG may still be considering it.</p>
        <p>Suggest closing as Not A Defect because we have significant implementation concerns, but we’ll explore the design space in P2044. All in favor.</p>
      </td>
      <td valign="top">
        <p>NAD</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG794]]</p>
      </td>
      <td valign="top">
        <p>Base-derived conversion in member type of pointer-to-member conversion</p>
      </td>
      <td valign="top">
        <p>Related to <a href="http://wg21.link/cwg170"><span>CWG 170</span></a>, drafting by Clark seems unlikely. This is section 2.1 of Jeff Snyder's <a href="http://wg21.link/P0149R0"><span>P0149R0</span></a>, which was approved by EWG, <a href="http://wiki.edg.com/bin/view/Wg21oulu/P0149R0"><span>4 years ago</span></a>, waiting for wording.</p>
        <p>JF reached out to Jeff. Did wording with Jens, main blocker is lack of implementation.</p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Thursday9th-April-2020"><span>notes</span></a>) Suggest closing as Not A Defect because we have implementation uncertainties, but we’ll explore the design space in P0149. ABI group will discuss. All in favor.</p>
      </td>
      <td valign="top">
        <p>NAD</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG900]]</p>
      </td>
      <td valign="top">
        <p>Lifetime of temporaries in range-based for</p>
      </td>
      <td valign="top">
        <p>// some function</p>
        <p>  std::vector&lt;int&gt; foo();</p>
        <p>  // correct usage</p>
        <p>  auto v = foo();</p>
        <p>  for( auto i : reverse(v) ) { std::cout &lt;&lt; i &lt;&lt; std::endl; }</p>
        <p>  // problematic usage</p>
        <p>  for( auto i : reverse(foo()) ) { std::cout &lt;&lt; i &lt;&lt; std::endl; }</p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Thursday9th-April-2020"><span>notes</span></a>, also <a href="https://wiki.edg.com/bin/view/Wg21rapperswil2014/EvolutionWorkingGroup"><span>discussed in Rapperswil 2014</span></a>) Suggest closing as Not A Defect because it’s a change which might have effects on existing code (might cause bugs), and might need to change more than just range-based loops. See <a href="http://wg21.link/p0614"><span>p0614</span></a>, <a href="http://wg21.link/p0577"><span>p0577</span></a>, <a href="http://wg21.link/p0936"><span>p0936</span></a>, <a href="http://wg21.link/p1179"><span>p1179</span></a>. We’ll explore the design space in a separate paper, Herb circled back with Nico on this, might write a paper. All in favor.</p>
      </td>
      <td valign="top">
        <p>NAD</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG944]]</p>
      </td>
      <td valign="top">
        <p>reinterpret_cast for all types with the same size and alignment</p>
      </td>
      <td valign="top">
        <p>During the discussion of issue <a href="http://wg21.link/cwg799"><span>799</span></a>, which specified the result of using reinterpret_cast to convert an operand to its own type, it was observed that it is probably reasonable to allow reinterpret_cast between any two types that have the same size and alignment.</p>
        <p>Additional note, April, 2015: It has been suggested that this question may more properly be the province of EWG, especially in light of discussions during the resolution of issue <a href="http://wg21.link/cwg330"><span>330</span></a>. The priority has been deleted to allow CWG to reconsider its status.</p>
        <p>Rationale (May, 2015): CWG agreed that this question should be considered from a language design perspective and is thus being referred to EWG.</p>
        <p>Suggest rejection: we chose to add std::bit_cast to provide exactly this functionality instead of extending reinterpret_cast.</p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Thursday9th-April-2020"><span>notes</span></a>) Suggest closing as Not A Defect. bit_cast addresses some of the usecases this issue might cover. We’d want separate papers to support other usescases, but have nothing outstanding at the moment. All in favor.</p>
      </td>
      <td valign="top">
        <p>NAD</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG1008]]</p>
      </td>
      <td valign="top">
        <p>Querying the alignment of an object</p>
      </td>
      <td valign="top">
        <p><span><a href="https://godbolt.org/z/_SN8iF">https://godbolt.org/z/_SN8iF</a></span></p>
        <ul>
          <li><span></span>GCC already implements this extension without issuing a warning</li>
          <li><span></span>Clang and EDG implement this extension for gcc compatibility, with a warning</li>
          <li><span></span>MSVC does not yet implement this feature</li>
        </ul>
        <p>Quick example using ‘auto’ illustrates why we might want this capability for objects as well as types.</p>
        <p>Principle of least astonishment suggests it is surprising for sizeof and alignof to behave differently in this regard.</p>
        <p>Recommend shipping this straight to core as soon as we can find a wording champion.</p>
        <p>We need to discuss with WG14.</p>
        <p>Questions for EWG to answer before forwarding:</p>
        <ul>
          <li><span></span>Should this be a unary operator, like sizeof, so "alignof x" is valid? Or should it be like typeid, where parens are required?</li>
          <li><span></span>What would this mean? Is it the alignment of the type of the object? Or the compiler's best guess of the alignment of the expression itself? Should it take into account any facts that are known about the expression other than its type? If so, which ones? (For example, if applied to an expression x or e.x and x is declared with an `alignas` attribute, is that value returned?)</li>
        </ul>
        <p>This needs a design paper rather than going straight to core.</p>
        <p><span><a href="https://godbolt.org/z/TeVA9T">https://godbolt.org/z/TeVA9T</a></span> GCC seems to report the alignment of the object not just of decltype(object).</p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Thursday9th-April-2020"><span>notes</span></a>, also <a href="https://wiki.edg.com/bin/view/Wg21rapperswil2014/EvolutionWorkingGroup"><span>discussed in Rapperswil 2014</span></a>) Suggest closing as Not A Defect, the design is complex especially around alignment of object versus type. Invite a paper, Inbal will pitch in, Alidair can collaborate. All in favor.</p>
        <p>Inbal’s paper: <a href="http://wg21.link/P2152R0"><span>P2152R0</span></a></p>
      </td>
      <td valign="top">
        <p>NAD</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG1077]]</p>
      </td>
      <td valign="top">
        <p>Explicit specializations in non-containing namespaces</p>
      </td>
      <td valign="top">
        <p>The current wording of 9.8.1.2 [namespace.memdef] and 13.9.3 [temp.expl.spec] requires that an explicit specialization be declared either in the same namespace as the template or in an enclosing namespace. It would be convenient to relax that requirement and allow the specialization to be declared in a non-enclosing namespace to which one or more if the template arguments belongs.</p>
        <p>Additional note, April, 2015: See EWG issue <a href="http://wg21.link/cwg48"><span>48</span></a>.</p>
        <p>Might allow us to revert <a href="http://wg21.link/cwg2061"><span>DR2061</span></a> and all the horribleness that created and described in <a href="http://wg21.link/p1701"><span>p1701</span></a>.  The problem 1077 addresses is the motivating factor in dr2061.</p>
        <p>Also see <a href="http://wg21.link/cwg2370"><span>CWG 2370</span></a>.</p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Thursday9th-April-2020"><span>notes</span></a>) Suggest closing as Not A Defect. See <a href="http://wg21.link/p0665"><span>p0665</span></a>, <a href="http://wiki.edg.com/bin/view/Wg21rapperswil2018/P0665R1-Rap18"><span>minutes</span></a>. Continue under p0665 or a forked version of it. All in favor.</p>
      </td>
      <td valign="top">
        <p>NAD</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG1433]]</p>
      </td>
      <td valign="top">
        <p><i>trailing-return-type</i> and point of declaration</p>
      </td>
      <td valign="top">
        <p>template &lt;class T&gt; T list(T x);</p>
        <p>    template &lt;class H, class ...T&gt;</p>
        <p>    auto list(H h, T ...args) -&gt; decltype(list(args...)); // list isn’t in scope in its own <i>trailing-return-type</i></p>
        <p>    auto list3 = list(1, 2, 3);</p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Wednesday15th-April-2020"><span>notes</span></a>, also <a href="https://wiki.edg.com/bin/view/Wg21rapperswil2014/EvolutionWorkingGroup"><span>discussed in Rapperswil 2014</span></a>) there might be compiler divergence according to Daveed. Suggest closing as Not A Defect, it would be tricky to change behavior without ambiguity. "Fixing" this would break existing code that relies on seeing only previous declarations. No objection to unanimous consent.</p>
      </td>
      <td valign="top">
        <p>NAD</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG1451]]</p>
      </td>
      <td valign="top">
        <p>Objects with no linkage in non-type template arguments</p>
      </td>
      <td valign="top">
        <p>According to 13.4.2 [temp.arg.nontype] paragraph 1 bullet 3, only objects with linkage can be used to form non-type template arguments. Is this restriction still needed? It would be convenient to use block-scope objects as template arguments.</p>
        <p>Resolved by <a href="http://wg21.link/N4268"><span>N4268</span></a>.</p>
        <p>The following is valid:</p>
        <p>template &lt;int *&gt; struct A;</p>
        <p>auto f() {</p>
        <p>  static int x;</p>
        <p>  A&lt;&amp;x&gt; *ap = nullptr;</p>
        <p>  return ap;</p>
        <p>}</p>
        <p>There is no longer any linkage restriction. There is a restriction on storage duration, which seems reasonable (you can use the address of a local static variable but not of a local automatic variable as a non-type template argument).</p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Wednesday15th-April-2020"><span>notes</span></a>, also <a href="https://wiki.edg.com/bin/view/Wg21rapperswil2014/EvolutionWorkingGroup"><span>discussed in Rapperswil 2014</span></a>) Suggest closing as Not A Defect. Addressed by N4268. No objection to unanimous consent.</p>
      </td>
      <td valign="top">
        <p>NAD</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG1469]]</p>
      </td>
      <td valign="top">
        <p>Omitted bound in array <i>new-expression</i></p>
      </td>
      <td valign="top">
        <p>The syntax for noptr-new-declarator in 7.6.2.7 [expr.new] paragraph 1 requires an expression, even though the bound could be inferred from a braced-init-list initializer. It is not clear whether 9.4.1 [dcl.init.aggr] paragraph 4, An array of unknown size initialized with a brace-enclosed initializer-list containing n initializer-clauses, where n shall be greater than zero, is defined as having n elements (9.3.3.4 [dcl.array]).</p>
        <p>should be considered to apply to the new-type-id variant, e.g.,</p>
        <p>  new (int[]){1, 2, 3}</p>
        <p>This was addressed by <a href="http://wg21.link/p1009"><span>p1009</span></a></p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Wednesday15th-April-2020"><span>notes</span></a>) Suggest closing as Not A Defect. Addressed by P1009. No objection to unanimous consent.</p>
      </td>
      <td valign="top">
        <p>NAD</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG1555]]</p>
      </td>
      <td valign="top">
        <p>Language linkage and function type compatibility</p>
      </td>
      <td valign="top">
        <p>Currently function types with different language linkage are not compatible, and 7.6.1.2 [expr.call] paragraph 1 makes it undefined behavior to call a function via a type with a different language linkage. These features are generally not enforced by most current implementations (although some do) between functions with C and C++ language linkage. Should these restrictions be relaxed, perhaps as conditionally-supported behavior?</p>
        <p>Somewhat related to CWG1463.</p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Wednesday15th-April-2020"><span>notes</span></a>) no strong consensus at the moment, Erich Keane brought this up with SG12 Undefined Behavior. <a href="https://lists.isocpp.org/sg12/2020/05/0905.php"><span>Long discussion</span></a>, will need to revisit, need a paper.</p>
        <p><b>Meeting Oct 22nd 2020:</b> will need a volunteer to write a paper, but the wording in the standard is unambiguous, and we have existence proof of platforms which use different calling conventions between C and C++. However many major compilers have chosen to ignore this. Not a defect, but we welcome a paper to change the status quo. No objection to unanimous consent.</p>
      </td>
      <td valign="top">
        <p>NAD</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG1643]]</p>
      </td>
      <td valign="top">
        <p>Default arguments for template parameter packs</p>
      </td>
      <td valign="top">
        <p>Although 13.2 [temp.param] paragraph 9 forbids default arguments for template parameter packs, allowing them would make some program patterns easier to write. Should this restriction be removed?</p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Wednesday15th-April-2020"><span>notes</span></a>) Suggest closing as Not A Defect. Interesting design space, but needs a paper, see N3416. No objection to unanimous consent.</p>
      </td>
      <td valign="top">
        <p>NAD</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG1864]]</p>
      </td>
      <td valign="top">
        <p>List-initialization of array objects</p>
      </td>
      <td valign="top">
        <p>The resolution of issue <a href="http://wg21.link/cwg1467"><span>1467</span></a> now allows for initialization of aggregate classes from an object of the same type. Similar treatment should be afforded to array aggregates.</p>
        <p>See recent discussion on allowing 'auto x[] = {1, 2, 3};' -- this topic came up there. The two questions can be answered independently, but some consider them to be related.</p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Wednesday15th-April-2020"><span>notes</span></a>) Suggest closing as Not A Defect. Fixing anything in this space would require a paper which considers the entire design space, Timur might be interested in this. No objection to unanimous consent.</p>
      </td>
      <td valign="top">
        <p>NAD</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG1871]]</p>
      </td>
      <td valign="top">
        <p>Non-identifier characters in <i>ud-suffix</i></p>
      </td>
      <td valign="top">
        <p>JF forwarded to SG16 Unicode given their work on TR31. Tracked on <a href="https://github.com/sg16-unicode/sg16/issues/61"><span>GitHub</span></a>. SG16 reviewed D1949R3, still needs wording changes. Discussed at <a href="https://github.com/sg16-unicode/sg16-meetings#april-22nd-2020"><span>the April 22nd SG16 telecon</span></a>.</p>
        <p><b>SG16 Poll:</b> Is there any objection to unanimous consent for recommending rejection of this proposal? No objection to unanimous consent.</p>
        <p><b>EWG Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Wednesday15th-April-2020"><span>notes 2020-04-15</span></a>, <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-07-May-2020"><span>notes 2020-05-07</span></a>) Suggest closing as Not A Defect. No objection to unanimous consent.</p>
      </td>
      <td valign="top">
        <p>NAD</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG1876]]</p>
      </td>
      <td valign="top">
        <p>Preventing explicit specialization</p>
      </td>
      <td valign="top">
        <p>A desire has been expressed for a mechanism to prevent explicitly specializing a given class template, in particular std::initializer_list and perhaps some others in the standard library. It is not clear whether simply adding a prohibition to the description of the templates in the library clauses would be sufficient or whether a core language mechanism is required.</p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-23-Apr-2020"><span>notes</span></a>) Suggest closing as Not A Defect. No objection to unanimous consent. This could be a language feature, would need library usecase examples.</p>
        <p><b>Poll:</b> we are interested in such a paper SF 2 F 13 N 6 A 1 SA 0</p>
      </td>
      <td valign="top">
        <p>NAD</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG1915]]</p>
      </td>
      <td valign="top">
        <p>Potentially-invoked destructors in non-throwing constructors</p>
      </td>
      <td valign="top">
        <p>Since the base class constructor is non-throwing, the deleted base class destructor need not be referenced.</p>
        <p>There's a typo in the issues list here: it should say "Since the *derived* class constructor is non-throwing, the deleted base class destructor need not be referenced."</p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-23-Apr-2020"><span>notes 2020-04-23</span></a>) the proposed wording changes the implementation leeway in two-phase unwinding, which breaks some existing ABIs. We would need  a paper to explore this further. Suggest closing as Not A Defect. No objection to unanimous consent.</p>
      </td>
      <td valign="top">
        <p>NAD</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG1923]]</p>
      </td>
      <td valign="top">
        <p>Lvalues of type void</p>
      </td>
      <td valign="top">
        <p>There does not seem to be any significant technical obstacle to allowing a void* pointer to be dereferenced, and that would avoid having to use weighty circumlocutions when casting to a reference to an object designated by such a pointer.</p>
        <p>Might consider this a duplicate of the discussion on "regular void".</p>
        <p>JF reached out to Matt. He has an implementation in clang. Needs to update the paper. Might need a volunteer to present. Daveed would be interested in presenting.</p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-23-Apr-2020"><span>notes 2020-04-23</span></a>) Suggest closing as Not A Defect. Explore under the “regular void” umbrella. No objection to unanimous consent.</p>
      </td>
      <td valign="top">
        <p>NAD</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG1934]]</p>
      </td>
      <td valign="top">
        <p>Relaxing <i>exception-specification</i> compatibility requirements</p>
      </td>
      <td valign="top">
        <p>According to 14.5 [except.spec] paragraph 4,</p>
        <p><br></p>
        <p>If any declaration of a function has an exception-specification that is not a noexcept-specification allowing all exceptions, all declarations, including the definition and any explicit specialization, of that function shall have a compatible exception-specification.</p>
        <p><br></p>
        <p>This seems excessive for explicit specializations, considering that paragraph 6 applies a looser requirement for virtual functions:</p>
        <p><br></p>
        <p>If a virtual function has an exception-specification, all declarations, including the definition, of any function that overrides that virtual function in any derived class shall only allow exceptions that are allowed by the exception-specification of the base class virtual function.</p>
        <p><br></p>
        <p>The rule in paragraph 3 is also problematic in regard to explicit specializations of destructors and defaulted special member functions, as the implicit exception-specification of the template member function cannot be determined.</p>
        <p><br></p>
        <p>There is also a related problem with defaulted special member functions and exception-specifications. According to 9.5.2 [dcl.fct.def.default] paragraph 3,</p>
        <p><br></p>
        <p>If a function that is explicitly defaulted has an explicit exception-specification that is not compatible (14.5 [except.spec]) with the exception-specification on the implicit declaration, then</p>
        <ul>
          <li><span></span>if the function is explicitly defaulted on its first declaration, it is defined as deleted;</li>
          <li><span></span>otherwise, the program is ill-formed.<br>
</li>
        </ul>
        <p>This rule precludes defaulting a virtual base class destructor or copy/move functions if the derived class function will throw an exception not allowed by the implicit base class member function.</p>
        <p><br></p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-23-Apr-2020"><span>notes 2020-04-23</span></a>) JF will work with Mike to update wording to C++20. Will revisit.</p>
        <p>From Mike: This issue is NAD since we eliminated typed exception-specifications. The current wording, dealing only with noexcept(true) and noexcept(false), does not have this issue. Will remove “extension” status.</p>
        <p><b>Meeting:</b> no objection to CWG taking it back, and marking it as NAD.</p>
      </td>
      <td valign="top">
        <p>NAD</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG1957]]</p>
      </td>
      <td valign="top">
        <p>decltype(auto) with direct-list-initialization</p>
      </td>
      <td valign="top">
        <p>Paper <a href="http://wg21.link/N3922"><span>N3922</span></a> changed the rules for deduction from a braced-init-list containing a single expression in a direct-initialization context. Should a corresponding change be made for decltype(auto)? E.g.,</p>
        <p>  auto x8a = { 1 };           // decltype(x8a) is std::initializer_list&lt;int&gt;</p>
        <p>  decltype(auto) x8d = { 1 }; // ill-formed, a braced-init-list is not an expression</p>
        <p>  auto x9a{ 1 };              // decltype(x9a) is int</p>
        <p>  decltype(auto) x9d{ 1 };    // decltype(x9d) is int</p>
        <p>See also issue <a href="http://wg21.link/cwg1467"><span>1467</span></a>, which also effectively ignores braces around a single expression, this change would be parallel to that one, even though the primary motivation for delctype(auto) is in the return type of a forwarding function, where direct-initialization does not apply.</p>
        <p><br></p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-23-Apr-2020"><span>notes 2020-04-23</span></a>) Suggest closing as Not A Defect. This would be a language change, it’s unclear that we want to make such a change. It would require a paper. Mike Spertus is writing a paper with some overlap, will cover this as well. No objection to unanimous consent.</p>
      </td>
      <td valign="top">
        <p>NAD</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG2111]]</p>
      </td>
      <td valign="top">
        <p>Array temporaries in reference binding</p>
      </td>
      <td valign="top">
        <p>The current wording of the Standard appears to permit code like</p>
        <pre>
          void f(const char (&amp;)[10]);
          void g() {
            f("123");
            f({'a','b','c','\0'});
          }
        </pre>
        <p>creating a temporary array of ten elements and binding the parameter reference to it. This is controversial and should be reconsidered. (See issues <a href="http://wg21.link/cwg1058"><span>1058</span></a> and <a href="http://wg21.link/cwg1232"><span>1232</span></a>.)</p>
        <p><br></p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-23-Apr-2020"><span>notes 2020-04-23</span></a>) JF digging more, talking to Richard about this.</p>
        <p>Somewhat related to <a href="http://wg21.link/P2174"><span>P2174</span></a> compound literals.</p>
        <p>Would be very strange if</p>
        <p><span>  </span>`const char (&amp;&amp;x)[10] = {'a', 'b', 'c'};`</p>
        <p>... were invalid but ...</p>
        <p><span>  </span>`const char x[10] = {'a', 'b', 'c'};`</p>
        <p><span>  </span>`const char (&amp;&amp;x)[3] = {'a', 'b', 'c'};`</p>
        <p>... were both OK. Maybe either we should allow the trailing elements to be zeroed in general (the status quo), or not (a major breaking change). Which means we should reject the issue on consistency grounds. The general rule is that if</p>
        <p><span>  </span>T &amp;&amp;r = init;</p>
        <p>... can't bind directly, we create a temporary initialized as if with</p>
        <p><span>  </span>T r = init;</p>
        <p>... and bind to that. (And similarly for const references.)</p>
        <p>Another question: Do we want to support (T){inits} as a synonym for T{inits}?</p>
        <p><br></p>
        <p><b>Meeting Oct 22nd 2020:</b> Note that the issue itself is defective, and `f("123")` isn’t valid.</p>
        <p>CWG2352 references p1358, and was resolved, leading us to believe that this is now mainstream and not controversial. Not a defect. No objection to unanimous consent.</p>
      </td>
      <td valign="top">
        <p>NAD</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG2125]]</p>
      </td>
      <td valign="top">
        <p>Copy elision and comma operator</p>
      </td>
      <td valign="top">
        <p>Currently, _N4750_.15.8 [class.copy] paragraphs 31-32 apply only to the name of a local variable in determining whether a return expression is a candidate for copy elision or move construction. Would it make sense to extend that to include the right operand of a comma operator?</p>
        <p><br></p>
        <p>X f() {</p>
        <p>  X x;</p>
        <p>  return (0, x);</p>
        <p>}</p>
        <p><br></p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-23-Apr-2020"><span>notes 2020-04-23</span></a>) Consider expanding to other places that expand bit-field-ness such as return b ? throw : x;. Suggest closing as Not A Defect. Will need a paper to address, no current volunteer for this. No objection to unanimous consent.</p>
      </td>
      <td valign="top">
        <p>NAD</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG2132]]</p>
      </td>
      <td valign="top">
        <p>Deprecated default generated copy constructors</p>
      </td>
      <td valign="top">
        <p>EWG has indicated that they are not currently in favor of removing the implicitly declared defaulted copy constructors and assignment operators that are eprecated in _N4750_.15.8 [class.copy] paragraphs 7 and 18. Should this deprecation be removed?</p>
        <p>Related: discussing under <a href="http://wg21.link/p2139"><span>p2139</span></a> deprecations.</p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-29-Apr-2020"><span>note 2020-04-29</span></a>) Suggest closing as Not A Defect. No objection to unanimous consent. We either want to remove entirely, or un-deprecate. This will need a paper, Ville will talk with Alisdair about forking the topic from p2139.</p>
      </td>
      <td valign="top">
        <p>NAD</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG914]]</p>
      </td>
      <td valign="top">
        <p>Value-initialization of array types</p>
      </td>
      <td valign="top">
        <p>Although value-initialization is defined for array types and the () initializer is permitted in a mem-initializer naming an array member of a class, the syntax T() (where is an array type) is explicitly forbidden by 7.6.1.3 [expr.type.conv] paragraph 2. This is inconsistent and the syntax should be permitted.</p>
        <p>Rationale (July, 2009): The CWG was not convinced of the utility of this extension, especially in light of questions about handling the lifetime of temporary arrays. This suggestion needs a proposal and analysis by the EWG before it can be considered by the CWG.</p>
        <p>This has become a more severe inconsistency after we adopted Ville's <a href="http://wg21.link/P0960"><span>P0960</span></a> for C++20. Now it's not only () that has this weird special-case restriction, it's (a, b, c) too:</p>
        <p>using X = int[];</p>
        <p>X x{1, 2, 3}; // ok, int[3]</p>
        <p>X y(1, 2, 3); // ok, int[3]</p>
        <p>f(X{1, 2, 3}); // ok, int[3] temporary</p>
        <p>f(X(1, 2, 3)); // error</p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Thursday9th-April-2020"><span>notes</span></a>) it is a defect, need a paper. David Stone trying to find a volunteer to write said paper. All in favor.</p>
      </td>
      <td valign="top">
        <p>Paper needed</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG1463]]</p>
      </td>
      <td valign="top">
        <p>extern "C" alias templates</p>
      </td>
      <td valign="top">
        <p>Currently 13 [temp] paragraph 4 forbids any template from having C linkage. Should alias templates be exempt from this prohibition, since they do not have any linkage?</p>
        <p>Additional note, April, 2013: It was suggested (see messages 23364 through 23367) that relaxing this restriction for alias templates could provide a way of addressing the long-standing lack of a way of specifying a language linkage for a dependent function type (see issue <a href="http://wg21.link/cwg13"><span>13</span></a>). The priority was deleted to allow CWG to consider the implications of that potential application of the facility.</p>
        <p>We should either have some way to express a dependent function type with C language linkage (and should accept <a href="http://wg21.link/cwg1555"><span>1555</span></a> below) or we should remove the notion that C language linkage (or not) is part of the function type at all. (Apparently some targets used it; are they still in use? EDG probably knows.)</p>
        <p>Actively discussed on <a href="http://lists.isocpp.org/core/2020/04/8823.php"><span>CWG reflector</span></a>.</p>
        <p><br></p>
        <p><b>Davis’ interpretation of CWG discussion</b>:</p>
        <p>I don't speak for Core, of course, but my (Evolutionary) thoughts are those given (last) in the message to which you replied: neither the wording nor the apparent intent of [temp.pre]/6's restrictions on C linkage for templates make any sense.  Since templates (and explicit specializations) can't have C linkage of the name-mangling variety (which the standard calls language linkage of a (function) name) but can have C linkage of the calling-convention variety (which the standard calls language linkage of a (function) type), extern "C" should grant them the latter and not the former with no error.  This has certain obvious applications involving C APIs with callbacks.  (Put differently, CWG13 shouldn't have been rejected; it appears to have gotten bogged down in questions of syntax, but we have an adequate syntactic workaround that we merely have to permit.)</p>
        <p>CWG1463 asks for a (very) proper subset of the above: merely that extern "C" be allowed to apply to alias templates (claiming incorrectly that they have no name with linkage at all).  I consider it more relevant (and more productive) to talk about whether entities have names with language linkage than with the ordinary kind.</p>
        <p>The Core reflector discussion (which seems to have finished for the moment) also touched on the case where "the same" function template is declared with two different language linkages for its type, but the only relevant Evolution input there would be a decision to go the opposite way and forbid function templates from having types with C language linkage entirely.  (They currently can, but it's mostly or entirely useless.)</p>
        <p>If (for CWG1555, also on your list) the rules about language linkage of (function) types are sufficiently relaxed, then CWG1463 may be moot (and my extension of it with it), but that seems unlikely given Hubert's recent identification of a case where they matter.</p>
        <p><br></p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Wednesday15th-April-2020"><span>notes 2020-04-15</span></a>, <a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG22-Oct-2020"><span>notes 2020-10-22</span></a>, also <a href="https://wiki.edg.com/bin/view/Wg21rapperswil2014/EvolutionWorkingGroup"><span>discussed in Rapperswil 2014</span></a>) We agree that this is an issue. extern “C” on a template should only affect calling convention, and not the mangling. Davis and Hubert volunteer to write a paper. Unanimous consent.</p>
      </td>
      <td valign="top">
        <p>Paper needed</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG1790]]</p>
      </td>
      <td valign="top">
        <p>Ellipsis following function parameter pack</p>
      </td>
      <td valign="top">
        <p>Although the current wording permits an ellipsis to immediately follow a function parameter pack, it is not clear that the &lt;cstdarg&gt; facilities permit access to the ellipsis arguments.</p>
        <p>The problem here (which is not explained in the issue) is: how do you supply the name of the last parameter before the ellipsis to va_start? You can't put the name of a pack there (it wouldn't be expanded) and there's no way to name the last element of the pack (nor to deal with the case where the pack is empty).</p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssueProcessing-Wednesday15th-April-2020"><span>notes</span></a>) 3 options: fix wording around “last parameter”, remove facility entirely (either va_start or function declarator), try to invent a language facility. JF <a href="https://lists.isocpp.org/ext/2020/04/13346.php"><span>emailed EWG</span></a> to see if anyone has a strong preference, or if we should send back to CWG to fix wording, long discussion.</p>
        <p><b>Michael Spertus:</b> I am willing to commit to including and analysis on this in an upcoming paper on parameter packs.</p>
        <p>JF followed up with Michael and Barry, no response.</p>
      </td>
      <td valign="top">
        <p>Paper needed</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG1962]]</p>
      </td>
      <td valign="top">
        <p>Type of __func__</p>
      </td>
      <td valign="top">
        <p>Two questions have arisen regarding the treatment of the type of the __func__ built-in variable. First, some implementations accept</p>
        <p>  void f() {</p>
        <p>    typedef decltype(__func__) T;</p>
        <p>    T x = __func__;</p>
        <p>  }</p>
        <p>even though T is specified to be an array type.</p>
        <p>In a related question, it was noted that __func__ is implicitly required to be unique in each function, and that not only the value but the type of __func__ are implementation-defined; e.g., in something like</p>
        <p>  inline auto f() { return &amp;__func__; }</p>
        <p>the function type is implementation-specific. These concerns could be addressed by making the value a prvalue of type const char* instead of an array lvalue.</p>
        <p>Rationale (November, 2018): See also issue <a href="http://wg21.link/cwg2362"><span>2362</span></a>, which asks for the ability to use __func__ in a constexpr function. These two goals are incompatible.</p>
        <p>The deep question here is about __func__ and the ODR. Does EWG want implementations to somehow behave as if __func__ is the same in all copies of an inline function (in which case it can have an array type and be usable in constant expressions, but the *demangling* algorithm used to construct it becomes part of the ABI), or does EWG want implementations to behave as if __func__ may differ between copies, so is in effect not known until runtime (in which case it must have either pointer or incomplete array type, and its value is not usable in constant expressions -- but its address could still be usable).</p>
        <p>Note: C++20 has std::source_location::function_name.</p>
        <p><br></p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-23-Apr-2020"><span>notes 2020-04-23</span></a>) We should discuss this with WG14. This is indeed a language issue. No objection to unanimous consent. We’ll need a paper, potentially considering what Reflection could do, JF <a href="https://lists.isocpp.org/ext/2020/04/13417.php"><span>brought it up on the mailing list</span></a>.</p>
        <p>We probably need a paper to disentangle this.</p>
      </td>
      <td valign="top">
        <p>Paper needed</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG2228]]</p>
      </td>
      <td valign="top">
        <p>Ambiguity resolution for cast to function type</p>
      </td>
      <td valign="top">
        <p><span><a href="http://wiki.edg.com/pub/Wg21summer2020/CoreWorkingGroup/cwg2228.html?twiki_redirect_cache=5aceede89e9128019e50cb532244e26f">Proposed resolution.</a></span></p>
        <p><br></p>
        <p>C++ has a blanket disambiguation rule that says if a sequence of tokens can be interpreted as either a type-name or an expression, the type-name interpretation is chosen. This is unhelpful in cases like</p>
        <p><br></p>
        <p>    (T())+3</p>
        <p><br></p>
        <p>where the current rules make "(T())" a cast to the type "function with no parameters returning T" rather than a parenthesized value-initialization of a temporary of type T. The former interpretation is always ill-formed - you can't cast to a function type - while the latter could be useful.</p>
        <p><br></p>
        <p>Richard's proposed resolution, cited above, is to avoid the ambiguity by changing the grammar so that cases like "(T())" cannot be parsed as a cast. The wording in the proposal applies that change to a number of different contexts where the ambiguity can come into play. There are two contexts where the change is _not_ applied, however: 1) the operand of typeid, and 2) a template-argument. During our discussion yesterday, there was some support for the idea of applying the change to typeid, as well, although that would be a breaking change for any programs that rely on the current disambiguation to get type information for such function types. There was general agreement, however, to exclude template arguments, since they are used for things like std::function.</p>
        <p><br></p>
        <p>CWG would, therefore, like some guidance from EWG on two questions. First, should we apply the new syntax to the operand of typeid, even though it's a breaking change?</p>
        <p><br></p>
        <p>More generally, the question was raised whether we should make this change at all. Although resolving the ambiguity in the other direction would arguably be more convenient in many cases, there is a tension between that convenience and the complexity of the language. In particular, we would be creating a situation where the exact same sequence of tokens would mean two different things, depending on the context in which they appear. Is the convenience worth the cost in complexity?</p>
        <p><br></p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-29-Apr-2020"><span>note 2020-04-29</span></a>, <a href="https://wiki.edg.com/bin/view/Wg21summer2020/IssuesProcessingTeleconference2020-03-23"><span>notes 2020-03-23</span></a>, <a href="https://wiki.edg.com/bin/view/Wg21summer2020/CoreWorkingGroup"><span>note from Core summer 2020</span></a>, <a href="https://wiki.edg.com/bin/view/Wg21prague/CoreWorkingGroup"><span>notes from Core Prague 2020</span></a>, <a href="https://wiki.edg.com/bin/view/Wg21kona2019/IssuesProcessingTeleconference,2019-01-07"><span>notes from Core 2019-01-07</span></a>, <a href="https://wiki.edg.com/bin/view/Wg21kona2019/CoreWorkingGroup"><span>notes from Core Kona 2019</span></a>, <a href="https://wiki.edg.com/bin/view/Wg21cologne2019/CoreWorkingGroup"><span>notes from Core Cologne 2019</span></a>) This is an issue, we’d like to change the standard to resolve it: SF 0 F 6 N 4 A 3 SA 2</p>
        <p>Davis <a href="http://lists.isocpp.org/ext/2020/04/13473.php"><span>emailed EWG reflector</span></a>. Long discussion.</p>
      </td>
      <td valign="top">
        <p>Paper needed</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG2296]]</p>
      </td>
      <td valign="top">
        <p>Are default argument instantiation failures in the “immediate context”?</p>
      </td>
      <td valign="top">
        <p>Example 1:</p>
        <p>template &lt;typename T, typename U = T&gt;</p>
        <p>void fun(T v, U u = U()) {}</p>
        <p>void fun(...) {}</p>
        <p>struct X {</p>
        <p>    X(int) {} // no default ctor</p>
        <p>};</p>
        <p>int main()  {  fun (X(1)); }</p>
        <p><br></p>
        <p>Consider the following example (taken from issue 3 of paper <a href="http://wg21.link/P0348R0"><span>P0348R0</span></a>):</p>
        <p>Example 2:</p>
        <p>  template &lt;typename U&gt; void fun(U u = U());</p>
        <p>  struct X {</p>
        <p>    X(int) {}</p>
        <p>  };</p>
        <p>  template &lt;class T&gt; decltype(fun&lt;T&gt;()) g(int) { }</p>
        <p>  template &lt;class&gt; void g(long) { }</p>
        <p>  int main() { g&lt;X&gt;(0); }</p>
        <p>When is the substitution into the return type done? The current specification makes this example ill-formed because the failure to instantiate the default argument in the decltype operand is not in the immediate context of the substitution, although a plausible argument for making this a SFINAE case can be made.</p>
        <p><b>Meeting:</b> (<a href="https://wiki.edg.com/bin/view/Wg21summer2020/EWG-IssueProcessing-07-May-2020"><span>notes 2020-05-07</span></a>)</p>
        <p>The first example under issue 3 of paper P0348R0 should become well-formed.</p>
        <p>SF F N A SA</p>
        <p>0 1 4 3 6</p>
        <p>The second example under issue 3 of paper P0348R0 should become well-formed.</p>
        <p>SF F N A SA</p>
        <p>1 5 7 3 0</p>
        <p>This is an issue. We’d like to see a paper addressing it. It should explore what “Immediate context” means. No objection to unanimous consent.</p>
        <p>Daveed / Hubert might entertain writing a paper explaining this.</p>
        <p>Ville <a href="http://lists.isocpp.org/ext/2020/05/13733.php"><span>emailed EWG about this</span></a>.</p>
        <p>JF contacted Andrzej to see if he’s interested in addressing this. Not sure he is.</p>
        <p><br></p>
        <p><b>Meeting 2020-10-28</b>: Tomasz will write a paper which exposes the issue and what he thinks should be done (but not resolving wording itself). Hubert remembers an email about this, will find it and sync with JF.</p>
        <p><br></p>
        <p><b>Meeting 2021-01-14:</b> Andrzej wrote a paper for this (<a href="https://lists.isocpp.org/ext/2021/01/15505.php"><span>emailed 2021-01-12 to EWG</span></a>).</p>
      </td>
      <td valign="top">
        <p>Paper needed</p>
      </td>
    </tr>
    <tr>
      <td valign="top">
        <p>Core</p>
      </td>
      <td valign="top">
        <p>[[CWG2362]]</p>
      </td>
      <td valign="top">
        <p>__func__ should be constexpr</p>
      </td>
      <td valign="top">
        <p>The definition of __func__ in 9.5.1 [dcl.fct.def.general] paragraph 8 is:</p>
        <p>  static const char __func__[] = "function-name";</p>
        <p>This prohibits its use in constant expressions, e.g.,</p>
        <p>  int main () {</p>
        <p>    // error: the value of __func__ is not usable in a constant expression</p>
        <p>    constexpr char c = __func__[0];</p>
        <p>  }</p>
        <p>Rationale (November, 2018): See also issue <a href="http://wg21.link/cwg1962"><span>1962</span></a>, which asks that the type of __func__ be const char*. These two goals are incompatible.</p>
        <p><br></p>
        <p><b>Meeting:</b> handle with 1962.</p>
      </td>
      <td valign="top">
        <p>Paper needed</p>
      </td>
    </tr>
  </tbody>
</table>


Near-future EWG plans {#future}
=====================

We will continue to work on issue resolution and C++23, prioritizing according to [[P0592R4]].


<pre class=biblio>
{
    "P2186R1": {
        "href": "https://wg21.link/p2186r1",
        "title": "Removing Garbage Collection Support",
        "authors": ["JF Bastien", "Alisdair Meredith"],
        "date": "14 December 2020"
    },
    "N2594": {
        "href": "http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2594.htm",
        "title": "Mixed Wide String Literal Concatenation",
        "authors": ["JeanHeyd Meneide"],
        "date": "26 October 2020"
    },
    "N2557": {
        "href": "http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2557.pdf",
        "title": "Allow Duplicate Attributes",
        "authors": ["Melanie Blower"],
        "date": "01 September 2020"
    }
}
</pre>
