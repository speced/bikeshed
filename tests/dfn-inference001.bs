<pre class=metadata>
Title: Dfn Inference (no CSS)
Group: test
Shortname: foo
Level: 1
Status: LS
ED: http://example.com/foo
Abstract: Testing how dfn types are inferred by default.
Editor: Example Editor
Date: 1970-01-01
</pre>

<style>
dfn::before { content: "(" attr(data-dfn-type) ") " !important; }
</style>

With nothing, `type=dfn`:

* <dfn>no inference, should be dfn</dfn>

------

With explicit type, use the type:

* <dfn property>explicit property</dfn>

------

ID prefix sets the type:

* <dfn id=propdef-foo>ID property</dfn>

-------

Explicit type can be put on ancestors, too, tho requires the real attribute:

* <span dfn-type=property><dfn>parent property</dfn></span>
* <span dfn-type=property><span><dfn>ancestor property</dfn></span></span>

------

Classes on ancestors (but not the element itself) can trigger inference as well:

* <dfn class=propdef>failed class inference, should be dfn</dfn>
* <span class=propdef><dfn>parent class inference</dfn></span>
* <span class=propdef><span><dfn>ancestor class inference</dfn></span></span>

------

By default, CSS inference does *not* work (all should be "dfn")

* <dfn>@at-rule</dfn>
* <dfn>function()</dfn>
* <dfn>:selector</dfn>
* <dfn>''value''</dfn>
* <dfn><<type>></dfn>

--------

Testing interactions between categories:

* <span dfn-type=element class=funcdef><dfn property id=interfacedef-foo>property wins</dfn></span> - explicit type on dfn wins over everything
* <span dfn-type=element class=funcdef><dfn id=interfacedef-bar>interface wins</dfn></span> - ID prefix wins over everything but the above
* <span dfn-type=element class=funcdef><dfn>element wins</dfn></span> - explicit type on ancestor wins over class on same element
* <span dfn-type=element><span class=funcdef><dfn>function-wins()</dfn></span></span> - but class on closer ancestor wins over explicit type on further ancestor
