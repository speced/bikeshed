<pre class=metadata>
Title: Foo
Group: test
Shortname: foo
Level: 1
Status: LS
ED: http://example.com/foo
Abstract: Testing CDDL markup and linking using constructs from RFC 8610.
Editor: Example Editor
Date: 1970-01-01
</pre>

The definitions {#dfns}
=======================
The <dfn cddl-type>attire</dfn> enumeration lets you wear a <dfn cddl-value for=attire>"bow tie"</dfn>, a <dfn cddl-value for=attire>"necktie"</dfn>, an <dfn cddl-value for=attire>"Internet attire"</dfn> or <dfn cddl-value for=attire>"swimwear"</dfn>.

The <dfn cddl-type>basecolors</dfn> construct defines a set of base colors, including <dfn cddl-key for=basecolors>black</dfn> and <dfn cddl-key for=basecolors>white</dfn>.

The <dfn cddl-type>extended-color</dfn> construct extends <a cddl-type>basecolors</a> with <dfn cddl-key for=extended-color>orange</dfn>.

The CDDL {#cddl}
================
<xmp class=cddl>
attire = "bow tie" / "necktie" / "Internet attire"
attireBlock = (
    "bow tie" /
    "necktie" /
    "Internet attire"
)
attireGroup = (
    attire //
    attireBlock
)
protocol = 6 / 17

address = { delivery }

delivery = (
    street: tstr,
    ? number: uint,
    city // po-box: uint,
    city // foo: tstr / uint // per-pickup: true
)

city = (
    name: tstr,
    zip-code: uint
)

attire /= "swimwear"

delivery //= (
    lat: float, long: float, drone-type: tstr
)

device-address = byte
max-byte = 255
byte = 0..max-byte ; inclusive range

terminal-color = &basecolors

basecolors = (
    black: 0,  red: 1,  green: 2,  yellow: 3,
    blue: 4,  magenta: 5,  cyan: 6,  white: 7,
)

extended-color = &(
    basecolors,
    orange: 8,  pink: 9,  purple: 10,  brown: 11,
)

my_breakfast = #6.55799(breakfast)   ; cbor-any is too general!
breakfast = cereal / porridge
cereal = #6.998(tstr)
porridge = #6.999([liquid, solid])
liquid = milk / water
milk = 0
water = 1
solid = tstr

apartment = {
 kitchen: size,
 * bedroom: size,
}
size = float ; in m2

unlimited-people = [* person]
one-or-two-people = [1*2 person]
at-least-two-people = [2* person]
person = (
   name: tstr,
   age: uint,
)

located-samples = {
 sample-point: int,
 samples: [+ float],
 * equipment-type => equipment-tolerances,
}
equipment-type = [name: tstr, manufacturer: tstr]
equipment-tolerances = [+ [float, float]]

PersonalData = {
  ? displayName: tstr,
  NameComponents,
  ? age: uint,
  * tstr => any
}

NameComponents = (
  ? firstName: tstr,
  ? familyName: tstr,
)

square-roots = {* x => y}
x = int
y = float

extensible-map-example = {
  ? "optional-key": int,
  * tstr => any
}

tcpflagbytes = bstr .bits flags
flags = &(
  fin: 8,
  syn: 9,
  rst: 10,
  psh: 11,
  ack: 12,
  urg: 13,
  ece: 14,
  cwr: 15,
  ns: 0,
) / (4..7) ; data offset bits

rwxbits = uint .bits rwx
rwx = &(r: 2, w: 1, x: 0)
</xmp>
