<pre class=metadata>
Title: Dfn Inference (yes CSS)
Group: test
Shortname: foo
Level: 1
Status: LS
ED: http://example.com/foo
Abstract: Testing how dfn types are inferred when Infer CSS Dfns is on.
Editor: Example Editor
Date: 1970-01-01
Infer CSS Dfns: yes
</pre>

<style>
dfn::before { content: "(" attr(data-dfn-type) ") " !important; }
</style>

All the tests from dfn-inference001, which shouldn't change:

* <dfn>no inference, should be dfn</dfn>
* <dfn property>explicit property</dfn>
* <dfn id=propdef-foo>ID property</dfn>
* <span dfn-type=property><dfn>parent property</dfn></span>
* <span dfn-type=property><span><dfn>ancestor property</dfn></span></span>
* <dfn class=propdef>failed class inference, should be dfn</dfn>
* <span class=propdef><dfn>parent class inference</dfn></span>
* <span class=propdef><span><dfn>ancestor class inference</dfn></span></span>
* <span dfn-type=element class=funcdef><dfn property id=interfacedef-foo>property wins</dfn></span> - explicit type on dfn wins over everything
* <span dfn-type=element class=funcdef><dfn id=interfacedef-bar>interface wins</dfn></span> - ID prefix wins over everything but the above
* <span dfn-type=element class=funcdef><dfn>element wins</dfn></span> - explicit type on ancestor wins over class on same element
* <span dfn-type=element><span class=funcdef><dfn>function-wins()</dfn></span></span> - but class on closer ancestor wins over explicit type on further ancestor

------

CSS inference looks at the text

* <dfn>@at-rule</dfn>
* <dfn>function()</dfn>
* <dfn>function-with-args(one, two)</dfn>
* <dfn>:selector</dfn>
* <dfn for=foo>''value''</dfn>
* <dfn><<type>></dfn>

-------

Some type-ish categories should trigger errors in inference (but still become `type`):

* <dfn><<@bad-at-rule>></dfn>
* <dfn><<bad-function()>></dfn>
* <dfn><<'bad-property'>></dfn>
* <dfn><<''bad-value''>></dfn>

--------

CSS inference should lose to everything else:

* <dfn property>@property1</dfn> - explicit type on dfn
* <dfn id="propdef-bar">@property2</dfn> - ID prefix
* <span class="propdef"><dfn>@property3</dfn></span> - class on ancestor
* <span dfn-type=property><dfn>@property4</dfn></span> - explicit type on ancestor
